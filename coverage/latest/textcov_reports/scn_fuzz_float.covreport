_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  1.26M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  1.26M|  chars_format const fmt = options.format;
  277|  1.26M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  1.26M|  parsed_number_string_t<UC> answer;
  280|  1.26M|  answer.valid = false;
  281|  1.26M|  answer.too_many_digits = false;
  282|  1.26M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  1.26M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 1.26M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  1.26M|  UC const * const start_digits = p;
  303|       |
  304|  1.26M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  7.14M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 6.50M, False: 646k]
  |  Branch (306:25): [True: 5.87M, False: 622k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  5.87M|    i = 10 * i +
  310|  5.87M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  5.87M|    ++p;
  312|  5.87M|  }
  313|  1.26M|  UC const * const end_of_integer_part = p;
  314|  1.26M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  1.26M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  1.26M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.26M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 1.26M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  1.26M|  int64_t exponent = 0;
  324|  1.26M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 622k, False: 646k]
  |  Branch (324:49): [True: 235k, False: 386k]
  ------------------
  325|  1.26M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 235k, False: 1.03M]
  ------------------
  326|   235k|    ++p;
  327|   235k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   235k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|   965k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 815k, False: 149k]
  |  Branch (332:27): [True: 729k, False: 85.9k]
  ------------------
  333|   729k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   729k|      ++p;
  335|   729k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   729k|    }
  337|   235k|    exponent = before - p;
  338|   235k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   235k|    digit_count -= exponent;
  340|   235k|  }
  341|  1.26M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.26M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 1.26M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  1.26M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 1.26M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  1.26M|  int64_t exp_number = 0;            // explicit exponential part
  351|  1.26M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 1.08M, False: 182k]
  ------------------
  352|  1.26M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 472k, False: 614k]
  ------------------
  353|  1.26M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 93.0k, False: 379k]
  |  Branch (353:29): [True: 59.7k, False: 319k]
  ------------------
  354|  1.26M|       ||
  355|  1.26M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  1.11M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 1.11M]
  ------------------
  356|  1.11M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  1.11M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   152k|    UC const * location_of_e = p;
  359|   152k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 93.0k, False: 59.7k]
  |  Branch (359:28): [True: 59.7k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   152k|      ++p;
  361|   152k|    }
  362|   152k|    bool neg_exp = false;
  363|   152k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 152k, False: 125]
  |  Branch (363:24): [True: 8.97k, False: 143k]
  ------------------
  364|  8.97k|      neg_exp = true;
  365|  8.97k|      ++p;
  366|   143k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 143k, False: 125]
  |  Branch (366:31): [True: 36.8k, False: 106k]
  ------------------
  367|  36.8k|      ++p;
  368|  36.8k|    }
  369|   152k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 175, False: 152k]
  |  Branch (369:24): [True: 595, False: 152k]
  ------------------
  370|    770|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 770]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    770|      p = location_of_e;
  376|   152k|    } else {
  377|   488k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 376k, False: 111k]
  |  Branch (377:29): [True: 336k, False: 40.1k]
  ------------------
  378|   336k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   336k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 306k, False: 30.2k]
  ------------------
  380|   306k|          exp_number = 10 * exp_number + digit;
  381|   306k|        }
  382|   336k|        ++p;
  383|   336k|      }
  384|   152k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 8.93k, False: 143k]
  ------------------
  385|   152k|      exponent += exp_number;
  386|   152k|    }
  387|  1.11M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  1.11M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 934k, False: 182k]
  |  Branch (389:44): [True: 0, False: 934k]
  ------------------
  390|  1.11M|  }
  391|  1.26M|  answer.lastmatch = p;
  392|  1.26M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  1.26M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 224k, False: 1.04M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   224k|    UC const * start = start_digits;
  405|   898k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 896k, False: 1.86k]
  |  Branch (405:32): [True: 666k, False: 230k]
  |  Branch (405:53): [True: 8.01k, False: 222k]
  ------------------
  406|   674k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 666k, False: 8.01k]
  ------------------
  407|   674k|      start++;
  408|   674k|    }
  409|       |
  410|   224k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 211k, False: 12.8k]
  ------------------
  411|   211k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   211k|      i = 0;
  416|   211k|      p = answer.integer.ptr;
  417|   211k|      UC const* int_end = p + answer.integer.len();
  418|   211k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  2.37M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 2.31M, False: 66.1k]
  |  Branch (419:54): [True: 2.16M, False: 145k]
  ------------------
  420|  2.16M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  2.16M|        ++p;
  422|  2.16M|      }
  423|   211k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 66.1k, False: 145k]
  ------------------
  424|  66.1k|        exponent = end_of_integer_part - p + exp_number;
  425|  66.1k|      }
  426|   145k|      else { // We have a value with a fractional component.
  427|   145k|        p = answer.fraction.ptr;
  428|   145k|        UC const* frac_end = p + answer.fraction.len();
  429|  2.46M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 2.32M, False: 145k]
  |  Branch (429:56): [True: 2.32M, False: 0]
  ------------------
  430|  2.32M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  2.32M|          ++p;
  432|  2.32M|        }
  433|   145k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   145k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   211k|    }
  437|   224k|  }
  438|  1.26M|  answer.exponent = exponent;
  439|  1.26M|  answer.mantissa = i;
  440|  1.26M|  return answer;
  441|  1.26M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  7.84M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  7.84M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 175k, False: 7.67M]
  |  Branch (36:27): [True: 573k, False: 7.09M]
  ------------------
   37|  7.84M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   235k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   834k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 668k, False: 166k]
  |  Branch (249:43): [True: 598k, False: 69.8k]
  ------------------
  250|   598k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   598k|    p += 8;
  252|   598k|  }
  253|   235k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   668k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   668k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   668k|     0x8080808080808080));
  172|   668k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.51M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.51M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.51M|  uint64_t val;
   63|  1.51M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.51M|  return val;
   69|  1.51M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|   849k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|   849k|  const uint64_t mask = 0x000000FF000000FF;
  148|   849k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|   849k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|   849k|  val -= 0x3030303030303030;
  151|   849k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|   849k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|   849k|  return uint32_t(val);
  154|   849k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   251k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   251k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   251k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   251k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   251k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   460k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   460k|  chars_format const fmt = options.format;
  277|   460k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   460k|  parsed_number_string_t<UC> answer;
  280|   460k|  answer.valid = false;
  281|   460k|  answer.too_many_digits = false;
  282|   460k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   460k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 460k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   460k|  UC const * const start_digits = p;
  303|       |
  304|   460k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   984k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 669k, False: 314k]
  |  Branch (306:25): [True: 523k, False: 145k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   523k|    i = 10 * i +
  310|   523k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   523k|    ++p;
  312|   523k|  }
  313|   460k|  UC const * const end_of_integer_part = p;
  314|   460k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   460k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   460k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   460k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 460k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   460k|  int64_t exponent = 0;
  324|   460k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 145k, False: 314k]
  |  Branch (324:49): [True: 2.11k, False: 143k]
  ------------------
  325|   460k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 2.11k, False: 458k]
  ------------------
  326|  2.11k|    ++p;
  327|  2.11k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|  2.11k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  13.0k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 11.5k, False: 1.46k]
  |  Branch (332:27): [True: 10.9k, False: 647]
  ------------------
  333|  10.9k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  10.9k|      ++p;
  335|  10.9k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  10.9k|    }
  337|  2.11k|    exponent = before - p;
  338|  2.11k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|  2.11k|    digit_count -= exponent;
  340|  2.11k|  }
  341|   460k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   460k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 460k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   460k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 460k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   460k|  int64_t exp_number = 0;            // explicit exponential part
  351|   460k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 372k, False: 88.7k]
  ------------------
  352|   460k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 144k, False: 227k]
  ------------------
  353|   460k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 189, False: 144k]
  |  Branch (353:29): [True: 14.7k, False: 129k]
  ------------------
  354|   460k|       ||
  355|   460k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   445k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 445k]
  ------------------
  356|   445k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   445k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  14.9k|    UC const * location_of_e = p;
  359|  14.9k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 189, False: 14.7k]
  |  Branch (359:28): [True: 14.7k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  14.9k|      ++p;
  361|  14.9k|    }
  362|  14.9k|    bool neg_exp = false;
  363|  14.9k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 14.9k, False: 20]
  |  Branch (363:24): [True: 3.83k, False: 11.1k]
  ------------------
  364|  3.83k|      neg_exp = true;
  365|  3.83k|      ++p;
  366|  11.1k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 11.1k, False: 20]
  |  Branch (366:31): [True: 293, False: 10.8k]
  ------------------
  367|    293|      ++p;
  368|    293|    }
  369|  14.9k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 30, False: 14.9k]
  |  Branch (369:24): [True: 480, False: 14.4k]
  ------------------
  370|    510|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 510]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    510|      p = location_of_e;
  376|  14.4k|    } else {
  377|  54.9k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 44.9k, False: 9.97k]
  |  Branch (377:29): [True: 40.5k, False: 4.48k]
  ------------------
  378|  40.5k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  40.5k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 37.5k, False: 2.93k]
  ------------------
  380|  37.5k|          exp_number = 10 * exp_number + digit;
  381|  37.5k|        }
  382|  40.5k|        ++p;
  383|  40.5k|      }
  384|  14.4k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 3.79k, False: 10.6k]
  ------------------
  385|  14.4k|      exponent += exp_number;
  386|  14.4k|    }
  387|   445k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   445k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 357k, False: 88.7k]
  |  Branch (389:44): [True: 0, False: 357k]
  ------------------
  390|   445k|  }
  391|   460k|  answer.lastmatch = p;
  392|   460k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   460k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 924, False: 459k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|    924|    UC const * start = start_digits;
  405|  1.28k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 1.28k, False: 0]
  |  Branch (405:32): [True: 356, False: 924]
  |  Branch (405:53): [True: 0, False: 924]
  ------------------
  406|    356|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 356, False: 0]
  ------------------
  407|    356|      start++;
  408|    356|    }
  409|       |
  410|    924|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 724, False: 200]
  ------------------
  411|    724|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|    724|      i = 0;
  416|    724|      p = answer.integer.ptr;
  417|    724|      UC const* int_end = p + answer.integer.len();
  418|    724|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  11.3k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 10.9k, False: 436]
  |  Branch (419:54): [True: 10.6k, False: 288]
  ------------------
  420|  10.6k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  10.6k|        ++p;
  422|  10.6k|      }
  423|    724|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 436, False: 288]
  ------------------
  424|    436|        exponent = end_of_integer_part - p + exp_number;
  425|    436|      }
  426|    288|      else { // We have a value with a fractional component.
  427|    288|        p = answer.fraction.ptr;
  428|    288|        UC const* frac_end = p + answer.fraction.len();
  429|  3.49k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 3.20k, False: 288]
  |  Branch (429:56): [True: 3.20k, False: 0]
  ------------------
  430|  3.20k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  3.20k|          ++p;
  432|  3.20k|        }
  433|    288|        exponent = answer.fraction.ptr - p + exp_number;
  434|    288|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|    724|    }
  437|    924|  }
  438|   460k|  answer.exponent = exponent;
  439|   460k|  answer.mantissa = i;
  440|   460k|  return answer;
  441|   460k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   740k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   740k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 148k, False: 592k]
  |  Branch (36:27): [True: 3.15k, False: 589k]
  ------------------
   37|   740k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiTnNSt3__19enable_ifIXntsr3std7is_sameIT_cEE5valueEiE4typeELi0EEEvRPKS3_S7_Rm:
  237|  2.11k|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|  2.11k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|  2.11k|    return;
  240|  2.11k|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}

_ZN10fast_float6bigintC2Ev:
  412|  67.9k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   144k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   225k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   225k|    return small_mul(vec, y);
  565|   225k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   330k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   330k|  limb carry = 0;
  284|  1.25M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 928k, False: 330k]
  ------------------
  285|   928k|    vec[index] = scalar_mul(vec[index], y, carry);
  286|   928k|  }
  287|   330k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 188k, False: 141k]
  ------------------
  288|   188k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   188k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 188k]
  |  |  ------------------
  ------------------
  289|   188k|  }
  290|   330k|  return true;
  291|   330k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  2.47M|  constexpr size_t len() const noexcept {
   77|  2.47M|    return length;
   78|  2.47M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|   928k|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|   928k|#ifdef FASTFLOAT_64BIT_LIMB
  231|   928k|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|   928k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|   928k|  carry = limb(z >> limb_bits);
  235|   928k|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|   928k|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  2.58M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  2.58M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  2.58M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  2.58M|    return data[index];
   60|  2.58M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   272k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   272k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 272k, False: 0]
  ------------------
   93|   272k|      push_unchecked(value);
   94|   272k|      return true;
   95|   272k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   272k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   311k|  constexpr size_t capacity() const noexcept {
   83|   311k|    return size;
   84|   311k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   334k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   334k|    data[length] = value;
   88|   334k|    length++;
   89|   334k|  }
_ZN10fast_float6bigint3addEm:
  567|   225k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   225k|    return small_add(vec, y);
  569|   225k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   225k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   225k|  return small_add_from(vec, y, 0);
  277|   225k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   225k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   225k|  size_t index = start;
  259|   225k|  limb carry = y;
  260|   225k|  bool overflow;
  261|   344k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 187k, False: 157k]
  |  Branch (261:24): [True: 119k, False: 67.9k]
  ------------------
  262|   119k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   119k|    carry = limb(overflow);
  264|   119k|    index += 1;
  265|   119k|  }
  266|   225k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 67.9k, False: 157k]
  ------------------
  267|  67.9k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  67.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 67.9k]
  |  |  ------------------
  ------------------
  268|  67.9k|  }
  269|   225k|  return true;
  270|   225k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   262k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   262k|  limb z;
  211|       |// gcc and clang
  212|   262k|#if defined(__has_builtin)
  213|   262k|  #if __has_builtin(__builtin_add_overflow)
  214|   262k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   262k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   262k|      return z;
  217|   262k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   262k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  5.76k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  5.76k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  5.76k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 5.76k]
  |  |  ------------------
  ------------------
  611|  5.76k|    return pow2(exp);
  612|  5.76k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  67.9k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  67.9k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  67.9k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  71.5k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 3.53k, False: 67.9k]
  ------------------
  582|  3.53k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.53k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.53k]
  |  |  ------------------
  ------------------
  583|  3.53k|      exp -= large_step;
  584|  3.53k|    }
  585|  67.9k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  67.9k|    uint32_t small_step = 27;
  587|  67.9k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|  96.5k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 28.5k, False: 67.9k]
  ------------------
  593|  28.5k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  28.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 28.5k]
  |  |  ------------------
  ------------------
  594|  28.5k|      exp -= small_step;
  595|  28.5k|    }
  596|  67.9k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 58.3k, False: 9.67k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  58.3k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  58.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 58.3k]
  |  |  ------------------
  ------------------
  601|  58.3k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  58.3k|      );
  603|  58.3k|    }
  604|       |
  605|  67.9k|    return true;
  606|  67.9k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  3.53k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  3.53k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 3.53k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  3.53k|  } else {
  368|  3.53k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.53k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.53k]
  |  |  ------------------
  ------------------
  369|  3.53k|  }
  370|  3.53k|  return true;
  371|  3.53k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  3.53k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  3.53k|  limb_span xs = limb_span(x.data, x.len());
  337|  3.53k|  stackvec<size> z(xs);
  338|  3.53k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  3.53k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 3.53k, False: 0]
  ------------------
  341|  3.53k|    limb y0 = y[0];
  342|  3.53k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.53k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.53k]
  |  |  ------------------
  ------------------
  343|  17.6k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 14.1k, False: 3.53k]
  ------------------
  344|  14.1k|      limb yi = y[index];
  345|  14.1k|      stackvec<size> zi;
  346|  14.1k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 14.1k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  14.1k|        zi.set_len(0);
  349|  14.1k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  14.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.1k]
  |  |  ------------------
  ------------------
  350|  14.1k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  14.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.1k]
  |  |  ------------------
  ------------------
  351|  14.1k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  14.1k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  14.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.1k]
  |  |  ------------------
  ------------------
  353|  14.1k|      }
  354|  14.1k|    }
  355|  3.53k|  }
  356|       |
  357|  3.53k|  x.normalize();
  358|  3.53k|  return true;
  359|  3.53k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  3.53k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  3.53k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  3.53k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  3.53k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  53.0k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  53.0k|    length = uint16_t(len);
   75|  53.0k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  17.6k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  17.6k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 17.6k, False: 0]
  ------------------
  108|  17.6k|      extend_unchecked(s);
  109|  17.6k|      return true;
  110|  17.6k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  17.6k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  17.6k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  17.6k|    limb* ptr = data + length;
  102|  17.6k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  17.6k|    set_len(len() + s.len());
  104|  17.6k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  14.1k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  14.1k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 14.1k]
  |  Branch (300:26): [True: 13.9k, False: 214]
  ------------------
  301|  13.9k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  13.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 13.9k]
  |  |  ------------------
  ------------------
  302|  13.9k|  }
  303|       |
  304|  14.1k|  bool carry = false;
  305|   118k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 104k, False: 14.1k]
  ------------------
  306|   104k|    limb xi = x[index + start];
  307|   104k|    limb yi = y[index];
  308|   104k|    bool c1 = false;
  309|   104k|    bool c2 = false;
  310|   104k|    xi = scalar_add(xi, yi, c1);
  311|   104k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 39.3k, False: 64.9k]
  ------------------
  312|  39.3k|      xi = scalar_add(xi, 1, c2);
  313|  39.3k|    }
  314|   104k|    x[index + start] = xi;
  315|   104k|    carry = c1 | c2;
  316|   104k|  }
  317|       |
  318|       |  // handle overflow
  319|  14.1k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 14.1k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  14.1k|  return true;
  323|  14.1k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  13.9k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  13.9k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 13.9k]
  ------------------
  132|      0|      return false;
  133|  13.9k|    } else {
  134|  13.9k|      resize_unchecked(new_len, value);
  135|  13.9k|      return true;
  136|  13.9k|    }
  137|  13.9k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  13.9k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  13.9k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 13.9k, False: 0]
  ------------------
  120|  13.9k|      size_t count = new_len - len();
  121|  13.9k|      limb* first = data + len();
  122|  13.9k|      limb* last = first + count;
  123|  13.9k|      ::std::fill(first, last, value);
  124|  13.9k|      set_len(new_len);
  125|  13.9k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  13.9k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  65.7k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  65.7k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 65.7k, False: 0]
  |  Branch (152:25): [True: 0, False: 65.7k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  65.7k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|  82.5k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|  82.5k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  82.5k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|  82.5k|    size_t rindex = length - index - 1;
   69|  82.5k|    return data[rindex];
   70|  82.5k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  67.9k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  67.9k|    return shl(exp);
  574|  67.9k|  }
_ZN10fast_float6bigint3shlEm:
  530|  67.9k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  67.9k|    size_t rem = n % limb_bits;
  532|  67.9k|    size_t div = n / limb_bits;
  533|  67.9k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 62.2k, False: 5.60k]
  ------------------
  534|  62.2k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  62.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 62.2k]
  |  |  ------------------
  ------------------
  535|  62.2k|    }
  536|  67.9k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 7.27k, False: 60.6k]
  ------------------
  537|  7.27k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  7.27k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 7.27k]
  |  |  ------------------
  ------------------
  538|  7.27k|    }
  539|  67.9k|    return true;
  540|  67.9k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  62.2k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  62.2k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  62.2k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  62.2k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  62.2k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  62.2k|    size_t shl = n;
  493|  62.2k|    size_t shr = limb_bits - shl;
  494|  62.2k|    limb prev = 0;
  495|   201k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 139k, False: 62.2k]
  ------------------
  496|   139k|      limb xi = vec[index];
  497|   139k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   139k|      prev = xi;
  499|   139k|    }
  500|       |
  501|  62.2k|    limb carry = prev >> shr;
  502|  62.2k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 15.5k, False: 46.7k]
  ------------------
  503|  15.5k|      return vec.try_push(carry);
  504|  15.5k|    }
  505|  46.7k|    return true;
  506|  62.2k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  7.27k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  7.27k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  7.27k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  7.27k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 7.27k]
  ------------------
  512|      0|      return false;
  513|  7.27k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 7.27k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  7.27k|      limb* dst = vec.data + n;
  516|  7.27k|      const limb* src = vec.data;
  517|  7.27k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  7.27k|      limb* first = vec.data;
  520|  7.27k|      limb* last = first + n;
  521|  7.27k|      ::std::fill(first, last, 0);
  522|  7.27k|      vec.set_len(n + vec.len());
  523|  7.27k|      return true;
  524|  7.27k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  7.27k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  13.0k|  constexpr bool is_empty() const noexcept {
   80|  13.0k|    return length == 0;
   81|  13.0k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  5.76k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  5.76k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  5.76k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 5.76k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  5.76k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 966, False: 4.79k]
  ------------------
  435|    966|      return uint64_hi64(vec.rindex(0), truncated);
  436|  4.79k|    } else {
  437|  4.79k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  4.79k|      truncated |= vec.nonzero(2);
  439|  4.79k|      return result;
  440|  4.79k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  5.76k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|    966|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|    966|  truncated = false;
  167|    966|  int shl = leading_zeroes(r0);
  168|    966|  return r0 << shl;
  169|    966|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  4.79k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  4.79k|  int shl = leading_zeroes(r0);
  174|  4.79k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 4.76k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  4.76k|  } else {
  178|  4.76k|    int shr = 64 - shl;
  179|  4.76k|    truncated = (r1 << shl) != 0;
  180|  4.76k|    return (r0 << shl) | (r1 >> shr);
  181|  4.76k|  }
  182|  4.79k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  4.79k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  4.83k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 499, False: 4.34k]
  ------------------
  143|    499|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 459, False: 40]
  ------------------
  144|    459|        return true;
  145|    459|      }
  146|     40|      index++;
  147|     40|    }
  148|  4.34k|    return false;
  149|  4.79k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  5.76k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  5.76k|    int lz = ctlz();
  560|  5.76k|    return int(limb_bits * vec.len()) - lz;
  561|  5.76k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  5.76k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  5.76k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 5.76k]
  ------------------
  545|      0|      return 0;
  546|  5.76k|    } else {
  547|  5.76k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  5.76k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  5.76k|    }
  555|  5.76k|  }
_ZN10fast_float6bigintC2Em:
  418|  62.2k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  62.2k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  62.2k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  62.2k|    vec.normalize();
  426|  62.2k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  62.2k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  62.2k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 62.2k]
  ------------------
  464|      0|      return 1;
  465|  62.2k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 62.2k]
  ------------------
  466|      0|      return -1;
  467|  62.2k|    } else {
  468|   121k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 117k, False: 3.88k]
  ------------------
  469|   117k|        limb xi = vec[index - 1];
  470|   117k|        limb yi = other.vec[index - 1];
  471|   117k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 13.5k, False: 104k]
  ------------------
  472|  13.5k|          return 1;
  473|   104k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 44.7k, False: 59.4k]
  ------------------
  474|  44.7k|          return -1;
  475|  44.7k|        }
  476|   117k|      }
  477|  3.88k|      return 0;
  478|  62.2k|    }
  479|  62.2k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   235k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   235k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   235k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   235k|    return data[index];
   64|   235k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   291k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   291k|  adjusted_mantissa answer;
   96|   291k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 4.86k, False: 286k]
  |  Branch (96:19): [True: 1.44k, False: 284k]
  ------------------
   97|  6.31k|    answer.power2 = 0;
   98|  6.31k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  6.31k|    return answer;
  101|  6.31k|  }
  102|   284k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 8.51k, False: 276k]
  ------------------
  103|       |    // we want to get infinity:
  104|  8.51k|    answer.power2 = binary::infinite_power();
  105|  8.51k|    answer.mantissa = 0;
  106|  8.51k|    return answer;
  107|  8.51k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   276k|  int lz = leading_zeroes(w);
  112|   276k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   276k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   276k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   276k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   276k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   276k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 1.24k, False: 275k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  1.24k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 88, False: 1.15k]
  ------------------
  137|     88|      answer.power2 = 0;
  138|     88|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     88|      return answer;
  141|     88|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  1.15k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  1.15k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  1.15k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  1.15k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 1.15k, False: 0]
  ------------------
  156|  1.15k|    return answer;
  157|  1.24k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   275k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 102k, False: 172k]
  |  Branch (162:30): [True: 100k, False: 2.54k]
  |  Branch (162:77): [True: 93.3k, False: 7.09k]
  ------------------
  163|   275k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 10.2k, False: 83.0k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  10.2k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 4.06k, False: 6.17k]
  ------------------
  168|  4.06k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  4.06k|    }
  170|  10.2k|  }
  171|       |
  172|   275k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   275k|  answer.mantissa >>= 1;
  174|   275k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 23.0k, False: 252k]
  ------------------
  175|  23.0k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  23.0k|    answer.power2++; // undo previous addition
  177|  23.0k|  }
  178|       |
  179|   275k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   275k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 1.21k, False: 273k]
  ------------------
  181|  1.21k|    answer.power2 = binary::infinite_power();
  182|  1.21k|    answer.mantissa = 0;
  183|  1.21k|  }
  184|   275k|  return answer;
  185|   276k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   306k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   306k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   306k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   306k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   306k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   306k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   306k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 57.8k, False: 248k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  57.8k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  57.8k|    firstproduct.low += secondproduct.high;
   35|  57.8k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 41.6k, False: 16.2k]
  ------------------
   36|  41.6k|      firstproduct.high++;
   37|  41.6k|    }
   38|  57.8k|  }
   39|   306k|  return firstproduct;
   40|   306k|}
_ZN10fast_float6detail5powerEi:
   58|   595k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   595k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   595k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  30.4k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  30.4k|  int lz = leading_zeroes(w);
   82|  30.4k|  w <<= lz;
   83|  30.4k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  30.4k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  30.4k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  30.4k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  30.4k|  int hilz = int(w >> 63) ^ 1;
   69|  30.4k|  adjusted_mantissa answer;
   70|  30.4k|  answer.mantissa = w << hilz;
   71|  30.4k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  30.4k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  30.4k|  return answer;
   74|  30.4k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   260k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   260k|  adjusted_mantissa answer;
   96|   260k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 4.58k, False: 256k]
  |  Branch (96:19): [True: 383, False: 255k]
  ------------------
   97|  4.96k|    answer.power2 = 0;
   98|  4.96k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  4.96k|    return answer;
  101|  4.96k|  }
  102|   255k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 4.25k, False: 251k]
  ------------------
  103|       |    // we want to get infinity:
  104|  4.25k|    answer.power2 = binary::infinite_power();
  105|  4.25k|    answer.mantissa = 0;
  106|  4.25k|    return answer;
  107|  4.25k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   251k|  int lz = leading_zeroes(w);
  112|   251k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   251k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   251k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   251k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   251k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   251k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 4.11k, False: 247k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  4.11k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 104, False: 4.00k]
  ------------------
  137|    104|      answer.power2 = 0;
  138|    104|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|    104|      return answer;
  141|    104|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  4.00k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  4.00k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  4.00k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  4.00k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 4.00k, False: 0]
  ------------------
  156|  4.00k|    return answer;
  157|  4.11k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   247k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 81.3k, False: 166k]
  |  Branch (162:30): [True: 46.9k, False: 34.4k]
  |  Branch (162:77): [True: 42.0k, False: 4.84k]
  ------------------
  163|   247k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 7.56k, False: 34.5k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  7.56k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 6.28k, False: 1.28k]
  ------------------
  168|  6.28k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  6.28k|    }
  170|  7.56k|  }
  171|       |
  172|   247k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   247k|  answer.mantissa >>= 1;
  174|   247k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 22.7k, False: 224k]
  ------------------
  175|  22.7k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  22.7k|    answer.power2++; // undo previous addition
  177|  22.7k|  }
  178|       |
  179|   247k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   247k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 292, False: 247k]
  ------------------
  181|    292|    answer.power2 = binary::infinite_power();
  182|    292|    answer.mantissa = 0;
  183|    292|  }
  184|   247k|  return answer;
  185|   251k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   289k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   289k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   289k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   289k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   289k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   289k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   289k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 106k, False: 182k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   106k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   106k|    firstproduct.low += secondproduct.high;
   35|   106k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 37.5k, False: 69.0k]
  ------------------
   36|  37.5k|      firstproduct.high++;
   37|  37.5k|    }
   38|   106k|  }
   39|   289k|  return firstproduct;
   40|   289k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  37.5k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  37.5k|  int lz = leading_zeroes(w);
   82|  37.5k|  w <<= lz;
   83|  37.5k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  37.5k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  37.5k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  37.5k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  37.5k|  int hilz = int(w >> 63) ^ 1;
   69|  37.5k|  adjusted_mantissa answer;
   70|  37.5k|  answer.mantissa = w << hilz;
   71|  37.5k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  37.5k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  37.5k|  return answer;
   74|  37.5k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  30.4k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  30.4k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  30.4k|  int32_t sci_exp = scientific_exponent(num);
  411|  30.4k|  size_t max_digits = binary_format<T>::max_digits();
  412|  30.4k|  size_t digits = 0;
  413|  30.4k|  bigint bigmant;
  414|  30.4k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  30.4k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  30.4k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 516, False: 29.9k]
  ------------------
  418|    516|    return positive_digit_comp<T>(bigmant, exponent);
  419|  29.9k|  } else {
  420|  29.9k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  29.9k|  }
  422|  30.4k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  67.9k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  67.9k|  uint64_t mantissa = num.mantissa;
   30|  67.9k|  int32_t exponent = int32_t(num.exponent);
   31|   339k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 271k, False: 67.9k]
  ------------------
   32|   271k|    mantissa /= 10000;
   33|   271k|    exponent += 4;
   34|   271k|  }
   35|   135k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 67.9k, False: 67.9k]
  ------------------
   36|  67.9k|    mantissa /= 100;
   37|  67.9k|    exponent += 2;
   38|  67.9k|  }
   39|  67.9k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 67.9k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  67.9k|  return exponent;
   44|  67.9k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  67.9k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  67.9k|  size_t counter = 0;
  245|  67.9k|  digits = 0;
  246|  67.9k|  limb value = 0;
  247|  67.9k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  67.9k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  67.9k|  UC const * p = num.integer.ptr;
  255|  67.9k|  UC const * pend = p + num.integer.len();
  256|  67.9k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   151k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 83.8k, False: 67.6k]
  ------------------
  259|   142k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 74.2k, False: 67.8k]
  |  Branch (259:45): [True: 58.5k, False: 15.6k]
  |  Branch (259:70): [True: 58.2k, False: 294]
  ------------------
  260|  58.2k|      parse_eight_digits(p, value, counter, digits);
  261|  58.2k|    }
  262|   265k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 247k, False: 18.3k]
  |  Branch (262:30): [True: 181k, False: 65.2k]
  |  Branch (262:43): [True: 181k, False: 294]
  ------------------
  263|   181k|      parse_one_digit(p, value, counter, digits);
  264|   181k|    }
  265|  83.8k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 294, False: 83.5k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    294|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    294|      bool truncated = is_truncated(p, pend);
  269|    294|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 258, False: 36]
  ------------------
  270|    258|        truncated |= is_truncated(num.fraction);
  271|    258|      }
  272|    294|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 188, False: 106]
  ------------------
  273|    188|        round_up_bigint(result, digits);
  274|    188|      }
  275|    294|      return;
  276|  83.5k|    } else {
  277|  83.5k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  83.5k|      counter = 0;
  279|  83.5k|      value = 0;
  280|  83.5k|    }
  281|  83.8k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  67.6k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 62.3k, False: 5.34k]
  ------------------
  285|  62.3k|    p = num.fraction.ptr;
  286|  62.3k|    pend = p + num.fraction.len();
  287|  62.3k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 2.44k, False: 59.9k]
  ------------------
  288|  2.44k|      skip_zeros(p, pend);
  289|  2.44k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   197k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 138k, False: 58.7k]
  ------------------
  292|   332k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 258k, False: 73.9k]
  |  Branch (292:47): [True: 195k, False: 63.3k]
  |  Branch (292:72): [True: 193k, False: 1.72k]
  ------------------
  293|   193k|        parse_eight_digits(p, value, counter, digits);
  294|   193k|      }
  295|   578k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 499k, False: 78.8k]
  |  Branch (295:32): [True: 442k, False: 57.3k]
  |  Branch (295:45): [True: 439k, False: 2.80k]
  ------------------
  296|   439k|        parse_one_digit(p, value, counter, digits);
  297|   439k|      }
  298|   138k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 3.64k, False: 135k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  3.64k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  3.64k|        bool truncated = is_truncated(p, pend);
  302|  3.64k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 2.57k, False: 1.06k]
  ------------------
  303|  2.57k|          round_up_bigint(result, digits);
  304|  2.57k|        }
  305|  3.64k|        return;
  306|   135k|      } else {
  307|   135k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   135k|        counter = 0;
  309|   135k|        value = 0;
  310|   135k|      }
  311|   138k|    }
  312|  62.3k|  }
  313|       |
  314|  64.0k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 64.0k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  64.0k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  70.4k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  70.4k|  uint64_t val;
  161|  85.0k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 43.1k, False: 41.9k]
  ------------------
  162|  43.1k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  43.1k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 28.5k, False: 14.6k]
  ------------------
  164|  28.5k|      break;
  165|  28.5k|    }
  166|  14.6k|    first += int_cmp_len<UC>();
  167|  14.6k|  }
  168|   142k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 139k, False: 2.44k]
  ------------------
  169|   139k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 67.9k, False: 72.0k]
  ------------------
  170|  67.9k|      break;
  171|  67.9k|    }
  172|  72.0k|    first++;
  173|  72.0k|  }
  174|  70.4k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   251k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   251k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   251k|  p += 8;
  210|   251k|  counter += 8;
  211|   251k|  count += 8;
  212|   251k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   621k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   621k|  value = value * 10 + limb(*p - UC('0'));
  218|   621k|  p++;
  219|   621k|  counter++;
  220|   621k|  count++;
  221|   621k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   225k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   225k|  big.mul(power);
  226|   225k|  big.add(value);
  227|   225k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  4.19k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  4.19k|  uint64_t val;
  183|  8.84k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 6.05k, False: 2.78k]
  ------------------
  184|  6.05k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  6.05k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.40k, False: 4.64k]
  ------------------
  186|  1.40k|      return true;
  187|  1.40k|    }
  188|  4.64k|    first += int_cmp_len<UC>();
  189|  4.64k|  }
  190|  4.34k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 3.00k, False: 1.34k]
  ------------------
  191|  3.00k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 1.44k, False: 1.56k]
  ------------------
  192|  1.44k|      return true;
  193|  1.44k|    }
  194|  1.56k|    ++first;
  195|  1.56k|  }
  196|  1.34k|  return false;
  197|  2.78k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    258|bool is_truncated(span<const UC> s) noexcept {
  201|    258|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    258|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  2.76k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  2.76k|  add_native(big, 10, 1);
  234|  2.76k|  count++;
  235|  2.76k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    516|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    516|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    516|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    516|  adjusted_mantissa answer;
  324|    516|  bool truncated;
  325|    516|  answer.mantissa = bigmant.hi64(truncated);
  326|    516|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    516|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    516|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    516|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    516|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    516|    });
  333|    516|  });
  334|       |
  335|    516|  return answer;
  336|    516|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    516|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    516|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    516|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 516]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    516|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    516|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 516]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    516|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    516|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 516]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    516|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    516|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    516|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    516|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    516|    });
  333|    516|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    516|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    516|  const uint64_t mask
  125|    516|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 516]
  ------------------
  126|    516|    ? UINT64_MAX
  127|    516|    : (uint64_t(1) << shift) - 1;
  128|    516|  const uint64_t halfway
  129|    516|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 516]
  ------------------
  130|    516|    ? 0
  131|    516|    : uint64_t(1) << (shift - 1);
  132|    516|  uint64_t truncated_bits = am.mantissa & mask;
  133|    516|  bool is_above = truncated_bits > halfway;
  134|    516|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    516|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 516]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    516|  } else {
  140|    516|    am.mantissa >>= shift;
  141|    516|  }
  142|    516|  am.power2 += shift;
  143|       |
  144|    516|  bool is_odd = (am.mantissa & 1) == 1;
  145|    516|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    516|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    516|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    516|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 74, False: 442]
  |  Branch (331:27): [True: 348, False: 94]
  |  Branch (331:41): [True: 58, False: 290]
  |  Branch (331:56): [True: 58, False: 326]
  |  Branch (331:66): [True: 32, False: 26]
  ------------------
  332|    516|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  29.9k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  29.9k|  bigint& real_digits = bigmant;
  347|  29.9k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  29.9k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  29.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  29.9k|  T b;
  354|  29.9k|  to_float(false, am_b, b);
  355|  29.9k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  29.9k|  bigint theor_digits(theor.mantissa);
  357|  29.9k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  29.9k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  29.9k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  29.9k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 29.9k, False: 0]
  ------------------
  363|  29.9k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  29.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  29.9k|  }
  365|  29.9k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 29.9k, False: 0]
  ------------------
  366|  29.9k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  29.9k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  29.9k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  29.9k|  int ord = real_digits.compare(theor_digits);
  373|  29.9k|  adjusted_mantissa answer = am;
  374|  29.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  29.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.9k|      (void)_;  // not needed, since we've done our comparison
  377|  29.9k|      (void)__; // not needed, since we've done our comparison
  378|  29.9k|      if (ord > 0) {
  379|  29.9k|        return true;
  380|  29.9k|      } else if (ord < 0) {
  381|  29.9k|        return false;
  382|  29.9k|      } else {
  383|  29.9k|        return is_odd;
  384|  29.9k|      }
  385|  29.9k|    });
  386|  29.9k|  });
  387|       |
  388|  29.9k|  return answer;
  389|  29.9k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  29.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  29.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  29.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 29.9k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  29.9k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  29.9k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 29.9k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  29.9k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  29.9k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 29.9k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  29.9k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  29.9k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  62.2k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  62.2k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 62.2k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  62.2k|  } else {
  153|  62.2k|    am.mantissa >>= shift;
  154|  62.2k|  }
  155|  62.2k|  am.power2 += shift;
  156|  62.2k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  29.9k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  29.9k|  adjusted_mantissa am = to_extended(value);
   84|  29.9k|  am.mantissa <<= 1;
   85|  29.9k|  am.mantissa += 1;
   86|  29.9k|  am.power2 -= 1;
   87|  29.9k|  return am;
   88|  29.9k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  29.9k|adjusted_mantissa to_extended(T value) noexcept {
   50|  29.9k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  29.9k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  29.9k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  29.9k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  29.9k|  adjusted_mantissa am;
   56|  29.9k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  29.9k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  29.9k|  ::memcpy(&bits, &value, sizeof(T));
   62|  29.9k|#endif
   63|  29.9k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 29.9k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  29.9k|  } else {
   68|       |    // normal
   69|  29.9k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  29.9k|    am.power2 -= bias;
   71|  29.9k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  29.9k|  }
   73|       |
   74|  29.9k|  return am;
   75|  29.9k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  29.9k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  29.9k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  29.9k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 29.9k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  29.9k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  29.9k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 29.9k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  29.9k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  29.9k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 29.9k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  29.9k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  29.9k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  29.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.9k|      (void)_;  // not needed, since we've done our comparison
  377|  29.9k|      (void)__; // not needed, since we've done our comparison
  378|  29.9k|      if (ord > 0) {
  379|  29.9k|        return true;
  380|  29.9k|      } else if (ord < 0) {
  381|  29.9k|        return false;
  382|  29.9k|      } else {
  383|  29.9k|        return is_odd;
  384|  29.9k|      }
  385|  29.9k|    });
  386|  29.9k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  29.9k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  29.9k|  const uint64_t mask
  125|  29.9k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 29.9k]
  ------------------
  126|  29.9k|    ? UINT64_MAX
  127|  29.9k|    : (uint64_t(1) << shift) - 1;
  128|  29.9k|  const uint64_t halfway
  129|  29.9k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 29.9k]
  ------------------
  130|  29.9k|    ? 0
  131|  29.9k|    : uint64_t(1) << (shift - 1);
  132|  29.9k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  29.9k|  bool is_above = truncated_bits > halfway;
  134|  29.9k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  29.9k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 29.9k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  29.9k|  } else {
  140|  29.9k|    am.mantissa >>= shift;
  141|  29.9k|  }
  142|  29.9k|  am.power2 += shift;
  143|       |
  144|  29.9k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  29.9k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  29.9k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  29.9k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  29.9k|      (void)_;  // not needed, since we've done our comparison
  377|  29.9k|      (void)__; // not needed, since we've done our comparison
  378|  29.9k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 210, False: 29.7k]
  ------------------
  379|    210|        return true;
  380|  29.7k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 26.3k, False: 3.36k]
  ------------------
  381|  26.3k|        return false;
  382|  26.3k|      } else {
  383|  3.36k|        return is_odd;
  384|  3.36k|      }
  385|  29.9k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  37.5k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  37.5k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  37.5k|  int32_t sci_exp = scientific_exponent(num);
  411|  37.5k|  size_t max_digits = binary_format<T>::max_digits();
  412|  37.5k|  size_t digits = 0;
  413|  37.5k|  bigint bigmant;
  414|  37.5k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  37.5k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  37.5k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 5.24k, False: 32.2k]
  ------------------
  418|  5.24k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  32.2k|  } else {
  420|  32.2k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  32.2k|  }
  422|  37.5k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  5.24k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  5.24k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  5.24k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  5.24k|  adjusted_mantissa answer;
  324|  5.24k|  bool truncated;
  325|  5.24k|  answer.mantissa = bigmant.hi64(truncated);
  326|  5.24k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  5.24k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  5.24k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  5.24k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  5.24k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  5.24k|    });
  333|  5.24k|  });
  334|       |
  335|  5.24k|  return answer;
  336|  5.24k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  5.24k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  5.24k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  5.24k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 5.24k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  5.24k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  5.24k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 444, False: 4.80k]
  ------------------
  109|    444|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    444|    am.power2++;
  111|    444|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  5.24k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  5.24k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 5.24k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  5.24k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  5.24k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  5.24k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  5.24k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  5.24k|    });
  333|  5.24k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  5.24k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  5.24k|  const uint64_t mask
  125|  5.24k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 5.24k]
  ------------------
  126|  5.24k|    ? UINT64_MAX
  127|  5.24k|    : (uint64_t(1) << shift) - 1;
  128|  5.24k|  const uint64_t halfway
  129|  5.24k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 5.24k]
  ------------------
  130|  5.24k|    ? 0
  131|  5.24k|    : uint64_t(1) << (shift - 1);
  132|  5.24k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  5.24k|  bool is_above = truncated_bits > halfway;
  134|  5.24k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  5.24k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 5.24k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  5.24k|  } else {
  140|  5.24k|    am.mantissa >>= shift;
  141|  5.24k|  }
  142|  5.24k|  am.power2 += shift;
  143|       |
  144|  5.24k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  5.24k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  5.24k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  5.24k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  5.24k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 548, False: 4.70k]
  |  Branch (331:27): [True: 3.93k, False: 771]
  |  Branch (331:41): [True: 1.01k, False: 2.92k]
  |  Branch (331:56): [True: 449, False: 3.24k]
  |  Branch (331:66): [True: 60, False: 389]
  ------------------
  332|  5.24k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  32.2k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  32.2k|  bigint& real_digits = bigmant;
  347|  32.2k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  32.2k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  32.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  32.2k|  T b;
  354|  32.2k|  to_float(false, am_b, b);
  355|  32.2k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  32.2k|  bigint theor_digits(theor.mantissa);
  357|  32.2k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  32.2k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  32.2k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  32.2k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 32.2k, False: 0]
  ------------------
  363|  32.2k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  32.2k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  32.2k|  }
  365|  32.2k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 2.78k, False: 29.4k]
  ------------------
  366|  2.78k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  2.78k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  29.4k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 29.3k, False: 88]
  ------------------
  368|  29.3k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  29.3k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  29.3k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  32.2k|  int ord = real_digits.compare(theor_digits);
  373|  32.2k|  adjusted_mantissa answer = am;
  374|  32.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  32.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  32.2k|      (void)_;  // not needed, since we've done our comparison
  377|  32.2k|      (void)__; // not needed, since we've done our comparison
  378|  32.2k|      if (ord > 0) {
  379|  32.2k|        return true;
  380|  32.2k|      } else if (ord < 0) {
  381|  32.2k|        return false;
  382|  32.2k|      } else {
  383|  32.2k|        return is_odd;
  384|  32.2k|      }
  385|  32.2k|    });
  386|  32.2k|  });
  387|       |
  388|  32.2k|  return answer;
  389|  32.2k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  32.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  32.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  32.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 114, False: 32.1k]
  ------------------
   96|       |    // have a denormal float
   97|    114|    int32_t shift = -am.power2 + 1;
   98|    114|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    114|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 114, False: 0]
  ------------------
  101|    114|    return;
  102|    114|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  32.1k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  32.1k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 32.1k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  32.1k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  32.1k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 32.1k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  32.1k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  32.2k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  32.2k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  32.2k|  adjusted_mantissa am = to_extended(value);
   84|  32.2k|  am.mantissa <<= 1;
   85|  32.2k|  am.mantissa += 1;
   86|  32.2k|  am.power2 -= 1;
   87|  32.2k|  return am;
   88|  32.2k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  32.2k|adjusted_mantissa to_extended(T value) noexcept {
   50|  32.2k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  32.2k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  32.2k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  32.2k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  32.2k|  adjusted_mantissa am;
   56|  32.2k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  32.2k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  32.2k|  ::memcpy(&bits, &value, sizeof(T));
   62|  32.2k|#endif
   63|  32.2k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 114, False: 32.1k]
  ------------------
   64|       |    // denormal
   65|    114|    am.power2 = 1 - bias;
   66|    114|    am.mantissa = bits & mantissa_mask;
   67|  32.1k|  } else {
   68|       |    // normal
   69|  32.1k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  32.1k|    am.power2 -= bias;
   71|  32.1k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  32.1k|  }
   73|       |
   74|  32.2k|  return am;
   75|  32.2k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  32.2k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  32.2k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  32.2k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 114, False: 32.1k]
  ------------------
   96|       |    // have a denormal float
   97|    114|    int32_t shift = -am.power2 + 1;
   98|    114|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    114|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 114, False: 0]
  ------------------
  101|    114|    return;
  102|    114|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  32.1k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  32.1k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 88, False: 32.0k]
  ------------------
  109|     88|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     88|    am.power2++;
  111|     88|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  32.1k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  32.1k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 32.1k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  32.1k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  32.2k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  32.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  32.2k|      (void)_;  // not needed, since we've done our comparison
  377|  32.2k|      (void)__; // not needed, since we've done our comparison
  378|  32.2k|      if (ord > 0) {
  379|  32.2k|        return true;
  380|  32.2k|      } else if (ord < 0) {
  381|  32.2k|        return false;
  382|  32.2k|      } else {
  383|  32.2k|        return is_odd;
  384|  32.2k|      }
  385|  32.2k|    });
  386|  32.2k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  32.2k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  32.2k|  const uint64_t mask
  125|  32.2k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 32.2k]
  ------------------
  126|  32.2k|    ? UINT64_MAX
  127|  32.2k|    : (uint64_t(1) << shift) - 1;
  128|  32.2k|  const uint64_t halfway
  129|  32.2k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 32.2k]
  ------------------
  130|  32.2k|    ? 0
  131|  32.2k|    : uint64_t(1) << (shift - 1);
  132|  32.2k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  32.2k|  bool is_above = truncated_bits > halfway;
  134|  32.2k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  32.2k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 32.2k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  32.2k|  } else {
  140|  32.2k|    am.mantissa >>= shift;
  141|  32.2k|  }
  142|  32.2k|  am.power2 += shift;
  143|       |
  144|  32.2k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  32.2k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  32.2k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  32.2k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  32.2k|      (void)_;  // not needed, since we've done our comparison
  377|  32.2k|      (void)__; // not needed, since we've done our comparison
  378|  32.2k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 13.3k, False: 18.9k]
  ------------------
  379|  13.3k|        return true;
  380|  18.9k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 18.3k, False: 518]
  ------------------
  381|  18.3k|        return false;
  382|  18.3k|      } else {
  383|    518|        return is_odd;
  384|    518|      }
  385|  32.2k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  2.53M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  1.50M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   487k|  constexpr size_t len() const noexcept {
  238|   487k|    return length;
  239|   487k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|   841k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|   841k|  return -10;
  469|   841k|#endif
  470|   841k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   793k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   793k|  return 10;
  517|   793k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   695k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   695k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   695k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  2.04M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  2.04M|  return 23;
  477|  2.04M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   654k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   654k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   654k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   687k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   286k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   286k|  return -65;
  568|   286k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   284k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   284k|  return 38;
  559|   284k|}
_ZN10fast_float14leading_zeroesEm:
  268|   607k|int leading_zeroes(uint64_t input_num) {
  269|   607k|  assert(input_num > 0);
  270|   607k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   607k|  return __builtin_clzll(input_num);
  285|   607k|#endif
  286|   607k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   760k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   760k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   760k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|   760k|  answer.low = uint64_t(r);
  337|   760k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   760k|  return answer;
  342|   760k|}
_ZN10fast_float8value128C2Ev:
  251|   760k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   337k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   337k|  return -127;
  500|   337k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   102k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   102k|  return -17;
  493|   102k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   100k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   100k|  return 10;
  485|   100k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   212k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   212k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 67.9k, False: 144k]
  |  Branch (352:38): [True: 0, False: 144k]
  ------------------
  353|   212k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  30.4k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  30.4k|  return 114;
  575|  30.4k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   113k|{
  650|   113k|    return sizeof(uint64_t) / sizeof(UC);
  651|   113k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  49.1k|{
  644|  49.1k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  49.1k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  49.1k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|  89.2k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   224k|  constexpr size_t len() const noexcept {
  238|   224k|    return length;
  239|   224k|  }
_ZNK10fast_float4spanImEixEm:
  241|   121k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   121k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   121k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   121k|    return ptr[index];
  244|   121k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   216k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   216k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   216k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   216k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   216k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   216k|  ::memcpy(&value, &word, sizeof(T));
  615|   216k|#endif
  616|   216k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   216k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   529k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   529k|  return 0xFF;
  507|   529k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  1.26M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   921k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   463k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  237|  1.01k|  constexpr size_t len() const noexcept {
  238|  1.01k|    return length;
  239|  1.01k|  }
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   460k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|   888k|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|   888k|  return -22;
  461|   888k|#endif
  462|   888k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|   879k|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|   879k|  return 22;
  514|   879k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   744k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   744k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   744k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  2.02M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  2.02M|  return 52;
  474|  2.02M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   735k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   735k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   735k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   256k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   256k|  return -342;
  564|   256k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   255k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   255k|  return 308;
  555|   255k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   326k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   326k|  return -1023;
  497|   326k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|  81.3k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|  81.3k|  return -4;
  489|  81.3k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  46.9k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  46.9k|  return 23;
  481|  46.9k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  37.5k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  37.5k|  return 769;
  572|  37.5k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   185k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   185k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   185k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   185k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   185k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   185k|  ::memcpy(&value, &word, sizeof(T));
  615|   185k|#endif
  616|   185k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   185k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   474k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   474k|  return 0x7FF;
  504|   474k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   622k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   622k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   622k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   622k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   622k|    return from_chars_advanced(first, last, value, options);
  143|   622k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   622k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   622k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   622k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   622k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   622k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 622k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   622k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   622k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 622k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   622k|  answer.ec = std::errc(); // be optimistic
  221|   622k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   622k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 575k, False: 46.8k]
  |  Branch (227:69): [True: 545k, False: 29.9k]
  |  Branch (227:131): [True: 482k, False: 63.5k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   482k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 482k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   482k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 441k, False: 40.1k]
  ------------------
  239|   441k|        value = T(pns.mantissa);
  240|   441k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 10.2k, False: 431k]
  ------------------
  241|   431k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   441k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 441k]
  ------------------
  243|   441k|        return answer;
  244|   441k|      }
  245|   482k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   482k|  }
  262|   180k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   180k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 104k, False: 76.4k]
  |  Branch (263:29): [True: 104k, False: 0]
  ------------------
  264|   104k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 30.4k, False: 73.6k]
  ------------------
  265|  30.4k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  30.4k|    }
  267|   104k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   180k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 30.4k, False: 150k]
  ------------------
  271|   180k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   180k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 176k, False: 4.30k]
  |  Branch (273:29): [True: 21.2k, False: 155k]
  |  Branch (273:49): [True: 955, False: 20.2k]
  |  Branch (273:68): [True: 4.82k, False: 174k]
  ------------------
  274|  5.78k|    answer.ec = std::errc::result_out_of_range;
  275|  5.78k|  }
  276|   180k|  return answer;
  277|   622k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.44M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.44M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.44M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.44M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.44M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.44M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   219k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   219k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   219k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   219k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   219k|    return from_chars_advanced(first, last, value, options);
  143|   219k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   219k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   219k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   219k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   219k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   219k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 219k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   219k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   219k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 219k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   219k|  answer.ec = std::errc(); // be optimistic
  221|   219k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   219k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 217k, False: 1.68k]
  |  Branch (227:69): [True: 213k, False: 3.69k]
  |  Branch (227:131): [True: 213k, False: 168]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   213k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 213k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   213k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 213k, False: 520]
  ------------------
  239|   213k|        value = T(pns.mantissa);
  240|   213k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 574, False: 212k]
  ------------------
  241|   212k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   213k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 213k]
  ------------------
  243|   213k|        return answer;
  244|   213k|      }
  245|   213k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   213k|  }
  262|  6.06k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  6.06k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 348, False: 5.71k]
  |  Branch (263:29): [True: 348, False: 0]
  ------------------
  264|    348|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 348]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    348|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  6.06k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 6.06k]
  ------------------
  271|  6.06k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  6.06k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 5.50k, False: 562]
  |  Branch (273:29): [True: 4.08k, False: 1.42k]
  |  Branch (273:49): [True: 1.13k, False: 2.95k]
  |  Branch (273:68): [True: 2.95k, False: 1.98k]
  ------------------
  274|  4.08k|    answer.ec = std::errc::result_out_of_range;
  275|  4.08k|  }
  276|  6.06k|  return answer;
  277|   219k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   646k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   646k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   646k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   646k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   646k|    return from_chars_advanced(first, last, value, options);
  143|   646k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   646k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   646k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   646k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   646k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   646k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 646k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   646k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   646k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 646k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   646k|  answer.ec = std::errc(); // be optimistic
  221|   646k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   646k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 639k, False: 7.43k]
  |  Branch (227:69): [True: 610k, False: 28.7k]
  |  Branch (227:131): [True: 509k, False: 101k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   509k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 509k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   509k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 500k, False: 9.10k]
  ------------------
  239|   500k|        value = T(pns.mantissa);
  240|   500k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 29.5k, False: 470k]
  ------------------
  241|   470k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   500k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 500k]
  ------------------
  243|   500k|        return answer;
  244|   500k|      }
  245|   509k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   509k|  }
  262|   146k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   146k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 107k, False: 39.4k]
  |  Branch (263:29): [True: 107k, False: 0]
  ------------------
  264|   107k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 37.5k, False: 69.7k]
  ------------------
  265|  37.5k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  37.5k|    }
  267|   107k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   146k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 37.5k, False: 109k]
  ------------------
  271|   146k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   146k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 142k, False: 3.94k]
  |  Branch (273:29): [True: 14.3k, False: 128k]
  |  Branch (273:49): [True: 209, False: 14.1k]
  |  Branch (273:68): [True: 2.45k, False: 144k]
  ------------------
  274|  2.66k|    answer.ec = std::errc::result_out_of_range;
  275|  2.66k|  }
  276|   146k|  return answer;
  277|   646k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   241k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   241k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   241k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   241k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   241k|    return from_chars_advanced(first, last, value, options);
  143|   241k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   241k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   241k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   241k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   241k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   241k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 241k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   241k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   241k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 241k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   241k|  answer.ec = std::errc(); // be optimistic
  221|   241k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   241k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 239k, False: 1.92k]
  |  Branch (227:69): [True: 235k, False: 3.95k]
  |  Branch (227:131): [True: 235k, False: 376]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   235k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 235k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   235k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 235k, False: 190]
  ------------------
  239|   235k|        value = T(pns.mantissa);
  240|   235k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 788, False: 234k]
  ------------------
  241|   234k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   235k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 235k]
  ------------------
  243|   235k|        return answer;
  244|   235k|      }
  245|   235k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   235k|  }
  262|  6.44k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  6.44k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 376, False: 6.07k]
  |  Branch (263:29): [True: 376, False: 0]
  ------------------
  264|    376|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 376]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    376|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  6.44k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 6.44k]
  ------------------
  271|  6.44k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  6.44k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 5.80k, False: 646]
  |  Branch (273:29): [True: 1.92k, False: 3.87k]
  |  Branch (273:49): [True: 240, False: 1.68k]
  |  Branch (273:68): [True: 1.68k, False: 4.52k]
  ------------------
  274|  1.92k|    answer.ec = std::errc::result_out_of_range;
  275|  1.92k|  }
  276|  6.44k|  return answer;
  277|   241k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  4.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  1.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  1.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  4.21M|{
 3807|  4.21M|    if constexpr (sizeof(U) == 1) {
 3808|  4.21M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|       |    }
 3810|       |    else if constexpr (sizeof(U) == 2) {
 3811|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|       |    }
 3813|       |    else {
 3814|       |        // utf-32
 3815|       |        static_assert(sizeof(U) == 4);
 3816|       |        SCN_UNUSED(ch);
 3817|       |        return 1;
 3818|       |    }
 3819|  4.21M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  4.21M|{
 3771|  4.21M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  4.21M|    SCN_GCC_COMPAT_PUSH
 3774|  4.21M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  4.21M|    constexpr char lengths[] =
 3776|  4.21M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  4.21M|        "\1\1\1\1\1\1\1\1"
 3778|  4.21M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  4.21M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  4.21M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  4.21M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  4.21M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  4.21M|    SCN_GCC_COMPAT_POP
 3785|  4.21M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  3.75M|{
 4013|  3.75M|    if constexpr (sizeof(CharT) == 1) {
 4014|  3.75M|        return decode_utf8_code_point_exhaustive(input);
 4015|       |    }
 4016|       |    else if constexpr (sizeof(CharT) == 2) {
 4017|       |        return decode_utf16_code_point_exhaustive(input);
 4018|       |    }
 4019|       |    else {
 4020|       |        SCN_EXPECT(input.size() == 1);
 4021|       |        auto cp = static_cast<char32_t>(input.front());
 4022|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|       |            return invalid_code_point;
 4024|       |        }
 4025|       |        return cp;
 4026|       |    }
 4027|  3.75M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  3.75M|{
 3826|  3.75M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  3.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  3.75M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  3.75M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  3.75M|    };
 3831|       |
 3832|  3.75M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 3.68M, False: 72.6k]
  ------------------
 3833|  3.68M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 716, False: 3.68M]
  ------------------
 3834|    716|            SCN_UNLIKELY_ATTR
 3835|    716|            return invalid_code_point;
 3836|    716|        }
 3837|  3.68M|        return static_cast<char32_t>(input[0]);
 3838|  3.68M|    }
 3839|       |
 3840|  72.6k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 66.5k, False: 6.11k]
  ------------------
 3841|  66.5k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 152, False: 66.3k]
  ------------------
 3842|    152|            SCN_UNLIKELY_ATTR
 3843|    152|            return invalid_code_point;
 3844|    152|        }
 3845|  66.3k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 7.27k, False: 59.0k]
  ------------------
 3846|  7.27k|            SCN_UNLIKELY_ATTR
 3847|  7.27k|            return invalid_code_point;
 3848|  7.27k|        }
 3849|       |
 3850|  59.0k|        char32_t cp{};
 3851|  59.0k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|  59.0k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|  59.0k|        return cp;
 3854|  66.3k|    }
 3855|       |
 3856|  6.11k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 3.53k, False: 2.57k]
  ------------------
 3857|  3.53k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 113, False: 3.42k]
  ------------------
 3858|    113|            SCN_UNLIKELY_ATTR
 3859|    113|            return invalid_code_point;
 3860|    113|        }
 3861|  3.42k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 1.36k, False: 2.05k]
  ------------------
 3862|  3.42k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 618, False: 1.44k]
  ------------------
 3863|  1.98k|            SCN_UNLIKELY_ATTR
 3864|  1.98k|            return invalid_code_point;
 3865|  1.98k|        }
 3866|       |
 3867|  1.44k|        char32_t cp{};
 3868|  1.44k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  1.44k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  1.44k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  1.44k|        return cp;
 3872|  3.42k|    }
 3873|       |
 3874|  2.57k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 2.57k, False: 0]
  ------------------
 3875|  2.57k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 2.57k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  2.57k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 525, False: 2.05k]
  ------------------
 3880|    525|            SCN_UNLIKELY_ATTR
 3881|    525|            return invalid_code_point;
 3882|    525|        }
 3883|  2.05k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 620, False: 1.43k]
  ------------------
 3884|  2.05k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 571, False: 859]
  ------------------
 3885|  2.05k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 542, False: 317]
  ------------------
 3886|  1.73k|            SCN_UNLIKELY_ATTR
 3887|  1.73k|            return invalid_code_point;
 3888|  1.73k|        }
 3889|       |
 3890|    317|        char32_t cp{};
 3891|    317|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|    317|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|    317|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|    317|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|    317|        return cp;
 3896|  2.05k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|  76.1k|    const auto is_trailing_code_unit = [](char ch) {
 3829|  76.1k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  76.1k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  6.10M|{
 3699|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3700|       |                                          decltype(first), decltype(last)> &&
 3701|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3702|       |        return {first, last};
 3703|       |    }
 3704|  6.10M|    else {
 3705|  6.10M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  6.10M|                                       to_address(first), to_address(last)))};
 3707|  6.10M|    }
 3708|  6.10M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  18.5M|{
  326|  18.5M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  18.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  18.5M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  21.3M|{
  304|  21.3M|    return p;
  305|  21.3M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  9.80M|{
 3730|       |    if constexpr (std::is_constructible_v<
 3731|       |                      typename std::basic_string_view<CharT>::iterator,
 3732|       |                      decltype(it)> &&
 3733|  9.80M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3734|  9.80M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  9.80M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  9.80M|        return it;
 3736|       |    }
 3737|       |    else {
 3738|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|       |    }
 3740|  9.80M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   108k|    {
 2724|   108k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   108k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   108k|    {
 2705|   108k|        return decay_copy(t.begin());
 2706|   108k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  14.2M|{
 1949|  14.2M|    return SCN_FWD(t);
  ------------------
  |  |  930|  14.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  14.2M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.69M|    {
 2781|  2.69M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.69M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.69M|    {
 2763|  2.69M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.69M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.69M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   196k|{
 8867|   196k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   196k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   196k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   196k|    static_cast<    \
  |  |  929|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   196k|    static_cast<    \
  |  |  929|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   196k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5395|   845k|{
 5396|   845k|    detail::check_scan_arg_types<Args...>();
 5397|   845k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   845k|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5134|  1.35M|{
 5135|  1.35M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.35M|                  "Scan argument types must be default constructible");
 5137|  1.35M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.35M|                  "Scan argument types must be Destructible");
 5139|  1.35M|    static_assert(
 5140|  1.35M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.35M|        "Scan argument types must not be references");
 5142|  1.35M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5347|   845k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   845k|    {
 5349|   845k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   845k|    {
 5360|   845k|        return {detail::make_arg<
 5361|   845k|            kind, Context,
 5362|   845k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   845k|                                 typename Context::char_type>::value>(args)...};
 5364|   845k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   845k|{
 5170|   845k|    return make_value<Context>(value).ref_value;
 5171|   845k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5119|   934k|{
 5120|   934k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   934k|                                  needs_context_tag>) {
 5124|   934k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   934k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   934k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4958|   934k|    {                                                                        \
 4959|   934k|        return val;                                                          \
 4960|   934k|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5088|  1.35M|{
 5089|  1.35M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.35M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.35M|    constexpr bool scannable_char =
 5093|  1.35M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.35M|    static_assert(scannable_char,
 5095|  1.35M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.35M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.35M|    constexpr bool scannable_const =
 5099|  1.35M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.35M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.35M|    constexpr bool scannable_disabled =
 5103|  1.35M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.35M|    static_assert(scannable_disabled,
 5105|  1.35M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.35M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.35M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.35M|    static_assert(
 5110|  1.35M|        scannable,
 5111|  1.35M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.35M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.35M|    return arg_value{arg};
 5115|  1.35M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4900|  1.35M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  1.35M|    {
 4902|  1.35M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   606k|{
 8654|   606k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   606k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   606k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   606k|{
 8591|   606k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   606k|    auto result = vscan_impl(buffer, format, args);
 8594|   606k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48.6k, False: 558k]
  |  |  ------------------
  ------------------
 8595|  48.6k|        return unexpected(result.error());
 8596|  48.6k|    }
 8597|   558k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   558k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   606k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|  1.34M|{
 4720|  1.34M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.34M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.34M|                  "\n"
 4724|  1.34M|                  "Unsupported range type given as input to a scanning "
 4725|  1.34M|                  "function.\n"
 4726|  1.34M|                  "A range needs to have a character type (value type) "
 4727|  1.34M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.34M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.34M|                  "to be included.\n"
 4730|  1.34M|                  "See the scnlib documentation for more details.");
 4731|  1.34M|    static_assert(
 4732|  1.34M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.34M|        "\n"
 4734|  1.34M|        "Unsupported range type given as input to a scanning "
 4735|  1.34M|        "function.\n"
 4736|  1.34M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.34M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.34M|        "not supported.");
 4739|  1.34M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.34M|                  "\n"
 4741|  1.34M|                  "Unsupported range type given as input to a scanning "
 4742|  1.34M|                  "function.\n"
 4743|  1.34M|                  "file_marker_found cannot be used as an "
 4744|  1.34M|                  "source range type to scn::scan.\n"
 4745|  1.34M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.34M|                  "and do not provide an explicit source range, "
 4747|  1.34M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.34M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.34M|                  "\n"
 4750|  1.34M|                  "Unsupported range type given as input to a scanning "
 4751|  1.34M|                  "function.\n"
 4752|  1.34M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.34M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.34M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.34M|                  "\n"
 4756|  1.34M|                  "Unsupported range type given as input to a scanning "
 4757|  1.34M|                  "function.\n"
 4758|  1.34M|                  "A range needs to model forward_range and have a valid "
 4759|  1.34M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.34M|                  "Examples of scannable ranges are std::string, "
 4761|  1.34M|                  "std::string_view, "
 4762|  1.34M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.34M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.34M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.34M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4658|  1.34M|{
 4659|  1.34M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4660|  1.34M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|       |    }
 4662|       |    else {
 4663|       |        return invalid_char_type{};
 4664|       |    }
 4665|  1.34M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.34M|    {
 2855|  1.34M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.34M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.34M|    {
 2836|  1.34M|        return t.data();
 2837|  1.34M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|  1.34M|    {
 3231|  1.34M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 15.3k, False: 1.32M]
  ------------------
 3232|  1.34M|                   ? nullptr
 3233|  1.34M|                   : std::addressof(*ranges::begin(derived()));
 3234|  1.34M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  1.34M|    {
 3005|  1.34M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  1.34M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  1.34M|    {
 2978|  1.34M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  1.34M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  7.40M|    {
 3339|  7.40M|        return m_iterator == m_sentinel;
 3340|  7.40M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  2.67M|    {
 3185|  2.67M|        return static_cast<const D&>(*this);
 3186|  2.67M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.56M|    {
 2724|  2.56M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.56M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.56M|    {
 2705|  2.56M|        return decay_copy(t.begin());
 2706|  2.56M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  32.5M|    {
 3330|  32.5M|        return m_iterator;
 3331|  32.5M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.34M|    {
 2930|  1.34M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.34M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.34M|    {
 2896|  1.34M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.34M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  5.56M|{
 1949|  5.56M|    return SCN_FWD(t);
  ------------------
  |  |  930|  5.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  5.56M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3345|  7.43M|    {
 3346|  7.43M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  7.43M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  13.8M|    {
 1598|  13.8M|        return has_value();
 1599|  13.8M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  27.4M|    {
  485|  27.4M|        return m_has_value;
  486|  27.4M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   962k|    {
 1604|   962k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   962k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   962k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   962k|        return this->get_unexpected().error();
 1606|   962k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   962k|    {
  468|   962k|        return m_unexpected;
  469|   962k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  7.41M|    {
  361|  7.41M|        return m_unexpected;
  362|  7.41M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  3.62M|        : m_unexpected(std::forward<Err>(e))
  346|  3.62M|    {
  347|  3.62M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.62M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.62M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   105k|        : base(unexpect, std::move(e.error())),
 1474|   105k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   105k|    {
 1476|   105k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   105k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   105k|          m_has_value(false)
  446|   105k|    {
  447|   105k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  8.24M|        : m_unexpected(std::forward<Args>(args)...)
  355|  8.24M|    {
  356|  8.24M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  8.24M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  8.24M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.34M|    {
 1177|  1.34M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  1.24M|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|  1.24M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.24M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|  1.24M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  7.66M|    {
 2724|  7.66M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  7.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  7.66M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  7.66M|    {
 2705|  7.66M|        return decay_copy(t.begin());
 2706|  7.66M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|  1.24M|{
 5910|  1.24M|    return ranges::end(source);
 5911|  1.24M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.24M|    {
 2781|  1.24M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.24M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.24M|    {
 2763|  1.24M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.24M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  15.8M|    {
 3334|  15.8M|        return m_sentinel;
 3335|  15.8M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  5.44M|    {
 1653|  5.44M|        return value();
 1654|  5.44M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  12.5M|    {
 1627|  12.5M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  12.5M|        return this->get_value();
 1629|  12.5M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  12.5M|    {
  451|  12.5M|        return m_value;
  452|  12.5M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.24M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.24M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.24M|    {
 1430|  1.24M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  1.24M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.24M|    {
  437|  1.24M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   393k|    {
 7975|   393k|        return m_str;
 7976|   393k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   845k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   845k|    {
 5426|   845k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5378|   845k|    {
 5379|   845k|        return m_argptrs;
 5380|   845k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5476|  2.61M|        : m_desc(desc), m_builtin_values(data)
 5477|  2.61M|    {
 5478|  2.61M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   393k|{
 8820|   393k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   393k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.4k, False: 361k]
  |  |  ------------------
  ------------------
 8821|  32.4k|        return unexpected(result.error());
 8822|  32.4k|    }
 8823|   361k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   393k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.34M|    {
 1598|  1.34M|        return has_value();
 1599|  1.34M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.69M|    {
  485|  2.69M|        return m_has_value;
  486|  2.69M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   105k|    {
 1604|   105k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   105k|        return this->get_unexpected().error();
 1606|   105k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   105k|    {
  468|   105k|        return m_unexpected;
  469|   105k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  35.1k|        : base(unexpect, std::move(e.error())),
 1474|  35.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  35.1k|    {
 1476|  35.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  35.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  35.1k|          m_has_value(false)
  446|  35.1k|    {
  447|  35.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   436k|    {
 1177|   436k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  1.11M|    {
 1653|  1.11M|        return value();
 1654|  1.11M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  1.24M|    {
 1627|  1.24M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.24M|        return this->get_value();
 1629|  1.24M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.24M|    {
  451|  1.24M|        return m_value;
  452|  1.24M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5828|   401k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   401k|    static_cast<    \
  |  |  929|   401k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   401k|    static_cast<    \
  |  |  929|   401k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   401k|    {
 5830|   401k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5679|  1.24M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.24M|    static_cast<    \
  |  |  929|  1.24M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|  1.24M|    {
 5681|  1.24M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5614|  1.14M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.14M|    static_cast<    \
  |  |  929|  1.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|  1.14M|    {
 5616|  1.14M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   401k|        : base(std::in_place, std::forward<U>(val)),
 1428|   401k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   401k|    {
 1430|   401k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   401k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   401k|    {
  437|   401k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5373|   845k|    {
 5374|   845k|        return m_args;
 5375|   845k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3314|  12.6M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  12.6M|    static_cast<    \
  |  |  929|  12.6M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  12.6M|    static_cast<    \
  |  |  929|  12.6M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  12.6M|    {
 3316|  12.6M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  2.61M|{
 7691|  2.61M|    return s;
 7692|  2.61M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  2.61M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   393k|        : m_str(r.str)
 7970|   393k|    {
 7971|   393k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   436k|    {
 1598|   436k|        return has_value();
 1599|   436k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   837k|    {
  485|   837k|        return m_has_value;
  486|   837k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   401k|    {
 1673|   401k|        return &value();
 1674|   401k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   401k|    {
 1627|   401k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   401k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   401k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   401k|        return this->get_value();
 1629|   401k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   401k|    {
  451|   401k|        return m_value;
  452|   401k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|  1.24M|    {
 5698|  1.24M|        return ranges::begin(m_range);
 5699|  1.24M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   196k|{
 8934|   196k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   196k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   196k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   196k|    static_cast<    \
  |  |  929|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   196k|    static_cast<    \
  |  |  929|   196k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   196k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   606k|{
 8672|   606k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   606k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   606k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   606k|{
 8607|   606k|#if !SCN_DISABLE_LOCALE
 8608|   606k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   606k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   606k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   606k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   606k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   606k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48.6k, False: 558k]
  |  |  ------------------
  ------------------
 8615|  48.6k|        return unexpected(result.error());
 8616|  48.6k|    }
 8617|   558k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   558k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   606k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  42.4k|{
 8973|  42.4k|    T value;
 8974|  42.4k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  42.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  42.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  42.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  42.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.70k, False: 39.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.70k|    }                                                  \
  |  |  |  | 3671|  42.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  39.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  39.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  39.7k|    static_cast<    \
  |  |  929|  39.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  39.7k|    static_cast<    \
  |  |  929|  39.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  42.4k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  88.4k|{
 5155|  88.4k|    check_scan_arg_types<T>();
 5156|       |
 5157|  88.4k|    basic_scan_arg<Context> arg;
 5158|  88.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  88.4k|    arg.m_value = make_value<Context>(value);
 5160|  88.4k|    return arg;
 5161|  88.4k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  2.88M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  4.19M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   131k|{
 8685|   131k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   131k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   131k|{
 8631|   131k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   131k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   131k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.10k, False: 123k]
  |  |  ------------------
  ------------------
 8635|  8.10k|        return unexpected(result.error());
 8636|  8.10k|    }
 8637|   123k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   131k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   123k|    {
 1663|   123k|        return std::move(value());
 1664|   123k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   203k|{
 8867|   203k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   203k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   203k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   203k|    static_cast<    \
  |  |  929|   203k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   203k|    static_cast<    \
  |  |  929|   203k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   203k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|   879k|{
 5396|   879k|    detail::check_scan_arg_types<Args...>();
 5397|   879k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   879k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  1.41M|{
 5135|  1.41M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.41M|                  "Scan argument types must be default constructible");
 5137|  1.41M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.41M|                  "Scan argument types must be Destructible");
 5139|  1.41M|    static_assert(
 5140|  1.41M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.41M|        "Scan argument types must not be references");
 5142|  1.41M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5347|   879k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   879k|    {
 5349|   879k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   879k|    {
 5360|   879k|        return {detail::make_arg<
 5361|   879k|            kind, Context,
 5362|   879k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   879k|                                 typename Context::char_type>::value>(args)...};
 5364|   879k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   879k|{
 5170|   879k|    return make_value<Context>(value).ref_value;
 5171|   879k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|   971k|{
 5120|   971k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   971k|                                  needs_context_tag>) {
 5124|   971k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   971k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   971k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|   971k|    {                                                                        \
 4959|   971k|        return val;                                                          \
 4960|   971k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  1.41M|{
 5089|  1.41M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.41M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.41M|    constexpr bool scannable_char =
 5093|  1.41M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.41M|    static_assert(scannable_char,
 5095|  1.41M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.41M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.41M|    constexpr bool scannable_const =
 5099|  1.41M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.41M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.41M|    constexpr bool scannable_disabled =
 5103|  1.41M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.41M|    static_assert(scannable_disabled,
 5105|  1.41M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.41M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.41M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.41M|    static_assert(
 5110|  1.41M|        scannable,
 5111|  1.41M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.41M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.41M|    return arg_value{arg};
 5115|  1.41M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4900|  1.41M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  1.41M|    {
 4902|  1.41M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   407k|    {
 7975|   407k|        return m_str;
 7976|   407k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   879k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   879k|    {
 5426|   879k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|   879k|    {
 5379|   879k|        return m_argptrs;
 5380|   879k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   407k|{
 8820|   407k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   407k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.4k, False: 375k]
  |  |  ------------------
  ------------------
 8821|  32.4k|        return unexpected(result.error());
 8822|  32.4k|    }
 8823|   375k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   375k|    static_cast<    \
  |  |  929|   375k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   375k|    static_cast<    \
  |  |  929|   375k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   407k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  35.1k|        : base(unexpect, std::move(e.error())),
 1474|  35.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  35.1k|    {
 1476|  35.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  35.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  35.1k|          m_has_value(false)
  446|  35.1k|    {
  447|  35.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   451k|    {
 1177|   451k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5828|   416k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   416k|    static_cast<    \
  |  |  929|   416k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   416k|    static_cast<    \
  |  |  929|   416k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   416k|    {
 5830|   416k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5614|  1.20M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.20M|    static_cast<    \
  |  |  929|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|  1.20M|    {
 5616|  1.20M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   416k|        : base(std::in_place, std::forward<U>(val)),
 1428|   416k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   416k|    {
 1430|   416k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   416k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   416k|    {
  437|   416k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|   879k|    {
 5374|   879k|        return m_args;
 5375|   879k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   407k|        : m_str(r.str)
 7970|   407k|    {
 7971|   407k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   451k|    {
 1598|   451k|        return has_value();
 1599|   451k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   868k|    {
  485|   868k|        return m_has_value;
  486|   868k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   416k|    {
 1673|   416k|        return &value();
 1674|   416k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   416k|    {
 1627|   416k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   416k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   416k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   416k|        return this->get_value();
 1629|   416k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   416k|    {
  451|   416k|        return m_value;
  452|   416k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   203k|{
 8934|   203k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   203k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   203k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   203k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   203k|    static_cast<    \
  |  |  929|   203k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   203k|    static_cast<    \
  |  |  929|   203k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   203k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  44.2k|{
 8973|  44.2k|    T value;
 8974|  44.2k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  44.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  44.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  44.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  44.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.70k, False: 41.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.70k|    }                                                  \
  |  |  |  | 3671|  44.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  41.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  41.5k|    static_cast<    \
  |  |  929|  41.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  44.2k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  92.5k|{
 5155|  92.5k|    check_scan_arg_types<T>();
 5156|       |
 5157|  92.5k|    basic_scan_arg<Context> arg;
 5158|  92.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  92.5k|    arg.m_value = make_value<Context>(value);
 5160|  92.5k|    return arg;
 5161|  92.5k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   206k|{
 8867|   206k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   206k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   206k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   206k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5395|   888k|{
 5396|   888k|    detail::check_scan_arg_types<Args...>();
 5397|   888k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   888k|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5134|  1.43M|{
 5135|  1.43M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.43M|                  "Scan argument types must be default constructible");
 5137|  1.43M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.43M|                  "Scan argument types must be Destructible");
 5139|  1.43M|    static_assert(
 5140|  1.43M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.43M|        "Scan argument types must not be references");
 5142|  1.43M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5347|   888k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   888k|    {
 5349|   888k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   888k|    {
 5360|   888k|        return {detail::make_arg<
 5361|   888k|            kind, Context,
 5362|   888k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   888k|                                 typename Context::char_type>::value>(args)...};
 5364|   888k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   888k|{
 5170|   888k|    return make_value<Context>(value).ref_value;
 5171|   888k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5119|   982k|{
 5120|   982k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   982k|                                  needs_context_tag>) {
 5124|   982k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   982k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   982k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4958|   982k|    {                                                                        \
 4959|   982k|        return val;                                                          \
 4960|   982k|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5088|  1.43M|{
 5089|  1.43M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.43M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.43M|    constexpr bool scannable_char =
 5093|  1.43M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.43M|    static_assert(scannable_char,
 5095|  1.43M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.43M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.43M|    constexpr bool scannable_const =
 5099|  1.43M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.43M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.43M|    constexpr bool scannable_disabled =
 5103|  1.43M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.43M|    static_assert(scannable_disabled,
 5105|  1.43M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.43M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.43M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.43M|    static_assert(
 5110|  1.43M|        scannable,
 5111|  1.43M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.43M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.43M|    return arg_value{arg};
 5115|  1.43M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4900|  1.43M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  1.43M|    {
 4902|  1.43M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   412k|    {
 7975|   412k|        return m_str;
 7976|   412k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   888k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   888k|    {
 5426|   888k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5378|   888k|    {
 5379|   888k|        return m_argptrs;
 5380|   888k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   412k|{
 8820|   412k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.4k, False: 379k]
  |  |  ------------------
  ------------------
 8821|  32.4k|        return unexpected(result.error());
 8822|  32.4k|    }
 8823|   379k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   379k|    static_cast<    \
  |  |  929|   379k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   379k|    static_cast<    \
  |  |  929|   379k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   412k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  35.1k|        : base(unexpect, std::move(e.error())),
 1474|  35.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  35.1k|    {
 1476|  35.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  35.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  35.1k|          m_has_value(false)
  446|  35.1k|    {
  447|  35.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   457k|    {
 1177|   457k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5828|   422k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   422k|    static_cast<    \
  |  |  929|   422k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   422k|    static_cast<    \
  |  |  929|   422k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   422k|    {
 5830|   422k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5614|  1.22M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|  1.22M|    {
 5616|  1.22M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   422k|        : base(std::in_place, std::forward<U>(val)),
 1428|   422k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   422k|    {
 1430|   422k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   422k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   422k|    {
  437|   422k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5373|   888k|    {
 5374|   888k|        return m_args;
 5375|   888k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   412k|        : m_str(r.str)
 7970|   412k|    {
 7971|   412k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   457k|    {
 1598|   457k|        return has_value();
 1599|   457k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   879k|    {
  485|   879k|        return m_has_value;
  486|   879k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   422k|    {
 1673|   422k|        return &value();
 1674|   422k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   422k|    {
 1627|   422k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   422k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   422k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   422k|        return this->get_value();
 1629|   422k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   422k|    {
  451|   422k|        return m_value;
  452|   422k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   206k|{
 8934|   206k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   206k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   206k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   206k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  44.9k|{
 8973|  44.9k|    T value;
 8974|  44.9k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  44.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  44.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  44.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  44.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.70k, False: 42.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.70k|    }                                                  \
  |  |  |  | 3671|  44.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  42.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  42.2k|    static_cast<    \
  |  |  929|  42.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  42.2k|    static_cast<    \
  |  |  929|  42.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  44.9k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  93.8k|{
 5155|  93.8k|    check_scan_arg_types<T>();
 5156|       |
 5157|  93.8k|    basic_scan_arg<Context> arg;
 5158|  93.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  93.8k|    arg.m_value = make_value<Context>(value);
 5160|  93.8k|    return arg;
 5161|  93.8k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   105k|    {
 2724|   105k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   105k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   105k|    {
 2705|   105k|        return decay_copy(t.begin());
 2706|   105k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  67.0M|{
 1949|  67.0M|    return SCN_FWD(t);
  ------------------
  |  |  930|  67.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  67.0M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.08M|    {
 2781|  3.08M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.08M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.08M|    {
 2763|  3.08M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.08M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   226k|{
 8867|   226k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   226k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   226k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   226k|    static_cast<    \
  |  |  929|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   226k|    static_cast<    \
  |  |  929|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   226k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   700k|{
 8654|   700k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   700k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   700k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   700k|{
 8591|   700k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   700k|    auto result = vscan_impl(buffer, format, args);
 8594|   700k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   700k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48.6k, False: 651k]
  |  |  ------------------
  ------------------
 8595|  48.6k|        return unexpected(result.error());
 8596|  48.6k|    }
 8597|   651k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   651k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   700k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  1.54M|{
 4720|  1.54M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.54M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.54M|                  "\n"
 4724|  1.54M|                  "Unsupported range type given as input to a scanning "
 4725|  1.54M|                  "function.\n"
 4726|  1.54M|                  "A range needs to have a character type (value type) "
 4727|  1.54M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.54M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.54M|                  "to be included.\n"
 4730|  1.54M|                  "See the scnlib documentation for more details.");
 4731|  1.54M|    static_assert(
 4732|  1.54M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.54M|        "\n"
 4734|  1.54M|        "Unsupported range type given as input to a scanning "
 4735|  1.54M|        "function.\n"
 4736|  1.54M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.54M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.54M|        "not supported.");
 4739|  1.54M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.54M|                  "\n"
 4741|  1.54M|                  "Unsupported range type given as input to a scanning "
 4742|  1.54M|                  "function.\n"
 4743|  1.54M|                  "file_marker_found cannot be used as an "
 4744|  1.54M|                  "source range type to scn::scan.\n"
 4745|  1.54M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.54M|                  "and do not provide an explicit source range, "
 4747|  1.54M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.54M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.54M|                  "\n"
 4750|  1.54M|                  "Unsupported range type given as input to a scanning "
 4751|  1.54M|                  "function.\n"
 4752|  1.54M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.54M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.54M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.54M|                  "\n"
 4756|  1.54M|                  "Unsupported range type given as input to a scanning "
 4757|  1.54M|                  "function.\n"
 4758|  1.54M|                  "A range needs to model forward_range and have a valid "
 4759|  1.54M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.54M|                  "Examples of scannable ranges are std::string, "
 4761|  1.54M|                  "std::string_view, "
 4762|  1.54M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.54M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.54M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.54M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  1.54M|{
 4690|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4691|       |        return file_marker_found{};
 4692|       |    }
 4693|       |    else if constexpr (!ranges::forward_range<Range>) {
 4694|       |        if constexpr (ranges::range<Range>) {
 4695|       |            return insufficient_range{};
 4696|       |        }
 4697|       |        else {
 4698|       |            return invalid_input_range{};
 4699|       |        }
 4700|       |    }
 4701|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4702|       |        return invalid_char_type{};
 4703|       |    }
 4704|  1.54M|    else {
 4705|  1.54M|        return make_forward_scan_buffer(r);
 4706|  1.54M|    }
 4707|  1.54M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  1.54M|{
 4524|  1.54M|    return basic_scan_forward_buffer_impl(range);
 4525|  1.54M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4408|  1.54M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4409|  1.54M|          m_cursor(ranges::begin(*m_range))
 4410|  1.54M|    {
 4411|  1.54M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4380|  1.54M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4381|  1.54M|    {
 4382|  1.54M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4149|  1.54M|        : m_current_view(sv), m_is_contiguous(false)
 4150|  1.54M|    {
 4151|  1.54M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  1.54M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.98M|    {
 2724|  2.98M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.98M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.98M|    {
 2705|  2.98M|        return decay_copy(t.begin());
 2706|  2.98M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|  4.41M|    {
 3330|  4.41M|        return m_iterator;
 3331|  4.41M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  19.5M|    {
 4415|  19.5M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 309k, False: 19.2M]
  ------------------
 4416|   309k|            return false;
 4417|   309k|        }
 4418|  19.2M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4419|  19.2M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  19.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  19.2M|        }
 4421|  19.2M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 17.6M, False: 1.52M]
  ------------------
 4422|  17.6M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  17.6M|                                          this->m_current_view.begin(),
 4424|  17.6M|                                          this->m_current_view.end());
 4425|  17.6M|        }
 4426|  19.2M|        m_latest = *m_cursor;
 4427|  19.2M|        ++m_cursor;
 4428|  19.2M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  19.2M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4430|  19.2M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  19.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  19.2M|        }
 4432|  19.2M|        return true;
 4433|  19.5M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  57.9M|    {
 2781|  57.9M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  57.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  57.9M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  57.9M|    {
 2763|  57.9M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  57.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  57.9M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  59.3M|    {
 3334|  59.3M|        return m_sentinel;
 3335|  59.3M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  1.54M|    {
 4071|  1.54M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  1.54M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  1.54M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   105k|        : base(unexpect, std::move(e.error())),
 1474|   105k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   105k|    {
 1476|   105k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   105k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   105k|          m_has_value(false)
  446|   105k|    {
  447|   105k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.54M|    {
 1177|  1.54M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  1.43M|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|  1.43M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.43M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|  1.43M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.43M|    {
 2724|  1.43M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.43M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.43M|    {
 2705|  1.43M|        return decay_copy(t.begin());
 2706|  1.43M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  1.43M|{
 5910|  1.43M|    return ranges::end(source);
 5911|  1.43M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.43M|    {
 2781|  1.43M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.43M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.43M|    {
 2763|  1.43M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.43M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  1.43M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.43M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.43M|    {
 1430|  1.43M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  1.43M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.43M|    {
  437|  1.43M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   452k|    {
 7975|   452k|        return m_str;
 7976|   452k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   452k|{
 8820|   452k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   452k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.4k, False: 419k]
  |  |  ------------------
  ------------------
 8821|  32.4k|        return unexpected(result.error());
 8822|  32.4k|    }
 8823|   419k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   419k|    static_cast<    \
  |  |  929|   419k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   419k|    static_cast<    \
  |  |  929|   419k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   452k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  1.54M|    {
 1598|  1.54M|        return has_value();
 1599|  1.54M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.08M|    {
  485|  3.08M|        return m_has_value;
  486|  3.08M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   105k|    {
 1604|   105k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   105k|        return this->get_unexpected().error();
 1606|   105k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   105k|    {
  468|   105k|        return m_unexpected;
  469|   105k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  35.1k|        : base(unexpect, std::move(e.error())),
 1474|  35.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  35.1k|    {
 1476|  35.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  35.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  35.1k|          m_has_value(false)
  446|  35.1k|    {
  447|  35.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   498k|    {
 1177|   498k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|  1.30M|    {
 1653|  1.30M|        return value();
 1654|  1.30M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  1.43M|    {
 1627|  1.43M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.43M|        return this->get_value();
 1629|  1.43M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.43M|    {
  451|  1.43M|        return m_value;
  452|  1.43M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5828|   463k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   463k|    static_cast<    \
  |  |  929|   463k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   463k|    static_cast<    \
  |  |  929|   463k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   463k|    {
 5830|   463k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5679|  1.43M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.43M|    static_cast<    \
  |  |  929|  1.43M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|  1.43M|    {
 5681|  1.43M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   463k|        : base(std::in_place, std::forward<U>(val)),
 1428|   463k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   463k|    {
 1430|   463k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   463k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   463k|    {
  437|   463k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3314|  2.98M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.98M|    static_cast<    \
  |  |  929|  2.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.98M|    static_cast<    \
  |  |  929|  2.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  2.98M|    {
 3316|  2.98M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   452k|        : m_str(r.str)
 7970|   452k|    {
 7971|   452k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   498k|    {
 1598|   498k|        return has_value();
 1599|   498k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   961k|    {
  485|   961k|        return m_has_value;
  486|   961k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   463k|    {
 1673|   463k|        return &value();
 1674|   463k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   463k|    {
 1627|   463k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   463k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   463k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   463k|        return this->get_value();
 1629|   463k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   463k|    {
  451|   463k|        return m_value;
  452|   463k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  1.43M|    {
 5698|  1.43M|        return ranges::begin(m_range);
 5699|  1.43M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   226k|{
 8934|   226k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   226k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   226k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   226k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   226k|    static_cast<    \
  |  |  929|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   226k|    static_cast<    \
  |  |  929|   226k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   226k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   700k|{
 8672|   700k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   700k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   700k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   700k|{
 8607|   700k|#if !SCN_DISABLE_LOCALE
 8608|   700k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   700k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   700k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   700k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   700k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   700k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48.6k, False: 651k]
  |  |  ------------------
  ------------------
 8615|  48.6k|        return unexpected(result.error());
 8616|  48.6k|    }
 8617|   651k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   651k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   700k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  46.0k|{
 8973|  46.0k|    T value;
 8974|  46.0k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  46.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  46.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  46.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  46.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.70k, False: 43.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.70k|    }                                                  \
  |  |  |  | 3671|  46.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  43.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  43.3k|    static_cast<    \
  |  |  929|  43.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  43.3k|    static_cast<    \
  |  |  929|  43.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  46.0k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   143k|{
 8685|   143k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   143k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   143k|{
 8631|   143k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   143k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   143k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.10k, False: 135k]
  |  |  ------------------
  ------------------
 8635|  8.10k|        return unexpected(result.error());
 8636|  8.10k|    }
 8637|   135k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   143k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|   135k|    {
 1663|   135k|        return std::move(value());
 1664|   135k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   235k|{
 8867|   235k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   235k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   235k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   235k|    static_cast<    \
  |  |  929|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   235k|    static_cast<    \
  |  |  929|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   235k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   471k|    {
 7975|   471k|        return m_str;
 7976|   471k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   471k|{
 8820|   471k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   471k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.4k, False: 439k]
  |  |  ------------------
  ------------------
 8821|  32.4k|        return unexpected(result.error());
 8822|  32.4k|    }
 8823|   439k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   439k|    static_cast<    \
  |  |  929|   439k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   439k|    static_cast<    \
  |  |  929|   439k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   471k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  35.1k|        : base(unexpect, std::move(e.error())),
 1474|  35.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  35.1k|    {
 1476|  35.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  35.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  35.1k|          m_has_value(false)
  446|  35.1k|    {
  447|  35.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   519k|    {
 1177|   519k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5828|   484k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   484k|    static_cast<    \
  |  |  929|   484k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   484k|    static_cast<    \
  |  |  929|   484k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   484k|    {
 5830|   484k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   484k|        : base(std::in_place, std::forward<U>(val)),
 1428|   484k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   484k|    {
 1430|   484k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   484k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   484k|    {
  437|   484k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   471k|        : m_str(r.str)
 7970|   471k|    {
 7971|   471k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   519k|    {
 1598|   519k|        return has_value();
 1599|   519k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.00M|    {
  485|  1.00M|        return m_has_value;
  486|  1.00M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   484k|    {
 1673|   484k|        return &value();
 1674|   484k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   484k|    {
 1627|   484k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   484k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   484k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   484k|        return this->get_value();
 1629|   484k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   484k|    {
  451|   484k|        return m_value;
  452|   484k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   235k|{
 8934|   235k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   235k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   235k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   235k|    static_cast<    \
  |  |  929|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   235k|    static_cast<    \
  |  |  929|   235k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   235k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  48.3k|{
 8973|  48.3k|    T value;
 8974|  48.3k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  48.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  48.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  48.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  48.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  48.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.70k, False: 45.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.70k|    }                                                  \
  |  |  |  | 3671|  48.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  45.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  45.6k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  45.6k|    static_cast<    \
  |  |  929|  45.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  45.6k|    static_cast<    \
  |  |  929|  45.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  48.3k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   238k|{
 8867|   238k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   238k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   238k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   238k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   238k|    static_cast<    \
  |  |  929|   238k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   238k|    static_cast<    \
  |  |  929|   238k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   238k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   476k|    {
 7975|   476k|        return m_str;
 7976|   476k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   476k|{
 8820|   476k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   476k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.4k, False: 443k]
  |  |  ------------------
  ------------------
 8821|  32.4k|        return unexpected(result.error());
 8822|  32.4k|    }
 8823|   443k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   443k|    static_cast<    \
  |  |  929|   443k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   443k|    static_cast<    \
  |  |  929|   443k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   476k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  35.1k|        : base(unexpect, std::move(e.error())),
 1474|  35.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  35.1k|    {
 1476|  35.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  35.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  35.1k|          m_has_value(false)
  446|  35.1k|    {
  447|  35.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   525k|    {
 1177|   525k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5828|   490k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   490k|    static_cast<    \
  |  |  929|   490k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   490k|    static_cast<    \
  |  |  929|   490k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   490k|    {
 5830|   490k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   490k|        : base(std::in_place, std::forward<U>(val)),
 1428|   490k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   490k|    {
 1430|   490k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   490k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   490k|    {
  437|   490k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   476k|        : m_str(r.str)
 7970|   476k|    {
 7971|   476k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   525k|    {
 1598|   525k|        return has_value();
 1599|   525k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.01M|    {
  485|  1.01M|        return m_has_value;
  486|  1.01M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   490k|    {
 1673|   490k|        return &value();
 1674|   490k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   490k|    {
 1627|   490k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   490k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   490k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   490k|        return this->get_value();
 1629|   490k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   490k|    {
  451|   490k|        return m_value;
  452|   490k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   238k|{
 8934|   238k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   238k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   238k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   238k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   238k|    static_cast<    \
  |  |  929|   238k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   238k|    static_cast<    \
  |  |  929|   238k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   238k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  48.8k|{
 8973|  48.8k|    T value;
 8974|  48.8k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  48.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  48.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  48.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  48.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  48.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.70k, False: 46.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.70k|    }                                                  \
  |  |  |  | 3671|  48.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  46.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  46.1k|    static_cast<    \
  |  |  929|  46.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  46.1k|    static_cast<    \
  |  |  929|  46.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  48.8k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   216k|    {
 2724|   216k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   216k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   216k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   216k|    {
 2705|   216k|        return decay_copy(t.begin());
 2706|   216k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  4.31M|{
 1949|  4.31M|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  4.31M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.31M|    {
 2781|  1.31M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.31M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.31M|    {
 2763|  1.31M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.31M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5395|   381k|{
 5396|   381k|    detail::check_scan_arg_types<Args...>();
 5397|   381k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   381k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5347|   381k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   381k|    {
 5349|   381k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   381k|    {
 5360|   381k|        return {detail::make_arg<
 5361|   381k|            kind, Context,
 5362|   381k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   381k|                                 typename Context::char_type>::value>(args)...};
 5364|   381k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   381k|{
 5170|   381k|    return make_value<Context>(value).ref_value;
 5171|   381k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5119|   416k|{
 5120|   416k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   416k|                                  needs_context_tag>) {
 5124|   416k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   416k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4958|   416k|    {                                                                        \
 4959|   416k|        return val;                                                          \
 4960|   416k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   298k|{
 8591|   298k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   298k|    auto result = vscan_impl(buffer, format, args);
 8594|   298k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 97.2k, False: 201k]
  |  |  ------------------
  ------------------
 8595|  97.2k|        return unexpected(result.error());
 8596|  97.2k|    }
 8597|   201k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   298k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|   655k|{
 4720|   655k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   655k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   655k|                  "\n"
 4724|   655k|                  "Unsupported range type given as input to a scanning "
 4725|   655k|                  "function.\n"
 4726|   655k|                  "A range needs to have a character type (value type) "
 4727|   655k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   655k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   655k|                  "to be included.\n"
 4730|   655k|                  "See the scnlib documentation for more details.");
 4731|   655k|    static_assert(
 4732|   655k|        !std::is_same_v<T, custom_char_traits>,
 4733|   655k|        "\n"
 4734|   655k|        "Unsupported range type given as input to a scanning "
 4735|   655k|        "function.\n"
 4736|   655k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   655k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   655k|        "not supported.");
 4739|   655k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   655k|                  "\n"
 4741|   655k|                  "Unsupported range type given as input to a scanning "
 4742|   655k|                  "function.\n"
 4743|   655k|                  "file_marker_found cannot be used as an "
 4744|   655k|                  "source range type to scn::scan.\n"
 4745|   655k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   655k|                  "and do not provide an explicit source range, "
 4747|   655k|                  "or use scn::scan with a FILE* directly.");
 4748|   655k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   655k|                  "\n"
 4750|   655k|                  "Unsupported range type given as input to a scanning "
 4751|   655k|                  "function.\n"
 4752|   655k|                  "In order to be scannable, a range needs to satisfy "
 4753|   655k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   655k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   655k|                  "\n"
 4756|   655k|                  "Unsupported range type given as input to a scanning "
 4757|   655k|                  "function.\n"
 4758|   655k|                  "A range needs to model forward_range and have a valid "
 4759|   655k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   655k|                  "Examples of scannable ranges are std::string, "
 4761|   655k|                  "std::string_view, "
 4762|   655k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   655k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   655k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   655k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4658|   655k|{
 4659|   655k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4660|   655k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|       |    }
 4662|       |    else {
 4663|       |        return invalid_char_type{};
 4664|       |    }
 4665|   655k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   655k|    {
 2855|   655k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   655k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   655k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   655k|    {
 2836|   655k|        return t.data();
 2837|   655k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|   655k|    {
 3231|   655k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 1.58k, False: 653k]
  ------------------
 3232|   655k|                   ? nullptr
 3233|   655k|                   : std::addressof(*ranges::begin(derived()));
 3234|   655k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   655k|    {
 3005|   655k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   655k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   655k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   655k|    {
 2978|   655k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   655k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   655k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  1.21M|    {
 3339|  1.21M|        return m_iterator == m_sentinel;
 3340|  1.21M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  1.30M|    {
 3185|  1.30M|        return static_cast<const D&>(*this);
 3186|  1.30M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.09M|    {
 2724|  1.09M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.09M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.09M|    {
 2705|  1.09M|        return decay_copy(t.begin());
 2706|  1.09M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  22.8M|    {
 3330|  22.8M|        return m_iterator;
 3331|  22.8M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   655k|    {
 2930|   655k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   655k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   655k|    {
 2896|   655k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   655k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   655k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3345|  2.92M|    {
 3346|  2.92M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  2.92M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   210k|        : base(unexpect, std::move(e.error())),
 1474|   210k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   210k|    {
 1476|   210k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   210k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   210k|          m_has_value(false)
  446|   210k|    {
  447|   210k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   655k|    {
 1177|   655k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   444k|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|   444k|                      ranges::iterator_t<SourceRange>>) {
 5925|   444k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|   444k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.24M|    {
 2724|  1.24M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.24M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.24M|    {
 2705|  1.24M|        return decay_copy(t.begin());
 2706|  1.24M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|   444k|{
 5910|   444k|    return ranges::end(source);
 5911|   444k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   444k|    {
 2781|   444k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   444k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   444k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   444k|    {
 2763|   444k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   444k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   444k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  13.1M|    {
 3334|  13.1M|        return m_sentinel;
 3335|  13.1M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   444k|        : base(std::in_place, std::forward<U>(val)),
 1428|   444k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   444k|    {
 1430|   444k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   444k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   444k|    {
  437|   444k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   190k|    {
 7975|   190k|        return m_str;
 7976|   190k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   381k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   381k|    {
 5426|   381k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5378|   381k|    {
 5379|   381k|        return m_argptrs;
 5380|   381k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5476|  1.19M|        : m_desc(desc), m_builtin_values(data)
 5477|  1.19M|    {
 5478|  1.19M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   190k|{
 8820|   190k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.8k, False: 125k]
  |  |  ------------------
  ------------------
 8821|  64.8k|        return unexpected(result.error());
 8822|  64.8k|    }
 8823|   125k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   125k|    static_cast<    \
  |  |  929|   125k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   125k|    static_cast<    \
  |  |  929|   125k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   190k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   655k|    {
 1598|   655k|        return has_value();
 1599|   655k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.31M|    {
  485|  1.31M|        return m_has_value;
  486|  1.31M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   210k|    {
 1604|   210k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   210k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   210k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   210k|        return this->get_unexpected().error();
 1606|   210k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   210k|    {
  468|   210k|        return m_unexpected;
  469|   210k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  70.2k|        : base(unexpect, std::move(e.error())),
 1474|  70.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  70.2k|    {
 1476|  70.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  70.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  70.2k|          m_has_value(false)
  446|  70.2k|    {
  447|  70.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   208k|    {
 1177|   208k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   402k|    {
 1653|   402k|        return value();
 1654|   402k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   444k|    {
 1627|   444k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   444k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   444k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   444k|        return this->get_value();
 1629|   444k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   444k|    {
  451|   444k|        return m_value;
  452|   444k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5828|   138k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   138k|    static_cast<    \
  |  |  929|   138k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   138k|    static_cast<    \
  |  |  929|   138k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   138k|    {
 5830|   138k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5679|   444k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   444k|    static_cast<    \
  |  |  929|   444k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|   444k|    {
 5681|   444k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   138k|        : base(std::in_place, std::forward<U>(val)),
 1428|   138k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   138k|    {
 1430|   138k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   138k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   138k|    {
  437|   138k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5373|   381k|    {
 5374|   381k|        return m_args;
 5375|   381k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3314|  8.17M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  8.17M|    static_cast<    \
  |  |  929|  8.17M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  8.17M|    static_cast<    \
  |  |  929|  8.17M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  8.17M|    {
 3316|  8.17M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|  1.19M|{
 7696|  1.19M|    return s;
 7697|  1.19M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|  1.19M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   190k|        : m_str(r.str)
 7970|   190k|    {
 7971|   190k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   208k|    {
 1598|   208k|        return has_value();
 1599|   208k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   346k|    {
  485|   346k|        return m_has_value;
  486|   346k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   138k|    {
 1673|   138k|        return &value();
 1674|   138k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   138k|    {
 1627|   138k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   138k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   138k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   138k|        return this->get_value();
 1629|   138k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   138k|    {
  451|   138k|        return m_value;
  452|   138k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|   444k|    {
 5698|   444k|        return ranges::begin(m_range);
 5699|   444k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   298k|{
 8607|   298k|#if !SCN_DISABLE_LOCALE
 8608|   298k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   298k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   298k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   298k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   298k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 97.2k, False: 201k]
  |  |  ------------------
  ------------------
 8615|  97.2k|        return unexpected(result.error());
 8616|  97.2k|    }
 8617|   201k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   298k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  35.6k|{
 5155|  35.6k|    check_scan_arg_types<T>();
 5156|       |
 5157|  35.6k|    basic_scan_arg<Context> arg;
 5158|  35.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  35.6k|    arg.m_value = make_value<Context>(value);
 5160|  35.6k|    return arg;
 5161|  35.6k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  1.30M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  57.7k|{
 8631|  57.7k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  57.7k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  57.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.2k, False: 41.5k]
  |  |  ------------------
  ------------------
 8635|  16.2k|        return unexpected(result.error());
 8636|  16.2k|    }
 8637|  41.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  57.7k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  41.5k|    {
 1663|  41.5k|        return std::move(value());
 1664|  41.5k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|   402k|{
 5396|   402k|    detail::check_scan_arg_types<Args...>();
 5397|   402k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   402k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5347|   402k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   402k|    {
 5349|   402k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   402k|    {
 5360|   402k|        return {detail::make_arg<
 5361|   402k|            kind, Context,
 5362|   402k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   402k|                                 typename Context::char_type>::value>(args)...};
 5364|   402k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   402k|{
 5170|   402k|    return make_value<Context>(value).ref_value;
 5171|   402k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|   441k|{
 5120|   441k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   441k|                                  needs_context_tag>) {
 5124|   441k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   441k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   441k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|   441k|    {                                                                        \
 4959|   441k|        return val;                                                          \
 4960|   441k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   201k|    {
 7975|   201k|        return m_str;
 7976|   201k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   402k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   402k|    {
 5426|   402k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|   402k|    {
 5379|   402k|        return m_argptrs;
 5380|   402k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   201k|{
 8820|   201k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.8k, False: 136k]
  |  |  ------------------
  ------------------
 8821|  64.8k|        return unexpected(result.error());
 8822|  64.8k|    }
 8823|   136k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   201k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  70.2k|        : base(unexpect, std::move(e.error())),
 1474|  70.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  70.2k|    {
 1476|  70.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  70.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  70.2k|          m_has_value(false)
  446|  70.2k|    {
  447|  70.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   220k|    {
 1177|   220k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5828|   150k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   150k|    {
 5830|   150k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   150k|        : base(std::in_place, std::forward<U>(val)),
 1428|   150k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   150k|    {
 1430|   150k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   150k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   150k|    {
  437|   150k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|   402k|    {
 5374|   402k|        return m_args;
 5375|   402k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   201k|        : m_str(r.str)
 7970|   201k|    {
 7971|   201k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   220k|    {
 1598|   220k|        return has_value();
 1599|   220k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   371k|    {
  485|   371k|        return m_has_value;
  486|   371k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   150k|    {
 1673|   150k|        return &value();
 1674|   150k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   150k|    {
 1627|   150k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   150k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   150k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   150k|        return this->get_value();
 1629|   150k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   150k|    {
  451|   150k|        return m_value;
  452|   150k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  39.2k|{
 5155|  39.2k|    check_scan_arg_types<T>();
 5156|       |
 5157|  39.2k|    basic_scan_arg<Context> arg;
 5158|  39.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  39.2k|    arg.m_value = make_value<Context>(value);
 5160|  39.2k|    return arg;
 5161|  39.2k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5395|   410k|{
 5396|   410k|    detail::check_scan_arg_types<Args...>();
 5397|   410k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   410k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5347|   410k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   410k|    {
 5349|   410k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   410k|    {
 5360|   410k|        return {detail::make_arg<
 5361|   410k|            kind, Context,
 5362|   410k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   410k|                                 typename Context::char_type>::value>(args)...};
 5364|   410k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   410k|{
 5170|   410k|    return make_value<Context>(value).ref_value;
 5171|   410k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5119|   451k|{
 5120|   451k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   451k|                                  needs_context_tag>) {
 5124|   451k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   451k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   451k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4958|   451k|    {                                                                        \
 4959|   451k|        return val;                                                          \
 4960|   451k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   205k|    {
 7975|   205k|        return m_str;
 7976|   205k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   410k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   410k|    {
 5426|   410k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5378|   410k|    {
 5379|   410k|        return m_argptrs;
 5380|   410k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   205k|{
 8820|   205k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.8k, False: 140k]
  |  |  ------------------
  ------------------
 8821|  64.8k|        return unexpected(result.error());
 8822|  64.8k|    }
 8823|   140k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   205k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  70.2k|        : base(unexpect, std::move(e.error())),
 1474|  70.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  70.2k|    {
 1476|  70.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  70.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  70.2k|          m_has_value(false)
  446|  70.2k|    {
  447|  70.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   225k|    {
 1177|   225k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5828|   155k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   155k|    {
 5830|   155k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   155k|        : base(std::in_place, std::forward<U>(val)),
 1428|   155k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   155k|    {
 1430|   155k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   155k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   155k|    {
  437|   155k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5373|   410k|    {
 5374|   410k|        return m_args;
 5375|   410k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   205k|        : m_str(r.str)
 7970|   205k|    {
 7971|   205k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   225k|    {
 1598|   225k|        return has_value();
 1599|   225k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   381k|    {
  485|   381k|        return m_has_value;
  486|   381k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   155k|    {
 1673|   155k|        return &value();
 1674|   155k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   155k|    {
 1627|   155k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   155k|        return this->get_value();
 1629|   155k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   155k|    {
  451|   155k|        return m_value;
  452|   155k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  40.5k|{
 5155|  40.5k|    check_scan_arg_types<T>();
 5156|       |
 5157|  40.5k|    basic_scan_arg<Context> arg;
 5158|  40.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  40.5k|    arg.m_value = make_value<Context>(value);
 5160|  40.5k|    return arg;
 5161|  40.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   210k|    {
 2724|   210k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   210k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   210k|    {
 2705|   210k|        return decay_copy(t.begin());
 2706|   210k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  12.9M|{
 1949|  12.9M|    return SCN_FWD(t);
  ------------------
  |  |  930|  12.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  12.9M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.30M|    {
 2781|  1.30M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.30M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.30M|    {
 2763|  1.30M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.30M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.30M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   298k|{
 8591|   298k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   298k|    auto result = vscan_impl(buffer, format, args);
 8594|   298k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 97.2k, False: 201k]
  |  |  ------------------
  ------------------
 8595|  97.2k|        return unexpected(result.error());
 8596|  97.2k|    }
 8597|   201k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   298k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   654k|{
 4720|   654k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   654k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   654k|                  "\n"
 4724|   654k|                  "Unsupported range type given as input to a scanning "
 4725|   654k|                  "function.\n"
 4726|   654k|                  "A range needs to have a character type (value type) "
 4727|   654k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   654k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   654k|                  "to be included.\n"
 4730|   654k|                  "See the scnlib documentation for more details.");
 4731|   654k|    static_assert(
 4732|   654k|        !std::is_same_v<T, custom_char_traits>,
 4733|   654k|        "\n"
 4734|   654k|        "Unsupported range type given as input to a scanning "
 4735|   654k|        "function.\n"
 4736|   654k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   654k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   654k|        "not supported.");
 4739|   654k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   654k|                  "\n"
 4741|   654k|                  "Unsupported range type given as input to a scanning "
 4742|   654k|                  "function.\n"
 4743|   654k|                  "file_marker_found cannot be used as an "
 4744|   654k|                  "source range type to scn::scan.\n"
 4745|   654k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   654k|                  "and do not provide an explicit source range, "
 4747|   654k|                  "or use scn::scan with a FILE* directly.");
 4748|   654k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   654k|                  "\n"
 4750|   654k|                  "Unsupported range type given as input to a scanning "
 4751|   654k|                  "function.\n"
 4752|   654k|                  "In order to be scannable, a range needs to satisfy "
 4753|   654k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   654k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   654k|                  "\n"
 4756|   654k|                  "Unsupported range type given as input to a scanning "
 4757|   654k|                  "function.\n"
 4758|   654k|                  "A range needs to model forward_range and have a valid "
 4759|   654k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   654k|                  "Examples of scannable ranges are std::string, "
 4761|   654k|                  "std::string_view, "
 4762|   654k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   654k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   654k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   654k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   654k|{
 4690|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4691|       |        return file_marker_found{};
 4692|       |    }
 4693|       |    else if constexpr (!ranges::forward_range<Range>) {
 4694|       |        if constexpr (ranges::range<Range>) {
 4695|       |            return insufficient_range{};
 4696|       |        }
 4697|       |        else {
 4698|       |            return invalid_input_range{};
 4699|       |        }
 4700|       |    }
 4701|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4702|       |        return invalid_char_type{};
 4703|       |    }
 4704|   654k|    else {
 4705|   654k|        return make_forward_scan_buffer(r);
 4706|   654k|    }
 4707|   654k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   654k|{
 4524|   654k|    return basic_scan_forward_buffer_impl(range);
 4525|   654k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4408|   654k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   654k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4409|   654k|          m_cursor(ranges::begin(*m_range))
 4410|   654k|    {
 4411|   654k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4380|   654k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4381|   654k|    {
 4382|   654k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4149|   654k|        : m_current_view(sv), m_is_contiguous(false)
 4150|   654k|    {
 4151|   654k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   654k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.09M|    {
 2724|  1.09M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.09M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.09M|    {
 2705|  1.09M|        return decay_copy(t.begin());
 2706|  1.09M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|  1.54M|    {
 3330|  1.54M|        return m_iterator;
 3331|  1.54M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  3.25M|    {
 4415|  3.25M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 183k, False: 3.07M]
  ------------------
 4416|   183k|            return false;
 4417|   183k|        }
 4418|  3.07M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4419|  3.07M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  3.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  3.07M|        }
 4421|  3.07M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 2.41M, False: 652k]
  ------------------
 4422|  2.41M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  2.41M|                                          this->m_current_view.begin(),
 4424|  2.41M|                                          this->m_current_view.end());
 4425|  2.41M|        }
 4426|  3.07M|        m_latest = *m_cursor;
 4427|  3.07M|        ++m_cursor;
 4428|  3.07M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  3.07M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4430|  3.07M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  3.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  3.07M|        }
 4432|  3.07M|        return true;
 4433|  3.25M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  9.39M|    {
 2781|  9.39M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  9.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  9.39M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  9.39M|    {
 2763|  9.39M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  9.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  9.39M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|  9.83M|    {
 3334|  9.83M|        return m_sentinel;
 3335|  9.83M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   654k|    {
 4071|   654k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   654k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   654k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   210k|        : base(unexpect, std::move(e.error())),
 1474|   210k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   210k|    {
 1476|   210k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   210k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   210k|          m_has_value(false)
  446|   210k|    {
  447|   210k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   654k|    {
 1177|   654k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   443k|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|   443k|                      ranges::iterator_t<SourceRange>>) {
 5925|   443k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|   443k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   443k|    {
 2724|   443k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   443k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   443k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   443k|    {
 2705|   443k|        return decay_copy(t.begin());
 2706|   443k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|   443k|{
 5910|   443k|    return ranges::end(source);
 5911|   443k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   443k|    {
 2781|   443k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   443k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   443k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   443k|    {
 2763|   443k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   443k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   443k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   443k|        : base(std::in_place, std::forward<U>(val)),
 1428|   443k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   443k|    {
 1430|   443k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   443k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   443k|    {
  437|   443k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   190k|    {
 7975|   190k|        return m_str;
 7976|   190k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   190k|{
 8820|   190k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.8k, False: 125k]
  |  |  ------------------
  ------------------
 8821|  64.8k|        return unexpected(result.error());
 8822|  64.8k|    }
 8823|   125k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   125k|    static_cast<    \
  |  |  929|   125k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   125k|    static_cast<    \
  |  |  929|   125k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   190k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   654k|    {
 1598|   654k|        return has_value();
 1599|   654k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.30M|    {
  485|  1.30M|        return m_has_value;
  486|  1.30M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   210k|    {
 1604|   210k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   210k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   210k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   210k|        return this->get_unexpected().error();
 1606|   210k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   210k|    {
  468|   210k|        return m_unexpected;
  469|   210k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  70.2k|        : base(unexpect, std::move(e.error())),
 1474|  70.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  70.2k|    {
 1476|  70.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  70.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  70.2k|          m_has_value(false)
  446|  70.2k|    {
  447|  70.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   208k|    {
 1177|   208k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   402k|    {
 1653|   402k|        return value();
 1654|   402k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   443k|    {
 1627|   443k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   443k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   443k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   443k|        return this->get_value();
 1629|   443k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   443k|    {
  451|   443k|        return m_value;
  452|   443k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5828|   138k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   138k|    static_cast<    \
  |  |  929|   138k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   138k|    static_cast<    \
  |  |  929|   138k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   138k|    {
 5830|   138k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5679|   443k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   443k|    static_cast<    \
  |  |  929|   443k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|   443k|    {
 5681|   443k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   138k|        : base(std::in_place, std::forward<U>(val)),
 1428|   138k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   138k|    {
 1430|   138k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   138k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   138k|    {
  437|   138k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3314|  1.09M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.09M|    static_cast<    \
  |  |  929|  1.09M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.09M|    static_cast<    \
  |  |  929|  1.09M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  1.09M|    {
 3316|  1.09M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   190k|        : m_str(r.str)
 7970|   190k|    {
 7971|   190k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   208k|    {
 1598|   208k|        return has_value();
 1599|   208k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   346k|    {
  485|   346k|        return m_has_value;
  486|   346k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   138k|    {
 1673|   138k|        return &value();
 1674|   138k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   138k|    {
 1627|   138k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   138k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   138k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   138k|        return this->get_value();
 1629|   138k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   138k|    {
  451|   138k|        return m_value;
  452|   138k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|   443k|    {
 5698|   443k|        return ranges::begin(m_range);
 5699|   443k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   298k|{
 8607|   298k|#if !SCN_DISABLE_LOCALE
 8608|   298k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   298k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   298k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   298k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   298k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 97.2k, False: 201k]
  |  |  ------------------
  ------------------
 8615|  97.2k|        return unexpected(result.error());
 8616|  97.2k|    }
 8617|   201k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   298k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  57.7k|{
 8631|  57.7k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  57.7k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  57.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.2k, False: 41.5k]
  |  |  ------------------
  ------------------
 8635|  16.2k|        return unexpected(result.error());
 8636|  16.2k|    }
 8637|  41.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  57.7k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  41.5k|    {
 1663|  41.5k|        return std::move(value());
 1664|  41.5k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   201k|    {
 7975|   201k|        return m_str;
 7976|   201k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   201k|{
 8820|   201k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.8k, False: 136k]
  |  |  ------------------
  ------------------
 8821|  64.8k|        return unexpected(result.error());
 8822|  64.8k|    }
 8823|   136k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   201k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  70.2k|        : base(unexpect, std::move(e.error())),
 1474|  70.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  70.2k|    {
 1476|  70.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  70.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  70.2k|          m_has_value(false)
  446|  70.2k|    {
  447|  70.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   220k|    {
 1177|   220k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5828|   150k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   150k|    static_cast<    \
  |  |  929|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   150k|    {
 5830|   150k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   150k|        : base(std::in_place, std::forward<U>(val)),
 1428|   150k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   150k|    {
 1430|   150k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   150k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   150k|    {
  437|   150k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   201k|        : m_str(r.str)
 7970|   201k|    {
 7971|   201k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   220k|    {
 1598|   220k|        return has_value();
 1599|   220k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   371k|    {
  485|   371k|        return m_has_value;
  486|   371k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   150k|    {
 1673|   150k|        return &value();
 1674|   150k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   150k|    {
 1627|   150k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   150k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   150k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   150k|        return this->get_value();
 1629|   150k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   150k|    {
  451|   150k|        return m_value;
  452|   150k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   205k|    {
 7975|   205k|        return m_str;
 7976|   205k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   205k|{
 8820|   205k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 64.8k, False: 140k]
  |  |  ------------------
  ------------------
 8821|  64.8k|        return unexpected(result.error());
 8822|  64.8k|    }
 8823|   140k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   205k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  70.2k|        : base(unexpect, std::move(e.error())),
 1474|  70.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  70.2k|    {
 1476|  70.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  70.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  70.2k|          m_has_value(false)
  446|  70.2k|    {
  447|  70.2k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   225k|    {
 1177|   225k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5828|   155k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   155k|    {
 5830|   155k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   155k|        : base(std::in_place, std::forward<U>(val)),
 1428|   155k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   155k|    {
 1430|   155k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   155k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   155k|    {
  437|   155k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   205k|        : m_str(r.str)
 7970|   205k|    {
 7971|   205k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   225k|    {
 1598|   225k|        return has_value();
 1599|   225k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   380k|    {
  485|   380k|        return m_has_value;
  486|   380k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   155k|    {
 1673|   155k|        return &value();
 1674|   155k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   155k|    {
 1627|   155k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   155k|        return this->get_value();
 1629|   155k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   155k|    {
  451|   155k|        return m_value;
  452|   155k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3566|  4.64M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3567|  4.64M|    {
 3568|  4.64M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  4.64M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.64M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  19.4M|    {
 3574|  19.4M|        return m_code == good;
 3575|  19.4M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   486k|    {
 3585|   486k|        return m_code;
 3586|   486k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  70.0M|    {
 3330|  70.0M|        return m_iterator;
 3331|  70.0M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  27.2M|    {
 3330|  27.2M|        return m_iterator;
 3331|  27.2M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  3.02M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|   809k|    {
 6272|   809k|        if constexpr (!SCN_DISABLE_LOCALE) {
 6273|   809k|            m_specs.localized = true;
 6274|       |        }
 6275|       |        else {
 6276|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|       |        }
 6278|   809k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  2.21M|    {
 6303|  2.21M|        m_specs.type = type;
 6304|  2.21M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  3.02M|    {
 6376|  3.02M|        return static_cast<bool>(m_error);
 6377|  3.02M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   486k|{
 3609|   486k|    return a.code() == b;
 3610|   486k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   486k|{
 3613|   486k|    return !(a == b);
 3614|   486k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|   809k|{
 7063|   809k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 809k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 809k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 809k]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 809k]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 809k]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 809k]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 809k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 809k]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 809k]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 809k]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 809k]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 809k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 809k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 809k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 809k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 809k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|   256k|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 256k, False: 552k]
  ------------------
 7091|   530k|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 273k, False: 535k]
  ------------------
 7092|   809k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 279k, False: 530k]
  ------------------
 7093|   809k|            return arg_type_category::floating;
 7094|       |
 7095|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 809k]
  ------------------
 7096|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 809k]
  ------------------
 7097|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 809k]
  ------------------
 7098|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 809k]
  ------------------
 7099|      0|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 809k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 809k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|   809k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|   809k|            SCN_CLANG_POP
 7110|   809k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|   809k|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  3.56M|    {
 2896|  3.56M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  3.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  3.56M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  3.56M|    {
 2930|  3.56M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  3.56M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  3.56M|    {
 2953|  3.56M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  3.56M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  3.56M|    {
 2962|  3.56M|        return fn::impl(std::forward<T>(t));
 2963|  3.56M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3653|  1.00k|{
 3654|  1.00k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.00k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.56k|{
 3654|  2.56k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.56k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3653|  35.8k|{
 3654|  35.8k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  35.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  35.8k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  3.02M|{
 7193|  3.02M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 2.21M, False: 809k]
  ------------------
 7194|  3.02M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 0, False: 2.21M]
  ------------------
 7195|  2.21M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 0, False: 2.21M]
  ------------------
 7196|      0|        SCN_UNLIKELY_ATTR
 7197|      0|        return handler.on_error("Invalid type specifier for float type");
 7198|      0|    }
 7199|  3.02M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|   442M|    {
 4195|   442M|        return m_end == nullptr;
 4196|   442M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  1.19M|{
 3715|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3716|       |                                          const CharT*, const CharT*>) {
 3717|       |        return {first, last};
 3718|       |    }
 3719|  1.19M|    else {
 3720|  1.19M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  1.19M|    }
 3722|  1.19M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  5.83M|    {
 4211|  5.83M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 5.83M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  5.83M|        return parent()->get_segment_starting_at(position());
 4217|  5.83M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|   246M|    {
 4205|   246M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   246M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   246M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   246M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   246M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  5.83M|    {
 4101|  5.83M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  5.83M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.56M, False: 3.27M]
  |  |  ------------------
  ------------------
 4102|  5.83M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  2.56M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  2.56M|        }
 4105|  3.27M|        const auto start = pos - m_putback_buffer.size();
 4106|  3.27M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  3.27M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.27M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  3.27M|        return m_current_view.substr(start);
 4108|  3.27M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4199|  4.06M|    {
 4200|  4.06M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  4.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  4.06M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  4.06M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  10.6M|    {
 4190|  10.6M|        return m_position;
 4191|  10.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|  4.63M|    {
 4123|  4.63M|        return m_is_contiguous;
 4124|  4.63M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|  87.0M|    {
 4195|  87.0M|        return m_end == nullptr;
 4196|  87.0M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   432k|{
 3715|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3716|       |                                          const CharT*, const CharT*>) {
 3717|       |        return {first, last};
 3718|       |    }
 3719|   432k|    else {
 3720|   432k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   432k|    }
 3722|   432k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|  1.54M|    {
 4211|  1.54M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 1.54M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  1.54M|        return parent()->get_segment_starting_at(position());
 4217|  1.54M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  46.6M|    {
 4205|  46.6M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  46.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  46.6M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  46.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|  1.54M|    {
 4101|  1.54M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 878k, False: 670k]
  |  |  ------------------
  ------------------
 4102|  1.54M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   878k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   878k|        }
 4105|   670k|        const auto start = pos - m_putback_buffer.size();
 4106|   670k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   670k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   670k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   670k|        return m_current_view.substr(start);
 4108|   670k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4199|  1.71M|    {
 4200|  1.71M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  1.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  1.71M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  1.71M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  3.41M|    {
 4190|  3.41M|        return m_position;
 4191|  3.41M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  1.96M|    {
 4123|  1.96M|        return m_is_contiguous;
 4124|  1.96M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  12.1M|    {
 3180|  12.1M|        return static_cast<D&>(*this);
 3181|  12.1M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  6.05M|    {
 2978|  6.05M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  6.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  6.05M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  6.05M|    {
 3005|  6.05M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  6.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  6.05M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  6.05M|    {
 3221|  6.05M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 12.1k, False: 6.04M]
  ------------------
 3222|  6.05M|                   ? nullptr
 3223|  6.05M|                   : std::addressof(*ranges::begin(derived()));
 3224|  6.05M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  1.11M|    {
 3180|  1.11M|        return static_cast<D&>(*this);
 3181|  1.11M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   556k|    {
 2978|   556k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   556k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   556k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   556k|    {
 3005|   556k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   556k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   556k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   556k|    {
 3221|   556k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 556k]
  ------------------
 3222|   556k|                   ? nullptr
 3223|   556k|                   : std::addressof(*ranges::begin(derived()));
 3224|   556k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|  1.11M|    {
 8169|  1.11M|        return ranges::subrange{begin(), end()};
 8170|  1.11M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|  3.26M|    {
 8153|  3.26M|        return m_current;
 8154|  3.26M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|  1.11M|    {
 8161|  1.11M|        return ranges::default_sentinel;
 8162|  1.11M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3314|  17.0M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  17.0M|    static_cast<    \
  |  |  929|  17.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  17.0M|    static_cast<    \
  |  |  929|  17.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  17.0M|    {
 3316|  17.0M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  6.42M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.54M|    {
 1837|  1.54M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.54M|                                            std::forward<F>(f));
 1839|  1.54M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.54M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.54M|    else {
 1333|  1.54M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.54M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.54M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.52M, False: 20.9k]
  |  |  ------------------
  ------------------
 1335|  1.54M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.54M|                   : result(unexpect,
 1337|  20.9k|                            trivial_invoke(std::forward<F>(f),
 1338|  20.9k|                                           std::forward<Exp>(exp).error()));
 1339|  1.54M|    }
 1340|  1.54M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  16.3M|    {
  485|  16.3M|        return m_has_value;
  486|  16.3M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  5.54M|    {
 1663|  5.54M|        return std::move(value());
 1664|  5.54M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  6.32M|    {
 1627|  6.32M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.32M|        return this->get_value();
 1629|  6.32M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  6.32M|    {
  451|  6.32M|        return m_value;
  452|  6.32M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  6.86M|        : base(std::in_place, std::forward<U>(val)),
 1428|  6.86M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  6.86M|    {
 1430|  6.86M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  6.86M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  6.86M|    {
  437|  6.86M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.73M|    {
 1177|  8.73M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  45.5k|{
 1211|  45.5k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  45.5k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  58.3k|    {
 1614|  58.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  58.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  58.3k|        return std::move(this->get_unexpected().error());
 1616|  58.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  79.6k|    {
  468|  79.6k|        return m_unexpected;
  469|  79.6k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   445k|    {
  361|   445k|        return m_unexpected;
  362|   445k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.53M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.53M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.53M|    {
 1486|  1.53M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.79M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.79M|          m_has_value(false)
  446|  1.79M|    {
  447|  1.79M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   481k|    {
 8169|   481k|        return ranges::subrange{begin(), end()};
 8170|   481k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|  1.28M|    {
 8153|  1.28M|        return m_current;
 8154|  1.28M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   481k|    {
 8161|   481k|        return ranges::default_sentinel;
 8162|   481k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3314|  6.60M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  6.60M|    static_cast<    \
  |  |  929|  6.60M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  6.60M|    static_cast<    \
  |  |  929|  6.60M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  6.60M|    {
 3316|  6.60M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   654k|    {
 1837|   654k|        return detail::transform_error_impl(std::move(*this),
 1838|   654k|                                            std::forward<F>(f));
 1839|   654k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   654k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   654k|    else {
 1333|   654k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   654k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   654k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 650k, False: 3.65k]
  |  |  ------------------
  ------------------
 1335|   654k|                   ? result(*std::forward<Exp>(exp))
 1336|   654k|                   : result(unexpect,
 1337|  3.65k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.65k|                                           std::forward<Exp>(exp).error()));
 1339|   654k|    }
 1340|   654k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  6.25M|    {
  485|  6.25M|        return m_has_value;
  486|  6.25M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.30M|    {
 1663|  2.30M|        return std::move(value());
 1664|  2.30M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.32M|    {
 1627|  2.32M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.32M|        return this->get_value();
 1629|  2.32M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  2.32M|    {
  451|  2.32M|        return m_value;
  452|  2.32M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  2.30M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.30M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.30M|    {
 1430|  2.30M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.30M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.30M|    {
  437|  2.30M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.74M|    {
 1177|  3.74M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  58.7k|    {
 1614|  58.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  58.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  58.7k|        return std::move(this->get_unexpected().error());
 1616|  58.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  60.7k|    {
  468|  60.7k|        return m_unexpected;
  469|  60.7k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|   854k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   854k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   854k|    {
 1486|   854k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.43M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.43M|          m_has_value(false)
  446|  1.43M|    {
  447|  1.43M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|   187k|        : m_unexpected(std::forward<Err>(e))
  346|   187k|    {
  347|   187k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   187k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   187k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   234k|        : base(unexpect, std::move(e.error())),
 1474|   234k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   234k|    {
 1476|   234k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.53M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.53M|          m_has_value(false)
  446|  1.53M|    {
  447|  1.53M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.59M|    {
 1177|  7.59M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  5.98M|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.98M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.98M|    {
 1430|  5.98M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  5.98M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.98M|    {
  437|  5.98M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  8.90M|    {
 1598|  8.90M|        return has_value();
 1599|  8.90M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  13.9M|    {
  485|  13.9M|        return m_has_value;
  486|  13.9M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   279k|    {
 1604|   279k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   279k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   279k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   279k|        return this->get_unexpected().error();
 1606|   279k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   279k|    {
  468|   279k|        return m_unexpected;
  469|   279k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  3.85M|    {
 1663|  3.85M|        return std::move(value());
 1664|  3.85M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  4.77M|    {
 1627|  4.77M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.77M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.77M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.77M|        return this->get_value();
 1629|  4.77M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  4.77M|    {
  451|  4.77M|        return m_value;
  452|  4.77M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   469k|        : base(unexpect, std::move(e.error())),
 1474|   469k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   469k|    {
 1476|   469k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.21M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.21M|          m_has_value(false)
  446|  1.21M|    {
  447|  1.21M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.74M|    {
 1177|  3.74M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  2.52M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.52M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.52M|    {
 1430|  2.52M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.52M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.52M|    {
  437|  2.52M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  4.39M|    {
 1598|  4.39M|        return has_value();
 1599|  4.39M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  6.93M|    {
  485|  6.93M|        return m_has_value;
  486|  6.93M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   564k|    {
 1604|   564k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   564k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   564k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   564k|        return this->get_unexpected().error();
 1606|   564k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   564k|    {
  468|   564k|        return m_unexpected;
  469|   564k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  1.65M|    {
 1663|  1.65M|        return std::move(value());
 1664|  1.65M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  1.97M|    {
 1627|  1.97M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.97M|        return this->get_value();
 1629|  1.97M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.97M|    {
  451|  1.97M|        return m_value;
  452|  1.97M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.34M|    {
 1837|  1.34M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.34M|                                            std::forward<F>(f));
 1839|  1.34M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.34M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.34M|    else {
 1333|  1.34M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.34M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.34M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.32M, False: 17.2k]
  |  |  ------------------
  ------------------
 1335|  1.34M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.34M|                   : result(unexpect,
 1337|  17.2k|                            trivial_invoke(std::forward<F>(f),
 1338|  17.2k|                                           std::forward<Exp>(exp).error()));
 1339|  1.34M|    }
 1340|  1.34M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  5.09M|    {
  485|  5.09M|        return m_has_value;
  486|  5.09M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.32M|    {
 1663|  1.32M|        return std::move(value());
 1664|  1.32M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.73M|    {
 1627|  1.73M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.73M|        return this->get_value();
 1629|  1.73M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.73M|    {
  451|  1.73M|        return m_value;
  452|  1.73M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  17.2k|    {
 1614|  17.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  17.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  17.2k|        return std::move(this->get_unexpected().error());
 1616|  17.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  22.4k|    {
  468|  22.4k|        return m_unexpected;
  469|  22.4k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.30M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.30M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.30M|    {
 1486|  1.30M|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  13.3M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   265k|        : base(unexpect, std::move(e.error())),
 1474|   265k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   265k|    {
 1476|   265k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  13.6M|    {
 4280|  13.6M|        return x.is_at_end();
 4281|  13.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  33.6M|    {
 4324|  33.6M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 33.6M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  33.6M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 33.6M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  33.6M|        return !read_at_position();
 4331|  33.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|   144M|    {
 4304|   144M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   144M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   144M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   144M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 144M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   144M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   144M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 125M, False: 19.5M]
  |  |  ------------------
  ------------------
 4311|   125M|            return true;
 4312|   125M|        }
 4313|       |
 4314|  38.7M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 19.5M, False: 19.2M]
  ------------------
 4315|  19.5M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 309k, False: 19.2M]
  ------------------
 4316|   309k|                return false;
 4317|   309k|            }
 4318|  19.5M|        }
 4319|  19.2M|        return true;
 4320|  19.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|   187M|    {
 4081|   187M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   187M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  37.4M|    {
 4239|  37.4M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  37.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  37.4M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 37.4M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  37.4M|        auto res = read_at_position();
 4248|  37.4M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  37.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  37.4M|        return parent()->get_character_at(m_position);
 4250|  37.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  37.4M|    {
 4112|  37.4M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  37.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.4M, False: 13.9M]
  |  |  ------------------
  ------------------
 4113|  37.4M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  23.4M|            return m_putback_buffer[pos];
 4115|  23.4M|        }
 4116|  13.9M|        const auto start = pos - m_putback_buffer.size();
 4117|  13.9M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  13.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  13.9M|        return m_current_view[start];
 4119|  13.9M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  9.87M|        : base(std::in_place, std::forward<U>(val)),
 1428|  9.87M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  9.87M|    {
 1430|  9.87M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  9.87M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  9.87M|    {
  437|  9.87M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.95M|    {
 1177|  9.95M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|   148k|        : m_unexpected(std::forward<Err>(e))
  346|   148k|    {
  347|   148k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   148k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   148k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  79.6k|        : base(unexpect, std::move(e.error())),
 1474|  79.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  79.6k|    {
 1476|  79.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  79.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  79.6k|          m_has_value(false)
  446|  79.6k|    {
  447|  79.6k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|   222k|        : m_unexpected(std::forward<Args>(args)...)
  355|   222k|    {
  356|   222k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   222k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   222k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  4.34M|    {
 1598|  4.34M|        return has_value();
 1599|  4.34M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   777k|    {
 1653|   777k|        return value();
 1654|   777k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  35.2M|    {
 4274|  35.2M|        return !(lhs == rhs);
 4275|  35.2M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  39.3M|    {
 4269|  39.3M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 39.3M, False: 0]
  |  Branch (4269:46): [True: 5.13M, False: 34.1M]
  ------------------
 4270|  39.3M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  73.6M|    {
 4225|  73.6M|        ++m_position;
 4226|  73.6M|        (void)read_at_position();
 4227|  73.6M|        return *this;
 4228|  73.6M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  74.5k|        : m_unexpected(std::forward<Err>(e))
  346|  74.5k|    {
  347|  74.5k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  74.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  74.5k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  15.8k|        : base(unexpect, std::move(e.error())),
 1474|  15.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.8k|    {
 1476|  15.8k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  15.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.8k|          m_has_value(false)
  446|  15.8k|    {
  447|  15.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.13M|    {
 1177|  2.13M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  2.11M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.11M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.11M|    {
 1430|  2.11M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|  2.11M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.11M|    {
  437|  2.11M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  2.13M|    {
 1598|  2.13M|        return has_value();
 1599|  2.13M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.26M|    {
  485|  4.26M|        return m_has_value;
  486|  4.26M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  15.8k|    {
 1604|  15.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  15.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  15.8k|        return this->get_unexpected().error();
 1606|  15.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  15.8k|    {
  468|  15.8k|        return m_unexpected;
  469|  15.8k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  2.11M|    {
 1663|  2.11M|        return std::move(value());
 1664|  2.11M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  2.11M|    {
 1627|  2.11M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.11M|        return this->get_value();
 1629|  2.11M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.11M|    {
  451|  2.11M|        return m_value;
  452|  2.11M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  48.0M|    {
 3334|  48.0M|        return m_sentinel;
 3335|  48.0M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|  65.7k|        : m_unexpected(std::forward<Err>(e))
  346|  65.7k|    {
  347|  65.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  65.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  65.7k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  16.6M|    {
  361|  16.6M|        return m_unexpected;
  362|  16.6M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  4.48M|        : m_unexpected(std::forward<Args>(args)...)
  355|  4.48M|    {
  356|  4.48M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.48M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  4.48M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  20.4M|        : m_unexpected(std::forward<Err>(e))
  346|  20.4M|    {
  347|  20.4M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  20.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  20.4M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  20.4M|    {
  361|  20.4M|        return m_unexpected;
  362|  20.4M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  20.4M|        : m_unexpected(std::forward<Args>(args)...)
  355|  20.4M|    {
  356|  20.4M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  20.4M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  20.4M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   147k|{
 1211|   147k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   147k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  4.26M|        : m_unexpected(std::forward<Err>(e))
  346|  4.26M|    {
  347|  4.26M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.26M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  4.26M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  21.3k|    {
 1604|  21.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  21.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  21.3k|        return this->get_unexpected().error();
 1606|  21.3k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  1.56M|        : base(unexpect, std::move(e.error())),
 1474|  1.56M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.56M|    {
 1476|  1.56M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  1.60M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.60M|          m_has_value(false)
  446|  1.60M|    {
  447|  1.60M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  16.9M|    {
 1177|  16.9M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|   785k|        : base(std::in_place, std::forward<U>(val)),
 1428|   785k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   785k|    {
 1430|   785k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|   785k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   785k|    {
  437|   785k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  8.66M|        : base(unexpect, std::move(e.error())),
 1474|  8.66M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  8.66M|    {
 1476|  8.66M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  8.66M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  8.66M|          m_has_value(false)
  446|  8.66M|    {
  447|  8.66M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  18.4M|    {
 1598|  18.4M|        return has_value();
 1599|  18.4M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  32.6M|    {
  485|  32.6M|        return m_has_value;
  486|  32.6M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  4.34M|    {
 1604|  4.34M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.34M|        return this->get_unexpected().error();
 1606|  4.34M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  4.34M|    {
  468|  4.34M|        return m_unexpected;
  469|  4.34M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|  1.66M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.66M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.66M|    {
 1430|  1.66M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  1.66M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.66M|    {
  437|  1.66M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.66M|    {
 1177|  1.66M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|    309|        : base(unexpect, std::move(e.error())),
 1474|    309|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    309|    {
 1476|    309|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|    309|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    309|          m_has_value(false)
  446|    309|    {
  447|    309|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  4.30M|    {
 1653|  4.30M|        return value();
 1654|  4.30M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  8.33M|    {
 1627|  8.33M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  8.33M|        return this->get_value();
 1629|  8.33M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  8.33M|    {
  451|  8.33M|        return m_value;
  452|  8.33M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   138k|    {
 1598|   138k|        return has_value();
 1599|   138k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  3.32M|    {
  485|  3.32M|        return m_has_value;
  486|  3.32M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.52M|    {
 1663|  1.52M|        return std::move(value());
 1664|  1.52M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.66M|    {
 1627|  1.66M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.66M|        return this->get_value();
 1629|  1.66M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  1.66M|    {
  451|  1.66M|        return m_value;
  452|  1.66M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  4.06M|    {
 1837|  4.06M|        return detail::transform_error_impl(std::move(*this),
 1838|  4.06M|                                            std::forward<F>(f));
 1839|  4.06M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  4.06M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  4.06M|    else {
 1333|  4.06M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  4.06M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  4.06M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.02M, False: 37.3k]
  |  |  ------------------
  ------------------
 1335|  4.06M|                   ? result(*std::forward<Exp>(exp))
 1336|  4.06M|                   : result(unexpect,
 1337|  37.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  37.3k|                                           std::forward<Exp>(exp).error()));
 1339|  4.06M|    }
 1340|  4.06M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  5.92M|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.92M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.92M|    {
 1430|  5.92M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  5.92M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.92M|    {
  437|  5.92M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  37.3k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  37.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  37.3k|    {
 1486|  37.3k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  4.02M|    {
 1663|  4.02M|        return std::move(value());
 1664|  4.02M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  1.74M|    {
 3330|  1.74M|        return m_iterator;
 3331|  1.74M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  1.74M|    {
 3334|  1.74M|        return m_sentinel;
 3335|  1.74M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  10.2M|    {
 1598|  10.2M|        return has_value();
 1599|  10.2M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  16.0M|    {
  485|  16.0M|        return m_has_value;
  486|  16.0M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   349k|    {
 1604|   349k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   349k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   349k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   349k|        return this->get_unexpected().error();
 1606|   349k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   349k|    {
  468|   349k|        return m_unexpected;
  469|   349k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  4.40M|    {
 1663|  4.40M|        return std::move(value());
 1664|  4.40M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  5.49M|    {
 1627|  5.49M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.49M|        return this->get_value();
 1629|  5.49M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  5.49M|    {
  451|  5.49M|        return m_value;
  452|  5.49M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.75M|{
  326|  2.75M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.75M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3314|  1.37M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.37M|    static_cast<    \
  |  |  929|  1.37M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.37M|    static_cast<    \
  |  |  929|  1.37M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  1.37M|    {
 3316|  1.37M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  20.0M|    {
 4291|  20.0M|        return !x.is_at_end();
 4292|  20.0M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  22.4k|        : base(unexpect, std::move(e.error())),
 1474|  22.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  22.4k|    {
 1476|  22.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  22.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  22.4k|          m_has_value(false)
  446|  22.4k|    {
  447|  22.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.33M|    {
 1177|  3.33M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  3.31M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.31M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.31M|    {
 1430|  3.31M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  3.31M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.31M|    {
  437|  3.31M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  1.98M|    {
 1598|  1.98M|        return has_value();
 1599|  1.98M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   411k|    {
 1653|   411k|        return value();
 1654|   411k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  12.4k|        : base(unexpect, std::move(e.error())),
 1474|  12.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.4k|    {
 1476|  12.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  12.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  12.4k|          m_has_value(false)
  446|  12.4k|    {
  447|  12.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.80M|    {
 1177|  1.80M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  1.79M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.79M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.79M|    {
 1430|  1.79M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  1.79M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.79M|    {
  437|  1.79M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  1.80M|    {
 1598|  1.80M|        return has_value();
 1599|  1.80M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.61M|    {
  485|  3.61M|        return m_has_value;
  486|  3.61M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  12.4k|    {
 1604|  12.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  12.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  12.4k|        return this->get_unexpected().error();
 1606|  12.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  12.4k|    {
  468|  12.4k|        return m_unexpected;
  469|  12.4k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.79M|    {
 1663|  1.79M|        return std::move(value());
 1664|  1.79M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.79M|    {
 1627|  1.79M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.79M|        return this->get_value();
 1629|  1.79M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.79M|    {
  451|  1.79M|        return m_value;
  452|  1.79M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  5.20k|    {
 1604|  5.20k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.20k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.20k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.20k|        return this->get_unexpected().error();
 1606|  5.20k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  1.35M|        : base(unexpect, std::move(e.error())),
 1474|  1.35M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.35M|    {
 1476|  1.35M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.35M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.35M|          m_has_value(false)
  446|  1.35M|    {
  447|  1.35M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.61M|    {
 1177|  7.61M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|   419k|        : base(std::in_place, std::forward<U>(val)),
 1428|   419k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   419k|    {
 1430|   419k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|   419k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   419k|    {
  437|   419k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  5.26M|        : base(unexpect, std::move(e.error())),
 1474|  5.26M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  5.26M|    {
 1476|  5.26M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  5.26M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  5.26M|          m_has_value(false)
  446|  5.26M|    {
  447|  5.26M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  8.94M|    {
 1598|  8.94M|        return has_value();
 1599|  8.94M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  15.2M|    {
  485|  15.2M|        return m_has_value;
  486|  15.2M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  3.64M|    {
 1604|  3.64M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.64M|        return this->get_unexpected().error();
 1606|  3.64M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  3.64M|    {
  468|  3.64M|        return m_unexpected;
  469|  3.64M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  1.36M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.36M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.36M|    {
 1430|  1.36M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  1.36M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.36M|    {
  437|  1.36M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.36M|    {
 1177|  1.36M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    102|        : base(unexpect, std::move(e.error())),
 1474|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    102|    {
 1476|    102|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|    102|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    102|          m_has_value(false)
  446|    102|    {
  447|    102|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  1.39M|    {
 1653|  1.39M|        return value();
 1654|  1.39M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.39M|    {
 1627|  1.39M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.39M|        return this->get_value();
 1629|  1.39M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.39M|    {
  451|  1.39M|        return m_value;
  452|  1.39M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  32.3k|    {
 1598|  32.3k|        return has_value();
 1599|  32.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  2.72M|    {
  485|  2.72M|        return m_has_value;
  486|  2.72M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.32M|    {
 1663|  1.32M|        return std::move(value());
 1664|  1.32M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.36M|    {
 1627|  1.36M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.36M|        return this->get_value();
 1629|  1.36M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  1.36M|    {
  451|  1.36M|        return m_value;
  452|  1.36M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|   569k|        : base(std::in_place, std::forward<U>(val)),
 1428|   569k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   569k|    {
 1430|   569k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   569k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   569k|    {
  437|   569k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.55M|    {
 2855|  2.55M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.55M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.55M|    {
 2836|  2.55M|        return t.data();
 2837|  2.55M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   962k|        : base(unexpect, std::move(e.error())),
 1474|   962k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   962k|    {
 1476|   962k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   962k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   962k|          m_has_value(false)
  446|   962k|    {
  447|   962k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.6M|    {
 1177|  11.6M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  10.5M|        : base(std::in_place, std::forward<U>(val)),
 1428|  10.5M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  10.5M|    {
 1430|  10.5M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  10.5M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  10.5M|    {
  437|  10.5M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1662|  7.13M|    {
 1663|  7.13M|        return std::move(value());
 1664|  7.13M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  4.38M|{
 1211|  4.38M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  4.38M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  1.52M|    {
 1837|  1.52M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.52M|                                            std::forward<F>(f));
 1839|  1.52M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|  1.52M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.52M|    else {
 1333|  1.52M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.52M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.52M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.52M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.52M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.52M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.52M|    }
 1340|  1.52M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  1.52M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.52M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.52M|    {
 1430|  1.52M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  1.52M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.52M|    {
  437|  1.52M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.52M|    {
 1177|  1.52M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.52M|    {
 1598|  1.52M|        return has_value();
 1599|  1.52M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.04M|    {
  485|  3.04M|        return m_has_value;
  486|  3.04M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.52M|    {
 1663|  1.52M|        return std::move(value());
 1664|  1.52M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.52M|    {
 1627|  1.52M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.52M|        return this->get_value();
 1629|  1.52M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.52M|    {
  451|  1.52M|        return m_value;
  452|  1.52M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.51M|    {
 1823|  1.51M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.51M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|  1.51M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.51M|    else {
 1333|  1.51M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.51M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.51M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.51M]
  |  |  ------------------
  ------------------
 1335|  1.51M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.51M|                   : result(unexpect,
 1337|  1.51M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.51M|                                           std::forward<Exp>(exp).error()));
 1339|  1.51M|    }
 1340|  1.51M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1427|  74.2k|        : base(std::in_place, std::forward<U>(val)),
 1428|  74.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  74.2k|    {
 1430|  74.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  74.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  74.2k|    {
  437|  74.2k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  1.08M|    {
 1653|  1.08M|        return value();
 1654|  1.08M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   349k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   138k|    {
 1673|   138k|        return &value();
 1674|   138k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|  1.09M|    {
 2724|  1.09M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.09M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|  1.09M|    {
 2705|  1.09M|        return decay_copy(t.begin());
 2706|  1.09M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|  1.09M|{
 1949|  1.09M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.09M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   667k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.32M|    {
 1837|  1.32M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.32M|                                            std::forward<F>(f));
 1839|  1.32M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|  1.32M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.32M|    else {
 1333|  1.32M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.32M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.32M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.32M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.32M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.32M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.32M|    }
 1340|  1.32M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.32M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.32M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.32M|    {
 1430|  1.32M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  1.32M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.32M|    {
  437|  1.32M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.32M|    {
 1177|  1.32M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.32M|    {
 1598|  1.32M|        return has_value();
 1599|  1.32M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.65M|    {
  485|  2.65M|        return m_has_value;
  486|  2.65M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.32M|    {
 1663|  1.32M|        return std::move(value());
 1664|  1.32M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.32M|    {
 1627|  1.32M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.32M|        return this->get_value();
 1629|  1.32M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.32M|    {
  451|  1.32M|        return m_value;
  452|  1.32M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  1.28M|    {
 1823|  1.28M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.28M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.28M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.28M|    else {
 1333|  1.28M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.28M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.28M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.28M]
  |  |  ------------------
  ------------------
 1335|  1.28M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.28M|                   : result(unexpect,
 1337|  1.28M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.28M|                                           std::forward<Exp>(exp).error()));
 1339|  1.28M|    }
 1340|  1.28M|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1427|  72.2k|        : base(std::in_place, std::forward<U>(val)),
 1428|  72.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  72.2k|    {
 1430|  72.2k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  72.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  72.2k|    {
  437|  72.2k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3646|  1.28M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.28M|    static_cast<    \
  |  |  929|  1.28M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|  1.28M|    {
 3648|  1.28M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   923k|    {
 1653|   923k|        return value();
 1654|   923k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  32.2k|    {
 1673|  32.2k|        return &value();
 1674|  32.2k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3646|  1.51M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.51M|    static_cast<    \
  |  |  929|  1.51M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|  1.51M|    {
 3648|  1.51M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   577k|        : base(unexpect, std::move(e.error())),
 1474|   577k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   577k|    {
 1476|   577k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  5.44M|    {
 4280|  5.44M|        return x.is_at_end();
 4281|  5.44M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  8.56M|    {
 4324|  8.56M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 8.56M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  8.56M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 8.56M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  8.56M|        return !read_at_position();
 4331|  8.56M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|  27.0M|    {
 4304|  27.0M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  27.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  27.0M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 27.0M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  27.0M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  27.0M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 23.7M, False: 3.25M]
  |  |  ------------------
  ------------------
 4311|  23.7M|            return true;
 4312|  23.7M|        }
 4313|       |
 4314|  6.32M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 3.25M, False: 3.07M]
  ------------------
 4315|  3.25M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 183k, False: 3.07M]
  ------------------
 4316|   183k|                return false;
 4317|   183k|            }
 4318|  3.25M|        }
 4319|  3.07M|        return true;
 4320|  3.25M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|  35.0M|    {
 4081|  35.0M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  35.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  8.45M|    {
 4239|  8.45M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  8.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  8.45M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 8.45M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  8.45M|        auto res = read_at_position();
 4248|  8.45M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  8.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  8.45M|        return parent()->get_character_at(m_position);
 4250|  8.45M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  8.45M|    {
 4112|  8.45M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  8.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.19M, False: 1.26M]
  |  |  ------------------
  ------------------
 4113|  8.45M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  7.19M|            return m_putback_buffer[pos];
 4115|  7.19M|        }
 4116|  1.26M|        const auto start = pos - m_putback_buffer.size();
 4117|  1.26M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  1.26M|        return m_current_view[start];
 4119|  1.26M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  3.02M|{
 3807|       |    if constexpr (sizeof(U) == 1) {
 3808|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|       |    }
 3810|       |    else if constexpr (sizeof(U) == 2) {
 3811|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|       |    }
 3813|  3.02M|    else {
 3814|       |        // utf-32
 3815|  3.02M|        static_assert(sizeof(U) == 4);
 3816|  3.02M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  3.02M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  3.02M|        return 1;
 3818|  3.02M|    }
 3819|  3.02M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  3.80M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.80M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.80M|    {
 1430|  3.80M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  3.80M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.80M|    {
  437|  3.80M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.86M|    {
 1177|  3.86M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  60.7k|        : base(unexpect, std::move(e.error())),
 1474|  60.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  60.7k|    {
 1476|  60.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  60.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  60.7k|          m_has_value(false)
  446|  60.7k|    {
  447|  60.7k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  1.49M|    {
 1598|  1.49M|        return has_value();
 1599|  1.49M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  20.8k|    {
 1653|  20.8k|        return value();
 1654|  20.8k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  4.05M|    {
 4274|  4.05M|        return !(lhs == rhs);
 4275|  4.05M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  5.53M|    {
 4269|  5.53M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 5.53M, False: 0]
  |  Branch (4269:46): [True: 1.78M, False: 3.74M]
  ------------------
 4270|  5.53M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  9.99M|    {
 4225|  9.99M|        ++m_position;
 4226|  9.99M|        (void)read_at_position();
 4227|  9.99M|        return *this;
 4228|  9.99M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  3.02M|{
 4013|       |    if constexpr (sizeof(CharT) == 1) {
 4014|       |        return decode_utf8_code_point_exhaustive(input);
 4015|       |    }
 4016|       |    else if constexpr (sizeof(CharT) == 2) {
 4017|       |        return decode_utf16_code_point_exhaustive(input);
 4018|       |    }
 4019|  3.02M|    else {
 4020|  3.02M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  3.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|  3.02M|        auto cp = static_cast<char32_t>(input.front());
 4022|  3.02M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 225k, False: 2.79M]
  |  |  ------------------
  ------------------
 4023|   225k|            return invalid_code_point;
 4024|   225k|        }
 4025|  2.79M|        return cp;
 4026|  3.02M|    }
 4027|  3.02M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  2.72k|        : base(unexpect, std::move(e.error())),
 1474|  2.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.72k|    {
 1476|  2.72k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  2.72k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.72k|          m_has_value(false)
  446|  2.72k|    {
  447|  2.72k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   799k|    {
 1177|   799k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   796k|        : base(std::in_place, std::forward<U>(val)),
 1428|   796k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   796k|    {
 1430|   796k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   796k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   796k|    {
  437|   796k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   799k|    {
 1598|   799k|        return has_value();
 1599|   799k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.59M|    {
  485|  1.59M|        return m_has_value;
  486|  1.59M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.72k|    {
 1604|  2.72k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.72k|        return this->get_unexpected().error();
 1606|  2.72k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.72k|    {
  468|  2.72k|        return m_unexpected;
  469|  2.72k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   796k|    {
 1663|   796k|        return std::move(value());
 1664|   796k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   796k|    {
 1627|   796k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   796k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   796k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   796k|        return this->get_value();
 1629|   796k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   796k|    {
  451|   796k|        return m_value;
  452|   796k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  14.0M|    {
 3334|  14.0M|        return m_sentinel;
 3335|  14.0M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  1.96k|    {
 1604|  1.96k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.96k|        return this->get_unexpected().error();
 1606|  1.96k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|   708k|        : base(unexpect, std::move(e.error())),
 1474|   708k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   708k|    {
 1476|   708k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|   763k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   763k|          m_has_value(false)
  446|   763k|    {
  447|   763k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.68M|    {
 1177|  6.68M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|  20.8k|        : base(std::in_place, std::forward<U>(val)),
 1428|  20.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  20.8k|    {
 1430|  20.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  20.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  20.8k|    {
  437|  20.8k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  3.78M|        : base(unexpect, std::move(e.error())),
 1474|  3.78M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.78M|    {
 1476|  3.78M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  3.78M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.78M|          m_has_value(false)
  446|  3.78M|    {
  447|  3.78M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  7.33M|    {
 1598|  7.33M|        return has_value();
 1599|  7.33M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  13.0M|    {
  485|  13.0M|        return m_has_value;
  486|  13.0M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  2.21M|    {
 1604|  2.21M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.21M|        return this->get_unexpected().error();
 1606|  2.21M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.21M|    {
  468|  2.21M|        return m_unexpected;
  469|  2.21M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   663k|        : base(std::in_place, std::forward<U>(val)),
 1428|   663k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   663k|    {
 1430|   663k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   663k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   663k|    {
  437|   663k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   663k|    {
 1177|   663k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|     70|        : base(unexpect, std::move(e.error())),
 1474|     70|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     70|    {
 1476|     70|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|     70|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     70|          m_has_value(false)
  446|     70|    {
  447|     70|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   939k|    {
 1653|   939k|        return value();
 1654|   939k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.59M|    {
 1627|  2.59M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.59M|        return this->get_value();
 1629|  2.59M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.59M|    {
  451|  2.59M|        return m_value;
  452|  2.59M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  12.7k|    {
 1598|  12.7k|        return has_value();
 1599|  12.7k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  1.32M|    {
  485|  1.32M|        return m_has_value;
  486|  1.32M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   650k|    {
 1663|   650k|        return std::move(value());
 1664|   650k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   663k|    {
 1627|   663k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   663k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   663k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   663k|        return this->get_value();
 1629|   663k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   663k|    {
  451|   663k|        return m_value;
  452|   663k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.71M|    {
 1837|  1.71M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.71M|                                            std::forward<F>(f));
 1839|  1.71M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.71M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.71M|    else {
 1333|  1.71M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.71M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.71M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.65M, False: 55.1k]
  |  |  ------------------
  ------------------
 1335|  1.71M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.71M|                   : result(unexpect,
 1337|  55.1k|                            trivial_invoke(std::forward<F>(f),
 1338|  55.1k|                                           std::forward<Exp>(exp).error()));
 1339|  1.71M|    }
 1340|  1.71M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  2.12M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.12M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.12M|    {
 1430|  2.12M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.12M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.12M|    {
  437|  2.12M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  55.1k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  55.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  55.1k|    {
 1486|  55.1k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  1.65M|    {
 1663|  1.65M|        return std::move(value());
 1664|  1.65M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|   476k|    {
 3330|   476k|        return m_iterator;
 3331|   476k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|   476k|    {
 3334|   476k|        return m_sentinel;
 3335|   476k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  4.39M|    {
 1598|  4.39M|        return has_value();
 1599|  4.39M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  7.03M|    {
  485|  7.03M|        return m_has_value;
  486|  7.03M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   781k|    {
 1604|   781k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   781k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   781k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   781k|        return this->get_unexpected().error();
 1606|   781k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   781k|    {
  468|   781k|        return m_unexpected;
  469|   781k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.54M|    {
 1663|  1.54M|        return std::move(value());
 1664|  1.54M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.86M|    {
 1627|  1.86M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.86M|        return this->get_value();
 1629|  1.86M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.86M|    {
  451|  1.86M|        return m_value;
  452|  1.86M|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   894k|{
  304|   894k|    return p;
  305|   894k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   894k|{
  326|   894k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   894k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   894k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3314|   447k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   447k|    static_cast<    \
  |  |  929|   447k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   447k|    static_cast<    \
  |  |  929|   447k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|   447k|    {
 3316|   447k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  3.11M|    {
 4291|  3.11M|        return !x.is_at_end();
 4292|  3.11M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  59.4k|        : base(unexpect, std::move(e.error())),
 1474|  59.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  59.4k|    {
 1476|  59.4k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  59.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  59.4k|          m_has_value(false)
  446|  59.4k|    {
  447|  59.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.25M|    {
 1177|  3.25M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  3.19M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.19M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.19M|    {
 1430|  3.19M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  3.19M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.19M|    {
  437|  3.19M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   889k|    {
 1598|   889k|        return has_value();
 1599|   889k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  5.63M|    {
  485|  5.63M|        return m_has_value;
  486|  5.63M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  8.91k|    {
 1653|  8.91k|        return value();
 1654|  8.91k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  2.31M|    {
 1627|  2.31M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.31M|        return this->get_value();
 1629|  2.31M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  2.31M|    {
  451|  2.31M|        return m_value;
  452|  2.31M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.72k|        : base(unexpect, std::move(e.error())),
 1474|  2.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.72k|    {
 1476|  2.72k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  2.72k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.72k|          m_has_value(false)
  446|  2.72k|    {
  447|  2.72k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   800k|    {
 1177|   800k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   797k|        : base(std::in_place, std::forward<U>(val)),
 1428|   797k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   797k|    {
 1430|   797k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   797k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   797k|    {
  437|   797k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   655k|    {
 1837|   655k|        return detail::transform_error_impl(std::move(*this),
 1838|   655k|                                            std::forward<F>(f));
 1839|   655k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   655k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   655k|    else {
 1333|   655k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   655k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   655k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 651k, False: 3.65k]
  |  |  ------------------
  ------------------
 1335|   655k|                   ? result(*std::forward<Exp>(exp))
 1336|   655k|                   : result(unexpect,
 1337|  3.65k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.65k|                                           std::forward<Exp>(exp).error()));
 1339|   655k|    }
 1340|   655k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  2.30M|    {
 1663|  2.30M|        return std::move(value());
 1664|  2.30M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  58.9k|    {
 1614|  58.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  58.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  58.9k|        return std::move(this->get_unexpected().error());
 1616|  58.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  59.4k|    {
  468|  59.4k|        return m_unexpected;
  469|  59.4k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|   745k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   745k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   745k|    {
 1486|   745k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   800k|    {
 1598|   800k|        return has_value();
 1599|   800k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.60M|    {
  485|  1.60M|        return m_has_value;
  486|  1.60M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.72k|    {
 1604|  2.72k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.72k|        return this->get_unexpected().error();
 1606|  2.72k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.72k|    {
  468|  2.72k|        return m_unexpected;
  469|  2.72k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   797k|    {
 1663|   797k|        return std::move(value());
 1664|   797k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   797k|    {
 1627|   797k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   797k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   797k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   797k|        return this->get_value();
 1629|   797k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   797k|    {
  451|   797k|        return m_value;
  452|   797k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    486|    {
 1604|    486|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    486|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    486|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    486|        return this->get_unexpected().error();
 1606|    486|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|   707k|        : base(unexpect, std::move(e.error())),
 1474|   707k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   707k|    {
 1476|   707k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   762k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   762k|          m_has_value(false)
  446|   762k|    {
  447|   762k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.36M|    {
 1177|  5.36M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|  8.91k|        : base(std::in_place, std::forward<U>(val)),
 1428|  8.91k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  8.91k|    {
 1430|  8.91k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  8.91k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  8.91k|    {
  437|  8.91k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.77M|        : base(unexpect, std::move(e.error())),
 1474|  2.77M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.77M|    {
 1476|  2.77M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  2.77M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.77M|          m_has_value(false)
  446|  2.77M|    {
  447|  2.77M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  6.01M|    {
 1598|  6.01M|        return has_value();
 1599|  6.01M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  10.8M|    {
  485|  10.8M|        return m_has_value;
  486|  10.8M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  2.10M|    {
 1604|  2.10M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.10M|        return this->get_unexpected().error();
 1606|  2.10M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.10M|    {
  468|  2.10M|        return m_unexpected;
  469|  2.10M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   655k|        : base(std::in_place, std::forward<U>(val)),
 1428|   655k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   655k|    {
 1430|   655k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   655k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   655k|    {
  437|   655k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   655k|    {
 1177|   655k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|     24|        : base(unexpect, std::move(e.error())),
 1474|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     24|    {
 1476|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|     24|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     24|          m_has_value(false)
  446|     24|    {
  447|     24|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   315k|    {
 1653|   315k|        return value();
 1654|   315k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.97M|    {
 1627|  1.97M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.97M|        return this->get_value();
 1629|  1.97M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.97M|    {
  451|  1.97M|        return m_value;
  452|  1.97M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  4.40k|    {
 1598|  4.40k|        return has_value();
 1599|  4.40k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  1.31M|    {
  485|  1.31M|        return m_has_value;
  486|  1.31M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   651k|    {
 1663|   651k|        return std::move(value());
 1664|   651k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   655k|    {
 1627|   655k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   655k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   655k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   655k|        return this->get_value();
 1629|   655k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   655k|    {
  451|   655k|        return m_value;
  452|   655k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.71M|    {
 1837|  1.71M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.71M|                                            std::forward<F>(f));
 1839|  1.71M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.71M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.71M|    else {
 1333|  1.71M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.71M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.71M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.65M, False: 55.2k]
  |  |  ------------------
  ------------------
 1335|  1.71M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.71M|                   : result(unexpect,
 1337|  55.2k|                            trivial_invoke(std::forward<F>(f),
 1338|  55.2k|                                           std::forward<Exp>(exp).error()));
 1339|  1.71M|    }
 1340|  1.71M|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  1.81M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.81M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.81M|    {
 1430|  1.81M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.81M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.81M|    {
  437|  1.81M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|  55.2k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  55.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  55.2k|    {
 1486|  55.2k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.65M|    {
 1663|  1.65M|        return std::move(value());
 1664|  1.65M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   556k|    {
 2855|   556k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   556k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   556k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   556k|    {
 2836|   556k|        return t.data();
 2837|   556k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   650k|    {
 1837|   650k|        return detail::transform_error_impl(std::move(*this),
 1838|   650k|                                            std::forward<F>(f));
 1839|   650k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|   650k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   650k|    else {
 1333|   650k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   650k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   650k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 650k, False: 0]
  |  |  ------------------
  ------------------
 1335|   650k|                   ? result(*std::forward<Exp>(exp))
 1336|   650k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   650k|    }
 1340|   650k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   650k|        : base(std::in_place, std::forward<U>(val)),
 1428|   650k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   650k|    {
 1430|   650k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   650k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   650k|    {
  437|   650k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   650k|    {
 1177|   650k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   650k|    {
 1598|   650k|        return has_value();
 1599|   650k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.30M|    {
  485|  1.30M|        return m_has_value;
  486|  1.30M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   650k|    {
 1663|   650k|        return std::move(value());
 1664|   650k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   650k|    {
 1627|   650k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   650k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   650k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   650k|        return this->get_value();
 1629|   650k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   650k|    {
  451|   650k|        return m_value;
  452|   650k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|   850k|    {
 1823|   850k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   850k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|   850k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   850k|    else {
 1333|   850k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   850k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   850k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 850k]
  |  |  ------------------
  ------------------
 1335|   850k|                   ? result(*std::forward<Exp>(exp))
 1336|   850k|                   : result(unexpect,
 1337|   850k|                            trivial_invoke(std::forward<F>(f),
 1338|   850k|                                           std::forward<Exp>(exp).error()));
 1339|   850k|    }
 1340|   850k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   319k|    {
 1653|   319k|        return value();
 1654|   319k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   123k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  12.6k|    {
 1673|  12.6k|        return &value();
 1674|  12.6k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   527k|    {
 2724|   527k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   527k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   527k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   527k|    {
 2705|   527k|        return decay_copy(t.begin());
 2706|   527k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   527k|{
 1949|   527k|    return SCN_FWD(t);
  ------------------
  |  |  930|   527k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   527k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   286k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   651k|    {
 1837|   651k|        return detail::transform_error_impl(std::move(*this),
 1838|   651k|                                            std::forward<F>(f));
 1839|   651k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|   651k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   651k|    else {
 1333|   651k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   651k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   651k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 651k, False: 0]
  |  |  ------------------
  ------------------
 1335|   651k|                   ? result(*std::forward<Exp>(exp))
 1336|   651k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   651k|    }
 1340|   651k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   651k|        : base(std::in_place, std::forward<U>(val)),
 1428|   651k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   651k|    {
 1430|   651k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   651k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   651k|    {
  437|   651k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   651k|    {
 1177|   651k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   651k|    {
 1598|   651k|        return has_value();
 1599|   651k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.30M|    {
  485|  1.30M|        return m_has_value;
  486|  1.30M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   651k|    {
 1663|   651k|        return std::move(value());
 1664|   651k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   651k|    {
 1627|   651k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   651k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   651k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   651k|        return this->get_value();
 1629|   651k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   651k|    {
  451|   651k|        return m_value;
  452|   651k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   742k|    {
 1823|   742k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   742k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|   742k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   742k|    else {
 1333|   742k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   742k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   742k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 742k]
  |  |  ------------------
  ------------------
 1335|   742k|                   ? result(*std::forward<Exp>(exp))
 1336|   742k|                   : result(unexpect,
 1337|   742k|                            trivial_invoke(std::forward<F>(f),
 1338|   742k|                                           std::forward<Exp>(exp).error()));
 1339|   742k|    }
 1340|   742k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3646|   742k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   742k|    static_cast<    \
  |  |  929|   742k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|   742k|    {
 3648|   742k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   319k|    {
 1653|   319k|        return value();
 1654|   319k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  4.37k|    {
 1673|  4.37k|        return &value();
 1674|  4.37k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3646|   850k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   850k|    static_cast<    \
  |  |  929|   850k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|   850k|    {
 3648|   850k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1427|   137k|        : base(std::in_place, std::forward<U>(val)),
 1428|   137k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   137k|    {
 1430|   137k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  435|   137k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   137k|    {
  437|   137k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|   148k|{
 3654|   148k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|   148k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.21M|    {
 2855|  1.21M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.21M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.21M|    {
 2836|  1.21M|        return t.data();
 2837|  1.21M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  2.61M|    {
 5466|  2.61M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.61M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  2.61M|        return static_cast<std::size_t>(m_desc &
 5471|  2.61M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  2.61M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  5.22M|    {
 5491|  5.22M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  5.22M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  2.61M|    {
 5434|  2.61M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.61M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  2.61M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  2.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.61M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  2.61M|        const auto t = type(id);
 5446|  2.61M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  2.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.61M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  2.61M|        basic_scan_arg<Context> arg;
 5451|  2.61M|        arg.m_type = t;
 5452|  2.61M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 2.61M, False: 0]
  ------------------
 5453|  2.61M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  2.61M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  2.61M|        return arg;
 5459|  2.61M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  2.61M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  2.61M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  2.61M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  2.61M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  2.61M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  2.61M|    {
 5495|  2.61M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  2.61M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|  4.95M|    {
 5247|  4.95M|        return m_type != detail::arg_type::none_type;
 5248|  4.95M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   394k|{
 8417|   394k|#define SCN_VISIT(Type)                                         \
 8418|   394k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   394k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   394k|    }                                                           \
 8421|   394k|    else {                                                      \
 8422|   394k|        return vis(monostate_val);                              \
 8423|   394k|    }
 8424|       |
 8425|   394k|    monostate monostate_val{};
 8426|       |
 8427|   394k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 394k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 394k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 394k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 394k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 394k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 394k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 394k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 394k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 394k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 394k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 394k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 394k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 394k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 394k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 394k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   127k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 127k, False: 267k]
  ------------------
 8459|   127k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   127k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   127k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   127k|    }                                                           \
  |  | 8421|   127k|    else {                                                      \
  |  | 8422|   127k|        return vis(monostate_val);                              \
  |  | 8423|   127k|    }
  ------------------
 8460|   259k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 132k, False: 262k]
  ------------------
 8461|   259k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   259k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   259k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   259k|    }                                                           \
  |  | 8421|   259k|    else {                                                      \
  |  | 8422|   259k|        return vis(monostate_val);                              \
  |  | 8423|   259k|    }
  ------------------
 8462|   394k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 134k, False: 259k]
  ------------------
 8463|   394k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   394k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   394k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   394k|    }                                                           \
  |  | 8421|   394k|    else {                                                      \
  |  | 8422|   394k|        return vis(monostate_val);                              \
  |  | 8423|   394k|    }
  ------------------
 8464|   394k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 394k]
  ------------------
 8465|   394k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   394k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   394k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   394k|    }                                                           \
  |  | 8421|   394k|    else {                                                      \
  |  | 8422|   394k|        return vis(monostate_val);                              \
  |  | 8423|   394k|    }
  ------------------
 8466|   394k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 394k]
  ------------------
 8467|   394k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   394k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   394k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   394k|    }                                                           \
  |  | 8421|   394k|    else {                                                      \
  |  | 8422|   394k|        return vis(monostate_val);                              \
  |  | 8423|   394k|    }
  ------------------
 8468|   394k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 394k]
  ------------------
 8469|   394k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   394k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   394k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   394k|    }                                                           \
  |  | 8421|   394k|    else {                                                      \
  |  | 8422|   394k|        return vis(monostate_val);                              \
  |  | 8423|   394k|    }
  ------------------
 8470|   394k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 394k]
  ------------------
 8471|   394k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   394k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   394k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   394k|    }                                                           \
  |  | 8421|   394k|    else {                                                      \
  |  | 8422|   394k|        return vis(monostate_val);                              \
  |  | 8423|   394k|    }
  ------------------
 8472|   394k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 394k]
  ------------------
 8473|   394k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   394k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   394k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   394k|    }                                                           \
  |  | 8421|   394k|    else {                                                      \
  |  | 8422|   394k|        return vis(monostate_val);                              \
  |  | 8423|   394k|    }
  ------------------
 8474|   394k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 394k]
  ------------------
 8475|   394k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   394k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   394k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   394k|    }                                                           \
  |  | 8421|   394k|    else {                                                      \
  |  | 8422|   394k|        return vis(monostate_val);                              \
  |  | 8423|   394k|    }
  ------------------
 8476|       |
 8477|   394k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 394k]
  ------------------
 8478|   394k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   394k|            return vis(
 8480|   394k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 394k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 394k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   394k|            SCN_CLANG_POP
 8495|   394k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5543|  2.06M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5544|  2.06M|    {
 5545|  2.06M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8136|  1.11M|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|  1.11M|    static_cast<    \
  |  |  929|  1.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|  1.11M|    {
 8138|  1.11M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8054|  2.06M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  2.06M|    static_cast<    \
  |  |  929|  2.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  2.06M|    static_cast<    \
  |  |  929|  2.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8055|  2.06M|    {
 8056|  2.06M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  1.54M|{
 4344|  1.54M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 1.54M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  1.54M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  1.54M|                            ranges::default_sentinel};
 4350|  1.54M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4175|  1.54M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4176|  1.54M|    {
 4177|  1.54M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  1.54M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  1.54M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   429k|{
 8417|   429k|#define SCN_VISIT(Type)                                         \
 8418|   429k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   429k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   429k|    }                                                           \
 8421|   429k|    else {                                                      \
 8422|   429k|        return vis(monostate_val);                              \
 8423|   429k|    }
 8424|       |
 8425|   429k|    monostate monostate_val{};
 8426|       |
 8427|   429k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 429k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 429k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 429k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 429k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 429k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 429k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 429k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 429k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 429k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 429k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 429k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 429k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 429k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 429k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 429k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   138k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 138k, False: 291k]
  ------------------
 8459|   138k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   138k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   138k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   138k|    }                                                           \
  |  | 8421|   138k|    else {                                                      \
  |  | 8422|   138k|        return vis(monostate_val);                              \
  |  | 8423|   138k|    }
  ------------------
 8460|   283k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 144k, False: 284k]
  ------------------
 8461|   283k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   283k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   283k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   283k|    }                                                           \
  |  | 8421|   283k|    else {                                                      \
  |  | 8422|   283k|        return vis(monostate_val);                              \
  |  | 8423|   283k|    }
  ------------------
 8462|   429k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 146k, False: 283k]
  ------------------
 8463|   429k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   429k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   429k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   429k|    }                                                           \
  |  | 8421|   429k|    else {                                                      \
  |  | 8422|   429k|        return vis(monostate_val);                              \
  |  | 8423|   429k|    }
  ------------------
 8464|   429k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 429k]
  ------------------
 8465|   429k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   429k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   429k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   429k|    }                                                           \
  |  | 8421|   429k|    else {                                                      \
  |  | 8422|   429k|        return vis(monostate_val);                              \
  |  | 8423|   429k|    }
  ------------------
 8466|   429k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 429k]
  ------------------
 8467|   429k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   429k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   429k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   429k|    }                                                           \
  |  | 8421|   429k|    else {                                                      \
  |  | 8422|   429k|        return vis(monostate_val);                              \
  |  | 8423|   429k|    }
  ------------------
 8468|   429k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 429k]
  ------------------
 8469|   429k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   429k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   429k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   429k|    }                                                           \
  |  | 8421|   429k|    else {                                                      \
  |  | 8422|   429k|        return vis(monostate_val);                              \
  |  | 8423|   429k|    }
  ------------------
 8470|   429k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 429k]
  ------------------
 8471|   429k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   429k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   429k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   429k|    }                                                           \
  |  | 8421|   429k|    else {                                                      \
  |  | 8422|   429k|        return vis(monostate_val);                              \
  |  | 8423|   429k|    }
  ------------------
 8472|   429k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 429k]
  ------------------
 8473|   429k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   429k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   429k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   429k|    }                                                           \
  |  | 8421|   429k|    else {                                                      \
  |  | 8422|   429k|        return vis(monostate_val);                              \
  |  | 8423|   429k|    }
  ------------------
 8474|   429k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 429k]
  ------------------
 8475|   429k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   429k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   429k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   429k|    }                                                           \
  |  | 8421|   429k|    else {                                                      \
  |  | 8422|   429k|        return vis(monostate_val);                              \
  |  | 8423|   429k|    }
  ------------------
 8476|       |
 8477|   429k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 429k]
  ------------------
 8478|   429k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   429k|            return vis(
 8480|   429k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 429k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 429k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   429k|            SCN_CLANG_POP
 8495|   429k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   950k|{
 7044|   950k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   950k|    handler.check_args_exhausted();
 7046|   950k|    return handler.get_error();
 7047|   950k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   950k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   950k|    auto begin = format.data();
 7013|   950k|    auto it = begin;
 7014|   950k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.81M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 950k, False: 869k]
  ------------------
 7017|   950k|        const auto ch = *it++;
 7018|   950k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 950k, False: 0]
  ------------------
 7019|   950k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   950k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   950k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 81.0k, False: 869k]
  ------------------
 7023|  81.0k|                return;
 7024|  81.0k|            }
 7025|   950k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   950k|    }
 7036|       |
 7037|   869k|    handler.on_literal_text(begin, end);
 7038|   869k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   950k|{
 6942|   950k|    struct id_adapter {
 6943|   950k|        constexpr void operator()()
 6944|   950k|        {
 6945|   950k|            arg_id = handler.on_arg_id();
 6946|   950k|        }
 6947|   950k|        constexpr void operator()(std::size_t id)
 6948|   950k|        {
 6949|   950k|            arg_id = handler.on_arg_id(id);
 6950|   950k|        }
 6951|       |
 6952|   950k|        constexpr void on_error(const char* msg)
 6953|   950k|        {
 6954|   950k|            SCN_UNLIKELY_ATTR
 6955|   950k|            handler.on_error(msg);
 6956|   950k|        }
 6957|       |
 6958|   950k|        Handler& handler;
 6959|   950k|        std::size_t arg_id;
 6960|   950k|    };
 6961|       |
 6962|   950k|    ++begin;
 6963|   950k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   950k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 950k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   950k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 950k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   950k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 950k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   950k|    else {
 6975|   950k|        auto adapter = id_adapter{handler, 0};
 6976|   950k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   950k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   950k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 950k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   950k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 950k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   950k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 950k, False: 0]
  ------------------
 6987|   950k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   950k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 950k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   950k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   950k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 950k]
  |  |  |  Branch (859:45): [True: 0, False: 950k]
  |  |  |  Branch (859:45): [True: 0, False: 950k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   950k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   950k|    }
 7003|   950k|    return begin + 1;
 7004|   950k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  2.06M|    {
 8039|  2.06M|        return m_args.get(id);
 8040|  2.06M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  2.06M|    {
 8049|  2.06M|        return m_locale;
 8050|  2.06M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  2.06M|    {
 5566|  2.06M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  2.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.06M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  2.06M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  2.06M|        do_check_arg_id(id);
 5574|  2.06M|        return id;
 5575|  2.06M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  2.06M|{
 6054|  2.06M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  2.06M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  2.06M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   950k|{
 6443|   950k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   950k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   950k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   950k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 950k, False: 0]
  |  Branch (6444:26): [True: 0, False: 950k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   950k|    handler();
 6449|   950k|    return begin;
 6450|   950k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   950k|        {
 6945|   950k|            arg_id = handler.on_arg_id();
 6946|   950k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|  4.12M|    {
 5252|  4.12M|        return m_type;
 5253|  4.12M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  2.06M|    {
 5561|  2.06M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  2.06M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|  4.12M|    {
 5550|  4.12M|        return m_format.data();
 5551|  4.12M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7120|   950k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   950k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|   950k|    {
 7122|   950k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   950k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   950k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   950k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|   950k|{
 6858|   950k|    auto do_presentation = [&]() -> const CharT* {
 6859|   950k|        if (*begin == CharT{'['}) {
 6860|   950k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   950k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   950k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   950k|                return begin;
 6866|   950k|            }
 6867|   950k|            handler.on_character_set_string(set);
 6868|   950k|            return begin;
 6869|   950k|        }
 6870|   950k|        if (*begin == CharT{'/'}) {
 6871|   950k|            return parse_presentation_regex(begin, end, handler);
 6872|   950k|        }
 6873|   950k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   950k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   950k|            handler.on_error("Invalid type specifier in format string");
 6876|   950k|            return begin;
 6877|   950k|        }
 6878|   950k|        handler.on_type(type);
 6879|   950k|        return begin;
 6880|   950k|    };
 6881|       |
 6882|   950k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 950k, False: 0]
  |  Branch (6882:28): [True: 950k, False: 0]
  ------------------
 6883|   950k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 950k, False: 0]
  |  Branch (6883:36): [True: 687k, False: 263k]
  ------------------
 6884|   687k|        return do_presentation();
 6885|   687k|    }
 6886|       |
 6887|   263k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   263k|    begin = parse_align(begin, end, handler);
 6893|   263k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   263k|    begin = parse_width(begin, end, handler);
 6899|   263k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   263k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 263k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   263k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 263k, False: 0]
  ------------------
 6918|   263k|        handler.on_localized();
 6919|   263k|        ++begin;
 6920|   263k|    }
 6921|   263k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   263k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 263k, False: 0]
  |  Branch (6926:25): [True: 0, False: 263k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   263k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   263k|    return begin;
 6935|   263k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  2.06M|{
 6507|  2.06M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 1.48M, False: 578k]
  |  Branch (6507:33): [True: 1.48M, False: 0]
  ------------------
 6508|  2.06M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 578k, False: 0]
  |  Branch (6508:33): [True: 578k, False: 0]
  ------------------
 6509|  2.06M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   687k|    auto do_presentation = [&]() -> const CharT* {
 6859|   687k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 687k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   687k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 687k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   687k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   687k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   687k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 687k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   687k|        handler.on_type(type);
 6879|   687k|        return begin;
 6880|   687k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  1.48M|{
 6455|  1.48M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 1.48M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 1.48M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 1.48M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 1.48M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 1.48M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 1.48M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.48M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 1.48M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 1.48M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 1.48M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   625k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 625k, False: 860k]
  ------------------
 6474|   625k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 1.48M]
  ------------------
 6475|   625k|            return presentation_type::float_hex;
 6476|  49.6k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 49.6k, False: 1.43M]
  ------------------
 6477|  49.6k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 1.48M]
  ------------------
 6478|  49.6k|            return presentation_type::float_scientific;
 6479|   314k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 314k, False: 1.17M]
  ------------------
 6480|   314k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 1.48M]
  ------------------
 6481|   314k|            return presentation_type::float_fixed;
 6482|   496k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 496k, False: 989k]
  ------------------
 6483|   496k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 1.48M]
  ------------------
 6484|   496k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 1.48M]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 1.48M]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 1.48M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 1.48M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 1.48M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 1.48M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 1.48M]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|  1.48M|    }
 6502|  1.48M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   263k|{
 6532|   263k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   263k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   263k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   263k|    auto check_align = [](wchar_t ch) {
 6535|   263k|        switch (ch) {
 6536|   263k|            case L'<':
 6537|   263k|                return align_type::left;
 6538|   263k|            case L'>':
 6539|   263k|                return align_type::right;
 6540|   263k|            case L'^':
 6541|   263k|                return align_type::center;
 6542|   263k|            default:
 6543|   263k|                return align_type::none;
 6544|   263k|        }
 6545|   263k|    };
 6546|       |
 6547|   263k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   263k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   526k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 263k]
  |  |  |  Branch (859:45): [True: 0, False: 263k]
  |  |  |  Branch (859:45): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
 6549|   263k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   263k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   263k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   263k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   263k|    const auto begin_before_fill = begin;
 6559|   263k|    begin += potential_fill_len;
 6560|       |
 6561|   263k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 263k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   263k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   263k|    const auto begin_after_fill = begin;
 6567|   263k|    ++begin;
 6568|       |
 6569|   263k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 263k, False: 0]
  ------------------
 6570|   263k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   263k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 263k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   263k|    }
 6578|       |
 6579|   263k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 263k, False: 0]
  ------------------
 6580|   263k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 263k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   263k|        return begin_before_fill;
 6585|   263k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   263k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|   578k|{
 6514|   578k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   578k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   578k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|       |    if constexpr (sizeof(CharT) != 1) {
 6516|       |        return 1;
 6517|       |    }
 6518|   578k|    else {
 6519|   578k|        const auto lengths =
 6520|   578k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   578k|            "\3\4";
 6522|   578k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   578k|        return len;
 6524|   578k|    }
 6525|   578k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   526k|    auto check_align = [](wchar_t ch) {
 6535|   526k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 526k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 526k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 526k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   526k|            default:
  ------------------
  |  Branch (6542:13): [True: 526k, False: 0]
  ------------------
 6543|   526k|                return align_type::none;
 6544|   526k|        }
 6545|   526k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   263k|{
 6597|   263k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   263k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   263k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   263k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 263k, False: 0]
  |  Branch (6599:33): [True: 0, False: 263k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   263k|    return begin;
 6610|   263k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|   263k|    {
 7127|   263k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   263k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 263k, False: 0]
  ------------------
 7129|   263k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 263k, False: 0]
  ------------------
 7130|   263k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 263k]
  ------------------
 7131|   263k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   263k|        Handler::on_localized();
 7139|   263k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   950k|{
 8417|   950k|#define SCN_VISIT(Type)                                         \
 8418|   950k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   950k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   950k|    }                                                           \
 8421|   950k|    else {                                                      \
 8422|   950k|        return vis(monostate_val);                              \
 8423|   950k|    }
 8424|       |
 8425|   950k|    monostate monostate_val{};
 8426|       |
 8427|   950k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 950k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 950k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 950k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 950k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 950k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 950k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 950k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 950k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 950k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 950k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 950k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 950k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 950k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 950k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 950k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   309k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 309k, False: 641k]
  ------------------
 8459|   309k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   309k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   309k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   309k|    }                                                           \
  |  | 8421|   309k|    else {                                                      \
  |  | 8422|   309k|        return vis(monostate_val);                              \
  |  | 8423|   309k|    }
  ------------------
 8460|   628k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 319k, False: 631k]
  ------------------
 8461|   628k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   628k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   628k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   628k|    }                                                           \
  |  | 8421|   628k|    else {                                                      \
  |  | 8422|   628k|        return vis(monostate_val);                              \
  |  | 8423|   628k|    }
  ------------------
 8462|   950k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 322k, False: 628k]
  ------------------
 8463|   950k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   950k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   950k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   950k|    }                                                           \
  |  | 8421|   950k|    else {                                                      \
  |  | 8422|   950k|        return vis(monostate_val);                              \
  |  | 8423|   950k|    }
  ------------------
 8464|   950k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 950k]
  ------------------
 8465|   950k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   950k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   950k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   950k|    }                                                           \
  |  | 8421|   950k|    else {                                                      \
  |  | 8422|   950k|        return vis(monostate_val);                              \
  |  | 8423|   950k|    }
  ------------------
 8466|   950k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 950k]
  ------------------
 8467|   950k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   950k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   950k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   950k|    }                                                           \
  |  | 8421|   950k|    else {                                                      \
  |  | 8422|   950k|        return vis(monostate_val);                              \
  |  | 8423|   950k|    }
  ------------------
 8468|   950k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 950k]
  ------------------
 8469|   950k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   950k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   950k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   950k|    }                                                           \
  |  | 8421|   950k|    else {                                                      \
  |  | 8422|   950k|        return vis(monostate_val);                              \
  |  | 8423|   950k|    }
  ------------------
 8470|   950k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 950k]
  ------------------
 8471|   950k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   950k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   950k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   950k|    }                                                           \
  |  | 8421|   950k|    else {                                                      \
  |  | 8422|   950k|        return vis(monostate_val);                              \
  |  | 8423|   950k|    }
  ------------------
 8472|   950k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 950k]
  ------------------
 8473|   950k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   950k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   950k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   950k|    }                                                           \
  |  | 8421|   950k|    else {                                                      \
  |  | 8422|   950k|        return vis(monostate_val);                              \
  |  | 8423|   950k|    }
  ------------------
 8474|   950k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 950k]
  ------------------
 8475|   950k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   950k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   950k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   950k|    }                                                           \
  |  | 8421|   950k|    else {                                                      \
  |  | 8422|   950k|        return vis(monostate_val);                              \
  |  | 8423|   950k|    }
  ------------------
 8476|       |
 8477|   950k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 950k]
  ------------------
 8478|   950k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   950k|            return vis(
 8480|   950k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 950k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 950k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   950k|            SCN_CLANG_POP
 8495|   950k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  1.11M|{
 7044|  1.11M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  1.11M|    handler.check_args_exhausted();
 7046|  1.11M|    return handler.get_error();
 7047|  1.11M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  1.11M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  1.11M|    auto begin = format.data();
 7013|  1.11M|    auto it = begin;
 7014|  1.11M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  2.14M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 1.11M, False: 1.03M]
  ------------------
 7017|  1.11M|        const auto ch = *it++;
 7018|  1.11M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 1.11M, False: 0]
  ------------------
 7019|  1.11M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  1.11M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  1.11M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 81.0k, False: 1.03M]
  ------------------
 7023|  81.0k|                return;
 7024|  81.0k|            }
 7025|  1.11M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  1.11M|    }
 7036|       |
 7037|  1.03M|    handler.on_literal_text(begin, end);
 7038|  1.03M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|  1.03M|    {
 8175|  1.03M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.03M|    static_cast<    \
  |  |  929|  1.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  1.03M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|  1.11M|{
 6942|  1.11M|    struct id_adapter {
 6943|  1.11M|        constexpr void operator()()
 6944|  1.11M|        {
 6945|  1.11M|            arg_id = handler.on_arg_id();
 6946|  1.11M|        }
 6947|  1.11M|        constexpr void operator()(std::size_t id)
 6948|  1.11M|        {
 6949|  1.11M|            arg_id = handler.on_arg_id(id);
 6950|  1.11M|        }
 6951|       |
 6952|  1.11M|        constexpr void on_error(const char* msg)
 6953|  1.11M|        {
 6954|  1.11M|            SCN_UNLIKELY_ATTR
 6955|  1.11M|            handler.on_error(msg);
 6956|  1.11M|        }
 6957|       |
 6958|  1.11M|        Handler& handler;
 6959|  1.11M|        std::size_t arg_id;
 6960|  1.11M|    };
 6961|       |
 6962|  1.11M|    ++begin;
 6963|  1.11M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  1.11M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 1.11M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  1.11M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 1.11M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  1.11M|    else {
 6975|  1.11M|        auto adapter = id_adapter{handler, 0};
 6976|  1.11M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  1.11M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  1.11M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 1.11M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  1.11M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 1.11M, False: 0]
  ------------------
 6987|  1.11M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  1.11M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  1.11M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  2.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  |  Branch (859:45): [True: 0, False: 1.11M]
  |  |  |  Branch (859:45): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|  1.11M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  1.11M|    }
 7003|  1.11M|    return begin + 1;
 7004|  1.11M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  1.11M|{
 6443|  1.11M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  1.11M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 1.11M, False: 0]
  |  Branch (6444:26): [True: 0, False: 1.11M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  1.11M|    handler();
 6449|  1.11M|    return begin;
 6450|  1.11M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  1.11M|        {
 6945|  1.11M|            arg_id = handler.on_arg_id();
 6946|  1.11M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7120|  1.11M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|  1.11M|    {
 7122|  1.11M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  1.11M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|  1.11M|{
 6858|  1.11M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.11M|        if (*begin == CharT{'['}) {
 6860|  1.11M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  1.11M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  1.11M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  1.11M|                return begin;
 6866|  1.11M|            }
 6867|  1.11M|            handler.on_character_set_string(set);
 6868|  1.11M|            return begin;
 6869|  1.11M|        }
 6870|  1.11M|        if (*begin == CharT{'/'}) {
 6871|  1.11M|            return parse_presentation_regex(begin, end, handler);
 6872|  1.11M|        }
 6873|  1.11M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.11M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  1.11M|            handler.on_error("Invalid type specifier in format string");
 6876|  1.11M|            return begin;
 6877|  1.11M|        }
 6878|  1.11M|        handler.on_type(type);
 6879|  1.11M|        return begin;
 6880|  1.11M|    };
 6881|       |
 6882|  1.11M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 1.11M, False: 0]
  |  Branch (6882:28): [True: 1.11M, False: 0]
  ------------------
 6883|  1.11M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 1.11M, False: 0]
  |  Branch (6883:36): [True: 798k, False: 314k]
  ------------------
 6884|   798k|        return do_presentation();
 6885|   798k|    }
 6886|       |
 6887|   314k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   314k|    begin = parse_align(begin, end, handler);
 6893|   314k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   314k|    begin = parse_width(begin, end, handler);
 6899|   314k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   314k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 314k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   314k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 314k, False: 0]
  ------------------
 6918|   314k|        handler.on_localized();
 6919|   314k|        ++begin;
 6920|   314k|    }
 6921|   314k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   314k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 314k, False: 0]
  |  Branch (6926:25): [True: 0, False: 314k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   314k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   314k|    return begin;
 6935|   314k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   798k|    auto do_presentation = [&]() -> const CharT* {
 6859|   798k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 798k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   798k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 798k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   798k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   798k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   798k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 798k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   798k|        handler.on_type(type);
 6879|   798k|        return begin;
 6880|   798k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|   314k|{
 6532|   314k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   314k|    auto check_align = [](wchar_t ch) {
 6535|   314k|        switch (ch) {
 6536|   314k|            case L'<':
 6537|   314k|                return align_type::left;
 6538|   314k|            case L'>':
 6539|   314k|                return align_type::right;
 6540|   314k|            case L'^':
 6541|   314k|                return align_type::center;
 6542|   314k|            default:
 6543|   314k|                return align_type::none;
 6544|   314k|        }
 6545|   314k|    };
 6546|       |
 6547|   314k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   314k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  |  Branch (859:45): [True: 0, False: 314k]
  |  |  |  Branch (859:45): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 6549|   314k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   314k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   314k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   314k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   314k|    const auto begin_before_fill = begin;
 6559|   314k|    begin += potential_fill_len;
 6560|       |
 6561|   314k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 314k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   314k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   314k|    const auto begin_after_fill = begin;
 6567|   314k|    ++begin;
 6568|       |
 6569|   314k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 314k, False: 0]
  ------------------
 6570|   314k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   314k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 314k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   314k|    }
 6578|       |
 6579|   314k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 314k, False: 0]
  ------------------
 6580|   314k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 314k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   314k|        return begin_before_fill;
 6585|   314k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   314k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   629k|    auto check_align = [](wchar_t ch) {
 6535|   629k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 629k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 629k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 629k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   629k|            default:
  ------------------
  |  Branch (6542:13): [True: 629k, False: 0]
  ------------------
 6543|   629k|                return align_type::none;
 6544|   629k|        }
 6545|   629k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|   314k|{
 6597|   314k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   314k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 314k, False: 0]
  |  Branch (6599:33): [True: 0, False: 314k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   314k|    return begin;
 6610|   314k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|   314k|    {
 7127|   314k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   314k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 314k, False: 0]
  ------------------
 7129|   314k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 314k, False: 0]
  ------------------
 7130|   314k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 314k]
  ------------------
 7131|   314k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   314k|        Handler::on_localized();
 7139|   314k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  1.11M|{
 8417|  1.11M|#define SCN_VISIT(Type)                                         \
 8418|  1.11M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  1.11M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  1.11M|    }                                                           \
 8421|  1.11M|    else {                                                      \
 8422|  1.11M|        return vis(monostate_val);                              \
 8423|  1.11M|    }
 8424|       |
 8425|  1.11M|    monostate monostate_val{};
 8426|       |
 8427|  1.11M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.11M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.11M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.11M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.11M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.11M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.11M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.11M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.11M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.11M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.11M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.11M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.11M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.11M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.11M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.11M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   360k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 360k, False: 753k]
  ------------------
 8459|   360k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   360k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   360k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   360k|    }                                                           \
  |  | 8421|   360k|    else {                                                      \
  |  | 8422|   360k|        return vis(monostate_val);                              \
  |  | 8423|   360k|    }
  ------------------
 8460|   735k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 375k, False: 738k]
  ------------------
 8461|   735k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   735k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   735k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   735k|    }                                                           \
  |  | 8421|   735k|    else {                                                      \
  |  | 8422|   735k|        return vis(monostate_val);                              \
  |  | 8423|   735k|    }
  ------------------
 8462|  1.11M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 378k, False: 735k]
  ------------------
 8463|  1.11M|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  1.11M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.11M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.11M|    }                                                           \
  |  | 8421|  1.11M|    else {                                                      \
  |  | 8422|  1.11M|        return vis(monostate_val);                              \
  |  | 8423|  1.11M|    }
  ------------------
 8464|  1.11M|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.11M]
  ------------------
 8465|  1.11M|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  1.11M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.11M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.11M|    }                                                           \
  |  | 8421|  1.11M|    else {                                                      \
  |  | 8422|  1.11M|        return vis(monostate_val);                              \
  |  | 8423|  1.11M|    }
  ------------------
 8466|  1.11M|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.11M]
  ------------------
 8467|  1.11M|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  1.11M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.11M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.11M|    }                                                           \
  |  | 8421|  1.11M|    else {                                                      \
  |  | 8422|  1.11M|        return vis(monostate_val);                              \
  |  | 8423|  1.11M|    }
  ------------------
 8468|  1.11M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.11M]
  ------------------
 8469|  1.11M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  1.11M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.11M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.11M|    }                                                           \
  |  | 8421|  1.11M|    else {                                                      \
  |  | 8422|  1.11M|        return vis(monostate_val);                              \
  |  | 8423|  1.11M|    }
  ------------------
 8470|  1.11M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.11M]
  ------------------
 8471|  1.11M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  1.11M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.11M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.11M|    }                                                           \
  |  | 8421|  1.11M|    else {                                                      \
  |  | 8422|  1.11M|        return vis(monostate_val);                              \
  |  | 8423|  1.11M|    }
  ------------------
 8472|  1.11M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.11M]
  ------------------
 8473|  1.11M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|  1.11M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.11M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.11M|    }                                                           \
  |  | 8421|  1.11M|    else {                                                      \
  |  | 8422|  1.11M|        return vis(monostate_val);                              \
  |  | 8423|  1.11M|    }
  ------------------
 8474|  1.11M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.11M]
  ------------------
 8475|  1.11M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|  1.11M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.11M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.11M|    }                                                           \
  |  | 8421|  1.11M|    else {                                                      \
  |  | 8422|  1.11M|        return vis(monostate_val);                              \
  |  | 8423|  1.11M|    }
  ------------------
 8476|       |
 8477|  1.11M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 1.11M]
  ------------------
 8478|  1.11M|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|  1.11M|            return vis(
 8480|  1.11M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 1.11M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 1.11M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  1.11M|            SCN_CLANG_POP
 8495|  1.11M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|   105k|    {
 4076|   105k|        sync(0);
 4077|   105k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|  1.19M|    {
 5466|  1.19M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.19M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  1.19M|        return static_cast<std::size_t>(m_desc &
 5471|  1.19M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  1.19M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  2.38M|    {
 5491|  2.38M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  2.38M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  1.19M|    {
 5434|  1.19M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.19M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  1.19M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.19M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  1.19M|        const auto t = type(id);
 5446|  1.19M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.19M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  1.19M|        basic_scan_arg<Context> arg;
 5451|  1.19M|        arg.m_type = t;
 5452|  1.19M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 1.19M, False: 0]
  ------------------
 5453|  1.19M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  1.19M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  1.19M|        return arg;
 5459|  1.19M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  1.19M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  1.19M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  1.19M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  1.19M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  1.19M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  1.19M|    {
 5495|  1.19M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  1.19M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  2.27M|    {
 5247|  2.27M|        return m_type != detail::arg_type::none_type;
 5248|  2.27M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   173k|{
 8417|   173k|#define SCN_VISIT(Type)                                         \
 8418|   173k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   173k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   173k|    }                                                           \
 8421|   173k|    else {                                                      \
 8422|   173k|        return vis(monostate_val);                              \
 8423|   173k|    }
 8424|       |
 8425|   173k|    monostate monostate_val{};
 8426|       |
 8427|   173k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 173k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 173k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 173k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 173k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 173k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 173k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 173k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 173k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 173k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 173k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 173k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 173k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 173k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 173k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 173k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  53.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 53.5k, False: 119k]
  ------------------
 8459|  53.5k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  53.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  53.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  53.5k|    }                                                           \
  |  | 8421|  53.5k|    else {                                                      \
  |  | 8422|  53.5k|        return vis(monostate_val);                              \
  |  | 8423|  53.5k|    }
  ------------------
 8460|   112k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 58.8k, False: 114k]
  ------------------
 8461|   112k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   112k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   112k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   112k|    }                                                           \
  |  | 8421|   112k|    else {                                                      \
  |  | 8422|   112k|        return vis(monostate_val);                              \
  |  | 8423|   112k|    }
  ------------------
 8462|   173k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 60.9k, False: 112k]
  ------------------
 8463|   173k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   173k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   173k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   173k|    }                                                           \
  |  | 8421|   173k|    else {                                                      \
  |  | 8422|   173k|        return vis(monostate_val);                              \
  |  | 8423|   173k|    }
  ------------------
 8464|   173k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 173k]
  ------------------
 8465|   173k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   173k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   173k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   173k|    }                                                           \
  |  | 8421|   173k|    else {                                                      \
  |  | 8422|   173k|        return vis(monostate_val);                              \
  |  | 8423|   173k|    }
  ------------------
 8466|   173k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 173k]
  ------------------
 8467|   173k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   173k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   173k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   173k|    }                                                           \
  |  | 8421|   173k|    else {                                                      \
  |  | 8422|   173k|        return vis(monostate_val);                              \
  |  | 8423|   173k|    }
  ------------------
 8468|   173k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 173k]
  ------------------
 8469|   173k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   173k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   173k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   173k|    }                                                           \
  |  | 8421|   173k|    else {                                                      \
  |  | 8422|   173k|        return vis(monostate_val);                              \
  |  | 8423|   173k|    }
  ------------------
 8470|   173k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 173k]
  ------------------
 8471|   173k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   173k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   173k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   173k|    }                                                           \
  |  | 8421|   173k|    else {                                                      \
  |  | 8422|   173k|        return vis(monostate_val);                              \
  |  | 8423|   173k|    }
  ------------------
 8472|   173k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 173k]
  ------------------
 8473|   173k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   173k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   173k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   173k|    }                                                           \
  |  | 8421|   173k|    else {                                                      \
  |  | 8422|   173k|        return vis(monostate_val);                              \
  |  | 8423|   173k|    }
  ------------------
 8474|   173k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 173k]
  ------------------
 8475|   173k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   173k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   173k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   173k|    }                                                           \
  |  | 8421|   173k|    else {                                                      \
  |  | 8422|   173k|        return vis(monostate_val);                              \
  |  | 8423|   173k|    }
  ------------------
 8476|       |
 8477|   173k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 173k]
  ------------------
 8478|   173k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   173k|            return vis(
 8480|   173k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 173k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 173k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   173k|            SCN_CLANG_POP
 8495|   173k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5543|   963k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5544|   963k|    {
 5545|   963k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8136|   481k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   481k|    static_cast<    \
  |  |  929|   481k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|   481k|    {
 8138|   481k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8054|   963k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   963k|    static_cast<    \
  |  |  929|   963k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   963k|    static_cast<    \
  |  |  929|   963k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8055|   963k|    {
 8056|   963k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   481k|{
 7044|   481k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   481k|    handler.check_args_exhausted();
 7046|   481k|    return handler.get_error();
 7047|   481k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   481k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   481k|    auto begin = format.data();
 7013|   481k|    auto it = begin;
 7014|   481k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   801k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 481k, False: 319k]
  ------------------
 7017|   481k|        const auto ch = *it++;
 7018|   481k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 481k, False: 0]
  ------------------
 7019|   481k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   481k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   481k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 162k, False: 319k]
  ------------------
 7023|   162k|                return;
 7024|   162k|            }
 7025|   481k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   481k|    }
 7036|       |
 7037|   319k|    handler.on_literal_text(begin, end);
 7038|   319k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   481k|{
 6942|   481k|    struct id_adapter {
 6943|   481k|        constexpr void operator()()
 6944|   481k|        {
 6945|   481k|            arg_id = handler.on_arg_id();
 6946|   481k|        }
 6947|   481k|        constexpr void operator()(std::size_t id)
 6948|   481k|        {
 6949|   481k|            arg_id = handler.on_arg_id(id);
 6950|   481k|        }
 6951|       |
 6952|   481k|        constexpr void on_error(const char* msg)
 6953|   481k|        {
 6954|   481k|            SCN_UNLIKELY_ATTR
 6955|   481k|            handler.on_error(msg);
 6956|   481k|        }
 6957|       |
 6958|   481k|        Handler& handler;
 6959|   481k|        std::size_t arg_id;
 6960|   481k|    };
 6961|       |
 6962|   481k|    ++begin;
 6963|   481k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 481k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   481k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 481k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   481k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 481k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   481k|    else {
 6975|   481k|        auto adapter = id_adapter{handler, 0};
 6976|   481k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   481k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 481k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   481k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 481k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   481k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 481k, False: 0]
  ------------------
 6987|   481k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 481k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   481k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   481k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   963k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 481k]
  |  |  |  Branch (859:45): [True: 0, False: 481k]
  |  |  |  Branch (859:45): [True: 0, False: 481k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   481k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   481k|    }
 7003|   481k|    return begin + 1;
 7004|   481k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   963k|    {
 8039|   963k|        return m_args.get(id);
 8040|   963k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   963k|    {
 8049|   963k|        return m_locale;
 8050|   963k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   963k|    {
 5566|   963k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   963k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 963k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   963k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   963k|        do_check_arg_id(id);
 5574|   963k|        return id;
 5575|   963k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   963k|{
 6054|   963k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   963k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   963k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   481k|{
 6443|   481k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   481k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   481k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   481k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 481k, False: 0]
  |  Branch (6444:26): [True: 0, False: 481k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   481k|    handler();
 6449|   481k|    return begin;
 6450|   481k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   481k|        {
 6945|   481k|            arg_id = handler.on_arg_id();
 6946|   481k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  1.92M|    {
 5252|  1.92M|        return m_type;
 5253|  1.92M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   963k|    {
 5561|   963k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   963k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   654k|{
 4344|   654k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 654k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   654k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   654k|                            ranges::default_sentinel};
 4350|   654k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4175|   654k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4176|   654k|    {
 4177|   654k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   654k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   654k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   654k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   654k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   654k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   654k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  1.92M|    {
 5550|  1.92M|        return m_format.data();
 5551|  1.92M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7120|   481k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   481k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|   481k|    {
 7122|   481k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   481k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   481k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   481k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   481k|{
 6858|   481k|    auto do_presentation = [&]() -> const CharT* {
 6859|   481k|        if (*begin == CharT{'['}) {
 6860|   481k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   481k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   481k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   481k|                return begin;
 6866|   481k|            }
 6867|   481k|            handler.on_character_set_string(set);
 6868|   481k|            return begin;
 6869|   481k|        }
 6870|   481k|        if (*begin == CharT{'/'}) {
 6871|   481k|            return parse_presentation_regex(begin, end, handler);
 6872|   481k|        }
 6873|   481k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   481k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   481k|            handler.on_error("Invalid type specifier in format string");
 6876|   481k|            return begin;
 6877|   481k|        }
 6878|   481k|        handler.on_type(type);
 6879|   481k|        return begin;
 6880|   481k|    };
 6881|       |
 6882|   481k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 481k, False: 0]
  |  Branch (6882:28): [True: 481k, False: 0]
  ------------------
 6883|   481k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 481k, False: 0]
  |  Branch (6883:36): [True: 366k, False: 115k]
  ------------------
 6884|   366k|        return do_presentation();
 6885|   366k|    }
 6886|       |
 6887|   115k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 115k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   115k|    begin = parse_align(begin, end, handler);
 6893|   115k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 115k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   115k|    begin = parse_width(begin, end, handler);
 6899|   115k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 115k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   115k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 115k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   115k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 115k, False: 0]
  ------------------
 6918|   115k|        handler.on_localized();
 6919|   115k|        ++begin;
 6920|   115k|    }
 6921|   115k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 115k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   115k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 115k, False: 0]
  |  Branch (6926:25): [True: 0, False: 115k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   115k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 115k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   115k|    return begin;
 6935|   115k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|   963k|{
 6507|   963k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 732k, False: 231k]
  |  Branch (6507:33): [True: 732k, False: 0]
  ------------------
 6508|   963k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 231k, False: 0]
  |  Branch (6508:33): [True: 231k, False: 0]
  ------------------
 6509|   963k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   366k|    auto do_presentation = [&]() -> const CharT* {
 6859|   366k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 366k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   366k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 366k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   366k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   366k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   366k|        handler.on_type(type);
 6879|   366k|        return begin;
 6880|   366k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   732k|{
 6455|   732k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 732k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 732k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 732k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 732k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 732k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 732k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 732k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 732k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 732k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 732k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   247k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 247k, False: 484k]
  ------------------
 6474|   247k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 732k]
  ------------------
 6475|   247k|            return presentation_type::float_hex;
 6476|  66.3k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 66.3k, False: 665k]
  ------------------
 6477|  66.3k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 732k]
  ------------------
 6478|  66.3k|            return presentation_type::float_scientific;
 6479|   197k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 197k, False: 534k]
  ------------------
 6480|   197k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 732k]
  ------------------
 6481|   197k|            return presentation_type::float_fixed;
 6482|   220k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 220k, False: 511k]
  ------------------
 6483|   220k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 732k]
  ------------------
 6484|   220k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 732k]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 732k]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 732k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 732k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 732k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 732k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 732k]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|   732k|    }
 6502|   732k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|   115k|{
 6532|   115k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   115k|    auto check_align = [](wchar_t ch) {
 6535|   115k|        switch (ch) {
 6536|   115k|            case L'<':
 6537|   115k|                return align_type::left;
 6538|   115k|            case L'>':
 6539|   115k|                return align_type::right;
 6540|   115k|            case L'^':
 6541|   115k|                return align_type::center;
 6542|   115k|            default:
 6543|   115k|                return align_type::none;
 6544|   115k|        }
 6545|   115k|    };
 6546|       |
 6547|   115k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   115k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 115k]
  |  |  |  Branch (859:45): [True: 0, False: 115k]
  |  |  |  Branch (859:45): [True: 0, False: 115k]
  |  |  ------------------
  ------------------
 6549|   115k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   115k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   115k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   115k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   115k|    const auto begin_before_fill = begin;
 6559|   115k|    begin += potential_fill_len;
 6560|       |
 6561|   115k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 115k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   115k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   115k|    const auto begin_after_fill = begin;
 6567|   115k|    ++begin;
 6568|       |
 6569|   115k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 115k, False: 0]
  ------------------
 6570|   115k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 115k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   115k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 115k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   115k|    }
 6578|       |
 6579|   115k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 115k, False: 0]
  ------------------
 6580|   115k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 115k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   115k|        return begin_before_fill;
 6585|   115k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   115k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   231k|{
 6514|   231k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   231k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   231k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   231k|    if constexpr (sizeof(CharT) != 1) {
 6516|   231k|        return 1;
 6517|       |    }
 6518|       |    else {
 6519|       |        const auto lengths =
 6520|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|       |            "\3\4";
 6522|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|       |        return len;
 6524|       |    }
 6525|   231k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   231k|    auto check_align = [](wchar_t ch) {
 6535|   231k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 231k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 231k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 231k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   231k|            default:
  ------------------
  |  Branch (6542:13): [True: 231k, False: 0]
  ------------------
 6543|   231k|                return align_type::none;
 6544|   231k|        }
 6545|   231k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|   115k|{
 6597|   115k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   115k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 115k, False: 0]
  |  Branch (6599:33): [True: 0, False: 115k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   115k|    return begin;
 6610|   115k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|   115k|    {
 7127|   115k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   115k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 115k, False: 0]
  ------------------
 7129|   115k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 115k, False: 0]
  ------------------
 7130|   115k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 115k]
  ------------------
 7131|   115k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   115k|        Handler::on_localized();
 7139|   115k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   481k|{
 8417|   481k|#define SCN_VISIT(Type)                                         \
 8418|   481k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   481k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   481k|    }                                                           \
 8421|   481k|    else {                                                      \
 8422|   481k|        return vis(monostate_val);                              \
 8423|   481k|    }
 8424|       |
 8425|   481k|    monostate monostate_val{};
 8426|       |
 8427|   481k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 481k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 481k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 481k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 481k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 481k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 481k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 481k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 481k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 481k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 481k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 481k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 481k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 481k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 481k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 481k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   154k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 154k, False: 326k]
  ------------------
 8459|   154k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   154k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   154k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   154k|    }                                                           \
  |  | 8421|   154k|    else {                                                      \
  |  | 8422|   154k|        return vis(monostate_val);                              \
  |  | 8423|   154k|    }
  ------------------
 8460|   316k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 162k, False: 319k]
  ------------------
 8461|   316k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   316k|    }                                                           \
  |  | 8421|   316k|    else {                                                      \
  |  | 8422|   316k|        return vis(monostate_val);                              \
  |  | 8423|   316k|    }
  ------------------
 8462|   481k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 164k, False: 316k]
  ------------------
 8463|   481k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   481k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   481k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   481k|    }                                                           \
  |  | 8421|   481k|    else {                                                      \
  |  | 8422|   481k|        return vis(monostate_val);                              \
  |  | 8423|   481k|    }
  ------------------
 8464|   481k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 481k]
  ------------------
 8465|   481k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   481k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   481k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   481k|    }                                                           \
  |  | 8421|   481k|    else {                                                      \
  |  | 8422|   481k|        return vis(monostate_val);                              \
  |  | 8423|   481k|    }
  ------------------
 8466|   481k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 481k]
  ------------------
 8467|   481k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   481k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   481k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   481k|    }                                                           \
  |  | 8421|   481k|    else {                                                      \
  |  | 8422|   481k|        return vis(monostate_val);                              \
  |  | 8423|   481k|    }
  ------------------
 8468|   481k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 481k]
  ------------------
 8469|   481k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   481k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   481k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   481k|    }                                                           \
  |  | 8421|   481k|    else {                                                      \
  |  | 8422|   481k|        return vis(monostate_val);                              \
  |  | 8423|   481k|    }
  ------------------
 8470|   481k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 481k]
  ------------------
 8471|   481k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   481k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   481k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   481k|    }                                                           \
  |  | 8421|   481k|    else {                                                      \
  |  | 8422|   481k|        return vis(monostate_val);                              \
  |  | 8423|   481k|    }
  ------------------
 8472|   481k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 481k]
  ------------------
 8473|   481k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   481k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   481k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   481k|    }                                                           \
  |  | 8421|   481k|    else {                                                      \
  |  | 8422|   481k|        return vis(monostate_val);                              \
  |  | 8423|   481k|    }
  ------------------
 8474|   481k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 481k]
  ------------------
 8475|   481k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   481k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   481k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   481k|    }                                                           \
  |  | 8421|   481k|    else {                                                      \
  |  | 8422|   481k|        return vis(monostate_val);                              \
  |  | 8423|   481k|    }
  ------------------
 8476|       |
 8477|   481k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 481k]
  ------------------
 8478|   481k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   481k|            return vis(
 8480|   481k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 481k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 481k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   481k|            SCN_CLANG_POP
 8495|   481k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   173k|{
 8417|   173k|#define SCN_VISIT(Type)                                         \
 8418|   173k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   173k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   173k|    }                                                           \
 8421|   173k|    else {                                                      \
 8422|   173k|        return vis(monostate_val);                              \
 8423|   173k|    }
 8424|       |
 8425|   173k|    monostate monostate_val{};
 8426|       |
 8427|   173k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 173k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 173k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 173k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 173k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 173k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 173k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 173k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 173k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 173k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 173k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 173k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 173k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 173k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 173k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 173k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  53.5k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 53.5k, False: 119k]
  ------------------
 8459|  53.5k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  53.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  53.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  53.5k|    }                                                           \
  |  | 8421|  53.5k|    else {                                                      \
  |  | 8422|  53.5k|        return vis(monostate_val);                              \
  |  | 8423|  53.5k|    }
  ------------------
 8460|   112k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 58.8k, False: 114k]
  ------------------
 8461|   112k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   112k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   112k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   112k|    }                                                           \
  |  | 8421|   112k|    else {                                                      \
  |  | 8422|   112k|        return vis(monostate_val);                              \
  |  | 8423|   112k|    }
  ------------------
 8462|   173k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 60.8k, False: 112k]
  ------------------
 8463|   173k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   173k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   173k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   173k|    }                                                           \
  |  | 8421|   173k|    else {                                                      \
  |  | 8422|   173k|        return vis(monostate_val);                              \
  |  | 8423|   173k|    }
  ------------------
 8464|   173k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 173k]
  ------------------
 8465|   173k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   173k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   173k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   173k|    }                                                           \
  |  | 8421|   173k|    else {                                                      \
  |  | 8422|   173k|        return vis(monostate_val);                              \
  |  | 8423|   173k|    }
  ------------------
 8466|   173k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 173k]
  ------------------
 8467|   173k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   173k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   173k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   173k|    }                                                           \
  |  | 8421|   173k|    else {                                                      \
  |  | 8422|   173k|        return vis(monostate_val);                              \
  |  | 8423|   173k|    }
  ------------------
 8468|   173k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 173k]
  ------------------
 8469|   173k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   173k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   173k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   173k|    }                                                           \
  |  | 8421|   173k|    else {                                                      \
  |  | 8422|   173k|        return vis(monostate_val);                              \
  |  | 8423|   173k|    }
  ------------------
 8470|   173k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 173k]
  ------------------
 8471|   173k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   173k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   173k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   173k|    }                                                           \
  |  | 8421|   173k|    else {                                                      \
  |  | 8422|   173k|        return vis(monostate_val);                              \
  |  | 8423|   173k|    }
  ------------------
 8472|   173k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 173k]
  ------------------
 8473|   173k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   173k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   173k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   173k|    }                                                           \
  |  | 8421|   173k|    else {                                                      \
  |  | 8422|   173k|        return vis(monostate_val);                              \
  |  | 8423|   173k|    }
  ------------------
 8474|   173k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 173k]
  ------------------
 8475|   173k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   173k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   173k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   173k|    }                                                           \
  |  | 8421|   173k|    else {                                                      \
  |  | 8422|   173k|        return vis(monostate_val);                              \
  |  | 8423|   173k|    }
  ------------------
 8476|       |
 8477|   173k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 173k]
  ------------------
 8478|   173k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   173k|            return vis(
 8480|   173k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 173k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 173k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   173k|            SCN_CLANG_POP
 8495|   173k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   481k|{
 7044|   481k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   481k|    handler.check_args_exhausted();
 7046|   481k|    return handler.get_error();
 7047|   481k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   481k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   481k|    auto begin = format.data();
 7013|   481k|    auto it = begin;
 7014|   481k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   800k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 481k, False: 319k]
  ------------------
 7017|   481k|        const auto ch = *it++;
 7018|   481k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 481k, False: 0]
  ------------------
 7019|   481k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   481k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   481k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 162k, False: 319k]
  ------------------
 7023|   162k|                return;
 7024|   162k|            }
 7025|   481k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   481k|    }
 7036|       |
 7037|   319k|    handler.on_literal_text(begin, end);
 7038|   319k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|   319k|    {
 8175|   319k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   319k|    static_cast<    \
  |  |  929|   319k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   319k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   481k|{
 6942|   481k|    struct id_adapter {
 6943|   481k|        constexpr void operator()()
 6944|   481k|        {
 6945|   481k|            arg_id = handler.on_arg_id();
 6946|   481k|        }
 6947|   481k|        constexpr void operator()(std::size_t id)
 6948|   481k|        {
 6949|   481k|            arg_id = handler.on_arg_id(id);
 6950|   481k|        }
 6951|       |
 6952|   481k|        constexpr void on_error(const char* msg)
 6953|   481k|        {
 6954|   481k|            SCN_UNLIKELY_ATTR
 6955|   481k|            handler.on_error(msg);
 6956|   481k|        }
 6957|       |
 6958|   481k|        Handler& handler;
 6959|   481k|        std::size_t arg_id;
 6960|   481k|    };
 6961|       |
 6962|   481k|    ++begin;
 6963|   481k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 481k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   481k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 481k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   481k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 481k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   481k|    else {
 6975|   481k|        auto adapter = id_adapter{handler, 0};
 6976|   481k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   481k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 481k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   481k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 481k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   481k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 481k, False: 0]
  ------------------
 6987|   481k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 481k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   481k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   481k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   962k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 481k]
  |  |  |  Branch (859:45): [True: 0, False: 481k]
  |  |  |  Branch (859:45): [True: 0, False: 481k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   481k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   481k|    }
 7003|   481k|    return begin + 1;
 7004|   481k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   481k|{
 6443|   481k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   481k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   481k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   481k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 481k, False: 0]
  |  Branch (6444:26): [True: 0, False: 481k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   481k|    handler();
 6449|   481k|    return begin;
 6450|   481k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   481k|        {
 6945|   481k|            arg_id = handler.on_arg_id();
 6946|   481k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7120|   481k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   481k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|   481k|    {
 7122|   481k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   481k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   481k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   481k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   481k|{
 6858|   481k|    auto do_presentation = [&]() -> const CharT* {
 6859|   481k|        if (*begin == CharT{'['}) {
 6860|   481k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   481k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   481k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   481k|                return begin;
 6866|   481k|            }
 6867|   481k|            handler.on_character_set_string(set);
 6868|   481k|            return begin;
 6869|   481k|        }
 6870|   481k|        if (*begin == CharT{'/'}) {
 6871|   481k|            return parse_presentation_regex(begin, end, handler);
 6872|   481k|        }
 6873|   481k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   481k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   481k|            handler.on_error("Invalid type specifier in format string");
 6876|   481k|            return begin;
 6877|   481k|        }
 6878|   481k|        handler.on_type(type);
 6879|   481k|        return begin;
 6880|   481k|    };
 6881|       |
 6882|   481k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 481k, False: 0]
  |  Branch (6882:28): [True: 481k, False: 0]
  ------------------
 6883|   481k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 481k, False: 0]
  |  Branch (6883:36): [True: 365k, False: 115k]
  ------------------
 6884|   365k|        return do_presentation();
 6885|   365k|    }
 6886|       |
 6887|   115k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 115k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   115k|    begin = parse_align(begin, end, handler);
 6893|   115k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 115k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   115k|    begin = parse_width(begin, end, handler);
 6899|   115k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 115k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   115k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 115k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   115k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 115k, False: 0]
  ------------------
 6918|   115k|        handler.on_localized();
 6919|   115k|        ++begin;
 6920|   115k|    }
 6921|   115k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 115k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   115k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 115k, False: 0]
  |  Branch (6926:25): [True: 0, False: 115k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   115k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 115k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   115k|    return begin;
 6935|   115k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   365k|    auto do_presentation = [&]() -> const CharT* {
 6859|   365k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 365k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   365k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 365k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   365k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   365k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   365k|        handler.on_type(type);
 6879|   365k|        return begin;
 6880|   365k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|   115k|{
 6532|   115k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   115k|    auto check_align = [](wchar_t ch) {
 6535|   115k|        switch (ch) {
 6536|   115k|            case L'<':
 6537|   115k|                return align_type::left;
 6538|   115k|            case L'>':
 6539|   115k|                return align_type::right;
 6540|   115k|            case L'^':
 6541|   115k|                return align_type::center;
 6542|   115k|            default:
 6543|   115k|                return align_type::none;
 6544|   115k|        }
 6545|   115k|    };
 6546|       |
 6547|   115k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   115k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 115k]
  |  |  |  Branch (859:45): [True: 0, False: 115k]
  |  |  |  Branch (859:45): [True: 0, False: 115k]
  |  |  ------------------
  ------------------
 6549|   115k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   115k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   115k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   115k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   115k|    const auto begin_before_fill = begin;
 6559|   115k|    begin += potential_fill_len;
 6560|       |
 6561|   115k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 115k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   115k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   115k|    const auto begin_after_fill = begin;
 6567|   115k|    ++begin;
 6568|       |
 6569|   115k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 115k, False: 0]
  ------------------
 6570|   115k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 115k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   115k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 115k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   115k|    }
 6578|       |
 6579|   115k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 115k, False: 0]
  ------------------
 6580|   115k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 115k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   115k|        return begin_before_fill;
 6585|   115k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   115k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   230k|    auto check_align = [](wchar_t ch) {
 6535|   230k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 230k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 230k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 230k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   230k|            default:
  ------------------
  |  Branch (6542:13): [True: 230k, False: 0]
  ------------------
 6543|   230k|                return align_type::none;
 6544|   230k|        }
 6545|   230k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|   115k|{
 6597|   115k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   115k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   115k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   115k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 115k, False: 0]
  |  Branch (6599:33): [True: 0, False: 115k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   115k|    return begin;
 6610|   115k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|   115k|    {
 7127|   115k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   115k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 115k, False: 0]
  ------------------
 7129|   115k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 115k, False: 0]
  ------------------
 7130|   115k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 115k]
  ------------------
 7131|   115k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   115k|        Handler::on_localized();
 7139|   115k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   481k|{
 8417|   481k|#define SCN_VISIT(Type)                                         \
 8418|   481k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   481k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   481k|    }                                                           \
 8421|   481k|    else {                                                      \
 8422|   481k|        return vis(monostate_val);                              \
 8423|   481k|    }
 8424|       |
 8425|   481k|    monostate monostate_val{};
 8426|       |
 8427|   481k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 481k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 481k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 481k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 481k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 481k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 481k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 481k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 481k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 481k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 481k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 481k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 481k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 481k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 481k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 481k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   154k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 154k, False: 326k]
  ------------------
 8459|   154k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   154k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   154k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   154k|    }                                                           \
  |  | 8421|   154k|    else {                                                      \
  |  | 8422|   154k|        return vis(monostate_val);                              \
  |  | 8423|   154k|    }
  ------------------
 8460|   316k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 161k, False: 319k]
  ------------------
 8461|   316k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   316k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   316k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   316k|    }                                                           \
  |  | 8421|   316k|    else {                                                      \
  |  | 8422|   316k|        return vis(monostate_val);                              \
  |  | 8423|   316k|    }
  ------------------
 8462|   481k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 164k, False: 316k]
  ------------------
 8463|   481k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   481k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   481k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   481k|    }                                                           \
  |  | 8421|   481k|    else {                                                      \
  |  | 8422|   481k|        return vis(monostate_val);                              \
  |  | 8423|   481k|    }
  ------------------
 8464|   481k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 481k]
  ------------------
 8465|   481k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   481k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   481k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   481k|    }                                                           \
  |  | 8421|   481k|    else {                                                      \
  |  | 8422|   481k|        return vis(monostate_val);                              \
  |  | 8423|   481k|    }
  ------------------
 8466|   481k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 481k]
  ------------------
 8467|   481k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   481k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   481k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   481k|    }                                                           \
  |  | 8421|   481k|    else {                                                      \
  |  | 8422|   481k|        return vis(monostate_val);                              \
  |  | 8423|   481k|    }
  ------------------
 8468|   481k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 481k]
  ------------------
 8469|   481k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   481k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   481k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   481k|    }                                                           \
  |  | 8421|   481k|    else {                                                      \
  |  | 8422|   481k|        return vis(monostate_val);                              \
  |  | 8423|   481k|    }
  ------------------
 8470|   481k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 481k]
  ------------------
 8471|   481k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   481k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   481k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   481k|    }                                                           \
  |  | 8421|   481k|    else {                                                      \
  |  | 8422|   481k|        return vis(monostate_val);                              \
  |  | 8423|   481k|    }
  ------------------
 8472|   481k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 481k]
  ------------------
 8473|   481k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   481k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   481k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   481k|    }                                                           \
  |  | 8421|   481k|    else {                                                      \
  |  | 8422|   481k|        return vis(monostate_val);                              \
  |  | 8423|   481k|    }
  ------------------
 8474|   481k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 481k]
  ------------------
 8475|   481k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   481k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   481k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   481k|    }                                                           \
  |  | 8421|   481k|    else {                                                      \
  |  | 8422|   481k|        return vis(monostate_val);                              \
  |  | 8423|   481k|    }
  ------------------
 8476|       |
 8477|   481k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 481k]
  ------------------
 8478|   481k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   481k|            return vis(
 8480|   481k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 481k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 481k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   481k|            SCN_CLANG_POP
 8495|   481k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|   210k|    {
 4076|   210k|        sync(0);
 4077|   210k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   274k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|   115k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  95.2k|{
   89|  95.2k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  95.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  95.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  95.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  95.2k|    static_cast<    \
  |  |  929|  95.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  95.2k|    static_cast<    \
  |  |  929|  95.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  95.2k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   298k|{
   44|   298k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   298k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  95.2k|{
  127|  95.2k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  95.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  95.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  95.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  95.2k|    static_cast<    \
  |  |  929|  95.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  95.2k|    static_cast<    \
  |  |  929|  95.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  95.2k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   298k|{
   60|   298k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   298k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  17.8k|{
  163|  17.8k|    T value;
  164|  17.8k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  17.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.40k, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.40k|    }                                                  \
  |  |  |  | 3671|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  12.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.4k|    static_cast<    \
  |  |  929|  12.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.4k|    static_cast<    \
  |  |  929|  12.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  17.8k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  57.7k|{
   72|  57.7k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  57.7k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   100k|{
   89|   100k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   100k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   100k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   100k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|   100k|{
  127|   100k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   100k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   100k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   100k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  19.6k|{
  163|  19.6k|    T value;
  164|  19.6k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  19.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  19.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.40k, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.40k|    }                                                  \
  |  |  |  | 3671|  19.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  14.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  14.2k|    static_cast<    \
  |  |  929|  14.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  14.2k|    static_cast<    \
  |  |  929|  14.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  19.6k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   102k|{
   89|   102k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   102k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   102k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   102k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|   102k|{
  127|   102k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   102k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   102k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   102k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  20.3k|{
  163|  20.3k|    T value;
  164|  20.3k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  20.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  20.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  20.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  20.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  20.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.40k, False: 14.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.40k|    }                                                  \
  |  |  |  | 3671|  20.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  14.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  14.9k|    static_cast<    \
  |  |  929|  14.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  20.3k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  95.2k|{
   89|  95.2k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  95.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  95.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  95.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  95.2k|    static_cast<    \
  |  |  929|  95.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  95.2k|    static_cast<    \
  |  |  929|  95.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  95.2k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   298k|{
   44|   298k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   298k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  95.2k|{
  127|  95.2k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  95.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  95.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  95.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  95.2k|    static_cast<    \
  |  |  929|  95.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  95.2k|    static_cast<    \
  |  |  929|  95.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  95.2k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   298k|{
   60|   298k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   298k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  17.8k|{
  163|  17.8k|    T value;
  164|  17.8k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  17.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  17.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  17.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  17.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.40k, False: 12.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.40k|    }                                                  \
  |  |  |  | 3671|  17.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  12.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.4k|    static_cast<    \
  |  |  929|  12.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.4k|    static_cast<    \
  |  |  929|  12.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  17.8k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  57.7k|{
   72|  57.7k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  57.7k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   100k|{
   89|   100k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   100k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   100k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   100k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|   100k|{
  127|   100k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   100k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   100k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   100k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  19.6k|{
  163|  19.6k|    T value;
  164|  19.6k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  19.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  19.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.40k, False: 14.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.40k|    }                                                  \
  |  |  |  | 3671|  19.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  14.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  14.2k|    static_cast<    \
  |  |  929|  14.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  14.2k|    static_cast<    \
  |  |  929|  14.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  19.6k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   102k|{
   89|   102k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   102k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   102k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   102k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|   102k|{
  127|   102k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   102k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   102k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   102k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  20.2k|{
  163|  20.2k|    T value;
  164|  20.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  20.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  20.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  20.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  20.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.40k, False: 14.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.40k|    }                                                  \
  |  |  |  | 3671|  20.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  14.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  20.2k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|  1.90M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|  1.90M|{
  653|  1.90M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  1.90M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   800k|{
  659|   800k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   800k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 400k, False: 400k]
  ------------------
  661|   800k|                    : std::locale{};
  662|   800k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   883k|{
 1221|   883k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   883k|                                  m_nan_payload_buffer, value);
 1223|   883k|    value = this->setsign(value);
 1224|   883k|    return n;
 1225|   883k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   316k|{
 1221|   316k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   316k|                                  m_nan_payload_buffer, value);
 1223|   316k|    value = this->setsign(value);
 1224|   316k|    return n;
 1225|   316k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   917k|{
 1221|   917k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   917k|                                  m_nan_payload_buffer, value);
 1223|   917k|    value = this->setsign(value);
 1224|   917k|    return n;
 1225|   917k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   339k|{
 1221|   339k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   339k|                                  m_nan_payload_buffer, value);
 1223|   339k|    value = this->setsign(value);
 1224|   339k|    return n;
 1225|   339k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   926k|{
 1221|   926k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   926k|                                  m_nan_payload_buffer, value);
 1223|   926k|    value = this->setsign(value);
 1224|   926k|    return n;
 1225|   926k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   347k|{
 1221|   347k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   347k|                                  m_nan_payload_buffer, value);
 1223|   347k|    value = this->setsign(value);
 1224|   347k|    return n;
 1225|   347k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   606k|{
 2184|   606k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   606k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   700k|{
 2192|   700k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   700k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   700k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 651k, False: 48.6k]
  |  |  ------------------
  ------------------
 2194|   651k|        source.sync(*n);
 2195|   651k|    }
 2196|  48.6k|    else {
 2197|  48.6k|        source.sync_all();
 2198|  48.6k|    }
 2199|   700k|    return n;
 2200|   700k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   298k|{
 2208|   298k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   298k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   298k|{
 2216|   298k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   298k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   298k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 201k, False: 97.2k]
  |  |  ------------------
  ------------------
 2218|   201k|        source.sync(*n);
 2219|   201k|    }
 2220|  97.2k|    else {
 2221|  97.2k|        source.sync_all();
 2222|  97.2k|    }
 2223|   298k|    return n;
 2224|   298k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  1.21M|{
  194|  1.21M|    return find_classic_impl(
  195|  1.21M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  1.21M|        [](char32_t cp) { return is_cp_space(cp); });
  197|  1.21M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  2.87M|{
  202|  2.87M|    return find_classic_impl(
  203|  2.87M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  2.87M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  2.87M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   606k|{
 2141|   606k|    return vscan_internal(source, format, args);
 2142|   606k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   700k|{
 2147|   700k|    auto n = vscan_internal(source, format, args);
 2148|   700k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   700k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 651k, False: 48.6k]
  |  |  ------------------
  ------------------
 2149|   651k|        source.sync(*n);
 2150|   651k|    }
 2151|  48.6k|    else {
 2152|  48.6k|        source.sync_all();
 2153|  48.6k|    }
 2154|   700k|    return n;
 2155|   700k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   298k|{
 2161|   298k|    return vscan_internal(source, format, args);
 2162|   298k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   298k|{
 2167|   298k|    auto n = vscan_internal(source, format, args);
 2168|   298k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   298k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 201k, False: 97.2k]
  |  |  ------------------
  ------------------
 2169|   201k|        source.sync(*n);
 2170|   201k|    }
 2171|  97.2k|    else {
 2172|  97.2k|        source.sync_all();
 2173|  97.2k|    }
 2174|   298k|    return n;
 2175|   298k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   131k|{
 2251|   131k|    return vscan_value_internal(source, arg);
 2252|   131k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   143k|{
 2256|   143k|    auto n = vscan_value_internal(source, arg);
 2257|   143k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   143k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 135k, False: 8.10k]
  |  |  ------------------
  ------------------
 2258|   135k|        source.sync(*n);
 2259|   135k|    }
 2260|  8.10k|    else {
 2261|  8.10k|        source.sync_all();
 2262|  8.10k|    }
 2263|   143k|    return n;
 2264|   143k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  57.7k|{
 2270|  57.7k|    return vscan_value_internal(source, arg);
 2271|  57.7k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  57.7k|{
 2276|  57.7k|    auto n = vscan_value_internal(source, arg);
 2277|  57.7k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  57.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 41.5k, False: 16.2k]
  |  |  ------------------
  ------------------
 2278|  41.5k|        source.sync(*n);
 2279|  41.5k|    }
 2280|  16.2k|    else {
 2281|  16.2k|        source.sync_all();
 2282|  16.2k|    }
 2283|  57.7k|    return n;
 2284|  57.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  1.21M|{
  118|  1.21M|    auto it = source.begin();
  119|       |
  120|  3.92M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 3.14M, False: 780k]
  ------------------
  121|  3.14M|        auto sv =
  122|  3.14M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  3.14M|                .substr(0, 8);
  124|       |
  125|  3.14M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 3.07M, False: 70.9k]
  ------------------
  126|  3.07M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  3.07M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  3.07M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 406k, False: 2.66M]
  ------------------
  129|   406k|                break;
  130|   406k|            }
  131|  2.66M|            continue;
  132|  3.07M|        }
  133|       |
  134|   238k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 195k, False: 42.7k]
  ------------------
  135|   195k|            auto tmp =
  136|   195k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   195k|            auto res = get_next_code_point(tmp);
  138|   195k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 28.1k, False: 167k]
  ------------------
  139|  28.1k|                return it;
  140|  28.1k|            }
  141|   167k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   167k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   167k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   167k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   167k|        }
  145|  70.9k|    }
  146|       |
  147|  1.18M|    return detail::make_string_view_iterator(source, it);
  148|  1.21M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  4.91M|{
  105|  4.91M|    static_assert(sizeof(*source.data()) == 1);
  106|  4.91M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  4.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  4.91M|    uint64_t word{};
  108|  4.91M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  4.91M|    return has_byte_greater(word, 127) != 0;
  111|  4.91M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  18.6M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   195k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.87M|{
  118|  2.87M|    auto it = source.begin();
  119|       |
  120|  3.15M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 1.76M, False: 1.38M]
  ------------------
  121|  1.76M|        auto sv =
  122|  1.76M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  1.76M|                .substr(0, 8);
  124|       |
  125|  1.76M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 1.67M, False: 94.9k]
  ------------------
  126|  1.67M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  1.67M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  1.67M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 1.40M, False: 261k]
  ------------------
  129|  1.40M|                break;
  130|  1.40M|            }
  131|   261k|            continue;
  132|  1.67M|        }
  133|       |
  134|   180k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 171k, False: 8.91k]
  ------------------
  135|   171k|            auto tmp =
  136|   171k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   171k|            auto res = get_next_code_point(tmp);
  138|   171k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 86.0k, False: 85.1k]
  ------------------
  139|  86.0k|                return it;
  140|  86.0k|            }
  141|  85.1k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  85.1k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  85.1k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  85.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  85.1k|        }
  145|  94.9k|    }
  146|       |
  147|  2.79M|    return detail::make_string_view_iterator(source, it);
  148|  2.87M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  2.62M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   171k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   883k|{
 1138|   883k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 4.97k, False: 878k]
  ------------------
 1139|  4.97k|        value = std::numeric_limits<T>::infinity();
 1140|  4.97k|        return 3;
 1141|  4.97k|    }
 1142|   878k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 4.98k, False: 873k]
  ------------------
 1143|  4.98k|        value = std::numeric_limits<T>::infinity();
 1144|  4.98k|        return 8;
 1145|  4.98k|    }
 1146|   873k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 34.5k, False: 839k]
  ------------------
 1147|  34.5k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  34.5k|        return 3;
 1149|  34.5k|    }
 1150|   839k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.31k, False: 837k]
  ------------------
 1151|  1.31k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.31k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.31k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.31k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.31k|    }
 1182|       |
 1183|   837k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   837k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   837k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   837k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 179k, False: 658k]
  ------------------
 1185|   179k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.45k, False: 175k]
  |  |  ------------------
  ------------------
 1186|  3.45k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.45k|                                         "Invalid floating-point digit");
 1188|  3.45k|        }
 1189|   179k|    }
 1190|   834k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   834k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.16k, False: 825k]
  |  |  ------------------
  ------------------
 1191|  9.16k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  9.16k|                                     "Invalid floating-point digit");
 1193|  9.16k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   825k|    else {
 1211|       |        // Default to fast_float
 1212|   825k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   825k|    }
 1214|   825k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1076|   825k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   825k|    {
 1078|   825k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  2.96M|    {
  712|  2.96M|        return {kind, options};
  713|  2.96M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|   825k|    {
 1082|   825k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 175k, False: 649k]
  ------------------
 1083|   825k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 26.8k, False: 622k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   202k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   202k|                                              value);
 1087|   202k|        }
 1088|       |
 1089|   622k|        const auto flags = get_flags();
 1090|   622k|        const auto view = get_view();
 1091|   622k|        const auto result = fast_float::from_chars(
 1092|   622k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   622k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   622k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 622k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   622k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   622k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.78k, False: 616k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  5.78k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  5.78k|                                              value);
 1102|  5.78k|        }
 1103|       |
 1104|   616k|        return result.ptr - view.data();
 1105|   622k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   208k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   208k|    {
 1048|   208k|#if !SCN_DISABLE_STRTOD
 1049|   208k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   208k|    }
 1056|   208k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  892|   208k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   208k|    {
  894|   208k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   273k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   208k|    {
  898|   208k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   208k|                           generic_strtod);
  900|   208k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   208k|    {
  732|   208k|        CharT* end{};
  733|   208k|        errno = 0;
  734|   208k|        value = strtod_cb(src, &end);
  735|   208k|        const auto saved_errno = errno;
  736|   208k|        auto chars_read = end - src;
  737|       |
  738|   208k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   208k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   208k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.83k, False: 201k]
  |  |  ------------------
  ------------------
  740|  6.83k|            return unexpected(e);
  741|  6.83k|        }
  742|       |
  743|   201k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 174k, False: 26.7k]
  ------------------
  744|   201k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 174k, False: 0]
  ------------------
  745|   174k|            chars_read -= 2;
  746|   174k|        }
  747|       |
  748|   201k|        return chars_read;
  749|   208k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   273k|    {
  778|   273k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 104k, False: 169k]
  |  Branch (778:37): [True: 0, False: 104k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   273k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 27.3k, False: 246k]
  ------------------
  785|   273k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 27.3k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   273k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 11.0k, False: 262k]
  |  Branch (791:34): [True: 2.24k, False: 8.77k]
  ------------------
  792|  2.24k|            SCN_UNLIKELY_ATTR
  793|  2.24k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  2.24k|        }
  795|       |
  796|   271k|        SCN_GCC_COMPAT_PUSH
  797|   271k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   271k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 271k, False: 0]
  ------------------
  800|   271k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 271k, False: 0]
  ------------------
  801|   271k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 8.74k, False: 262k]
  ------------------
  802|  8.74k|            SCN_UNLIKELY_ATTR
  803|  8.74k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  8.74k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   262k|            return {};
  809|   271k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   284k|{
  687|   284k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 106k, False: 178k]
  |  Branch (687:25): [True: 0, False: 178k]
  ------------------
  688|   284k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   208k|    {
  755|   208k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 203k, False: 4.64k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   203k|            auto first_space = read_until_classic_space(input.view());
  758|   203k|            input.assign(
  759|   203k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   203k|        }
  761|       |
  762|   208k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 175k, False: 32.6k]
  ------------------
  763|   175k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   175k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   175k|        }
  770|       |
  771|   208k|        return input.get_allocated_string().c_str();
  772|   208k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   208k|    {
  905|   208k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   208k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   208k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   208k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   208k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   208k|        if constexpr (std::is_same_v<T, float>) {
  838|   208k|            return std::strtof(str, str_end);
  839|       |        }
  840|       |        else if constexpr (std::is_same_v<T, double>) {
  841|       |            return std::strtod(str, str_end);
  842|       |        }
  843|       |        else if constexpr (std::is_same_v<T, long double>) {
  844|       |            return std::strtold(str, str_end);
  845|       |        }
  846|   208k|#endif
  847|   208k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  1.73M|    {
 1061|  1.73M|        unsigned format_flags{};
 1062|  1.73M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 1.71M, False: 11.8k]
  ------------------
 1063|  1.71M|            format_flags |= fast_float::fixed;
 1064|  1.71M|        }
 1065|  1.73M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.45M, False: 271k]
  ------------------
 1066|  1.45M|            format_flags |= fast_float::scientific;
 1067|  1.45M|        }
 1068|       |
 1069|  1.73M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  1.73M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   622k|    {
 1110|   622k|        if constexpr (sizeof(CharT) == 1) {
 1111|   622k|            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|       |        else {
 1119|       |            return std::u32string_view{
 1120|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|       |                m_input.view().size()};
 1122|       |        }
 1123|   622k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   316k|{
 1138|   316k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 316k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   316k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 316k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   316k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 316k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   316k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 316k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   316k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   316k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 71.3k, False: 244k]
  ------------------
 1185|  71.3k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  71.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.4k, False: 60.8k]
  |  |  ------------------
  ------------------
 1186|  10.4k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  10.4k|                                         "Invalid floating-point digit");
 1188|  10.4k|        }
 1189|  71.3k|    }
 1190|   305k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.1k, False: 280k]
  |  |  ------------------
  ------------------
 1191|  25.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  25.1k|                                     "Invalid floating-point digit");
 1193|  25.1k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   280k|    else {
 1211|       |        // Default to fast_float
 1212|   280k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   280k|    }
 1214|   280k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1076|   280k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   280k|    {
 1078|   280k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|  1.02M|    {
  712|  1.02M|        return {kind, options};
  713|  1.02M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|   280k|    {
 1082|   280k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 60.8k, False: 219k]
  ------------------
 1083|   280k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 503, False: 219k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  61.3k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  61.3k|                                              value);
 1087|  61.3k|        }
 1088|       |
 1089|   219k|        const auto flags = get_flags();
 1090|   219k|        const auto view = get_view();
 1091|   219k|        const auto result = fast_float::from_chars(
 1092|   219k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   219k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 219k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   219k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.08k, False: 215k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  4.08k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  4.08k|                                              value);
 1102|  4.08k|        }
 1103|       |
 1104|   215k|        return result.ptr - view.data();
 1105|   219k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  65.4k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  65.4k|    {
 1048|  65.4k|#if !SCN_DISABLE_STRTOD
 1049|  65.4k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  65.4k|    }
 1056|  65.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  892|  65.4k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  65.4k|    {
  894|  65.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  65.4k|    {
  898|  65.4k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  65.4k|                           generic_strtod);
  900|  65.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  65.4k|    {
  732|  65.4k|        CharT* end{};
  733|  65.4k|        errno = 0;
  734|  65.4k|        value = strtod_cb(src, &end);
  735|  65.4k|        const auto saved_errno = errno;
  736|  65.4k|        auto chars_read = end - src;
  737|       |
  738|  65.4k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  65.4k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  65.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.15k, False: 61.2k]
  |  |  ------------------
  ------------------
  740|  4.15k|            return unexpected(e);
  741|  4.15k|        }
  742|       |
  743|  61.2k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 60.7k, False: 503]
  ------------------
  744|  61.2k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 60.7k, False: 0]
  ------------------
  745|  60.7k|            chars_read -= 2;
  746|  60.7k|        }
  747|       |
  748|  61.2k|        return chars_read;
  749|  65.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  65.4k|    {
  755|  65.4k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 62.9k, False: 2.44k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  62.9k|            auto first_space = read_until_classic_space(input.view());
  758|  62.9k|            input.assign(
  759|  62.9k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  62.9k|        }
  761|       |
  762|  65.4k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 60.8k, False: 4.58k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  60.8k|            else {
  767|  60.8k|                input.get_allocated_string().insert(0, L"0x");
  768|  60.8k|            }
  769|  60.8k|        }
  770|       |
  771|  65.4k|        return input.get_allocated_string().c_str();
  772|  65.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  65.4k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|  65.4k|        else {
  909|  65.4k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  65.4k|        }
  911|  65.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  65.4k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  65.4k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  65.4k|        if constexpr (std::is_same_v<T, float>) {
  876|  65.4k|            return std::wcstof(str, str_end);
  877|       |        }
  878|       |        else if constexpr (std::is_same_v<T, double>) {
  879|       |            return std::wcstod(str, str_end);
  880|       |        }
  881|       |        else if constexpr (std::is_same_v<T, long double>) {
  882|       |            return std::wcstold(str, str_end);
  883|       |        }
  884|  65.4k|#endif
  885|  65.4k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|   219k|    {
 1110|       |        if constexpr (sizeof(CharT) == 1) {
 1111|       |            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|   219k|        else {
 1119|   219k|            return std::u32string_view{
 1120|   219k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   219k|                m_input.view().size()};
 1122|   219k|        }
 1123|   219k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   917k|{
 1138|   917k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 5.60k, False: 912k]
  ------------------
 1139|  5.60k|        value = std::numeric_limits<T>::infinity();
 1140|  5.60k|        return 3;
 1141|  5.60k|    }
 1142|   912k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 5.37k, False: 906k]
  ------------------
 1143|  5.37k|        value = std::numeric_limits<T>::infinity();
 1144|  5.37k|        return 8;
 1145|  5.37k|    }
 1146|   906k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 35.5k, False: 871k]
  ------------------
 1147|  35.5k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  35.5k|        return 3;
 1149|  35.5k|    }
 1150|   871k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.45k, False: 869k]
  ------------------
 1151|  1.45k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.45k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.45k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.45k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.45k|    }
 1182|       |
 1183|   869k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   869k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   869k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   869k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 184k, False: 685k]
  ------------------
 1185|   184k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.55k, False: 181k]
  |  |  ------------------
  ------------------
 1186|  3.55k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.55k|                                         "Invalid floating-point digit");
 1188|  3.55k|        }
 1189|   184k|    }
 1190|   866k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   866k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.72k, False: 856k]
  |  |  ------------------
  ------------------
 1191|  9.72k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  9.72k|                                     "Invalid floating-point digit");
 1193|  9.72k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   856k|    else {
 1211|       |        // Default to fast_float
 1212|   856k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   856k|    }
 1214|   856k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1076|   856k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   856k|    {
 1078|   856k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|   856k|    {
 1082|   856k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 180k, False: 675k]
  ------------------
 1083|   856k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 29.1k, False: 646k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   209k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   209k|                                              value);
 1087|   209k|        }
 1088|       |
 1089|   646k|        const auto flags = get_flags();
 1090|   646k|        const auto view = get_view();
 1091|   646k|        const auto result = fast_float::from_chars(
 1092|   646k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   646k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   646k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 646k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   646k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   646k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.66k, False: 644k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.66k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.66k|                                              value);
 1102|  2.66k|        }
 1103|       |
 1104|   644k|        return result.ptr - view.data();
 1105|   646k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   212k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   212k|    {
 1048|   212k|#if !SCN_DISABLE_STRTOD
 1049|   212k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   212k|    }
 1056|   212k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  892|   212k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   212k|    {
  894|   212k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   275k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   212k|    {
  898|   212k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   212k|                           generic_strtod);
  900|   212k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   212k|    {
  732|   212k|        CharT* end{};
  733|   212k|        errno = 0;
  734|   212k|        value = strtod_cb(src, &end);
  735|   212k|        const auto saved_errno = errno;
  736|   212k|        auto chars_read = end - src;
  737|       |
  738|   212k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   212k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.14k, False: 209k]
  |  |  ------------------
  ------------------
  740|  3.14k|            return unexpected(e);
  741|  3.14k|        }
  742|       |
  743|   209k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 180k, False: 29.0k]
  ------------------
  744|   209k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 180k, False: 0]
  ------------------
  745|   180k|            chars_read -= 2;
  746|   180k|        }
  747|       |
  748|   209k|        return chars_read;
  749|   212k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   275k|    {
  778|   275k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 103k, False: 172k]
  |  Branch (778:37): [True: 0, False: 103k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   275k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 29.6k, False: 246k]
  ------------------
  785|   275k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 29.6k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   275k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 5.13k, False: 270k]
  |  Branch (791:34): [True: 539, False: 4.59k]
  ------------------
  792|    539|            SCN_UNLIKELY_ATTR
  793|    539|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    539|        }
  795|       |
  796|   275k|        SCN_GCC_COMPAT_PUSH
  797|   275k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   275k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 275k, False: 0]
  ------------------
  800|   275k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 275k, False: 0]
  ------------------
  801|   275k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 4.59k, False: 270k]
  ------------------
  802|  4.59k|            SCN_UNLIKELY_ATTR
  803|  4.59k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  4.59k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   270k|            return {};
  809|   275k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   281k|{
  691|   281k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 104k, False: 176k]
  |  Branch (691:24): [True: 0, False: 176k]
  ------------------
  692|   281k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   212k|    {
  755|   212k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 209k, False: 3.35k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   209k|            auto first_space = read_until_classic_space(input.view());
  758|   209k|            input.assign(
  759|   209k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   209k|        }
  761|       |
  762|   212k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 180k, False: 31.7k]
  ------------------
  763|   180k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   180k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   180k|        }
  770|       |
  771|   212k|        return input.get_allocated_string().c_str();
  772|   212k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   212k|    {
  905|   212k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   212k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   212k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   212k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   212k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|       |        if constexpr (std::is_same_v<T, float>) {
  838|       |            return std::strtof(str, str_end);
  839|       |        }
  840|   212k|        else if constexpr (std::is_same_v<T, double>) {
  841|   212k|            return std::strtod(str, str_end);
  842|       |        }
  843|       |        else if constexpr (std::is_same_v<T, long double>) {
  844|       |            return std::strtold(str, str_end);
  845|       |        }
  846|   212k|#endif
  847|   212k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|   646k|    {
 1110|   646k|        if constexpr (sizeof(CharT) == 1) {
 1111|   646k|            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|       |        else {
 1119|       |            return std::u32string_view{
 1120|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|       |                m_input.view().size()};
 1122|       |        }
 1123|   646k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   339k|{
 1138|   339k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 339k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   339k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 339k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   339k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 339k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   339k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 339k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   339k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   339k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   339k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   339k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 71.3k, False: 268k]
  ------------------
 1185|  71.3k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  71.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.4k, False: 60.8k]
  |  |  ------------------
  ------------------
 1186|  10.4k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  10.4k|                                         "Invalid floating-point digit");
 1188|  10.4k|        }
 1189|  71.3k|    }
 1190|   328k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   328k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.8k, False: 303k]
  |  |  ------------------
  ------------------
 1191|  25.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  25.8k|                                     "Invalid floating-point digit");
 1193|  25.8k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   303k|    else {
 1211|       |        // Default to fast_float
 1212|   303k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   303k|    }
 1214|   303k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1076|   303k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   303k|    {
 1078|   303k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|   303k|    {
 1082|   303k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 60.8k, False: 242k]
  ------------------
 1083|   303k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 503, False: 241k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  61.3k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  61.3k|                                              value);
 1087|  61.3k|        }
 1088|       |
 1089|   241k|        const auto flags = get_flags();
 1090|   241k|        const auto view = get_view();
 1091|   241k|        const auto result = fast_float::from_chars(
 1092|   241k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   241k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 241k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   241k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.92k, False: 239k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  1.92k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  1.92k|                                              value);
 1102|  1.92k|        }
 1103|       |
 1104|   239k|        return result.ptr - view.data();
 1105|   241k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  63.2k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  63.2k|    {
 1048|  63.2k|#if !SCN_DISABLE_STRTOD
 1049|  63.2k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  63.2k|    }
 1056|  63.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  892|  63.2k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  63.2k|    {
  894|  63.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  63.2k|    {
  898|  63.2k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  63.2k|                           generic_strtod);
  900|  63.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  63.2k|    {
  732|  63.2k|        CharT* end{};
  733|  63.2k|        errno = 0;
  734|  63.2k|        value = strtod_cb(src, &end);
  735|  63.2k|        const auto saved_errno = errno;
  736|  63.2k|        auto chars_read = end - src;
  737|       |
  738|  63.2k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  63.2k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  63.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.98k, False: 61.2k]
  |  |  ------------------
  ------------------
  740|  1.98k|            return unexpected(e);
  741|  1.98k|        }
  742|       |
  743|  61.2k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 60.7k, False: 503]
  ------------------
  744|  61.2k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 60.7k, False: 0]
  ------------------
  745|  60.7k|            chars_read -= 2;
  746|  60.7k|        }
  747|       |
  748|  61.2k|        return chars_read;
  749|  63.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  63.2k|    {
  755|  63.2k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 61.8k, False: 1.37k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  61.8k|            auto first_space = read_until_classic_space(input.view());
  758|  61.8k|            input.assign(
  759|  61.8k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  61.8k|        }
  761|       |
  762|  63.2k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 60.8k, False: 2.43k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  60.8k|            else {
  767|  60.8k|                input.get_allocated_string().insert(0, L"0x");
  768|  60.8k|            }
  769|  60.8k|        }
  770|       |
  771|  63.2k|        return input.get_allocated_string().c_str();
  772|  63.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  63.2k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|  63.2k|        else {
  909|  63.2k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  63.2k|        }
  911|  63.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  63.2k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  63.2k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|       |        if constexpr (std::is_same_v<T, float>) {
  876|       |            return std::wcstof(str, str_end);
  877|       |        }
  878|  63.2k|        else if constexpr (std::is_same_v<T, double>) {
  879|  63.2k|            return std::wcstod(str, str_end);
  880|       |        }
  881|       |        else if constexpr (std::is_same_v<T, long double>) {
  882|       |            return std::wcstold(str, str_end);
  883|       |        }
  884|  63.2k|#endif
  885|  63.2k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|   241k|    {
 1110|       |        if constexpr (sizeof(CharT) == 1) {
 1111|       |            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|   241k|        else {
 1119|   241k|            return std::u32string_view{
 1120|   241k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   241k|                m_input.view().size()};
 1122|   241k|        }
 1123|   241k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   926k|{
 1138|   926k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 5.74k, False: 921k]
  ------------------
 1139|  5.74k|        value = std::numeric_limits<T>::infinity();
 1140|  5.74k|        return 3;
 1141|  5.74k|    }
 1142|   921k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 5.47k, False: 915k]
  ------------------
 1143|  5.47k|        value = std::numeric_limits<T>::infinity();
 1144|  5.47k|        return 8;
 1145|  5.47k|    }
 1146|   915k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 35.8k, False: 879k]
  ------------------
 1147|  35.8k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  35.8k|        return 3;
 1149|  35.8k|    }
 1150|   879k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.48k, False: 878k]
  ------------------
 1151|  1.48k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.48k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.48k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.48k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.48k|    }
 1182|       |
 1183|   878k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   878k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   878k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   878k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 185k, False: 693k]
  ------------------
 1185|   185k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   185k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.65k, False: 181k]
  |  |  ------------------
  ------------------
 1186|  3.65k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.65k|                                         "Invalid floating-point digit");
 1188|  3.65k|        }
 1189|   185k|    }
 1190|   874k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   874k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.1k, False: 864k]
  |  |  ------------------
  ------------------
 1191|  10.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  10.1k|                                     "Invalid floating-point digit");
 1193|  10.1k|    }
 1194|       |
 1195|   864k|    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|   864k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   864k|            return fast_float_fallback(data, value);
 1208|   864k|        }
 1209|       |    }
 1210|       |    else {
 1211|       |        // Default to fast_float
 1212|       |        return fast_float_impl<CharT, T>{data}(value);
 1213|       |    }
 1214|   864k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   864k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   864k|    {
 1048|   864k|#if !SCN_DISABLE_STRTOD
 1049|   864k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   864k|    }
 1056|   864k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  892|   864k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   864k|    {
  894|   864k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  1.17M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|   864k|    {
  898|   864k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   864k|                           generic_strtod);
  900|   864k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   864k|    {
  732|   864k|        CharT* end{};
  733|   864k|        errno = 0;
  734|   864k|        value = strtod_cb(src, &end);
  735|   864k|        const auto saved_errno = errno;
  736|   864k|        auto chars_read = end - src;
  737|       |
  738|   864k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   864k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   864k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 648, False: 863k]
  |  |  ------------------
  ------------------
  740|    648|            return unexpected(e);
  741|    648|        }
  742|       |
  743|   863k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 181k, False: 682k]
  ------------------
  744|   863k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 181k, False: 0]
  ------------------
  745|   181k|            chars_read -= 2;
  746|   181k|        }
  747|       |
  748|   863k|        return chars_read;
  749|   864k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  1.17M|    {
  778|  1.17M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 491k, False: 684k]
  |  Branch (778:37): [True: 0, False: 491k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  1.17M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 29.6k, False: 1.14M]
  ------------------
  785|  1.17M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 29.6k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  1.17M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 866, False: 1.17M]
  |  Branch (791:34): [True: 131, False: 735]
  ------------------
  792|    131|            SCN_UNLIKELY_ATTR
  793|    131|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    131|        }
  795|       |
  796|  1.17M|        SCN_GCC_COMPAT_PUSH
  797|  1.17M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  1.17M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 1.17M, False: 0]
  ------------------
  800|  1.17M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 1.17M, False: 0]
  ------------------
  801|  1.17M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 735, False: 1.17M]
  ------------------
  802|    735|            SCN_UNLIKELY_ATTR
  803|    735|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|    735|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  1.17M|            return {};
  809|  1.17M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  1.17M|{
  695|  1.17M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 491k, False: 684k]
  |  Branch (695:26): [True: 0, False: 684k]
  ------------------
  696|  1.17M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   864k|    {
  755|   864k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 802k, False: 62.0k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   802k|            auto first_space = read_until_classic_space(input.view());
  758|   802k|            input.assign(
  759|   802k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   802k|        }
  761|       |
  762|   864k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 181k, False: 683k]
  ------------------
  763|   181k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   181k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   181k|        }
  770|       |
  771|   864k|        return input.get_allocated_string().c_str();
  772|   864k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|   864k|    {
  905|   864k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   864k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   864k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|   864k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   864k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|       |        if constexpr (std::is_same_v<T, float>) {
  838|       |            return std::strtof(str, str_end);
  839|       |        }
  840|       |        else if constexpr (std::is_same_v<T, double>) {
  841|       |            return std::strtod(str, str_end);
  842|       |        }
  843|   864k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   864k|            return std::strtold(str, str_end);
  845|   864k|        }
  846|   864k|#endif
  847|   864k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   347k|{
 1138|   347k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 347k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   347k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 347k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   347k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 347k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   347k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 347k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   347k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   347k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 71.3k, False: 276k]
  ------------------
 1185|  71.3k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  71.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.4k, False: 60.8k]
  |  |  ------------------
  ------------------
 1186|  10.4k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  10.4k|                                         "Invalid floating-point digit");
 1188|  10.4k|        }
 1189|  71.3k|    }
 1190|   337k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.3k, False: 311k]
  |  |  ------------------
  ------------------
 1191|  26.3k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  26.3k|                                     "Invalid floating-point digit");
 1193|  26.3k|    }
 1194|       |
 1195|   311k|    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|   311k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   311k|            return fast_float_fallback(data, value);
 1208|   311k|        }
 1209|       |    }
 1210|       |    else {
 1211|       |        // Default to fast_float
 1212|       |        return fast_float_impl<CharT, T>{data}(value);
 1213|       |    }
 1214|   311k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   311k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   311k|    {
 1048|   311k|#if !SCN_DISABLE_STRTOD
 1049|   311k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   311k|    }
 1056|   311k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  892|   311k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   311k|    {
  894|   311k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|   311k|    {
  898|   311k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   311k|                           generic_strtod);
  900|   311k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   311k|    {
  732|   311k|        CharT* end{};
  733|   311k|        errno = 0;
  734|   311k|        value = strtod_cb(src, &end);
  735|   311k|        const auto saved_errno = errno;
  736|   311k|        auto chars_read = end - src;
  737|       |
  738|   311k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   311k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   311k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 218, False: 310k]
  |  |  ------------------
  ------------------
  740|    218|            return unexpected(e);
  741|    218|        }
  742|       |
  743|   310k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 60.8k, False: 250k]
  ------------------
  744|   310k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 60.8k, False: 0]
  ------------------
  745|  60.8k|            chars_read -= 2;
  746|  60.8k|        }
  747|       |
  748|   310k|        return chars_read;
  749|   311k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   311k|    {
  755|   311k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 305k, False: 5.25k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   305k|            auto first_space = read_until_classic_space(input.view());
  758|   305k|            input.assign(
  759|   305k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   305k|        }
  761|       |
  762|   311k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 60.8k, False: 250k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  60.8k|            else {
  767|  60.8k|                input.get_allocated_string().insert(0, L"0x");
  768|  60.8k|            }
  769|  60.8k|        }
  770|       |
  771|   311k|        return input.get_allocated_string().c_str();
  772|   311k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|   311k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|   311k|        else {
  909|   311k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   311k|        }
  911|   311k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|   311k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|   311k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|       |        if constexpr (std::is_same_v<T, float>) {
  876|       |            return std::wcstof(str, str_end);
  877|       |        }
  878|       |        else if constexpr (std::is_same_v<T, double>) {
  879|       |            return std::wcstod(str, str_end);
  880|       |        }
  881|   311k|        else if constexpr (std::is_same_v<T, long double>) {
  882|   311k|            return std::wcstold(str, str_end);
  883|   311k|        }
  884|   311k|#endif
  885|   311k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  1.40M|{
 2073|  1.40M|    const auto argcount = args.size();
 2074|  1.40M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 286k, False: 1.11M]
  |  Branch (2074:60): [True: 286k, False: 0]
  ------------------
 2075|   286k|        auto arg = args.get(0);
 2076|   286k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   286k|    static_cast<    \
  |  |  929|   286k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   286k|    }
 2078|       |
 2079|  1.11M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 1.11M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  1.11M|    SCN_UNLIKELY_ATTR
 2087|  1.11M|    {
 2088|  1.11M|        auto handler = format_handler<false, CharT>{
 2089|  1.11M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.11M|    static_cast<    \
  |  |  929|  1.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.11M|    static_cast<    \
  |  |  929|  1.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  1.11M|        return vscan_parse_format_string(format, handler);
 2091|  1.11M|    }
 2092|  1.11M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  2.61M|{
 1625|  2.61M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 2.06M, False: 549k]
  ------------------
 1626|  2.06M|        return false;
 1627|  2.06M|    }
 1628|   549k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 549k, False: 0]
  |  Branch (1628:39): [True: 549k, False: 0]
  ------------------
 1629|  2.61M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   429k|{
 1658|   429k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   429k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 429k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   429k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   429k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 429k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   429k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   429k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   429k|    static_cast<    \
  |  |  929|   429k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   429k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   429k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   429k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   429k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   429k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24.3k, False: 405k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  24.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  24.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  24.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  24.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  24.3k|    }                                                  \
  |  |  |  | 3671|   429k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   405k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   405k|    return it.position();
 1675|   429k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|   950k|        : format_handler_base{argcount},
 1900|   950k|          parse_ctx{format},
 1901|   950k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   950k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   950k|    static_cast<    \
  |  |  929|   950k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   950k|    static_cast<    \
  |  |  929|   950k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   950k|    {
 1903|   950k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|  3.02M|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|  3.02M|    {
 1722|  3.02M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.02M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  3.02M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|   950k|        : contiguous_ctx(source, args, loc)
 1852|   950k|    {
 1853|   950k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   950k|{
 2038|   950k|    const auto beg = handler.get_ctx().begin();
 2039|   950k|    detail::parse_format_string<false>(format, handler);
 2040|   950k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   950k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 81.0k, False: 869k]
  |  |  ------------------
  ------------------
 2041|  81.0k|        return unexpected(handler.error);
 2042|  81.0k|    }
 2043|   869k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   950k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  6.49M|    {
 2022|  6.49M|        return ctx.get();
 2023|  6.49M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  6.49M|    {
 1857|  6.49M|        return contiguous_ctx;
 1858|  6.49M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  1.81M|    {
 1907|  1.81M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.81M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.81M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   950k|{
 1681|   950k|    auto arg = ctx.arg(id);
 1682|   950k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   950k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 950k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   950k|    return arg;
 1686|   950k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  3.02M|    {
 1797|  3.02M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.02M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  3.02M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.02M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  3.02M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.02M, False: 0]
  |  |  ------------------
  ------------------
 1807|  3.02M|            visited_args_lower64 |= (1ull << id);
 1808|  3.02M|            return;
 1809|  3.02M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  3.02M|    {
 1782|  3.02M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.02M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  3.02M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.02M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.02M, False: 0]
  |  |  ------------------
  ------------------
 1788|  3.02M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  3.02M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  3.02M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   486k|    {
 1766|   486k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   486k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 486k, False: 0]
  |  |  ------------------
  ------------------
 1767|   486k|            error = err;
 1768|   486k|        }
 1769|   486k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   950k|    {
 1944|   950k|        return parse_ctx.next_arg_id();
 1945|   950k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   950k|    {
 1985|   950k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   950k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   950k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 950k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   950k|        auto specs = detail::format_specs{};
 1998|   950k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   950k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   950k|            arg.type()};
 2001|       |
 2002|   950k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   950k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 950k]
  |  Branch (2003:29): [True: 0, False: 950k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   950k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   950k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 950k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   950k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   950k|        on_visit_scan_arg(
 2014|   950k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   950k|                                           get_ctx().locale()},
 2016|   950k|            arg);
 2017|   950k|        return parse_ctx.begin();
 2018|   950k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|   950k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   950k|    {
 1701|   950k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   950k|    {
 1956|   950k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 950k]
  |  Branch (1956:23): [True: 0, False: 950k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   950k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   950k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   950k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   950k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 81.0k, False: 869k]
  |  |  ------------------
  ------------------
 1963|  81.0k|            on_error(r.error());
 1964|  81.0k|        }
 1965|   869k|        else {
 1966|   869k|            get_ctx().advance_to(*r);
 1967|   869k|        }
 1968|   950k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  3.02M|    {
 1729|  3.02M|        {
 1730|  3.02M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 3.02M]
  ------------------
 1731|  3.02M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 3.02M]
  ------------------
 1732|  3.02M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  3.02M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  3.02M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 3.02M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  3.02M|        }
 1739|       |
 1740|  3.02M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 3.02M, False: 0]
  ------------------
 1741|  3.02M|            return;
 1742|  3.02M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  3.02M|    {
 1777|  3.02M|        return error;
 1778|  3.02M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  9.08M|    {
 1773|  9.08M|        return static_cast<bool>(error);
 1774|  9.08M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1899|  1.11M|        : format_handler_base{argcount},
 1900|  1.11M|          parse_ctx{format},
 1901|  1.11M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.11M|    static_cast<    \
  |  |  929|  1.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.11M|    static_cast<    \
  |  |  929|  1.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  1.11M|    {
 1903|  1.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1828|  1.11M|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|  1.11M|    static_cast<    \
  |  |  929|  1.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|  1.11M|    {
 1830|  1.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.11M|{
 2038|  1.11M|    const auto beg = handler.get_ctx().begin();
 2039|  1.11M|    detail::parse_format_string<false>(format, handler);
 2040|  1.11M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 81.0k, False: 1.03M]
  |  |  ------------------
  ------------------
 2041|  81.0k|        return unexpected(handler.error);
 2042|  81.0k|    }
 2043|  1.03M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.11M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  7.63M|    {
 2022|  7.63M|        return ctx.get();
 2023|  7.63M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  7.63M|    {
 1834|  7.63M|        return ctx;
 1835|  7.63M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  2.14M|    {
 1907|  2.14M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 2.14M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  2.14M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.11M|{
 1681|  1.11M|    auto arg = ctx.arg(id);
 1682|  1.11M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.11M|    return arg;
 1686|  1.11M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  1.11M|    {
 1944|  1.11M|        return parse_ctx.next_arg_id();
 1945|  1.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  1.11M|    {
 1985|  1.11M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.11M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.11M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.11M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.11M|        auto specs = detail::format_specs{};
 1998|  1.11M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.11M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.11M|            arg.type()};
 2001|       |
 2002|  1.11M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.11M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.11M]
  |  Branch (2003:29): [True: 0, False: 1.11M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  1.11M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  1.11M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.11M|        on_visit_scan_arg(
 2014|  1.11M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.11M|                                           get_ctx().locale()},
 2016|  1.11M|            arg);
 2017|  1.11M|        return parse_ctx.begin();
 2018|  1.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1699|  1.11M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  1.11M|    {
 1701|  1.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  1.11M|    {
 1956|  1.11M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.11M]
  |  Branch (1956:23): [True: 0, False: 1.11M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.11M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.11M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 81.0k, False: 1.03M]
  |  |  ------------------
  ------------------
 1963|  81.0k|            on_error(r.error());
 1964|  81.0k|        }
 1965|  1.03M|        else {
 1966|  1.03M|            get_ctx().advance_to(*r);
 1967|  1.03M|        }
 1968|  1.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  1.21M|{
 2053|  1.21M|    const auto argcount = args.size();
 2054|  1.21M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 263k, False: 950k]
  |  Branch (2054:60): [True: 263k, False: 0]
  ------------------
 2055|   263k|        auto arg = args.get(0);
 2056|   263k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   263k|    static_cast<    \
  |  |  929|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   263k|    }
 2058|       |
 2059|   950k|    auto handler = format_handler<true, CharT>{
 2060|   950k|        ranges::subrange<const CharT*>{source.data(),
 2061|   950k|                                       source.data() + source.size()},
 2062|   950k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   950k|    static_cast<    \
  |  |  929|   950k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   950k|    static_cast<    \
  |  |  929|   950k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   950k|    return vscan_parse_format_string(format, handler);
 2064|  1.21M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   394k|{
 1638|   394k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 394k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   394k|    auto reader =
 1644|   394k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   394k|            ranges::subrange<const CharT*>{source.data(),
 1646|   394k|                                           source.data() + source.size()},
 1647|   394k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   394k|    static_cast<    \
  |  |  929|   394k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   394k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   394k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   394k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   394k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24.3k, False: 370k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  24.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  24.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  24.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  24.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  24.3k|    }                                                  \
  |  |  |  | 3671|   394k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   370k|    return ranges::distance(source.data(), it);
 1650|   394k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   597k|{
 2053|   597k|    const auto argcount = args.size();
 2054|   597k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 115k, False: 481k]
  |  Branch (2054:60): [True: 115k, False: 0]
  ------------------
 2055|   115k|        auto arg = args.get(0);
 2056|   115k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   115k|    }
 2058|       |
 2059|   481k|    auto handler = format_handler<true, CharT>{
 2060|   481k|        ranges::subrange<const CharT*>{source.data(),
 2061|   481k|                                       source.data() + source.size()},
 2062|   481k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   481k|    static_cast<    \
  |  |  929|   481k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   481k|    static_cast<    \
  |  |  929|   481k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   481k|    return vscan_parse_format_string(format, handler);
 2064|   597k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  1.19M|{
 1625|  1.19M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 963k, False: 231k]
  ------------------
 1626|   963k|        return false;
 1627|   963k|    }
 1628|   231k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 231k, False: 0]
  |  Branch (1628:39): [True: 231k, False: 0]
  ------------------
 1629|  1.19M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   173k|{
 1638|   173k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   173k|    auto reader =
 1644|   173k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   173k|            ranges::subrange<const CharT*>{source.data(),
 1646|   173k|                                           source.data() + source.size()},
 1647|   173k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   173k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   173k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   173k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   173k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48.6k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  48.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  48.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  48.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  48.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  48.6k|    }                                                  \
  |  |  |  | 3671|   173k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   124k|    return ranges::distance(source.data(), it);
 1650|   173k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|   481k|        : format_handler_base{argcount},
 1900|   481k|          parse_ctx{format},
 1901|   481k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   481k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   481k|    static_cast<    \
  |  |  929|   481k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   481k|    static_cast<    \
  |  |  929|   481k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   481k|    {
 1903|   481k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|   481k|        : contiguous_ctx(source, args, loc)
 1852|   481k|    {
 1853|   481k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   481k|{
 2038|   481k|    const auto beg = handler.get_ctx().begin();
 2039|   481k|    detail::parse_format_string<false>(format, handler);
 2040|   481k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 162k, False: 319k]
  |  |  ------------------
  ------------------
 2041|   162k|        return unexpected(handler.error);
 2042|   162k|    }
 2043|   319k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   481k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  3.04M|    {
 2022|  3.04M|        return ctx.get();
 2023|  3.04M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  3.04M|    {
 1857|  3.04M|        return contiguous_ctx;
 1858|  3.04M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   801k|    {
 1907|   801k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 801k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   801k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   481k|{
 1681|   481k|    auto arg = ctx.arg(id);
 1682|   481k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 481k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   481k|    return arg;
 1686|   481k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   481k|    {
 1944|   481k|        return parse_ctx.next_arg_id();
 1945|   481k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   481k|    {
 1985|   481k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   481k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   481k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 481k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   481k|        auto specs = detail::format_specs{};
 1998|   481k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   481k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   481k|            arg.type()};
 2001|       |
 2002|   481k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   481k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 481k]
  |  Branch (2003:29): [True: 0, False: 481k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   481k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 481k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   481k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   481k|        on_visit_scan_arg(
 2014|   481k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   481k|                                           get_ctx().locale()},
 2016|   481k|            arg);
 2017|   481k|        return parse_ctx.begin();
 2018|   481k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|   481k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   481k|    {
 1701|   481k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   481k|    {
 1956|   481k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 481k]
  |  Branch (1956:23): [True: 0, False: 481k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   481k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   481k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   481k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 162k, False: 319k]
  |  |  ------------------
  ------------------
 1963|   162k|            on_error(r.error());
 1964|   162k|        }
 1965|   319k|        else {
 1966|   319k|            get_ctx().advance_to(*r);
 1967|   319k|        }
 1968|   481k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   596k|{
 2073|   596k|    const auto argcount = args.size();
 2074|   596k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 115k, False: 481k]
  |  Branch (2074:60): [True: 115k, False: 0]
  ------------------
 2075|   115k|        auto arg = args.get(0);
 2076|   115k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   115k|    static_cast<    \
  |  |  929|   115k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   115k|    }
 2078|       |
 2079|   481k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 481k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   481k|    SCN_UNLIKELY_ATTR
 2087|   481k|    {
 2088|   481k|        auto handler = format_handler<false, CharT>{
 2089|   481k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   481k|    static_cast<    \
  |  |  929|   481k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   481k|    static_cast<    \
  |  |  929|   481k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   481k|        return vscan_parse_format_string(format, handler);
 2091|   481k|    }
 2092|   481k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   173k|{
 1658|   173k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   173k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   173k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   173k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   173k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   173k|    static_cast<    \
  |  |  929|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   173k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   173k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   173k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   173k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 48.6k, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  48.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  48.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  48.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  48.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  48.6k|    }                                                  \
  |  |  |  | 3671|   173k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   124k|    return it.position();
 1675|   173k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1899|   481k|        : format_handler_base{argcount},
 1900|   481k|          parse_ctx{format},
 1901|   481k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   481k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   481k|    static_cast<    \
  |  |  929|   481k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   481k|    static_cast<    \
  |  |  929|   481k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   481k|    {
 1903|   481k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1828|   481k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   481k|    static_cast<    \
  |  |  929|   481k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   481k|    {
 1830|   481k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   481k|{
 2038|   481k|    const auto beg = handler.get_ctx().begin();
 2039|   481k|    detail::parse_format_string<false>(format, handler);
 2040|   481k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 162k, False: 319k]
  |  |  ------------------
  ------------------
 2041|   162k|        return unexpected(handler.error);
 2042|   162k|    }
 2043|   319k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   481k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  3.04M|    {
 2022|  3.04M|        return ctx.get();
 2023|  3.04M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  3.04M|    {
 1834|  3.04M|        return ctx;
 1835|  3.04M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   800k|    {
 1907|   800k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 800k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   800k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   481k|{
 1681|   481k|    auto arg = ctx.arg(id);
 1682|   481k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 481k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   481k|    return arg;
 1686|   481k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   481k|    {
 1944|   481k|        return parse_ctx.next_arg_id();
 1945|   481k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   481k|    {
 1985|   481k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   481k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   481k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 481k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   481k|        auto specs = detail::format_specs{};
 1998|   481k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   481k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   481k|            arg.type()};
 2001|       |
 2002|   481k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   481k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 481k]
  |  Branch (2003:29): [True: 0, False: 481k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   481k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 481k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   481k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   481k|        on_visit_scan_arg(
 2014|   481k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   481k|                                           get_ctx().locale()},
 2016|   481k|            arg);
 2017|   481k|        return parse_ctx.begin();
 2018|   481k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1699|   481k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   481k|    {
 1701|   481k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   481k|    {
 1956|   481k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 481k]
  |  Branch (1956:23): [True: 0, False: 481k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   481k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   481k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   481k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 162k, False: 319k]
  |  |  ------------------
  ------------------
 1963|   162k|            on_error(r.error());
 1964|   162k|        }
 1965|   319k|        else {
 1966|   319k|            get_ctx().advance_to(*r);
 1967|   319k|        }
 1968|   481k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   131k|{
 2099|   131k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   131k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   143k|{
 2099|   143k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   143k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  57.7k|{
 2099|  57.7k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  57.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  57.7k|{
 2099|  57.7k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  57.7k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  2.70k|{
 1363|  2.70k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  2.70k|    if constexpr (sizeof(SourceCharT) == 1) {
 1366|       |        if constexpr (sizeof(DestCharT) == 2) {
 1367|       |            std::u32string tmp;
 1368|       |            transcode_to_string_impl_to32(src, tmp);
 1369|       |            return transcode_to_string_impl_32to16<false>(
 1370|       |                std::u32string_view{tmp}, dest);
 1371|       |        }
 1372|  2.70k|        else if constexpr (sizeof(DestCharT) == 4) {
 1373|  2.70k|            return transcode_to_string_impl_to32(src, dest);
 1374|  2.70k|        }
 1375|       |    }
 1376|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|       |        if constexpr (sizeof(DestCharT) == 1) {
 1378|       |            std::u32string tmp;
 1379|       |            transcode_to_string_impl_to32(src, tmp);
 1380|       |            return transcode_to_string_impl_32to8<false>(
 1381|       |                std::u32string_view{tmp}, dest);
 1382|       |        }
 1383|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1384|       |            return trasncode_to_string_impl_to32(src, dest);
 1385|       |        }
 1386|       |    }
 1387|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|       |        if constexpr (sizeof(DestCharT) == 1) {
 1389|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|       |        }
 1391|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1392|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|       |        }
 1394|       |    }
 1395|       |
 1396|  2.70k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  2.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|  2.70k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  2.70k|{
 1256|  2.70k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  2.70k|    auto it = src.begin();
 1259|   823k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 820k, False: 2.70k]
  ------------------
 1260|   820k|        auto res = get_next_code_point(
 1261|   820k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   820k|                                                                 src.end()));
 1263|   820k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   820k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.78k, False: 817k]
  |  |  ------------------
  ------------------
 1264|  2.78k|            dest.push_back(DestCharT{0xfffd});
 1265|  2.78k|        }
 1266|   817k|        else {
 1267|   817k|            dest.push_back(res.value);
 1268|   817k|        }
 1269|   820k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   820k|    }
 1271|  2.70k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.18M|{
 1169|  1.18M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.18M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.18M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.1k, False: 1.15M]
  |  |  ------------------
  ------------------
 1173|  32.1k|        return {get_start_for_next_code_point(input),
 1174|  32.1k|                detail::invalid_code_point};
 1175|  32.1k|    }
 1176|  1.15M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.81k, False: 1.15M]
  |  |  ------------------
  ------------------
 1177|  4.81k|        return {input.end(), detail::invalid_code_point};
 1178|  4.81k|    }
 1179|       |
 1180|  1.15M|    return {input.begin() + len,
 1181|  1.15M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.15M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  32.1k|{
 1155|  32.1k|    auto it = input.begin();
 1156|   262k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 254k, False: 7.73k]
  ------------------
 1157|   254k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 24.4k, False: 229k]
  ------------------
 1158|  24.4k|            break;
 1159|  24.4k|        }
 1160|   254k|    }
 1161|  32.1k|    return it;
 1162|  32.1k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  33.1M|    constexpr parse_error(code c) : m_code(c)
  808|  33.1M|    {
  809|  33.1M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  33.1M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  33.1M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  12.4M|    {
  823|  12.4M|        return a.m_code == b.m_code;
  824|  12.4M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1726|  1.72M|    clocale_restorer(int cat) : m_category(cat)
 1727|  1.72M|    {
 1728|  1.72M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  1.72M|        std::strcpy(m_locbuf, loc);
 1730|  1.72M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  1.72M|    {
 1733|       |        // Restore locale to what it was before
 1734|  1.72M|        std::setlocale(m_category, m_locbuf);
 1735|  1.72M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1755|  1.72M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1756|  1.72M|    {
 1757|  1.72M|        std::setlocale(cat, "C");
 1758|  1.72M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  3.02M|    {
 2936|  3.02M|        return m_msg == nullptr;
 2937|  3.02M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  2.99M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  21.3M|{
  458|  21.3M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  21.3M|        static_cast<unsigned char>(ch))];
  460|  21.3M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   124k|{
  469|   124k|    return static_cast<unsigned char>(ch) <= 127;
  470|   124k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  4.91M|{
  539|  4.91M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  4.91M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  14.0M|{
  784|  14.0M|    return e != eof_error::good;
  785|  14.0M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  45.5k|{
  798|  45.5k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  45.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  45.5k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  45.5k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   213k|{
  845|   213k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   213k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   213k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   213k|    return parse_error::eof;
  847|   213k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  4.38M|{
  854|  4.38M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 4.38M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  4.38M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 78.3k, False: 4.31M]
  ------------------
  859|  78.3k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  78.3k|    }
  861|       |
  862|  4.31M|    return scan_error{code, msg};
  863|  4.38M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  4.38M|{
  868|  4.38M|    return [code, msg](parse_error err) {
  869|  4.38M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  4.38M|    };
  871|  4.38M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  5.99M|{
 1200|       |    // Pattern_White_Space property
 1201|  5.99M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 5.74M, False: 249k]
  |  Branch (1201:27): [True: 1.23M, False: 4.51M]
  ------------------
 1202|  5.99M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 83.7k, False: 4.68M]
  ------------------
 1203|  5.99M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 57.4k, False: 4.62M]
  ------------------
 1204|  5.99M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 3.89k, False: 4.61M]
  ------------------
 1205|  5.99M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 23.6k, False: 4.59M]
  ------------------
 1206|  5.99M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 1.04M, False: 3.55M]
  ------------------
 1207|  5.99M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 154, False: 3.55M]
  ------------------
 1208|  5.99M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  3.49M|{
 2220|  3.49M|    unsigned char running_diff{0};
 2221|  13.1M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 9.65M, False: 3.49M]
  ------------------
 2222|  9.65M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  9.65M|    }
 2224|  3.49M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 102k, False: 3.39M]
  |  Branch (2224:33): [True: 18.6k, False: 3.37M]
  ------------------
 2225|  3.49M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  25.2M|{
 3123|  25.2M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  25.2M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  3.45M|{
 3127|  3.45M|#if WCHAR_MIN < 0
 3128|  3.45M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 3.43M, False: 16.4k]
  |  Branch (3128:20): [True: 2.13M, False: 1.30M]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  2.13M|        return char_to_int(static_cast<char>(ch));
 3133|  2.13M|    }
 3134|  1.32M|    return 255;
 3135|  3.45M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  2.54M|{
 6008|  2.54M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 2.54M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  2.54M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 2.54M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  2.54M|    return {};
 6023|  2.54M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  3.91M|    {
  304|  3.91M|        ranges::advance(x, n);
  305|  3.91M|        return x;
  306|  3.91M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  3.91M|    {
  268|  3.91M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.91M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  3.91M|    {
  151|  3.91M|        i += n;
  152|  3.91M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  4.62M|    {
  108|  4.62M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  4.62M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  4.62M|    {
   87|  4.62M|        return s - i;
   88|  4.62M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.10M|    {
  304|  2.10M|        ranges::advance(x, n);
  305|  2.10M|        return x;
  306|  2.10M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.10M|    {
  268|  2.10M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.10M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.10M|    {
  151|  2.10M|        i += n;
  152|  2.10M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   595k|    {
  108|   595k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   595k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   595k|    {
   87|   595k|        return s - i;
   88|   595k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  1.54M|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|  1.54M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  1.54M|        auto beg = r.begin();
  990|  1.54M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 1.54M, False: 0]
  ------------------
  991|  1.54M|            return false;
  992|  1.54M|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  1.54M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  40.2M|    {
  763|  40.2M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  40.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  40.2M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  4.06M|{
 1857|  4.06M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  4.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|       |    if constexpr (ranges::sized_range<Range>) {
 1860|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|       |        if (sz < count) {
 1862|       |            return unexpected(eof_error::eof);
 1863|       |        }
 1864|       |
 1865|       |        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|  4.06M|    else {
 1868|  4.06M|        auto it = range.begin();
 1869|  4.06M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 2.50M, False: 1.55M]
  ------------------
 1870|  2.50M|            return ranges::next(it, count);
 1871|  2.50M|        }
 1872|       |
 1873|  6.20M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 4.67M, False: 1.52M]
  ------------------
 1874|  4.67M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 37.3k, False: 4.64M]
  ------------------
 1875|  37.3k|                return unexpected(eof_error::eof);
 1876|  37.3k|            }
 1877|  4.67M|        }
 1878|       |
 1879|  1.52M|        return it;
 1880|  1.55M|    }
 1881|  4.06M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  4.06M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  4.06M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  4.06M|        else {
 1106|  4.06M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 4.06M, False: 0]
  ------------------
 1107|  4.06M|                return static_cast<size_t>(
 1108|  4.06M|                    r.begin().parent()->chars_available() -
 1109|  4.06M|                    r.begin().position());
 1110|  4.06M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  4.06M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  4.06M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  3.74M|        : m_fptr([](storage fn,
  743|  3.74M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.74M|              cvref<T> obj = *get<T>(fn);
  745|  3.74M|              if constexpr (std::is_void_v<R>) {
  746|  3.74M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.74M|              }
  748|  3.74M|              else {
  749|  3.74M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.74M|              }
  751|  3.74M|          }),
  752|  3.74M|          m_storage(std::addressof(f))
  753|  3.74M|    {
  754|  3.74M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  20.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.1M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  20.1M|              else {
  749|  20.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.1M|              }
  751|  20.1M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  20.1M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  20.1M|        else if constexpr (std::is_object_v<T>) {
  688|  20.1M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  20.1M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  3.74M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.74M|        {
  662|  3.74M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  10.4M|    {
  763|  10.4M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  10.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  10.4M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.67M|        : m_fptr([](storage fn,
  743|  2.67M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.67M|              cvref<T> obj = *get<T>(fn);
  745|  2.67M|              if constexpr (std::is_void_v<R>) {
  746|  2.67M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.67M|              }
  748|  2.67M|              else {
  749|  2.67M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.67M|              }
  751|  2.67M|          }),
  752|  2.67M|          m_storage(std::addressof(f))
  753|  2.67M|    {
  754|  2.67M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  4.82M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.82M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.82M|              else {
  749|  4.82M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.82M|              }
  751|  4.82M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  4.82M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.82M|        else if constexpr (std::is_object_v<T>) {
  688|  4.82M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.82M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.67M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.67M|        {
  662|  2.67M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  1.11M|    {
 6037|  1.11M|        const bool need_skipped_width =
 6038|  1.11M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.11M]
  |  Branch (6038:33): [True: 0, False: 1.11M]
  ------------------
 6039|  1.11M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.11M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.11M]
  ------------------
 6043|  1.11M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.11M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.11M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.11M, False: 0]
  |  Branch (6047:56): [True: 1.11M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.11M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.11M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  2.21M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.11M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.11M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.11M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.8k, False: 1.09M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  15.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  15.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  15.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  15.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  15.8k|    }                                                  \
  |  |  |  | 3671|  1.11M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  2.21M|                            make_eof_scan_error));
 6058|       |
 6059|  2.21M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.09M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.09M|            return result_type{it, 0};
 6067|  2.21M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.11M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.97M|{
 1976|  2.97M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.97M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.97M|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|  2.97M|    else {
 1961|  2.97M|        auto first = range.begin();
 1962|  16.1M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 16.1M, False: 29.0k]
  ------------------
 1963|  16.1M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.94M, False: 13.1M]
  ------------------
 1964|  2.94M|                return first;
 1965|  2.94M|            }
 1966|  16.1M|        }
 1967|  29.0k|        return first;
 1968|  2.97M|    }
 1969|  2.97M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  2.65M|    {
  108|  2.65M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.65M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  2.65M|    {
   94|  2.65M|        iter_difference_t<I> counter{0};
   95|  26.2M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 23.5M, False: 2.65M]
  ------------------
   96|  23.5M|            ++i;
   97|  23.5M|            ++counter;
   98|  23.5M|        }
   99|  2.65M|        return counter;
  100|  2.65M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  4.38M|    return [code, msg](parse_error err) {
  869|  4.38M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  4.38M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|   570k|    {
 1780|   570k|        auto stdloc = loc.get<std::locale>();
 1781|   570k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   570k|        grouping = numpunct.grouping();
 1783|   570k|        thousands_sep =
 1784|   570k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 570k]
  ------------------
 1785|   570k|        decimal_point = numpunct.decimal_point();
 1786|   570k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|   570k|{
 1717|   570k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 570k, False: 0]
  ------------------
 1718|   570k|        return std::use_facet<Facet>(stdloc);
 1719|   570k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   570k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  4.34M|{
 1846|  4.34M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.3k, False: 4.32M]
  |  |  ------------------
  ------------------
 1847|  21.3k|        return unexpected(e);
 1848|  21.3k|    }
 1849|       |
 1850|  4.32M|    return ranges::next(range.begin());
 1851|  4.34M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  6.31M|{
  950|  6.31M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  6.31M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.3k, False: 6.27M]
  |  |  ------------------
  ------------------
  951|  42.3k|        return eof_error::eof;
  952|  42.3k|    }
  953|  6.27M|    return eof_error::good;
  954|  6.31M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  8.93M|{
  944|  8.93M|    return is_range_eof(r.begin(), r.end());
  945|  8.93M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  8.93M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  8.93M|    {
  937|  8.93M|        return begin == end;
  938|  8.93M|    }
  939|  8.93M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  4.32M|    {
  296|  4.32M|        ++x;
  297|  4.32M|        return x;
  298|  4.32M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  1.66M|{
 3141|  1.66M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.66M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.28M, False: 373k]
  ------------------
 3143|  1.28M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.28M, False: 309]
  ------------------
 3144|  1.28M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.28M|        }
 3146|    309|        return unexpected(eof_error::eof);
 3147|  1.28M|    }
 3148|       |
 3149|   373k|    auto& it = *r;
 3150|   373k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 152k, False: 221k]
  ------------------
 3151|   152k|        return std::pair{it, sign_type::minus_sign};
 3152|   152k|    }
 3153|   221k|    return std::pair{it, sign_type::plus_sign};
 3154|   373k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  2.90M|{
 2272|  2.90M|    auto it = read_code_unit(range);
 2273|  2.90M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.5k, False: 2.89M]
  |  |  ------------------
  ------------------
 2274|  12.5k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  12.5k|    }
 2276|       |
 2277|  5.47M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 5.47M, False: 2.37M]
  ------------------
 2278|  5.47M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 512k, False: 4.96M]
  ------------------
 2279|   512k|            return *it;
 2280|   512k|        }
 2281|  5.47M|    }
 2282|       |
 2283|  2.37M|    return unexpected(parse_error::error);
 2284|  2.89M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  4.06M|{
 2231|  4.06M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|  4.06M|    else {
 2244|  4.06M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.06M|            if (ch < 'A' || ch > 'Z') {
 2246|  4.06M|                return ch;
 2247|  4.06M|            }
 2248|  4.06M|            return static_cast<char_type>(ch +
 2249|  4.06M|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.06M|        };
 2251|       |
 2252|  4.06M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  4.06M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.06M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.06M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.3k, False: 4.02M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  37.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  37.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  37.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  37.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  37.3k|    }                                                  \
  |  |  |  | 3671|  4.06M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  4.02M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  4.02M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  4.02M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  4.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.89M, False: 125k]
  |  |  ------------------
  ------------------
 2257|  4.02M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  4.02M|                    return ascii_tolower(a) ==
 2259|  4.02M|                           static_cast<detail::char_t<Range>>(b);
 2260|  4.02M|                }))) {
 2261|  3.89M|            return unexpected(parse_error::error);
 2262|  3.89M|        }
 2263|       |
 2264|   125k|        return it;
 2265|  4.02M|    }
 2266|  4.06M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  4.63M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.63M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 4.21M, False: 419k]
  |  Branch (2245:29): [True: 352k, False: 66.6k]
  ------------------
 2246|  4.57M|                return ch;
 2247|  4.57M|            }
 2248|  66.6k|            return static_cast<char_type>(ch +
 2249|  66.6k|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.63M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  1.44M|{
 2146|  1.44M|    auto it = read_code_unit(range);
 2147|  1.44M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.44M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.80k, False: 1.43M]
  |  |  ------------------
  ------------------
 2148|  8.80k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  8.80k|    }
 2150|       |
 2151|  1.43M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.43M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.17M, False: 264k]
  |  |  ------------------
  ------------------
 2152|  1.43M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.17M|        return unexpected(parse_error::error);
 2154|  1.17M|    }
 2155|       |
 2156|   264k|    return *it;
 2157|  1.43M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  2.97M|{
 1996|  2.97M|    auto it = read_while_code_unit(range, pred);
 1997|  2.97M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.21M, False: 1.76M]
  ------------------
 1998|  1.21M|        return unexpected(parse_error::error);
 1999|  1.21M|    }
 2000|  1.76M|    return it;
 2001|  2.97M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  1.37M|    {
 1621|  1.37M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|  1.37M|                           ranges::common_range<Range>) {
 1638|  1.37M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.37M|            auto end_seg = range.end().contiguous_segment();
 1640|  1.37M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 183k, False: 1.19M]
  |  |  ------------------
  ------------------
 1641|  1.37M|                             detail::to_address(end_seg.end()))) {
 1642|   183k|                auto& str = m_storage.emplace();
 1643|   183k|                str.reserve(range.end().position() - range.begin().position());
 1644|   183k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   183k|                m_view = string_view_type{str};
 1646|   183k|                return;
 1647|   183k|            }
 1648|       |
 1649|  1.19M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.19M|                                                            end_seg.data());
 1651|  1.19M|            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|  1.37M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  9.41M|    {
 1582|  9.41M|        return m_view;
 1583|  9.41M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  5.70M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  1.01M|    {
 6079|  1.01M|        const bool need_skipped_width =
 6080|  1.01M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.01M]
  |  Branch (6080:33): [True: 0, False: 1.01M]
  ------------------
 6081|  1.01M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.01M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.01M]
  ------------------
 6084|  1.01M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.01M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  1.01M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 1.01M, False: 0]
  ------------------
 6093|  1.01M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 1.01M]
  ------------------
 6094|  1.01M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  1.01M|        return result_type{rng.begin(), 0};
 6118|  1.01M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  1.98M|{
 1846|  1.98M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.20k, False: 1.98M]
  |  |  ------------------
  ------------------
 1847|  5.20k|        return unexpected(e);
 1848|  5.20k|    }
 1849|       |
 1850|  1.98M|    return ranges::next(range.begin());
 1851|  1.98M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  3.72M|{
  950|  3.72M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  3.72M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.4k, False: 3.70M]
  |  |  ------------------
  ------------------
  951|  22.4k|        return eof_error::eof;
  952|  22.4k|    }
  953|  3.70M|    return eof_error::good;
  954|  3.72M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  3.72M|{
  944|  3.72M|    return is_range_eof(r.begin(), r.end());
  945|  3.72M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  3.72M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  3.72M|    {
  937|  3.72M|        return begin == end;
  938|  3.72M|    }
  939|  3.72M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.98M|    {
  296|  1.98M|        ++x;
  297|  1.98M|        return x;
  298|  1.98M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  1.36M|{
 3141|  1.36M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.36M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.05M, False: 310k]
  ------------------
 3143|  1.05M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.04M, False: 102]
  ------------------
 3144|  1.04M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.04M|        }
 3146|    102|        return unexpected(eof_error::eof);
 3147|  1.05M|    }
 3148|       |
 3149|   310k|    auto& it = *r;
 3150|   310k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 137k, False: 173k]
  ------------------
 3151|   137k|        return std::pair{it, sign_type::minus_sign};
 3152|   137k|    }
 3153|   173k|    return std::pair{it, sign_type::plus_sign};
 3154|   310k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  1.57M|{
 2272|  1.57M|    auto it = read_code_unit(range);
 2273|  1.57M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.57M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.24k, False: 1.57M]
  |  |  ------------------
  ------------------
 2274|  2.24k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  2.24k|    }
 2276|       |
 2277|  2.96M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.96M, False: 1.23M]
  ------------------
 2278|  2.96M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 342k, False: 2.61M]
  ------------------
 2279|   342k|            return *it;
 2280|   342k|        }
 2281|  2.96M|    }
 2282|       |
 2283|  1.23M|    return unexpected(parse_error::error);
 2284|  1.57M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.53M|{
 2231|  3.53M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|  3.53M|                  std::is_same_v<char_type, char>) {
 2235|  3.53M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 36.7k, False: 3.49M]
  ------------------
 2236|  36.7k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  36.7k|        }
 2238|  3.49M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 3.37M, False: 121k]
  ------------------
 2239|  3.37M|            return unexpected(parse_error::error);
 2240|  3.37M|        }
 2241|   121k|        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|       |    else {
 2244|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|       |            if (ch < 'A' || ch > 'Z') {
 2246|       |                return ch;
 2247|       |            }
 2248|       |            return static_cast<char_type>(ch +
 2249|       |                                          static_cast<char_type>('a' - 'A'));
 2250|       |        };
 2251|       |
 2252|       |        SCN_TRY(it, read_exactly_n_code_units(
 2253|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|       |                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|       |        if (SCN_UNLIKELY(!std::equal(
 2257|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|       |                    return ascii_tolower(a) ==
 2259|       |                           static_cast<detail::char_t<Range>>(b);
 2260|       |                }))) {
 2261|       |            return unexpected(parse_error::error);
 2262|       |        }
 2263|       |
 2264|       |        return it;
 2265|       |    }
 2266|  3.53M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   409k|{
 2146|   409k|    auto it = read_code_unit(range);
 2147|   409k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.96k, False: 406k]
  |  |  ------------------
  ------------------
 2148|  2.96k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  2.96k|    }
 2150|       |
 2151|   406k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   406k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 337k, False: 68.7k]
  |  |  ------------------
  ------------------
 2152|   406k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   337k|        return unexpected(parse_error::error);
 2154|   337k|    }
 2155|       |
 2156|  68.7k|    return *it;
 2157|   406k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  5.11M|    {
 1503|  5.11M|        return sv;
 1504|  5.11M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   763k|{
 1976|   763k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   763k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   763k|{
 1957|   763k|    if constexpr (ranges::common_range<Range>) {
 1958|   763k|        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|       |    else {
 1961|       |        auto first = range.begin();
 1962|       |        for (; first != range.end(); ++first) {
 1963|       |            if (pred(*first)) {
 1964|       |                return first;
 1965|       |            }
 1966|       |        }
 1967|       |        return first;
 1968|       |    }
 1969|   763k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  1.34M|{
 2951|  1.34M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.34M, False: 0]
  ------------------
 2952|  1.34M|        auto it = read_while_classic_space(range);
 2953|  1.34M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.34M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.8k, False: 1.32M]
  |  |  ------------------
  ------------------
 2955|  12.8k|            return unexpected(e);
 2956|  12.8k|        }
 2957|       |
 2958|  1.32M|        return it;
 2959|  1.34M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.34M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  1.34M|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|  1.34M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|  1.34M|        auto buf = make_contiguous_buffer(range);
 2121|  1.34M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.34M|        return ranges::next(range.begin(),
 2123|  1.34M|                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|       |    else {
 2126|       |        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|       |        return read_while_code_point(
 2138|       |            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|       |    }
 2140|  1.34M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  1.34M|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|  1.34M|                  ranges::sized_range<Range>) {
 1686|  1.34M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|  1.34M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1488|  1.34M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|  1.34M|    {
 1490|  1.34M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  4.10M|    {
  304|  4.10M|        ranges::advance(x, n);
  305|  4.10M|        return x;
  306|  4.10M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  5.48M|    {
  268|  5.48M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  5.48M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  5.48M|    {
  181|  25.8M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 20.3M, False: 5.48M]
  ------------------
  182|  20.3M|            ++i;
  183|  20.3M|        }
  184|  5.48M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   360k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   360k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   360k|            auto rd = make_reader<T, char_type>();
 6206|   360k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 360k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   360k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 360k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   360k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   360k|                return impl(rd, range, value);
 6213|   360k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   360k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  2.06M|    {
 3040|  2.06M|        reader_error_handler eh{};
 3041|  2.06M|        get_derived().check_specs_impl(specs, eh);
 3042|  2.06M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.06M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  2.06M|        return {};
 3046|  2.06M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  2.06M|    {
 3051|  2.06M|        return static_cast<Derived&>(*this);
 3052|  2.06M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  2.06M|    {
 4145|  2.06M|        detail::check_float_type_specs(specs, eh);
 4146|  2.06M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   360k|    {
 6124|   360k|        const bool need_skipped_width =
 6125|   360k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 360k]
  |  Branch (6125:33): [True: 0, False: 360k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   360k|        auto it = rng.begin();
 6129|   360k|        std::ptrdiff_t prefix_width = 0;
 6130|   360k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 360k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   360k|        else {
 6138|   360k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   360k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   360k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   360k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.75k, False: 355k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.75k|    }                                                  \
  |  |  |  | 3671|   360k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   355k|            std::tie(it, prefix_width) = prefix_result;
 6140|   355k|        }
 6141|   355k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   355k|        std::ptrdiff_t value_width = 0;
 6145|   355k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 355k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   355k|        else {
 6161|   355k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   355k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   355k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   355k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22.2k, False: 333k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  22.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  22.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  22.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  22.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  22.2k|    }                                                  \
  |  | 3671|   355k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   355k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   333k|                                             specs, value, loc));
 6163|       |
 6164|   333k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 333k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   333k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   333k|        std::ptrdiff_t postfix_width = 0;
 6173|   333k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 329k, False: 3.86k]
  ------------------
 6174|   329k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   329k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   329k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   329k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 329k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   329k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   329k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   329k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   329k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   329k|                                 value_width));
 6178|   329k|            std::tie(it, postfix_width) = postfix_result;
 6179|   329k|        }
 6180|       |
 6181|   333k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   333k|                                                 value_width, postfix_width);
 6183|   333k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 333k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   333k|        return it;
 6188|   333k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  4.76M|    {
 3035|  4.76M|        return true;
 3036|  4.76M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  2.03M|    {
 4217|  2.03M|        unsigned options{};
 4218|  2.03M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 570k, False: 1.46M]
  ------------------
 4219|   570k|            options |= float_reader_base::allow_thsep;
 4220|   570k|        }
 4221|       |
 4222|  2.03M|        SCN_GCC_COMPAT_PUSH
 4223|  2.03M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  2.03M|        switch (specs.type) {
 4226|   311k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 311k, False: 1.72M]
  ------------------
 4227|   311k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  47.9k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 47.9k, False: 1.98M]
  ------------------
 4230|  47.9k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   616k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 616k, False: 1.41M]
  ------------------
 4233|   616k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   490k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 490k, False: 1.54M]
  ------------------
 4236|   490k|                return options | float_reader_base::allow_scientific |
 4237|   490k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   570k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 570k, False: 1.46M]
  ------------------
 4240|   570k|                return options | float_reader_base::allow_scientific |
 4241|   570k|                       float_reader_base::allow_fixed |
 4242|   570k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 2.03M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  2.03M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  2.03M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  2.03M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  2.03M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  2.85M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  5.70M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   883k|    {
 3691|   883k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   883k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   883k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   883k|        const std::ptrdiff_t sign_len =
 3694|   883k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 202k, False: 681k]
  ------------------
 3695|       |
 3696|   883k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   883k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   883k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   883k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   883k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.4k, False: 864k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.4k|    }                                                  \
  |  |  |  | 3671|   883k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   864k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   864k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   883k|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  2.72M|    {
 4057|  2.72M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 2.72M, False: 0]
  ------------------
 4058|  2.72M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 2.72M, False: 0]
  ------------------
 4059|  2.72M|            return;
 4060|  2.72M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  3.10M|    {
 1587|  3.10M|        return m_storage.has_value();
 1588|  3.10M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  1.82M|    {
 1592|  1.82M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  1.82M|        return *m_storage;
 1594|  1.82M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   355k|    {
 4170|   355k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   355k|#if !SCN_DISABLE_LOCALE
 4173|   355k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 99.4k, False: 255k]
  ------------------
 4174|  99.4k|            return read_impl<Range>(
 4175|  99.4k|                range, rd,
 4176|  99.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  99.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  99.4k|                },
 4179|  99.4k|                value, loc);
 4180|  99.4k|        }
 4181|   255k|#endif
 4182|       |
 4183|   255k|        return read_impl<Range>(
 4184|   255k|            range, rd,
 4185|   255k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   255k|                return r.read_source(SCN_FWD(args)...);
 4187|   255k|            },
 4188|   255k|            value);
 4189|   355k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   491k|    {
 4206|   491k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   491k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   491k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.1k, False: 466k]
  |  |  ------------------
  ------------------
 4208|  25.1k|            return unexpected(r.error());
 4209|  25.1k|        }
 4210|       |
 4211|   466k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   466k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   466k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   466k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   466k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.72k, False: 463k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.72k|    }                                                  \
  |  |  |  | 3671|   466k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   463k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   463k|        return ranges::next(range.begin(), n);
 4213|   466k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.52M|    {
  763|  1.52M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.52M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  99.4k|        : m_fptr([](storage fn,
  743|  99.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  99.4k|              cvref<T> obj = *get<T>(fn);
  745|  99.4k|              if constexpr (std::is_void_v<R>) {
  746|  99.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  99.4k|              }
  748|  99.4k|              else {
  749|  99.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  99.4k|              }
  751|  99.4k|          }),
  752|  99.4k|          m_storage(std::addressof(f))
  753|  99.4k|    {
  754|  99.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  99.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  99.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  99.4k|              else {
  749|  99.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  99.4k|              }
  751|  99.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  99.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  99.4k|        else if constexpr (std::is_object_v<T>) {
  688|  99.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  99.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  99.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  99.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  99.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  99.4k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   310k|    {
 3679|   310k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   310k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   310k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 310k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   310k|        return read_source_impl(range);
 3685|   310k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  1.52M|    {
 3705|  1.52M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.52M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.52M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.52M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.52M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.52M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.52M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.52M|        auto it = sign_result.first;
 3708|  1.52M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.52M|        auto digits_begin = it;
 3711|  1.52M|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|       |                      ranges::sized_range<Range>) {
 3714|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|       |                SCN_TRY_ASSIGN(
 3717|       |                    it,
 3718|       |                    do_read_source_impl(
 3719|       |                        r,
 3720|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|       |            }
 3723|       |            else {
 3724|       |                auto cb = [&](const auto& rr)
 3725|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|       |                    auto res = read_all(rr);
 3727|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|       |                        return unexpected_scan_error(
 3729|       |                            scan_error::invalid_scanned_value,
 3730|       |                            "Invalid float value");
 3731|       |                    }
 3732|       |                    return res;
 3733|       |                };
 3734|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|       |            }
 3736|       |        }
 3737|  1.52M|        else {
 3738|  1.52M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|  1.52M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.52M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.52M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 78.4k, False: 1.44M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  78.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  78.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  78.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  78.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  78.4k|    }                                                  \
  |  | 3671|  1.52M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.52M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  1.44M|                it,
 3740|  1.44M|                do_read_source_impl(
 3741|  1.44M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.44M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.44M|        }
 3744|       |
 3745|  1.52M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.52M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.52M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.44M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.43M, False: 8.33k]
  |  Branch (3747:48): [True: 1.42M, False: 8.12k]
  ------------------
 3748|  1.44M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.37M, False: 53.3k]
  ------------------
 3749|  1.44M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.37M, False: 2.21k]
  ------------------
 3750|  1.37M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.37M|        }
 3752|       |
 3753|  1.44M|        handle_separators();
 3754|       |
 3755|  1.44M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.44M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.44M|        return it;
 3768|  1.44M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  1.52M|    {
 4000|  1.52M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.52M|        const bool allowed_nonhex =
 4002|  1.52M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.52M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.52M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.50M, False: 16.4k]
  |  Branch (4005:45): [True: 0, False: 1.50M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.52M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 16.4k, False: 1.50M]
  ------------------
 4011|  16.4k|            return *r;
 4012|  16.4k|        }
 4013|       |
 4014|  1.50M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.45M, False: 55.5k]
  |  Branch (4014:45): [True: 1.32k, False: 1.44M]
  ------------------
 4015|  1.32k|            return unexpected(r.error());
 4016|  1.32k|        }
 4017|  1.50M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 55.5k, False: 1.44M]
  ------------------
 4018|  55.5k|            return *r;
 4019|  55.5k|        }
 4020|       |
 4021|  1.44M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.01M, False: 432k]
  |  Branch (4021:28): [True: 319k, False: 697k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   319k|            auto it = range.begin();
 4025|       |
 4026|   319k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 13.6k, False: 305k]
  ------------------
 4027|  13.6k|                m_kind = float_kind::hex_with_prefix;
 4028|  13.6k|                it = *r;
 4029|  13.6k|            }
 4030|   305k|            else {
 4031|   305k|                m_kind = float_kind::hex_without_prefix;
 4032|   305k|            }
 4033|       |
 4034|   319k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   319k|        }
 4036|  1.12M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 432k, False: 697k]
  |  Branch (4036:29): [True: 432k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   432k|            m_kind = float_kind::generic;
 4040|   432k|            return read_regular_float(range);
 4041|   432k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   697k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   697k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.1k, False: 667k]
  |  |  ------------------
  ------------------
 4047|  30.1k|            m_kind = float_kind::hex_with_prefix;
 4048|  30.1k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  30.1k|        }
 4050|       |
 4051|   667k|        m_kind = float_kind::generic;
 4052|   667k|        return read_regular(range);
 4053|   697k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  1.52M|    {
 3811|  1.52M|        auto it = range.begin();
 3812|  1.52M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.50M, False: 16.4k]
  ------------------
 3813|  1.50M|            return unexpected(r.error());
 3814|  1.50M|        }
 3815|  16.4k|        else {
 3816|  16.4k|            it = *r;
 3817|  16.4k|        }
 3818|       |
 3819|  16.4k|        if (auto r = read_matching_string_classic_nocase(
 3820|  16.4k|                ranges::subrange{it, range.end()}, "inity");
 3821|  16.4k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 8.33k, False: 8.12k]
  ------------------
 3822|  8.33k|            m_kind = float_kind::inf_short;
 3823|  8.33k|            return it;
 3824|  8.33k|        }
 3825|  8.12k|        else {
 3826|  8.12k|            m_kind = float_kind::inf_long;
 3827|  8.12k|            return *r;
 3828|  8.12k|        }
 3829|  16.4k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  1.50M|    {
 3834|  1.50M|        auto it = range.begin();
 3835|  1.50M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.44M, False: 56.8k]
  ------------------
 3836|  1.44M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.44M|                scan_error::invalid_scanned_value,
 3838|  1.44M|                "Invalid floating-point NaN value"));
 3839|  1.44M|        }
 3840|  56.8k|        else {
 3841|  56.8k|            it = *r;
 3842|  56.8k|        }
 3843|       |
 3844|  56.8k|        if (auto r =
 3845|  56.8k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  56.8k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 53.3k, False: 3.53k]
  ------------------
 3847|  53.3k|            m_kind = float_kind::nan_simple;
 3848|  53.3k|            return it;
 3849|  53.3k|        }
 3850|  3.53k|        else {
 3851|  3.53k|            it = *r;
 3852|  3.53k|        }
 3853|       |
 3854|  3.53k|        auto payload_beg_it = it;
 3855|  3.53k|        it = read_while_code_unit(
 3856|  3.53k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.53k|                return is_ascii_char(ch) &&
 3858|  3.53k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.53k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.53k|            });
 3861|  3.53k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.53k|        m_kind = float_kind::nan_with_payload;
 3864|  3.53k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.21k, False: 1.32k]
  ------------------
 3865|  3.53k|                                             ')')) {
 3866|  2.21k|            return *r;
 3867|  2.21k|        }
 3868|  1.32k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.32k|                                     "Invalid floating-point NaN payload");
 3870|  3.53k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  3.53k|        : m_fptr([](storage fn,
  743|  3.53k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.53k|              cvref<T> obj = *get<T>(fn);
  745|  3.53k|              if constexpr (std::is_void_v<R>) {
  746|  3.53k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.53k|              }
  748|  3.53k|              else {
  749|  3.53k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.53k|              }
  751|  3.53k|          }),
  752|  3.53k|          m_storage(std::addressof(f))
  753|  3.53k|    {
  754|  3.53k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  66.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  66.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  66.5k|              else {
  749|  66.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  66.5k|              }
  751|  66.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  66.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  66.5k|        else if constexpr (std::is_object_v<T>) {
  688|  66.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  66.5k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|  66.5k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  66.5k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 66.5k, False: 91]
  ------------------
 3858|  66.5k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 64.0k, False: 2.40k]
  |  Branch (3858:39): [True: 56.0k, False: 8.05k]
  |  Branch (3858:54): [True: 2.79k, False: 7.65k]
  |  Branch (3858:67): [True: 2.71k, False: 83]
  ------------------
 3859|  66.5k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.33k, False: 2.40k]
  |  Branch (3859:39): [True: 2.53k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 2.48k]
  ------------------
 3860|  66.5k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  3.53k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.53k|        {
  662|  3.53k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|  1.01M|    {
 3804|  1.01M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.01M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   349k|    {
 3904|   349k|        auto it = range.begin();
 3905|       |
 3906|   349k|        std::ptrdiff_t digits_count = 0;
 3907|   349k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   349k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.82k, False: 339k]
  |  |  ------------------
  ------------------
 3909|  9.82k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  9.82k|                scan_error::invalid_scanned_value,
 3911|  9.82k|                "Invalid hexadecimal floating-point value"));
 3912|  9.82k|        }
 3913|   339k|        else {
 3914|   339k|            digits_count += ranges::distance(it, *r);
 3915|   339k|            it = *r;
 3916|   339k|        }
 3917|       |
 3918|   339k|        m_integral_part_length = digits_count;
 3919|   339k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 54.4k, False: 285k]
  ------------------
 3920|   339k|                                             m_locale_options.decimal_point)) {
 3921|  54.4k|            it = *r;
 3922|  54.4k|        }
 3923|       |
 3924|   339k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 49.9k, False: 289k]
  ------------------
 3925|   339k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  49.9k|            digits_count += ranges::distance(it, *r);
 3927|  49.9k|            it = *r;
 3928|  49.9k|        }
 3929|       |
 3930|   339k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 339k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   339k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   339k|        return it;
 3938|   339k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   688k|    {
 3789|   688k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   688k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 688k]
  |  |  |  Branch (859:45): [True: 0, False: 688k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   688k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   688k|        return read_while1_code_unit(
 3798|   688k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   688k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   688k|        : m_fptr([](storage fn,
  743|   688k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   688k|              cvref<T> obj = *get<T>(fn);
  745|   688k|              if constexpr (std::is_void_v<R>) {
  746|   688k|                  obj(static_cast<decltype(args)>(args)...);
  747|   688k|              }
  748|   688k|              else {
  749|   688k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   688k|              }
  751|   688k|          }),
  752|   688k|          m_storage(std::addressof(f))
  753|   688k|    {
  754|   688k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  3.63M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.63M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.63M|              else {
  749|  3.63M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.63M|              }
  751|  3.63M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  3.63M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.63M|        else if constexpr (std::is_object_v<T>) {
  688|  3.63M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.63M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  3.63M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   688k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   688k|        {
  662|   688k|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  1.24M|    {
 3876|  1.24M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 138k, False: 1.10M]
  ------------------
 3877|   138k|            auto beg_exp_it = range.begin();
 3878|   138k|            auto it = *r;
 3879|       |
 3880|   138k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 138k, False: 309]
  ------------------
 3881|   138k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   138k|                it = r_sign->first;
 3883|   138k|            }
 3884|       |
 3885|   138k|            if (auto r_exp = read_while1_code_unit(
 3886|   138k|                    ranges::subrange{it, range.end()},
 3887|   138k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   138k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.06k, False: 136k]
  |  |  ------------------
  ------------------
 3889|  2.06k|                it = beg_exp_it;
 3890|  2.06k|            }
 3891|   136k|            else {
 3892|   136k|                it = *r_exp;
 3893|   136k|            }
 3894|       |
 3895|   138k|            return it;
 3896|   138k|        }
 3897|  1.10M|        return range.begin();
 3898|  1.24M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|   138k|        : m_fptr([](storage fn,
  743|   138k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   138k|              cvref<T> obj = *get<T>(fn);
  745|   138k|              if constexpr (std::is_void_v<R>) {
  746|   138k|                  obj(static_cast<decltype(args)>(args)...);
  747|   138k|              }
  748|   138k|              else {
  749|   138k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   138k|              }
  751|   138k|          }),
  752|   138k|          m_storage(std::addressof(f))
  753|   138k|    {
  754|   138k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   448k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   448k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   448k|              else {
  749|   448k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   448k|              }
  751|   448k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   448k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   448k|        else if constexpr (std::is_object_v<T>) {
  688|   448k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   448k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   448k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|   138k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   138k|        {
  662|   138k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|  1.09M|    {
 3944|  1.09M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|  1.09M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 941k, False: 157k]
  |  Branch (3945:50): [True: 24.0k, False: 917k]
  ------------------
 3946|       |
 3947|  1.09M|        auto it = ranges::begin(range);
 3948|  1.09M|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|  1.09M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|  1.09M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.3k, False: 1.04M]
  |  |  ------------------
  ------------------
 3952|  53.3k|            return r.transform_error(
 3953|  53.3k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  53.3k|                                              "Invalid floating-point value"));
 3955|  53.3k|        }
 3956|  1.04M|        else {
 3957|  1.04M|            digits_count += ranges::distance(it, *r);
 3958|  1.04M|            it = *r;
 3959|  1.04M|        }
 3960|       |
 3961|  1.04M|        m_integral_part_length = digits_count;
 3962|  1.04M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 204k, False: 841k]
  ------------------
 3963|  1.04M|                                             m_locale_options.decimal_point)) {
 3964|   204k|            it = *r;
 3965|   204k|        }
 3966|       |
 3967|  1.04M|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 190k, False: 856k]
  ------------------
 3968|  1.04M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   190k|            digits_count += ranges::distance(it, *r);
 3970|   190k|            it = *r;
 3971|   190k|        }
 3972|       |
 3973|  1.04M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  1.04M|        auto beg_exp_it = it;
 3979|  1.04M|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 902k, False: 143k]
  ------------------
 3980|   902k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   902k|        }
 3982|  1.04M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 23.1k, False: 1.02M]
  |  Branch (3982:29): [True: 13.9k, False: 9.25k]
  ------------------
 3983|  13.9k|            return unexpected_scan_error(
 3984|  13.9k|                scan_error::invalid_scanned_value,
 3985|  13.9k|                "No exponent given to scientific float");
 3986|  13.9k|        }
 3987|       |
 3988|  1.03M|        m_kind =
 3989|  1.03M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 896k, False: 136k]
  ------------------
 3990|       |
 3991|  1.03M|        return it;
 3992|  1.04M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  2.14M|    {
 3774|  2.14M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  2.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.14M]
  |  |  |  Branch (859:45): [True: 0, False: 2.14M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  2.14M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  2.14M|        return read_while1_code_unit(
 3783|  2.14M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  2.14M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  2.14M|        : m_fptr([](storage fn,
  743|  2.14M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.14M|              cvref<T> obj = *get<T>(fn);
  745|  2.14M|              if constexpr (std::is_void_v<R>) {
  746|  2.14M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.14M|              }
  748|  2.14M|              else {
  749|  2.14M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.14M|              }
  751|  2.14M|          }),
  752|  2.14M|          m_storage(std::addressof(f))
  753|  2.14M|    {
  754|  2.14M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  11.9M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.9M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  11.9M|              else {
  749|  11.9M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.9M|              }
  751|  11.9M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  11.9M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  11.9M|        else if constexpr (std::is_object_v<T>) {
  688|  11.9M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  11.9M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  11.9M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  2.14M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.14M|        {
  662|  2.14M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1576|  1.37M|    {
 1577|  1.37M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.37M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  99.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  99.4k|        {
  662|  99.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   255k|        : m_fptr([](storage fn,
  743|   255k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   255k|              cvref<T> obj = *get<T>(fn);
  745|   255k|              if constexpr (std::is_void_v<R>) {
  746|   255k|                  obj(static_cast<decltype(args)>(args)...);
  747|   255k|              }
  748|   255k|              else {
  749|   255k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   255k|              }
  751|   255k|          }),
  752|   255k|          m_storage(std::addressof(f))
  753|   255k|    {
  754|   255k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   255k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   255k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   255k|              else {
  749|   255k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   255k|              }
  751|   255k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   255k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   255k|        else if constexpr (std::is_object_v<T>) {
  688|   255k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   255k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   255k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   255k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   255k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|  1.21M|    {
 3665|  1.21M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.21M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.21M|        return read_source_impl(range);
 3671|  1.21M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   255k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   255k|        {
  662|   255k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   305k|    {
 4170|   305k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   305k|#if !SCN_DISABLE_LOCALE
 4173|   305k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 83.8k, False: 221k]
  ------------------
 4174|  83.8k|            return read_impl<Range>(
 4175|  83.8k|                range, rd,
 4176|  83.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  83.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  83.8k|                },
 4179|  83.8k|                value, loc);
 4180|  83.8k|        }
 4181|   221k|#endif
 4182|       |
 4183|   221k|        return read_impl<Range>(
 4184|   221k|            range, rd,
 4185|   221k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   221k|                return r.read_source(SCN_FWD(args)...);
 4187|   221k|            },
 4188|   221k|            value);
 4189|   305k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   431k|    {
 4206|   431k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   431k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   431k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.2k, False: 416k]
  |  |  ------------------
  ------------------
 4208|  14.2k|            return unexpected(r.error());
 4209|  14.2k|        }
 4210|       |
 4211|   416k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   416k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   416k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   416k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   416k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.7k, False: 401k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  15.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  15.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  15.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  15.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  15.7k|    }                                                  \
  |  |  |  | 3671|   416k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   401k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   401k|        return ranges::next(range.begin(), n);
 4213|   416k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.32M|    {
  763|  1.32M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.32M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  83.8k|        : m_fptr([](storage fn,
  743|  83.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  83.8k|              cvref<T> obj = *get<T>(fn);
  745|  83.8k|              if constexpr (std::is_void_v<R>) {
  746|  83.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  83.8k|              }
  748|  83.8k|              else {
  749|  83.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  83.8k|              }
  751|  83.8k|          }),
  752|  83.8k|          m_storage(std::addressof(f))
  753|  83.8k|    {
  754|  83.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  83.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  83.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  83.8k|              else {
  749|  83.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  83.8k|              }
  751|  83.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  83.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  83.8k|        else if constexpr (std::is_object_v<T>) {
  688|  83.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  83.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  83.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  83.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  83.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  83.8k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   259k|    {
 3679|   259k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   259k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   259k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 259k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   259k|        return read_source_impl(range);
 3685|   259k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  1.32M|    {
 3705|  1.32M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.32M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.32M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.32M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.32M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.32M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.32M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.32M|        auto it = sign_result.first;
 3708|  1.32M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.32M|        auto digits_begin = it;
 3711|  1.32M|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|  1.32M|                      ranges::sized_range<Range>) {
 3714|  1.32M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  2.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.32M]
  |  |  |  Branch (859:45): [True: 0, False: 1.32M]
  |  |  |  Branch (859:45): [True: 0, False: 1.32M]
  |  |  ------------------
  ------------------
 3715|  1.32M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  1.32M|            else {
 3724|  1.32M|                auto cb = [&](const auto& rr)
 3725|  1.32M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.32M|                    auto res = read_all(rr);
 3727|  1.32M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.32M|                        return unexpected_scan_error(
 3729|  1.32M|                            scan_error::invalid_scanned_value,
 3730|  1.32M|                            "Invalid float value");
 3731|  1.32M|                    }
 3732|  1.32M|                    return res;
 3733|  1.32M|                };
 3734|  1.32M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  1.32M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.32M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.6k, False: 1.28M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  43.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  43.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  43.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  43.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  43.6k|    }                                                  \
  |  | 3671|  1.32M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  1.28M|            }
 3736|       |        }
 3737|       |        else {
 3738|       |            SCN_TRY_ASSIGN(
 3739|       |                it,
 3740|       |                do_read_source_impl(
 3741|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|       |        }
 3744|       |
 3745|  1.32M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.28M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.27M, False: 7.98k]
  |  Branch (3747:48): [True: 1.26M, False: 7.71k]
  ------------------
 3748|  1.28M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.21M, False: 52.4k]
  ------------------
 3749|  1.28M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.21M, False: 2.04k]
  ------------------
 3750|  1.21M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.21M|        }
 3752|       |
 3753|  1.28M|        handle_separators();
 3754|       |
 3755|  1.28M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.28M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.28M|        return it;
 3768|  1.28M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  1.32M|    {
 3811|  1.32M|        auto it = range.begin();
 3812|  1.32M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.31M, False: 15.7k]
  ------------------
 3813|  1.31M|            return unexpected(r.error());
 3814|  1.31M|        }
 3815|  15.7k|        else {
 3816|  15.7k|            it = *r;
 3817|  15.7k|        }
 3818|       |
 3819|  15.7k|        if (auto r = read_matching_string_classic_nocase(
 3820|  15.7k|                ranges::subrange{it, range.end()}, "inity");
 3821|  15.7k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 7.98k, False: 7.71k]
  ------------------
 3822|  7.98k|            m_kind = float_kind::inf_short;
 3823|  7.98k|            return it;
 3824|  7.98k|        }
 3825|  7.71k|        else {
 3826|  7.71k|            m_kind = float_kind::inf_long;
 3827|  7.71k|            return *r;
 3828|  7.71k|        }
 3829|  15.7k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  1.31M|    {
 3834|  1.31M|        auto it = range.begin();
 3835|  1.31M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.25M, False: 55.7k]
  ------------------
 3836|  1.25M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.25M|                scan_error::invalid_scanned_value,
 3838|  1.25M|                "Invalid floating-point NaN value"));
 3839|  1.25M|        }
 3840|  55.7k|        else {
 3841|  55.7k|            it = *r;
 3842|  55.7k|        }
 3843|       |
 3844|  55.7k|        if (auto r =
 3845|  55.7k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  55.7k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 52.4k, False: 3.27k]
  ------------------
 3847|  52.4k|            m_kind = float_kind::nan_simple;
 3848|  52.4k|            return it;
 3849|  52.4k|        }
 3850|  3.27k|        else {
 3851|  3.27k|            it = *r;
 3852|  3.27k|        }
 3853|       |
 3854|  3.27k|        auto payload_beg_it = it;
 3855|  3.27k|        it = read_while_code_unit(
 3856|  3.27k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.27k|                return is_ascii_char(ch) &&
 3858|  3.27k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.27k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.27k|            });
 3861|  3.27k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.27k|        m_kind = float_kind::nan_with_payload;
 3864|  3.27k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.04k, False: 1.23k]
  ------------------
 3865|  3.27k|                                             ')')) {
 3866|  2.04k|            return *r;
 3867|  2.04k|        }
 3868|  1.23k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.23k|                                     "Invalid floating-point NaN payload");
 3870|  3.27k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  3.27k|        : m_fptr([](storage fn,
  743|  3.27k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.27k|              cvref<T> obj = *get<T>(fn);
  745|  3.27k|              if constexpr (std::is_void_v<R>) {
  746|  3.27k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.27k|              }
  748|  3.27k|              else {
  749|  3.27k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.27k|              }
  751|  3.27k|          }),
  752|  3.27k|          m_storage(std::addressof(f))
  753|  3.27k|    {
  754|  3.27k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  57.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  57.4k|              else {
  749|  57.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.4k|              }
  751|  57.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  57.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  57.4k|        else if constexpr (std::is_object_v<T>) {
  688|  57.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  57.4k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  57.4k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  57.4k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 57.4k, False: 85]
  ------------------
 3858|  57.4k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 55.2k, False: 2.14k]
  |  Branch (3858:39): [True: 47.3k, False: 7.96k]
  |  Branch (3858:54): [True: 2.71k, False: 7.39k]
  |  Branch (3858:67): [True: 2.63k, False: 83]
  ------------------
 3859|  57.4k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.33k, False: 2.14k]
  |  Branch (3859:39): [True: 2.53k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 2.22k]
  ------------------
 3860|  57.4k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  3.27k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.27k|        {
  662|  3.27k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   878k|    {
 3804|   878k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   878k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   760k|{
 1996|   760k|    auto it = read_while_code_unit(range, pred);
 1997|   760k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 320k, False: 440k]
  ------------------
 1998|   320k|        return unexpected(parse_error::error);
 1999|   320k|    }
 2000|   440k|    return it;
 2001|   760k|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   219k|    {
 3876|   219k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 32.3k, False: 187k]
  ------------------
 3877|  32.3k|            auto beg_exp_it = range.begin();
 3878|  32.3k|            auto it = *r;
 3879|       |
 3880|  32.3k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 32.2k, False: 102]
  ------------------
 3881|  32.3k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  32.2k|                it = r_sign->first;
 3883|  32.2k|            }
 3884|       |
 3885|  32.3k|            if (auto r_exp = read_while1_code_unit(
 3886|  32.3k|                    ranges::subrange{it, range.end()},
 3887|  32.3k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  32.3k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 718, False: 31.6k]
  |  |  ------------------
  ------------------
 3889|    718|                it = beg_exp_it;
 3890|    718|            }
 3891|  31.6k|            else {
 3892|  31.6k|                it = *r_exp;
 3893|  31.6k|            }
 3894|       |
 3895|  32.3k|            return it;
 3896|  32.3k|        }
 3897|   187k|        return range.begin();
 3898|   219k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  32.3k|        : m_fptr([](storage fn,
  743|  32.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.3k|              cvref<T> obj = *get<T>(fn);
  745|  32.3k|              if constexpr (std::is_void_v<R>) {
  746|  32.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.3k|              }
  748|  32.3k|              else {
  749|  32.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.3k|              }
  751|  32.3k|          }),
  752|  32.3k|          m_storage(std::addressof(f))
  753|  32.3k|    {
  754|  32.3k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|  97.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  97.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  97.2k|              else {
  749|  97.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  97.2k|              }
  751|  97.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  97.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  97.2k|        else if constexpr (std::is_object_v<T>) {
  688|  97.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  97.2k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|  97.2k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  32.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  32.3k|        {
  662|  32.3k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   378k|    {
 3944|   378k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   378k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 233k, False: 145k]
  |  Branch (3945:50): [True: 21.6k, False: 211k]
  ------------------
 3946|       |
 3947|   378k|        auto it = ranges::begin(range);
 3948|   378k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   378k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   378k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   378k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.9k, False: 350k]
  |  |  ------------------
  ------------------
 3952|  27.9k|            return r.transform_error(
 3953|  27.9k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  27.9k|                                              "Invalid floating-point value"));
 3955|  27.9k|        }
 3956|   350k|        else {
 3957|   350k|            digits_count += ranges::distance(it, *r);
 3958|   350k|            it = *r;
 3959|   350k|        }
 3960|       |
 3961|   350k|        m_integral_part_length = digits_count;
 3962|   350k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 63.4k, False: 286k]
  ------------------
 3963|   350k|                                             m_locale_options.decimal_point)) {
 3964|  63.4k|            it = *r;
 3965|  63.4k|        }
 3966|       |
 3967|   350k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 58.5k, False: 291k]
  ------------------
 3968|   350k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  58.5k|            digits_count += ranges::distance(it, *r);
 3970|  58.5k|            it = *r;
 3971|  58.5k|        }
 3972|       |
 3973|   350k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   350k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 350k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   350k|        auto beg_exp_it = it;
 3979|   350k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 219k, False: 130k]
  ------------------
 3980|   219k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   219k|        }
 3982|   350k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 20.3k, False: 329k]
  |  Branch (3982:29): [True: 13.6k, False: 6.73k]
  ------------------
 3983|  13.6k|            return unexpected_scan_error(
 3984|  13.6k|                scan_error::invalid_scanned_value,
 3985|  13.6k|                "No exponent given to scientific float");
 3986|  13.6k|        }
 3987|       |
 3988|   336k|        m_kind =
 3989|   336k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 304k, False: 31.6k]
  ------------------
 3990|       |
 3991|   336k|        return it;
 3992|   350k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   728k|    {
 3774|   728k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   728k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 728k]
  |  |  |  Branch (859:45): [True: 0, False: 728k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   728k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   728k|        return read_while1_code_unit(
 3783|   728k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   728k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   728k|        : m_fptr([](storage fn,
  743|   728k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   728k|              cvref<T> obj = *get<T>(fn);
  745|   728k|              if constexpr (std::is_void_v<R>) {
  746|   728k|                  obj(static_cast<decltype(args)>(args)...);
  747|   728k|              }
  748|   728k|              else {
  749|   728k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   728k|              }
  751|   728k|          }),
  752|   728k|          m_storage(std::addressof(f))
  753|   728k|    {
  754|   728k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  3.84M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.84M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.84M|              else {
  749|  3.84M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.84M|              }
  751|  3.84M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  3.84M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.84M|        else if constexpr (std::is_object_v<T>) {
  688|  3.84M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.84M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  3.84M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   728k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   728k|        {
  662|   728k|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  1.32M|    {
 4000|  1.32M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.32M|        const bool allowed_nonhex =
 4002|  1.32M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.32M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.32M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.31M, False: 15.7k]
  |  Branch (4005:45): [True: 0, False: 1.31M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.32M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 15.7k, False: 1.31M]
  ------------------
 4011|  15.7k|            return *r;
 4012|  15.7k|        }
 4013|       |
 4014|  1.31M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.25M, False: 54.5k]
  |  Branch (4014:45): [True: 1.23k, False: 1.25M]
  ------------------
 4015|  1.23k|            return unexpected(r.error());
 4016|  1.23k|        }
 4017|  1.31M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 54.5k, False: 1.25M]
  ------------------
 4018|  54.5k|            return *r;
 4019|  54.5k|        }
 4020|       |
 4021|  1.25M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 878k, False: 378k]
  |  Branch (4021:28): [True: 265k, False: 613k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   265k|            auto it = range.begin();
 4025|       |
 4026|   265k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 12.3k, False: 252k]
  ------------------
 4027|  12.3k|                m_kind = float_kind::hex_with_prefix;
 4028|  12.3k|                it = *r;
 4029|  12.3k|            }
 4030|   252k|            else {
 4031|   252k|                m_kind = float_kind::hex_without_prefix;
 4032|   252k|            }
 4033|       |
 4034|   265k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   265k|        }
 4036|   991k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 378k, False: 613k]
  |  Branch (4036:29): [True: 378k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   378k|            m_kind = float_kind::generic;
 4040|   378k|            return read_regular_float(range);
 4041|   378k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   613k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   613k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.8k, False: 583k]
  |  |  ------------------
  ------------------
 4047|  29.8k|            m_kind = float_kind::hex_with_prefix;
 4048|  29.8k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  29.8k|        }
 4050|       |
 4051|   583k|        m_kind = float_kind::generic;
 4052|   583k|        return read_regular(range);
 4053|   613k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   878k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   878k|                    auto res = read_all(rr);
 3727|   878k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   878k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 858, False: 877k]
  |  |  ------------------
  ------------------
 3728|    858|                        return unexpected_scan_error(
 3729|    858|                            scan_error::invalid_scanned_value,
 3730|    858|                            "Invalid float value");
 3731|    858|                    }
 3732|   877k|                    return res;
 3733|   878k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   878k|{
 1839|   878k|    return ranges::next(range.begin(), range.end());
 1840|   878k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   878k|    {
  313|   878k|        ranges::advance(x, bound);
  314|   878k|        return x;
  315|   878k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   878k|    {
  275|   878k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   878k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   878k|    {
  190|   878k|        i = std::move(bound);
  191|   878k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1576|  1.21M|    {
 1577|  1.21M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.21M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  1.21M|    {
 1621|  1.21M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|  1.21M|                      ranges::sized_range<Range>) {
 1626|  1.21M|            m_storage.reset();
 1627|  1.21M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|  1.21M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  83.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  83.8k|        {
  662|  83.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   221k|        : m_fptr([](storage fn,
  743|   221k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   221k|              cvref<T> obj = *get<T>(fn);
  745|   221k|              if constexpr (std::is_void_v<R>) {
  746|   221k|                  obj(static_cast<decltype(args)>(args)...);
  747|   221k|              }
  748|   221k|              else {
  749|   221k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   221k|              }
  751|   221k|          }),
  752|   221k|          m_storage(std::addressof(f))
  753|   221k|    {
  754|   221k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   221k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   221k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   221k|              else {
  749|   221k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   221k|              }
  751|   221k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   221k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   221k|        else if constexpr (std::is_object_v<T>) {
  688|   221k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   221k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   221k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   221k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   221k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   221k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  1.06M|    {
 3665|  1.06M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.06M|        return read_source_impl(range);
 3671|  1.06M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   221k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   221k|        {
  662|   221k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   375k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   375k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   375k|            auto rd = make_reader<T, char_type>();
 6206|   375k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 375k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   375k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 375k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   375k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   375k|                return impl(rd, range, value);
 6213|   375k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   375k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   375k|    {
 6124|   375k|        const bool need_skipped_width =
 6125|   375k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 375k]
  |  Branch (6125:33): [True: 0, False: 375k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   375k|        auto it = rng.begin();
 6129|   375k|        std::ptrdiff_t prefix_width = 0;
 6130|   375k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 375k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   375k|        else {
 6138|   375k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   375k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   375k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   375k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.38k, False: 369k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.38k|    }                                                  \
  |  |  |  | 3671|   375k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   369k|            std::tie(it, prefix_width) = prefix_result;
 6140|   369k|        }
 6141|   369k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   369k|        std::ptrdiff_t value_width = 0;
 6145|   369k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 369k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   369k|        else {
 6161|   369k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   369k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   369k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 21.6k, False: 348k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  21.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  21.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  21.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  21.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  21.6k|    }                                                  \
  |  | 3671|   369k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   348k|                                             specs, value, loc));
 6163|       |
 6164|   348k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 348k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   348k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   348k|        std::ptrdiff_t postfix_width = 0;
 6173|   348k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 343k, False: 4.37k]
  ------------------
 6174|   343k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   343k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   343k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   343k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   343k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 343k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   343k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   343k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   343k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   343k|                                 value_width));
 6178|   343k|            std::tie(it, postfix_width) = postfix_result;
 6179|   343k|        }
 6180|       |
 6181|   348k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   348k|                                                 value_width, postfix_width);
 6183|   348k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 348k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   348k|        return it;
 6188|   348k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   917k|    {
 3691|   917k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   917k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   917k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   917k|        const std::ptrdiff_t sign_len =
 3694|   917k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 211k, False: 706k]
  ------------------
 3695|       |
 3696|   917k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   917k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   917k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   917k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   917k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16.4k, False: 901k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  16.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  16.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  16.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  16.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  16.4k|    }                                                  \
  |  |  |  | 3671|   917k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   901k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   901k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   917k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   369k|    {
 4170|   369k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   369k|#if !SCN_DISABLE_LOCALE
 4173|   369k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 104k, False: 264k]
  ------------------
 4174|   104k|            return read_impl<Range>(
 4175|   104k|                range, rd,
 4176|   104k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   104k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   104k|                },
 4179|   104k|                value, loc);
 4180|   104k|        }
 4181|   264k|#endif
 4182|       |
 4183|   264k|        return read_impl<Range>(
 4184|   264k|            range, rd,
 4185|   264k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   264k|                return r.read_source(SCN_FWD(args)...);
 4187|   264k|            },
 4188|   264k|            value);
 4189|   369k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   512k|    {
 4206|   512k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   512k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.2k, False: 486k]
  |  |  ------------------
  ------------------
 4208|  26.2k|            return unexpected(r.error());
 4209|  26.2k|        }
 4210|       |
 4211|   486k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   486k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   486k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   486k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   486k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.72k, False: 484k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.72k|    }                                                  \
  |  |  |  | 3671|   486k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   484k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   484k|        return ranges::next(range.begin(), n);
 4213|   486k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   104k|        : m_fptr([](storage fn,
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|   104k|              if constexpr (std::is_void_v<R>) {
  746|   104k|                  obj(static_cast<decltype(args)>(args)...);
  747|   104k|              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
  752|   104k|          m_storage(std::addressof(f))
  753|   104k|    {
  754|   104k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   104k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   104k|        else if constexpr (std::is_object_v<T>) {
  688|   104k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   104k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   104k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   104k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   104k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   104k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   104k|        {
  662|   104k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   264k|        : m_fptr([](storage fn,
  743|   264k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   264k|              cvref<T> obj = *get<T>(fn);
  745|   264k|              if constexpr (std::is_void_v<R>) {
  746|   264k|                  obj(static_cast<decltype(args)>(args)...);
  747|   264k|              }
  748|   264k|              else {
  749|   264k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   264k|              }
  751|   264k|          }),
  752|   264k|          m_storage(std::addressof(f))
  753|   264k|    {
  754|   264k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   264k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   264k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   264k|              else {
  749|   264k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   264k|              }
  751|   264k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   264k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   264k|        else if constexpr (std::is_object_v<T>) {
  688|   264k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   264k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   264k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   264k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   264k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   264k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   264k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   264k|        {
  662|   264k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   314k|    {
 4170|   314k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   314k|#if !SCN_DISABLE_LOCALE
 4173|   314k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 87.3k, False: 227k]
  ------------------
 4174|  87.3k|            return read_impl<Range>(
 4175|  87.3k|                range, rd,
 4176|  87.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  87.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  87.3k|                },
 4179|  87.3k|                value, loc);
 4180|  87.3k|        }
 4181|   227k|#endif
 4182|       |
 4183|   227k|        return read_impl<Range>(
 4184|   227k|            range, rd,
 4185|   227k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   227k|                return r.read_source(SCN_FWD(args)...);
 4187|   227k|            },
 4188|   227k|            value);
 4189|   314k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   445k|    {
 4206|   445k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   445k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   445k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.5k, False: 431k]
  |  |  ------------------
  ------------------
 4208|  14.5k|            return unexpected(r.error());
 4209|  14.5k|        }
 4210|       |
 4211|   431k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   431k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   431k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   431k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   431k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.7k, False: 416k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.7k|    }                                                  \
  |  |  |  | 3671|   431k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   416k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   416k|        return ranges::next(range.begin(), n);
 4213|   431k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  87.3k|        : m_fptr([](storage fn,
  743|  87.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  87.3k|              cvref<T> obj = *get<T>(fn);
  745|  87.3k|              if constexpr (std::is_void_v<R>) {
  746|  87.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  87.3k|              }
  748|  87.3k|              else {
  749|  87.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  87.3k|              }
  751|  87.3k|          }),
  752|  87.3k|          m_storage(std::addressof(f))
  753|  87.3k|    {
  754|  87.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  87.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  87.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  87.3k|              else {
  749|  87.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  87.3k|              }
  751|  87.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  87.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  87.3k|        else if constexpr (std::is_object_v<T>) {
  688|  87.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  87.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  87.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  87.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  87.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  87.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  87.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  87.3k|        {
  662|  87.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   227k|        : m_fptr([](storage fn,
  743|   227k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   227k|              cvref<T> obj = *get<T>(fn);
  745|   227k|              if constexpr (std::is_void_v<R>) {
  746|   227k|                  obj(static_cast<decltype(args)>(args)...);
  747|   227k|              }
  748|   227k|              else {
  749|   227k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   227k|              }
  751|   227k|          }),
  752|   227k|          m_storage(std::addressof(f))
  753|   227k|    {
  754|   227k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   227k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   227k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   227k|              else {
  749|   227k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   227k|              }
  751|   227k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   227k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   227k|        else if constexpr (std::is_object_v<T>) {
  688|   227k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   227k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   227k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   227k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   227k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   227k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   227k|        {
  662|   227k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   378k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   378k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   378k|            auto rd = make_reader<T, char_type>();
 6206|   378k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   378k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 378k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   378k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 378k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   378k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   378k|                return impl(rd, range, value);
 6213|   378k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   378k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   378k|    {
 6124|   378k|        const bool need_skipped_width =
 6125|   378k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 378k]
  |  Branch (6125:33): [True: 0, False: 378k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   378k|        auto it = rng.begin();
 6129|   378k|        std::ptrdiff_t prefix_width = 0;
 6130|   378k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 378k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   378k|        else {
 6138|   378k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   378k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   378k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   378k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   378k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.73k, False: 373k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.73k|    }                                                  \
  |  |  |  | 3671|   378k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   373k|            std::tie(it, prefix_width) = prefix_result;
 6140|   373k|        }
 6141|   373k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   373k|        std::ptrdiff_t value_width = 0;
 6145|   373k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 373k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   373k|        else {
 6161|   373k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   373k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   373k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   373k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 21.2k, False: 351k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  21.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  21.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  21.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  21.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  21.2k|    }                                                  \
  |  | 3671|   373k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   373k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   351k|                                             specs, value, loc));
 6163|       |
 6164|   351k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 351k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   351k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   351k|        std::ptrdiff_t postfix_width = 0;
 6173|   351k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 347k, False: 4.65k]
  ------------------
 6174|   347k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   347k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   347k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   347k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 347k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   347k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   347k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   347k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   347k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   347k|                                 value_width));
 6178|   347k|            std::tie(it, postfix_width) = postfix_result;
 6179|   347k|        }
 6180|       |
 6181|   351k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   351k|                                                 value_width, postfix_width);
 6183|   351k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 351k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   351k|        return it;
 6188|   351k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   926k|    {
 3691|   926k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   926k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   926k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   926k|        const std::ptrdiff_t sign_len =
 3694|   926k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 216k, False: 710k]
  ------------------
 3695|       |
 3696|   926k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   926k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   926k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   926k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   926k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.4k, False: 912k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.4k|    }                                                  \
  |  |  |  | 3671|   926k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   912k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   912k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   926k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   373k|    {
 4170|   373k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   373k|#if !SCN_DISABLE_LOCALE
 4173|   373k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 106k, False: 266k]
  ------------------
 4174|   106k|            return read_impl<Range>(
 4175|   106k|                range, rd,
 4176|   106k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   106k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   106k|                },
 4179|   106k|                value, loc);
 4180|   106k|        }
 4181|   266k|#endif
 4182|       |
 4183|   266k|        return read_impl<Range>(
 4184|   266k|            range, rd,
 4185|   266k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   266k|                return r.read_source(SCN_FWD(args)...);
 4187|   266k|            },
 4188|   266k|            value);
 4189|   373k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   517k|    {
 4206|   517k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   517k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   517k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.0k, False: 490k]
  |  |  ------------------
  ------------------
 4208|  27.0k|            return unexpected(r.error());
 4209|  27.0k|        }
 4210|       |
 4211|   490k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   490k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   490k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   490k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 451, False: 490k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    451|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    451|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    451|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    451|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    451|    }                                                  \
  |  |  |  | 3671|   490k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   490k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   490k|        return ranges::next(range.begin(), n);
 4213|   490k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   106k|        : m_fptr([](storage fn,
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|   106k|              if constexpr (std::is_void_v<R>) {
  746|   106k|                  obj(static_cast<decltype(args)>(args)...);
  747|   106k|              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
  752|   106k|          m_storage(std::addressof(f))
  753|   106k|    {
  754|   106k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   106k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   106k|        else if constexpr (std::is_object_v<T>) {
  688|   106k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   106k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   106k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   106k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   106k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   106k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   106k|        {
  662|   106k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   266k|        : m_fptr([](storage fn,
  743|   266k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   266k|              cvref<T> obj = *get<T>(fn);
  745|   266k|              if constexpr (std::is_void_v<R>) {
  746|   266k|                  obj(static_cast<decltype(args)>(args)...);
  747|   266k|              }
  748|   266k|              else {
  749|   266k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   266k|              }
  751|   266k|          }),
  752|   266k|          m_storage(std::addressof(f))
  753|   266k|    {
  754|   266k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   266k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   266k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   266k|              else {
  749|   266k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   266k|              }
  751|   266k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   266k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   266k|        else if constexpr (std::is_object_v<T>) {
  688|   266k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   266k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   266k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   266k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   266k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   266k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   266k|        {
  662|   266k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   317k|    {
 4170|   317k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   317k|#if !SCN_DISABLE_LOCALE
 4173|   317k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 88.8k, False: 229k]
  ------------------
 4174|  88.8k|            return read_impl<Range>(
 4175|  88.8k|                range, rd,
 4176|  88.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  88.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  88.8k|                },
 4179|  88.8k|                value, loc);
 4180|  88.8k|        }
 4181|   229k|#endif
 4182|       |
 4183|   229k|        return read_impl<Range>(
 4184|   229k|            range, rd,
 4185|   229k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   229k|                return r.read_source(SCN_FWD(args)...);
 4187|   229k|            },
 4188|   229k|            value);
 4189|   317k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   451k|    {
 4206|   451k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   451k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   451k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.9k, False: 436k]
  |  |  ------------------
  ------------------
 4208|  14.9k|            return unexpected(r.error());
 4209|  14.9k|        }
 4210|       |
 4211|   436k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   436k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   436k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   436k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.9k, False: 422k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  13.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  13.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  13.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  13.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  13.9k|    }                                                  \
  |  |  |  | 3671|   436k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   422k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   422k|        return ranges::next(range.begin(), n);
 4213|   436k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  88.8k|        : m_fptr([](storage fn,
  743|  88.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  88.8k|              cvref<T> obj = *get<T>(fn);
  745|  88.8k|              if constexpr (std::is_void_v<R>) {
  746|  88.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  88.8k|              }
  748|  88.8k|              else {
  749|  88.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  88.8k|              }
  751|  88.8k|          }),
  752|  88.8k|          m_storage(std::addressof(f))
  753|  88.8k|    {
  754|  88.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  88.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  88.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  88.8k|              else {
  749|  88.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  88.8k|              }
  751|  88.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  88.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  88.8k|        else if constexpr (std::is_object_v<T>) {
  688|  88.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  88.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  88.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  88.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  88.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  88.8k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  88.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  88.8k|        {
  662|  88.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   229k|        : m_fptr([](storage fn,
  743|   229k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   229k|              cvref<T> obj = *get<T>(fn);
  745|   229k|              if constexpr (std::is_void_v<R>) {
  746|   229k|                  obj(static_cast<decltype(args)>(args)...);
  747|   229k|              }
  748|   229k|              else {
  749|   229k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   229k|              }
  751|   229k|          }),
  752|   229k|          m_storage(std::addressof(f))
  753|   229k|    {
  754|   229k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   229k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   229k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   229k|              else {
  749|   229k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   229k|              }
  751|   229k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   229k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   229k|        else if constexpr (std::is_object_v<T>) {
  688|   229k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   229k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   229k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   229k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   229k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   229k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   229k|        {
  662|   229k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  1.53M|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|  1.53M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|  1.53M|        else {
 1054|  1.53M|            return r.begin().contiguous_segment();
 1055|  1.53M|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|  1.53M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.37M|{
 2061|  1.37M|    auto it = range.begin();
 2062|  2.63M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 2.62M, False: 16.4k]
  ------------------
 2063|  2.62M|        const auto val =
 2064|  2.62M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  2.62M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.62M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.60M, False: 15.5k]
  |  |  ------------------
  ------------------
 2066|  2.60M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  2.60M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  2.60M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.35M, False: 1.25M]
  ------------------
 2069|  1.35M|                return it;
 2070|  1.35M|            }
 2071|  2.60M|        }
 2072|  1.26M|        it = val.iterator;
 2073|  1.26M|    }
 2074|       |
 2075|  16.4k|    return it;
 2076|  1.37M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  2.62M|{
 1899|  2.62M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  2.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  2.62M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  2.62M|    auto it = range.begin();
 1903|  2.62M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  2.62M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.5k, False: 2.60M]
  |  |  ------------------
  ------------------
 1906|  15.5k|        ++it;
 1907|  15.5k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  15.5k|        return {it, {}};
 1909|  15.5k|    }
 1910|       |
 1911|  2.60M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 2.58M, False: 21.9k]
  ------------------
 1912|  2.58M|        ++it;
 1913|  2.58M|        return {it, string_type(1, *range.begin())};
 1914|  2.58M|    }
 1915|       |
 1916|  21.9k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  21.9k|    return {it, string_type{range.begin(), it}};
 1918|  2.60M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  15.5k|{
 1155|  15.5k|    auto it = input.begin();
 1156|   156k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 155k, False: 1.38k]
  ------------------
 1157|   155k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 14.1k, False: 140k]
  ------------------
 1158|  14.1k|            break;
 1159|  14.1k|        }
 1160|   155k|    }
 1161|  15.5k|    return it;
 1162|  15.5k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  21.9k|    {
  283|  21.9k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  21.9k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  21.9k|    {
  252|  21.9k|        constexpr iter_difference_t<I> zero{0};
  253|  21.9k|        iter_difference_t<I> counter{0};
  254|       |
  255|  66.5k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 45.5k, False: 20.9k]
  |  Branch (255:30): [True: 44.6k, False: 981]
  ------------------
  256|  44.6k|            ++i;
  257|  44.6k|            ++counter;
  258|  44.6k|        }
  259|       |
  260|  21.9k|        return counter;
  261|  21.9k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  2.62M|    {
 1890|  2.62M|        return !codepoint.empty();
 1891|  2.62M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.37M|{
 2082|  1.37M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.37M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.53M|{
 2951|  1.53M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.53M, False: 0]
  ------------------
 2952|  1.53M|        auto it = read_while_classic_space(range);
 2953|  1.53M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.53M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.4k, False: 1.52M]
  |  |  ------------------
  ------------------
 2955|  16.4k|            return unexpected(e);
 2956|  16.4k|        }
 2957|       |
 2958|  1.52M|        return it;
 2959|  1.53M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.53M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.53M|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|  1.53M|    else {
 2126|  1.53M|        auto it = range.begin();
 2127|       |
 2128|  1.53M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  1.53M|            auto seg = get_contiguous_beginning(range);
 2130|  1.53M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.53M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 167k, False: 1.37M]
  ------------------
 2132|   167k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   167k|            }
 2134|  1.37M|            ranges::advance(it, seg.size());
 2135|  1.37M|        }
 2136|       |
 2137|      0|        return read_while_code_point(
 2138|  1.53M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.53M|    }
 2140|  1.53M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.37M|        : m_fptr([](storage fn,
  743|  1.37M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.37M|              cvref<T> obj = *get<T>(fn);
  745|  1.37M|              if constexpr (std::is_void_v<R>) {
  746|  1.37M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.37M|              }
  748|  1.37M|              else {
  749|  1.37M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.37M|              }
  751|  1.37M|          }),
  752|  1.37M|          m_storage(std::addressof(f))
  753|  1.37M|    {
  754|  1.37M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  2.60M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.60M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.60M|              else {
  749|  2.60M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.60M|              }
  751|  2.60M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.60M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.60M|        else if constexpr (std::is_object_v<T>) {
  688|  2.60M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.60M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  2.60M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.37M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.37M|        {
  662|  1.37M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   654k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   654k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   654k|        auto beg = r.begin();
  990|   654k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 654k, False: 0]
  ------------------
  991|   654k|            return false;
  992|   654k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   654k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  4.53M|    {
  763|  4.53M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  4.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  4.53M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  1.71M|{
 1857|  1.71M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|       |    if constexpr (ranges::sized_range<Range>) {
 1860|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|       |        if (sz < count) {
 1862|       |            return unexpected(eof_error::eof);
 1863|       |        }
 1864|       |
 1865|       |        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|  1.71M|    else {
 1868|  1.71M|        auto it = range.begin();
 1869|  1.71M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 1.02M, False: 682k]
  ------------------
 1870|  1.02M|            return ranges::next(it, count);
 1871|  1.02M|        }
 1872|       |
 1873|  2.63M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.01M, False: 627k]
  ------------------
 1874|  2.01M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 55.1k, False: 1.95M]
  ------------------
 1875|  55.1k|                return unexpected(eof_error::eof);
 1876|  55.1k|            }
 1877|  2.01M|        }
 1878|       |
 1879|   627k|        return it;
 1880|   682k|    }
 1881|  1.71M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  1.71M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  1.71M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  1.71M|        else {
 1106|  1.71M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 1.71M, False: 0]
  ------------------
 1107|  1.71M|                return static_cast<size_t>(
 1108|  1.71M|                    r.begin().parent()->chars_available() -
 1109|  1.71M|                    r.begin().position());
 1110|  1.71M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  1.71M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  1.71M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.51M|        : m_fptr([](storage fn,
  743|  1.51M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.51M|              cvref<T> obj = *get<T>(fn);
  745|  1.51M|              if constexpr (std::is_void_v<R>) {
  746|  1.51M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.51M|              }
  748|  1.51M|              else {
  749|  1.51M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.51M|              }
  751|  1.51M|          }),
  752|  1.51M|          m_storage(std::addressof(f))
  753|  1.51M|    {
  754|  1.51M|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  2.26M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.26M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.26M|              else {
  749|  2.26M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.26M|              }
  751|  2.26M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  2.26M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.26M|        else if constexpr (std::is_object_v<T>) {
  688|  2.26M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.26M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.51M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.51M|        {
  662|  1.51M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   481k|    {
 6037|   481k|        const bool need_skipped_width =
 6038|   481k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 481k]
  |  Branch (6038:33): [True: 0, False: 481k]
  ------------------
 6039|   481k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   481k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 481k]
  ------------------
 6043|   481k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 481k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   481k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 481k, False: 0]
  |  Branch (6047:56): [True: 481k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   481k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 481k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   960k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   481k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   481k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   481k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.72k, False: 478k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.72k|    }                                                  \
  |  |  |  | 3671|   481k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   478k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   960k|                            make_eof_scan_error));
 6058|       |
 6059|   960k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 478k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   478k|            return result_type{it, 0};
 6067|   960k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   481k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  1.11M|{
 1976|  1.11M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.11M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  1.11M|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|  1.11M|    else {
 1961|  1.11M|        auto first = range.begin();
 1962|  1.68M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.68M, False: 3.00k]
  ------------------
 1963|  1.68M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.11M, False: 570k]
  ------------------
 1964|  1.11M|                return first;
 1965|  1.11M|            }
 1966|  1.68M|        }
 1967|  3.00k|        return first;
 1968|  1.11M|    }
 1969|  1.11M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   772k|    {
  108|   772k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   772k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   772k|    {
   94|   772k|        iter_difference_t<I> counter{0};
   95|  2.03M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.26M, False: 772k]
  ------------------
   96|  1.26M|            ++i;
   97|  1.26M|            ++counter;
   98|  1.26M|        }
   99|   772k|        return counter;
  100|   772k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   229k|    {
 1780|   229k|        auto stdloc = loc.get<std::locale>();
 1781|   229k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   229k|        grouping = numpunct.grouping();
 1783|   229k|        thousands_sep =
 1784|   229k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 229k]
  ------------------
 1785|   229k|        decimal_point = numpunct.decimal_point();
 1786|   229k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   229k|{
 1717|   229k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 229k, False: 0]
  ------------------
 1718|   229k|        return std::use_facet<Facet>(stdloc);
 1719|   229k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   229k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  1.49M|{
 1846|  1.49M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.96k, False: 1.49M]
  |  |  ------------------
  ------------------
 1847|  1.96k|        return unexpected(e);
 1848|  1.96k|    }
 1849|       |
 1850|  1.49M|    return ranges::next(range.begin());
 1851|  1.49M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  2.32M|{
  950|  2.32M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.61k, False: 2.32M]
  |  |  ------------------
  ------------------
  951|  5.61k|        return eof_error::eof;
  952|  5.61k|    }
  953|  2.32M|    return eof_error::good;
  954|  2.32M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  3.43M|{
  944|  3.43M|    return is_range_eof(r.begin(), r.end());
  945|  3.43M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  3.43M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  3.43M|    {
  937|  3.43M|        return begin == end;
  938|  3.43M|    }
  939|  3.43M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.49M|    {
  296|  1.49M|        ++x;
  297|  1.49M|        return x;
  298|  1.49M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   663k|{
 3141|   663k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   663k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 657k, False: 6.02k]
  ------------------
 3143|   657k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 657k, False: 70]
  ------------------
 3144|   657k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   657k|        }
 3146|     70|        return unexpected(eof_error::eof);
 3147|   657k|    }
 3148|       |
 3149|  6.02k|    auto& it = *r;
 3150|  6.02k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 5.00k, False: 1.02k]
  ------------------
 3151|  5.00k|        return std::pair{it, sign_type::minus_sign};
 3152|  5.00k|    }
 3153|  1.02k|    return std::pair{it, sign_type::plus_sign};
 3154|  6.02k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  1.04M|{
 2272|  1.04M|    auto it = read_code_unit(range);
 2273|  1.04M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.07k, False: 1.04M]
  |  |  ------------------
  ------------------
 2274|  1.07k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  1.07k|    }
 2276|       |
 2277|  2.09M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.09M, False: 1.02M]
  ------------------
 2278|  2.09M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 18.7k, False: 2.07M]
  ------------------
 2279|  18.7k|            return *it;
 2280|  18.7k|        }
 2281|  2.09M|    }
 2282|       |
 2283|  1.02M|    return unexpected(parse_error::error);
 2284|  1.04M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  1.71M|{
 2231|  1.71M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|  1.71M|    else {
 2244|  1.71M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.71M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.71M|                return ch;
 2247|  1.71M|            }
 2248|  1.71M|            return static_cast<char_type>(ch +
 2249|  1.71M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.71M|        };
 2251|       |
 2252|  1.71M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.71M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 55.1k, False: 1.65M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  55.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  55.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  55.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  55.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  55.1k|    }                                                  \
  |  |  |  | 3671|  1.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.65M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.65M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.65M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.65M, False: 1.01k]
  |  |  ------------------
  ------------------
 2257|  1.65M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.65M|                    return ascii_tolower(a) ==
 2259|  1.65M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.65M|                }))) {
 2261|  1.65M|            return unexpected(parse_error::error);
 2262|  1.65M|        }
 2263|       |
 2264|  1.01k|        return it;
 2265|  1.65M|    }
 2266|  1.71M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.92M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.92M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 1.50M, False: 426k]
  |  Branch (2245:29): [True: 412k, False: 13.6k]
  ------------------
 2246|  1.91M|                return ch;
 2247|  1.91M|            }
 2248|  13.6k|            return static_cast<char_type>(ch +
 2249|  13.6k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.92M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   451k|{
 2146|   451k|    auto it = read_code_unit(range);
 2147|   451k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   451k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 889, False: 450k]
  |  |  ------------------
  ------------------
 2148|    889|        return unexpected(make_eof_parse_error(it.error()));
 2149|    889|    }
 2150|       |
 2151|   450k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 448k, False: 2.12k]
  |  |  ------------------
  ------------------
 2152|   450k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   448k|        return unexpected(parse_error::error);
 2154|   448k|    }
 2155|       |
 2156|  2.12k|    return *it;
 2157|   450k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  1.11M|{
 1996|  1.11M|    auto it = read_while_code_unit(range, pred);
 1997|  1.11M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 650k, False: 464k]
  ------------------
 1998|   650k|        return unexpected(parse_error::error);
 1999|   650k|    }
 2000|   464k|    return it;
 2001|  1.11M|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|   447k|    {
 1621|   447k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|   447k|                           ranges::common_range<Range>) {
 1638|   447k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   447k|            auto end_seg = range.end().contiguous_segment();
 1640|   447k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   447k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.8k, False: 432k]
  |  |  ------------------
  ------------------
 1641|   447k|                             detail::to_address(end_seg.end()))) {
 1642|  14.8k|                auto& str = m_storage.emplace();
 1643|  14.8k|                str.reserve(range.end().position() - range.begin().position());
 1644|  14.8k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  14.8k|                m_view = string_view_type{str};
 1646|  14.8k|                return;
 1647|  14.8k|            }
 1648|       |
 1649|   432k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   432k|                                                            end_seg.data());
 1651|   432k|            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|   447k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  3.97M|    {
 1582|  3.97M|        return m_view;
 1583|  3.97M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  2.60M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   318k|    {
 6079|   318k|        const bool need_skipped_width =
 6080|   318k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 318k]
  |  Branch (6080:33): [True: 0, False: 318k]
  ------------------
 6081|   318k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   318k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 318k]
  ------------------
 6084|   318k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 318k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   318k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 318k, False: 0]
  ------------------
 6093|   318k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 318k]
  ------------------
 6094|   318k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   318k|        return result_type{rng.begin(), 0};
 6118|   318k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  1.71M|{
 1857|  1.71M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.71M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.71M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.71M|    if constexpr (ranges::sized_range<Range>) {
 1860|  1.71M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.71M|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 55.2k, False: 1.65M]
  ------------------
 1862|  55.2k|            return unexpected(eof_error::eof);
 1863|  55.2k|        }
 1864|       |
 1865|  1.65M|        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|       |    else {
 1868|       |        auto it = range.begin();
 1869|       |        if (guaranteed_minimum_size(range) >= count) {
 1870|       |            return ranges::next(it, count);
 1871|       |        }
 1872|       |
 1873|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|       |            if (it == range.end()) {
 1875|       |                return unexpected(eof_error::eof);
 1876|       |            }
 1877|       |        }
 1878|       |
 1879|       |        return it;
 1880|       |    }
 1881|  1.71M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  1.91M|{
 1899|  1.91M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.91M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.91M|    auto it = range.begin();
 1903|  1.91M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.91M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.91M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.91M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.91M, False: 0]
  ------------------
 1912|  1.91M|        ++it;
 1913|  1.91M|        return {it, string_type(1, *range.begin())};
 1914|  1.91M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.91M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  3.63M|{
  944|  3.63M|    return is_range_eof(r.begin(), r.end());
  945|  3.63M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  3.63M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  3.63M|    {
  937|  3.63M|        return begin == end;
  938|  3.63M|    }
  939|  3.63M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   410k|    {
  190|   410k|        i = std::move(bound);
  191|   410k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  1.91M|    {
 1890|  1.91M|        return !codepoint.empty();
 1891|  1.91M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  1.71M|{
  950|  1.71M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.13k, False: 1.71M]
  |  |  ------------------
  ------------------
  951|  4.13k|        return eof_error::eof;
  952|  4.13k|    }
  953|  1.71M|    return eof_error::good;
  954|  1.71M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   889k|{
 1846|   889k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   889k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 486, False: 889k]
  |  |  ------------------
  ------------------
 1847|    486|        return unexpected(e);
 1848|    486|    }
 1849|       |
 1850|   889k|    return ranges::next(range.begin());
 1851|   889k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   889k|    {
  296|   889k|        ++x;
  297|   889k|        return x;
  298|   889k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   655k|{
 3141|   655k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   655k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 652k, False: 3.67k]
  ------------------
 3143|   652k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 652k, False: 24]
  ------------------
 3144|   652k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   652k|        }
 3146|     24|        return unexpected(eof_error::eof);
 3147|   652k|    }
 3148|       |
 3149|  3.67k|    auto& it = *r;
 3150|  3.67k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 2.84k, False: 836]
  ------------------
 3151|  2.84k|        return std::pair{it, sign_type::minus_sign};
 3152|  2.84k|    }
 3153|    836|    return std::pair{it, sign_type::plus_sign};
 3154|  3.67k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   739k|{
 2272|   739k|    auto it = read_code_unit(range);
 2273|   739k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   739k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 238, False: 739k]
  |  |  ------------------
  ------------------
 2274|    238|        return unexpected(make_eof_parse_error(it.error()));
 2275|    238|    }
 2276|       |
 2277|  1.47M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.47M, False: 731k]
  ------------------
 2278|  1.47M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 8.07k, False: 1.46M]
  ------------------
 2279|  8.07k|            return *it;
 2280|  8.07k|        }
 2281|  1.47M|    }
 2282|       |
 2283|   731k|    return unexpected(parse_error::error);
 2284|   739k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  1.71M|{
 2231|  1.71M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|  1.71M|    else {
 2244|  1.71M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.71M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.71M|                return ch;
 2247|  1.71M|            }
 2248|  1.71M|            return static_cast<char_type>(ch +
 2249|  1.71M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.71M|        };
 2251|       |
 2252|  1.71M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.71M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.71M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.71M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 55.2k, False: 1.65M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  55.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  55.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  55.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  55.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  55.2k|    }                                                  \
  |  |  |  | 3671|  1.71M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.65M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.65M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.65M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.65M, False: 1.01k]
  |  |  ------------------
  ------------------
 2257|  1.65M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.65M|                    return ascii_tolower(a) ==
 2259|  1.65M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.65M|                }))) {
 2261|  1.65M|            return unexpected(parse_error::error);
 2262|  1.65M|        }
 2263|       |
 2264|  1.01k|        return it;
 2265|  1.65M|    }
 2266|  1.71M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.92M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.92M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 1.50M, False: 427k]
  |  Branch (2245:29): [True: 414k, False: 13.7k]
  ------------------
 2246|  1.91M|                return ch;
 2247|  1.91M|            }
 2248|  13.7k|            return static_cast<char_type>(ch +
 2249|  13.7k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.92M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   150k|{
 2146|   150k|    auto it = read_code_unit(range);
 2147|   150k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 248, False: 149k]
  |  |  ------------------
  ------------------
 2148|    248|        return unexpected(make_eof_parse_error(it.error()));
 2149|    248|    }
 2150|       |
 2151|   149k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 149k, False: 838]
  |  |  ------------------
  ------------------
 2152|   149k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   149k|        return unexpected(parse_error::error);
 2154|   149k|    }
 2155|       |
 2156|    838|    return *it;
 2157|   149k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   395k|{
 1976|   395k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   395k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   395k|{
 1957|   395k|    if constexpr (ranges::common_range<Range>) {
 1958|   395k|        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|       |    else {
 1961|       |        auto first = range.begin();
 1962|       |        for (; first != range.end(); ++first) {
 1963|       |            if (pred(*first)) {
 1964|       |                return first;
 1965|       |            }
 1966|       |        }
 1967|       |        return first;
 1968|       |    }
 1969|   395k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   654k|{
 2951|   654k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 654k, False: 0]
  ------------------
 2952|   654k|        auto it = read_while_classic_space(range);
 2953|   654k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   654k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   654k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.22k, False: 651k]
  |  |  ------------------
  ------------------
 2955|  3.22k|            return unexpected(e);
 2956|  3.22k|        }
 2957|       |
 2958|   651k|        return it;
 2959|   654k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   654k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   654k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|   654k|    else {
 2126|   654k|        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|   654k|        return read_while_code_point(
 2138|   654k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   654k|    }
 2140|   654k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   654k|{
 2082|   654k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   654k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  1.08M|{
 2061|  1.08M|    auto it = range.begin();
 2062|  2.18M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.91M, False: 271k]
  ------------------
 2063|  1.91M|        const auto val =
 2064|  1.91M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.91M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.91M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.91M, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.91M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.91M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.91M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 814k, False: 1.09M]
  ------------------
 2069|   814k|                return it;
 2070|   814k|            }
 2071|  1.91M|        }
 2072|  1.09M|        it = val.iterator;
 2073|  1.09M|    }
 2074|       |
 2075|   271k|    return it;
 2076|  1.08M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   654k|        : m_fptr([](storage fn,
  743|   654k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   654k|              cvref<T> obj = *get<T>(fn);
  745|   654k|              if constexpr (std::is_void_v<R>) {
  746|   654k|                  obj(static_cast<decltype(args)>(args)...);
  747|   654k|              }
  748|   654k|              else {
  749|   654k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   654k|              }
  751|   654k|          }),
  752|   654k|          m_storage(std::addressof(f))
  753|   654k|    {
  754|   654k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  1.11M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.11M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.11M|              else {
  749|  1.11M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.11M|              }
  751|  1.11M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  1.11M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.11M|        else if constexpr (std::is_object_v<T>) {
  688|  1.11M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.11M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  1.11M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   654k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   654k|        {
  662|   654k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.47M|    {
  304|  1.47M|        ranges::advance(x, n);
  305|  1.47M|        return x;
  306|  1.47M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.47M|    {
  268|  1.47M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.47M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.47M|    {
  181|  4.72M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 3.24M, False: 1.47M]
  ------------------
  182|  3.24M|            ++i;
  183|  3.24M|        }
  184|  1.47M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   154k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   154k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   154k|            auto rd = make_reader<T, char_type>();
 6206|   154k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   154k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 154k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   154k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   154k|                return impl(rd, range, value);
 6213|   154k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   154k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   963k|    {
 3040|   963k|        reader_error_handler eh{};
 3041|   963k|        get_derived().check_specs_impl(specs, eh);
 3042|   963k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   963k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 963k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   963k|        return {};
 3046|   963k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   963k|    {
 3051|   963k|        return static_cast<Derived&>(*this);
 3052|   963k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|   963k|    {
 4145|   963k|        detail::check_float_type_specs(specs, eh);
 4146|   963k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   154k|    {
 6124|   154k|        const bool need_skipped_width =
 6125|   154k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 154k]
  |  Branch (6125:33): [True: 0, False: 154k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   154k|        auto it = rng.begin();
 6129|   154k|        std::ptrdiff_t prefix_width = 0;
 6130|   154k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 154k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   154k|        else {
 6138|   154k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 848, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    848|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    848|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    848|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    848|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    848|    }                                                  \
  |  |  |  | 3671|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   153k|            std::tie(it, prefix_width) = prefix_result;
 6140|   153k|        }
 6141|   153k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   153k|        std::ptrdiff_t value_width = 0;
 6145|   153k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 153k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   153k|        else {
 6161|   153k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   153k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   153k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.1k, False: 100k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  53.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  53.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  53.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  53.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  53.1k|    }                                                  \
  |  | 3671|   153k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   100k|                                             specs, value, loc));
 6163|       |
 6164|   100k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 100k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   100k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   100k|        std::ptrdiff_t postfix_width = 0;
 6173|   100k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 100k, False: 358]
  ------------------
 6174|   100k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   100k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   100k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   100k|                                 value_width));
 6178|   100k|            std::tie(it, postfix_width) = postfix_result;
 6179|   100k|        }
 6180|       |
 6181|   100k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   100k|                                                 value_width, postfix_width);
 6183|   100k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 100k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   100k|        return it;
 6188|   100k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.94M|    {
 3035|  1.94M|        return true;
 3036|  1.94M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|   957k|    {
 4217|   957k|        unsigned options{};
 4218|   957k|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 229k, False: 727k]
  ------------------
 4219|   229k|            options |= float_reader_base::allow_thsep;
 4220|   229k|        }
 4221|       |
 4222|   957k|        SCN_GCC_COMPAT_PUSH
 4223|   957k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|   957k|        switch (specs.type) {
 4226|   197k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 197k, False: 760k]
  ------------------
 4227|   197k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  65.9k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 65.9k, False: 891k]
  ------------------
 4230|  65.9k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   245k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 245k, False: 711k]
  ------------------
 4233|   245k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   218k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 218k, False: 738k]
  ------------------
 4236|   218k|                return options | float_reader_base::allow_scientific |
 4237|   218k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   229k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 229k, False: 727k]
  ------------------
 4240|   229k|                return options | float_reader_base::allow_scientific |
 4241|   229k|                       float_reader_base::allow_fixed |
 4242|   229k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 957k]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|   957k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|   957k|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|   957k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|   957k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  1.30M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  2.60M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   316k|    {
 3691|   316k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   316k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   316k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   316k|        const std::ptrdiff_t sign_len =
 3694|   316k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 1.37k, False: 314k]
  ------------------
 3695|       |
 3696|   316k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   316k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   316k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   316k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   316k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 39.7k, False: 276k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  39.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  39.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  39.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  39.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  39.7k|    }                                                  \
  |  |  |  | 3671|   316k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   276k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   276k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   316k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|  1.00M|    {
 4057|  1.00M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 1.00M, False: 0]
  ------------------
 4058|  1.00M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 1.00M, False: 0]
  ------------------
 4059|  1.00M|            return;
 4060|  1.00M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|  1.06M|    {
 1587|  1.06M|        return m_storage.has_value();
 1588|  1.06M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|   622k|    {
 1592|   622k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   622k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   622k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|   622k|        return *m_storage;
 1594|   622k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   153k|    {
 4170|   153k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   153k|#if !SCN_DISABLE_LOCALE
 4173|   153k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 35.4k, False: 118k]
  ------------------
 4174|  35.4k|            return read_impl<Range>(
 4175|  35.4k|                range, rd,
 4176|  35.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  35.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  35.4k|                },
 4179|  35.4k|                value, loc);
 4180|  35.4k|        }
 4181|   118k|#endif
 4182|       |
 4183|   118k|        return read_impl<Range>(
 4184|   118k|            range, rd,
 4185|   118k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   118k|                return r.read_source(SCN_FWD(args)...);
 4187|   118k|            },
 4188|   118k|            value);
 4189|   153k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   207k|    {
 4206|   207k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   207k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 67.0k, False: 140k]
  |  |  ------------------
  ------------------
 4208|  67.0k|            return unexpected(r.error());
 4209|  67.0k|        }
 4210|       |
 4211|   140k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.09k, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.09k|    }                                                  \
  |  |  |  | 3671|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   138k|        return ranges::next(range.begin(), n);
 4213|   140k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   650k|    {
  763|   650k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   650k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   650k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  35.4k|        : m_fptr([](storage fn,
  743|  35.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.4k|              cvref<T> obj = *get<T>(fn);
  745|  35.4k|              if constexpr (std::is_void_v<R>) {
  746|  35.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  35.4k|              }
  748|  35.4k|              else {
  749|  35.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.4k|              }
  751|  35.4k|          }),
  752|  35.4k|          m_storage(std::addressof(f))
  753|  35.4k|    {
  754|  35.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  35.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  35.4k|              else {
  749|  35.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.4k|              }
  751|  35.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  35.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  35.4k|        else if constexpr (std::is_object_v<T>) {
  688|  35.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  35.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  35.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  35.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  35.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  35.4k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   114k|    {
 3679|   114k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   114k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   114k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 114k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   114k|        return read_source_impl(range);
 3685|   114k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   650k|    {
 3705|   650k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   650k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   650k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   650k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   650k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 650k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   650k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   650k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   650k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   650k|        auto it = sign_result.first;
 3708|   650k|        m_sign = sign_result.second;
 3709|       |
 3710|   650k|        auto digits_begin = it;
 3711|   650k|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|       |                      ranges::sized_range<Range>) {
 3714|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|       |                SCN_TRY_ASSIGN(
 3717|       |                    it,
 3718|       |                    do_read_source_impl(
 3719|       |                        r,
 3720|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|       |            }
 3723|       |            else {
 3724|       |                auto cb = [&](const auto& rr)
 3725|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|       |                    auto res = read_all(rr);
 3727|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|       |                        return unexpected_scan_error(
 3729|       |                            scan_error::invalid_scanned_value,
 3730|       |                            "Invalid float value");
 3731|       |                    }
 3732|       |                    return res;
 3733|       |                };
 3734|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|       |            }
 3736|       |        }
 3737|   650k|        else {
 3738|   650k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|   650k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   650k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   650k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 203k, False: 447k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   203k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   203k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   203k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   203k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   203k|    }                                                  \
  |  | 3671|   650k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   650k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|   447k|                it,
 3740|   447k|                do_read_source_impl(
 3741|   447k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   447k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   447k|        }
 3744|       |
 3745|   650k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   650k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   650k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   447k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 447k, False: 0]
  |  Branch (3747:48): [True: 447k, False: 0]
  ------------------
 3748|   447k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 447k, False: 0]
  ------------------
 3749|   447k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 447k, False: 0]
  ------------------
 3750|   447k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   447k|        }
 3752|       |
 3753|   447k|        handle_separators();
 3754|       |
 3755|   447k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 447k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   447k|        return it;
 3768|   447k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   650k|    {
 4000|   650k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   650k|        const bool allowed_nonhex =
 4002|   650k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   650k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   650k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 650k, False: 0]
  |  Branch (4005:45): [True: 0, False: 650k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   650k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 650k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   650k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 650k, False: 0]
  |  Branch (4014:45): [True: 0, False: 650k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   650k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 650k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   650k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 409k, False: 241k]
  |  Branch (4021:28): [True: 122k, False: 287k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   122k|            auto it = range.begin();
 4025|       |
 4026|   122k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 300, False: 122k]
  ------------------
 4027|    300|                m_kind = float_kind::hex_with_prefix;
 4028|    300|                it = *r;
 4029|    300|            }
 4030|   122k|            else {
 4031|   122k|                m_kind = float_kind::hex_without_prefix;
 4032|   122k|            }
 4033|       |
 4034|   122k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   122k|        }
 4036|   528k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 241k, False: 287k]
  |  Branch (4036:29): [True: 241k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   241k|            m_kind = float_kind::generic;
 4040|   241k|            return read_regular_float(range);
 4041|   241k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   287k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 710, False: 286k]
  |  |  ------------------
  ------------------
 4047|    710|            m_kind = float_kind::hex_with_prefix;
 4048|    710|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    710|        }
 4050|       |
 4051|   286k|        m_kind = float_kind::generic;
 4052|   286k|        return read_regular(range);
 4053|   287k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   650k|    {
 3811|   650k|        auto it = range.begin();
 3812|   650k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 650k, False: 0]
  ------------------
 3813|   650k|            return unexpected(r.error());
 3814|   650k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   650k|    {
 3834|   650k|        auto it = range.begin();
 3835|   650k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 650k, False: 0]
  ------------------
 3836|   650k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   650k|                scan_error::invalid_scanned_value,
 3838|   650k|                "Invalid floating-point NaN value"));
 3839|   650k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   409k|    {
 3804|   409k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   409k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   123k|    {
 3904|   123k|        auto it = range.begin();
 3905|       |
 3906|   123k|        std::ptrdiff_t digits_count = 0;
 3907|   123k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   123k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.7k, False: 91.8k]
  |  |  ------------------
  ------------------
 3909|  31.7k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  31.7k|                scan_error::invalid_scanned_value,
 3911|  31.7k|                "Invalid hexadecimal floating-point value"));
 3912|  31.7k|        }
 3913|  91.8k|        else {
 3914|  91.8k|            digits_count += ranges::distance(it, *r);
 3915|  91.8k|            it = *r;
 3916|  91.8k|        }
 3917|       |
 3918|  91.8k|        m_integral_part_length = digits_count;
 3919|  91.8k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 396, False: 91.4k]
  ------------------
 3920|  91.8k|                                             m_locale_options.decimal_point)) {
 3921|    396|            it = *r;
 3922|    396|        }
 3923|       |
 3924|  91.8k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 318, False: 91.4k]
  ------------------
 3925|  91.8k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|    318|            digits_count += ranges::distance(it, *r);
 3927|    318|            it = *r;
 3928|    318|        }
 3929|       |
 3930|  91.8k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  91.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.8k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|  91.8k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|  91.8k|        return it;
 3938|  91.8k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   215k|    {
 3789|   215k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 215k]
  |  |  |  Branch (859:45): [True: 0, False: 215k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   215k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   215k|        return read_while1_code_unit(
 3798|   215k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   215k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   215k|        : m_fptr([](storage fn,
  743|   215k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   215k|              cvref<T> obj = *get<T>(fn);
  745|   215k|              if constexpr (std::is_void_v<R>) {
  746|   215k|                  obj(static_cast<decltype(args)>(args)...);
  747|   215k|              }
  748|   215k|              else {
  749|   215k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   215k|              }
  751|   215k|          }),
  752|   215k|          m_storage(std::addressof(f))
  753|   215k|    {
  754|   215k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   332k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   332k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   332k|              else {
  749|   332k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   332k|              }
  751|   332k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   332k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   332k|        else if constexpr (std::is_object_v<T>) {
  688|   332k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   332k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|   332k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   215k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   215k|        {
  662|   215k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|   384k|    {
 3876|   384k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 12.7k, False: 371k]
  ------------------
 3877|  12.7k|            auto beg_exp_it = range.begin();
 3878|  12.7k|            auto it = *r;
 3879|       |
 3880|  12.7k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 12.6k, False: 70]
  ------------------
 3881|  12.7k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  12.6k|                it = r_sign->first;
 3883|  12.6k|            }
 3884|       |
 3885|  12.7k|            if (auto r_exp = read_while1_code_unit(
 3886|  12.7k|                    ranges::subrange{it, range.end()},
 3887|  12.7k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  12.7k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.35k, False: 11.3k]
  |  |  ------------------
  ------------------
 3889|  1.35k|                it = beg_exp_it;
 3890|  1.35k|            }
 3891|  11.3k|            else {
 3892|  11.3k|                it = *r_exp;
 3893|  11.3k|            }
 3894|       |
 3895|  12.7k|            return it;
 3896|  12.7k|        }
 3897|   371k|        return range.begin();
 3898|   384k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  12.7k|        : m_fptr([](storage fn,
  743|  12.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.7k|              cvref<T> obj = *get<T>(fn);
  745|  12.7k|              if constexpr (std::is_void_v<R>) {
  746|  12.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.7k|              }
  748|  12.7k|              else {
  749|  12.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.7k|              }
  751|  12.7k|          }),
  752|  12.7k|          m_storage(std::addressof(f))
  753|  12.7k|    {
  754|  12.7k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  43.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  43.9k|              else {
  749|  43.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.9k|              }
  751|  43.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  43.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  43.9k|        else if constexpr (std::is_object_v<T>) {
  688|  43.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  43.9k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  43.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  12.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  12.7k|        {
  662|  12.7k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   527k|    {
 3944|   527k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   527k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 428k, False: 98.5k]
  |  Branch (3945:50): [True: 32.9k, False: 395k]
  ------------------
 3946|       |
 3947|   527k|        auto it = ranges::begin(range);
 3948|   527k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   527k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   527k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   527k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 167k, False: 359k]
  |  |  ------------------
  ------------------
 3952|   167k|            return r.transform_error(
 3953|   167k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   167k|                                              "Invalid floating-point value"));
 3955|   167k|        }
 3956|   359k|        else {
 3957|   359k|            digits_count += ranges::distance(it, *r);
 3958|   359k|            it = *r;
 3959|   359k|        }
 3960|       |
 3961|   359k|        m_integral_part_length = digits_count;
 3962|   359k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 1.73k, False: 357k]
  ------------------
 3963|   359k|                                             m_locale_options.decimal_point)) {
 3964|  1.73k|            it = *r;
 3965|  1.73k|        }
 3966|       |
 3967|   359k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 1.39k, False: 358k]
  ------------------
 3968|   359k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  1.39k|            digits_count += ranges::distance(it, *r);
 3970|  1.39k|            it = *r;
 3971|  1.39k|        }
 3972|       |
 3973|   359k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   359k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 359k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   359k|        auto beg_exp_it = it;
 3979|   359k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 292k, False: 66.5k]
  ------------------
 3980|   292k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   292k|        }
 3982|   359k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 5.04k, False: 354k]
  |  Branch (3982:29): [True: 4.11k, False: 930]
  ------------------
 3983|  4.11k|            return unexpected_scan_error(
 3984|  4.11k|                scan_error::invalid_scanned_value,
 3985|  4.11k|                "No exponent given to scientific float");
 3986|  4.11k|        }
 3987|       |
 3988|   355k|        m_kind =
 3989|   355k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 344k, False: 11.2k]
  ------------------
 3990|       |
 3991|   355k|        return it;
 3992|   359k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|   886k|    {
 3774|   886k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   886k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 886k]
  |  |  |  Branch (859:45): [True: 0, False: 886k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   886k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   886k|        return read_while1_code_unit(
 3783|   886k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   886k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   886k|        : m_fptr([](storage fn,
  743|   886k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   886k|              cvref<T> obj = *get<T>(fn);
  745|   886k|              if constexpr (std::is_void_v<R>) {
  746|   886k|                  obj(static_cast<decltype(args)>(args)...);
  747|   886k|              }
  748|   886k|              else {
  749|   886k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   886k|              }
  751|   886k|          }),
  752|   886k|          m_storage(std::addressof(f))
  753|   886k|    {
  754|   886k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.30M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.30M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.30M|              else {
  749|  1.30M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.30M|              }
  751|  1.30M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.30M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.30M|        else if constexpr (std::is_object_v<T>) {
  688|  1.30M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.30M|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|  1.30M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   886k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   886k|        {
  662|   886k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1576|   447k|    {
 1577|   447k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   447k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   447k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  35.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  35.4k|        {
  662|  35.4k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   118k|        : m_fptr([](storage fn,
  743|   118k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   118k|              cvref<T> obj = *get<T>(fn);
  745|   118k|              if constexpr (std::is_void_v<R>) {
  746|   118k|                  obj(static_cast<decltype(args)>(args)...);
  747|   118k|              }
  748|   118k|              else {
  749|   118k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   118k|              }
  751|   118k|          }),
  752|   118k|          m_storage(std::addressof(f))
  753|   118k|    {
  754|   118k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   118k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   118k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   118k|              else {
  749|   118k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   118k|              }
  751|   118k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   118k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   118k|        else if constexpr (std::is_object_v<T>) {
  688|   118k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   118k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   118k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   118k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   118k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   536k|    {
 3665|   536k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   536k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 536k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   536k|        return read_source_impl(range);
 3671|   536k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   118k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   118k|        {
  662|   118k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   154k|    {
 4170|   154k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   154k|#if !SCN_DISABLE_LOCALE
 4173|   154k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 35.5k, False: 118k]
  ------------------
 4174|  35.5k|            return read_impl<Range>(
 4175|  35.5k|                range, rd,
 4176|  35.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  35.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  35.5k|                },
 4179|  35.5k|                value, loc);
 4180|  35.5k|        }
 4181|   118k|#endif
 4182|       |
 4183|   118k|        return read_impl<Range>(
 4184|   118k|            range, rd,
 4185|   118k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   118k|                return r.read_source(SCN_FWD(args)...);
 4187|   118k|            },
 4188|   118k|            value);
 4189|   154k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   207k|    {
 4206|   207k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   207k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   207k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.4k, False: 175k]
  |  |  ------------------
  ------------------
 4208|  31.4k|            return unexpected(r.error());
 4209|  31.4k|        }
 4210|       |
 4211|   175k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   175k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   175k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   175k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.6k, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  37.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  37.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  37.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  37.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  37.6k|    }                                                  \
  |  |  |  | 3671|   175k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   138k|        return ranges::next(range.begin(), n);
 4213|   175k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   651k|    {
  763|   651k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   651k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   651k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  35.5k|        : m_fptr([](storage fn,
  743|  35.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.5k|              cvref<T> obj = *get<T>(fn);
  745|  35.5k|              if constexpr (std::is_void_v<R>) {
  746|  35.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  35.5k|              }
  748|  35.5k|              else {
  749|  35.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.5k|              }
  751|  35.5k|          }),
  752|  35.5k|          m_storage(std::addressof(f))
  753|  35.5k|    {
  754|  35.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  35.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  35.5k|              else {
  749|  35.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.5k|              }
  751|  35.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  35.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  35.5k|        else if constexpr (std::is_object_v<T>) {
  688|  35.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  35.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  35.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  35.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  35.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  35.5k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   114k|    {
 3679|   114k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   114k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   114k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 114k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   114k|        return read_source_impl(range);
 3685|   114k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   651k|    {
 3705|   651k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   651k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   651k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   651k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   651k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 651k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   651k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   651k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   651k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   651k|        auto it = sign_result.first;
 3708|   651k|        m_sign = sign_result.second;
 3709|       |
 3710|   651k|        auto digits_begin = it;
 3711|   651k|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|   651k|                      ranges::sized_range<Range>) {
 3714|   651k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.30M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 651k]
  |  |  |  Branch (859:45): [True: 0, False: 651k]
  |  |  |  Branch (859:45): [True: 0, False: 651k]
  |  |  ------------------
  ------------------
 3715|   651k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   651k|            else {
 3724|   651k|                auto cb = [&](const auto& rr)
 3725|   651k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   651k|                    auto res = read_all(rr);
 3727|   651k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   651k|                        return unexpected_scan_error(
 3729|   651k|                            scan_error::invalid_scanned_value,
 3730|   651k|                            "Invalid float value");
 3731|   651k|                    }
 3732|   651k|                    return res;
 3733|   651k|                };
 3734|   651k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|   651k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   651k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   651k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 95.1k, False: 556k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  95.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  95.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  95.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  95.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  95.1k|    }                                                  \
  |  | 3671|   651k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   651k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   556k|            }
 3736|       |        }
 3737|       |        else {
 3738|       |            SCN_TRY_ASSIGN(
 3739|       |                it,
 3740|       |                do_read_source_impl(
 3741|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|       |        }
 3744|       |
 3745|   651k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   651k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   651k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   556k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 556k, False: 0]
  |  Branch (3747:48): [True: 556k, False: 0]
  ------------------
 3748|   556k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 556k, False: 0]
  ------------------
 3749|   556k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 556k, False: 0]
  ------------------
 3750|   556k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   556k|        }
 3752|       |
 3753|   556k|        handle_separators();
 3754|       |
 3755|   556k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 556k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   556k|        return it;
 3768|   556k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   651k|    {
 3811|   651k|        auto it = range.begin();
 3812|   651k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 651k, False: 0]
  ------------------
 3813|   651k|            return unexpected(r.error());
 3814|   651k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   651k|    {
 3834|   651k|        auto it = range.begin();
 3835|   651k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 651k, False: 0]
  ------------------
 3836|   651k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   651k|                scan_error::invalid_scanned_value,
 3838|   651k|                "Invalid floating-point NaN value"));
 3839|   651k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   410k|    {
 3804|   410k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   410k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   395k|{
 1996|   395k|    auto it = read_while_code_unit(range, pred);
 1997|   395k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 240k, False: 154k]
  ------------------
 1998|   240k|        return unexpected(parse_error::error);
 1999|   240k|    }
 2000|   154k|    return it;
 2001|   395k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|  83.5k|    {
 3876|  83.5k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 4.40k, False: 79.1k]
  ------------------
 3877|  4.40k|            auto beg_exp_it = range.begin();
 3878|  4.40k|            auto it = *r;
 3879|       |
 3880|  4.40k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 4.37k, False: 24]
  ------------------
 3881|  4.40k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  4.37k|                it = r_sign->first;
 3883|  4.37k|            }
 3884|       |
 3885|  4.40k|            if (auto r_exp = read_while1_code_unit(
 3886|  4.40k|                    ranges::subrange{it, range.end()},
 3887|  4.40k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  4.40k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  4.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 522, False: 3.87k]
  |  |  ------------------
  ------------------
 3889|    522|                it = beg_exp_it;
 3890|    522|            }
 3891|  3.87k|            else {
 3892|  3.87k|                it = *r_exp;
 3893|  3.87k|            }
 3894|       |
 3895|  4.40k|            return it;
 3896|  4.40k|        }
 3897|  79.1k|        return range.begin();
 3898|  83.5k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  4.40k|        : m_fptr([](storage fn,
  743|  4.40k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.40k|              cvref<T> obj = *get<T>(fn);
  745|  4.40k|              if constexpr (std::is_void_v<R>) {
  746|  4.40k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.40k|              }
  748|  4.40k|              else {
  749|  4.40k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.40k|              }
  751|  4.40k|          }),
  752|  4.40k|          m_storage(std::addressof(f))
  753|  4.40k|    {
  754|  4.40k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  15.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.0k|              else {
  749|  15.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.0k|              }
  751|  15.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  15.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  15.0k|        else if constexpr (std::is_object_v<T>) {
  688|  15.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.0k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  15.0k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  4.40k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.40k|        {
  662|  4.40k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   241k|    {
 3944|   241k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   241k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 142k, False: 98.5k]
  |  Branch (3945:50): [True: 32.9k, False: 109k]
  ------------------
 3946|       |
 3947|   241k|        auto it = ranges::begin(range);
 3948|   241k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   241k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   241k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 90.9k, False: 150k]
  |  |  ------------------
  ------------------
 3952|  90.9k|            return r.transform_error(
 3953|  90.9k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  90.9k|                                              "Invalid floating-point value"));
 3955|  90.9k|        }
 3956|   150k|        else {
 3957|   150k|            digits_count += ranges::distance(it, *r);
 3958|   150k|            it = *r;
 3959|   150k|        }
 3960|       |
 3961|   150k|        m_integral_part_length = digits_count;
 3962|   150k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 838, False: 149k]
  ------------------
 3963|   150k|                                             m_locale_options.decimal_point)) {
 3964|    838|            it = *r;
 3965|    838|        }
 3966|       |
 3967|   150k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 664, False: 149k]
  ------------------
 3968|   150k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|    664|            digits_count += ranges::distance(it, *r);
 3970|    664|            it = *r;
 3971|    664|        }
 3972|       |
 3973|   150k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 150k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   150k|        auto beg_exp_it = it;
 3979|   150k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 83.5k, False: 66.5k]
  ------------------
 3980|  83.5k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  83.5k|        }
 3982|   150k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 5.04k, False: 145k]
  |  Branch (3982:29): [True: 4.11k, False: 930]
  ------------------
 3983|  4.11k|            return unexpected_scan_error(
 3984|  4.11k|                scan_error::invalid_scanned_value,
 3985|  4.11k|                "No exponent given to scientific float");
 3986|  4.11k|        }
 3987|       |
 3988|   145k|        m_kind =
 3989|   145k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 142k, False: 3.87k]
  ------------------
 3990|       |
 3991|   145k|        return it;
 3992|   150k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   391k|    {
 3774|   391k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   391k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 391k]
  |  |  |  Branch (859:45): [True: 0, False: 391k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   391k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   391k|        return read_while1_code_unit(
 3783|   391k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   391k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   391k|        : m_fptr([](storage fn,
  743|   391k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   391k|              cvref<T> obj = *get<T>(fn);
  745|   391k|              if constexpr (std::is_void_v<R>) {
  746|   391k|                  obj(static_cast<decltype(args)>(args)...);
  747|   391k|              }
  748|   391k|              else {
  749|   391k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   391k|              }
  751|   391k|          }),
  752|   391k|          m_storage(std::addressof(f))
  753|   391k|    {
  754|   391k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   568k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   568k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   568k|              else {
  749|   568k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   568k|              }
  751|   568k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   568k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   568k|        else if constexpr (std::is_object_v<T>) {
  688|   568k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   568k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   568k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   391k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   391k|        {
  662|   391k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   651k|    {
 4000|   651k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   651k|        const bool allowed_nonhex =
 4002|   651k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   651k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   651k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 651k, False: 0]
  |  Branch (4005:45): [True: 0, False: 651k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   651k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 651k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   651k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 651k, False: 0]
  |  Branch (4014:45): [True: 0, False: 651k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   651k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 651k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   651k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 410k, False: 241k]
  |  Branch (4021:28): [True: 123k, False: 287k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   123k|            auto it = range.begin();
 4025|       |
 4026|   123k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 300, False: 122k]
  ------------------
 4027|    300|                m_kind = float_kind::hex_with_prefix;
 4028|    300|                it = *r;
 4029|    300|            }
 4030|   122k|            else {
 4031|   122k|                m_kind = float_kind::hex_without_prefix;
 4032|   122k|            }
 4033|       |
 4034|   123k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   123k|        }
 4036|   528k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 241k, False: 287k]
  |  Branch (4036:29): [True: 241k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   241k|            m_kind = float_kind::generic;
 4040|   241k|            return read_regular_float(range);
 4041|   241k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   287k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 710, False: 286k]
  |  |  ------------------
  ------------------
 4047|    710|            m_kind = float_kind::hex_with_prefix;
 4048|    710|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    710|        }
 4050|       |
 4051|   286k|        m_kind = float_kind::generic;
 4052|   286k|        return read_regular(range);
 4053|   287k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   410k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   410k|                    auto res = read_all(rr);
 3727|   410k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   410k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 151, False: 410k]
  |  |  ------------------
  ------------------
 3728|    151|                        return unexpected_scan_error(
 3729|    151|                            scan_error::invalid_scanned_value,
 3730|    151|                            "Invalid float value");
 3731|    151|                    }
 3732|   410k|                    return res;
 3733|   410k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   410k|{
 1839|   410k|    return ranges::next(range.begin(), range.end());
 1840|   410k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   410k|    {
  313|   410k|        ranges::advance(x, bound);
  314|   410k|        return x;
  315|   410k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   410k|    {
  275|   410k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   410k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1576|   556k|    {
 1577|   556k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   556k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   556k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   556k|    {
 1621|   556k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|   556k|                      ranges::sized_range<Range>) {
 1626|   556k|            m_storage.reset();
 1627|   556k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|   556k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  35.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  35.5k|        {
  662|  35.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   118k|        : m_fptr([](storage fn,
  743|   118k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   118k|              cvref<T> obj = *get<T>(fn);
  745|   118k|              if constexpr (std::is_void_v<R>) {
  746|   118k|                  obj(static_cast<decltype(args)>(args)...);
  747|   118k|              }
  748|   118k|              else {
  749|   118k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   118k|              }
  751|   118k|          }),
  752|   118k|          m_storage(std::addressof(f))
  753|   118k|    {
  754|   118k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   118k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   118k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   118k|              else {
  749|   118k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   118k|              }
  751|   118k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   118k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   118k|        else if constexpr (std::is_object_v<T>) {
  688|   118k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   118k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   118k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   118k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   118k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   536k|    {
 3665|   536k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   536k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 536k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   536k|        return read_source_impl(range);
 3671|   536k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   118k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   118k|        {
  662|   118k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   161k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   161k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   161k|            auto rd = make_reader<T, char_type>();
 6206|   161k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 161k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   161k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 161k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   161k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   161k|                return impl(rd, range, value);
 6213|   161k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   161k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   161k|    {
 6124|   161k|        const bool need_skipped_width =
 6125|   161k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 161k]
  |  Branch (6125:33): [True: 0, False: 161k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   161k|        auto it = rng.begin();
 6129|   161k|        std::ptrdiff_t prefix_width = 0;
 6130|   161k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 161k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   161k|        else {
 6138|   161k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   161k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   161k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   161k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 916, False: 161k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    916|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    916|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    916|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    916|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    916|    }                                                  \
  |  |  |  | 3671|   161k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   161k|            std::tie(it, prefix_width) = prefix_result;
 6140|   161k|        }
 6141|   161k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   161k|        std::ptrdiff_t value_width = 0;
 6145|   161k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 161k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   161k|        else {
 6161|   161k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   161k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   161k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.1k, False: 107k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  53.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  53.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  53.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  53.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  53.1k|    }                                                  \
  |  | 3671|   161k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   107k|                                             specs, value, loc));
 6163|       |
 6164|   107k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 107k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   107k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   107k|        std::ptrdiff_t postfix_width = 0;
 6173|   107k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 107k, False: 390]
  ------------------
 6174|   107k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   107k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   107k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   107k|                                 value_width));
 6178|   107k|            std::tie(it, postfix_width) = postfix_result;
 6179|   107k|        }
 6180|       |
 6181|   107k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   107k|                                                 value_width, postfix_width);
 6183|   107k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 107k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   107k|        return it;
 6188|   107k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   339k|    {
 3691|   339k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   339k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   339k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   339k|        const std::ptrdiff_t sign_len =
 3694|   339k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 1.43k, False: 337k]
  ------------------
 3695|       |
 3696|   339k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   339k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   339k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   339k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.2k, False: 301k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  38.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  38.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  38.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  38.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  38.2k|    }                                                  \
  |  |  |  | 3671|   339k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   301k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   301k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   339k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   161k|    {
 4170|   161k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   161k|#if !SCN_DISABLE_LOCALE
 4173|   161k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 38.9k, False: 122k]
  ------------------
 4174|  38.9k|            return read_impl<Range>(
 4175|  38.9k|                range, rd,
 4176|  38.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  38.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  38.9k|                },
 4179|  38.9k|                value, loc);
 4180|  38.9k|        }
 4181|   122k|#endif
 4182|       |
 4183|   122k|        return read_impl<Range>(
 4184|   122k|            range, rd,
 4185|   122k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   122k|                return r.read_source(SCN_FWD(args)...);
 4187|   122k|            },
 4188|   122k|            value);
 4189|   161k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   219k|    {
 4206|   219k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   219k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 67.9k, False: 151k]
  |  |  ------------------
  ------------------
 4208|  67.9k|            return unexpected(r.error());
 4209|  67.9k|        }
 4210|       |
 4211|   151k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   151k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.00k, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.00k|    }                                                  \
  |  |  |  | 3671|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   150k|        return ranges::next(range.begin(), n);
 4213|   151k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  38.9k|        : m_fptr([](storage fn,
  743|  38.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.9k|              cvref<T> obj = *get<T>(fn);
  745|  38.9k|              if constexpr (std::is_void_v<R>) {
  746|  38.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.9k|              }
  748|  38.9k|              else {
  749|  38.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.9k|              }
  751|  38.9k|          }),
  752|  38.9k|          m_storage(std::addressof(f))
  753|  38.9k|    {
  754|  38.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  38.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.9k|              else {
  749|  38.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.9k|              }
  751|  38.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  38.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.9k|        else if constexpr (std::is_object_v<T>) {
  688|  38.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  38.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  38.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  38.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  38.9k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  38.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  38.9k|        {
  662|  38.9k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   122k|        : m_fptr([](storage fn,
  743|   122k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   122k|              cvref<T> obj = *get<T>(fn);
  745|   122k|              if constexpr (std::is_void_v<R>) {
  746|   122k|                  obj(static_cast<decltype(args)>(args)...);
  747|   122k|              }
  748|   122k|              else {
  749|   122k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   122k|              }
  751|   122k|          }),
  752|   122k|          m_storage(std::addressof(f))
  753|   122k|    {
  754|   122k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   122k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   122k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   122k|              else {
  749|   122k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   122k|              }
  751|   122k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   122k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   122k|        else if constexpr (std::is_object_v<T>) {
  688|   122k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   122k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   122k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   122k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   122k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   122k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   122k|        {
  662|   122k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   161k|    {
 4170|   161k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   161k|#if !SCN_DISABLE_LOCALE
 4173|   161k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 39.0k, False: 122k]
  ------------------
 4174|  39.0k|            return read_impl<Range>(
 4175|  39.0k|                range, rd,
 4176|  39.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  39.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  39.0k|                },
 4179|  39.0k|                value, loc);
 4180|  39.0k|        }
 4181|   122k|#endif
 4182|       |
 4183|   122k|        return read_impl<Range>(
 4184|   122k|            range, rd,
 4185|   122k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   122k|                return r.read_source(SCN_FWD(args)...);
 4187|   122k|            },
 4188|   122k|            value);
 4189|   161k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   219k|    {
 4206|   219k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   219k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   219k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.7k, False: 187k]
  |  |  ------------------
  ------------------
 4208|  31.7k|            return unexpected(r.error());
 4209|  31.7k|        }
 4210|       |
 4211|   187k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   187k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   187k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   187k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.2k, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  37.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  37.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  37.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  37.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  37.2k|    }                                                  \
  |  |  |  | 3671|   187k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   150k|        return ranges::next(range.begin(), n);
 4213|   187k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  39.0k|        : m_fptr([](storage fn,
  743|  39.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.0k|              cvref<T> obj = *get<T>(fn);
  745|  39.0k|              if constexpr (std::is_void_v<R>) {
  746|  39.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  39.0k|              }
  748|  39.0k|              else {
  749|  39.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.0k|              }
  751|  39.0k|          }),
  752|  39.0k|          m_storage(std::addressof(f))
  753|  39.0k|    {
  754|  39.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  39.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  39.0k|              else {
  749|  39.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.0k|              }
  751|  39.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  39.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  39.0k|        else if constexpr (std::is_object_v<T>) {
  688|  39.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  39.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  39.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  39.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  39.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  39.0k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  39.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  39.0k|        {
  662|  39.0k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   122k|        : m_fptr([](storage fn,
  743|   122k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   122k|              cvref<T> obj = *get<T>(fn);
  745|   122k|              if constexpr (std::is_void_v<R>) {
  746|   122k|                  obj(static_cast<decltype(args)>(args)...);
  747|   122k|              }
  748|   122k|              else {
  749|   122k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   122k|              }
  751|   122k|          }),
  752|   122k|          m_storage(std::addressof(f))
  753|   122k|    {
  754|   122k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   122k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   122k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   122k|              else {
  749|   122k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   122k|              }
  751|   122k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   122k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   122k|        else if constexpr (std::is_object_v<T>) {
  688|   122k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   122k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   122k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   122k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   122k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   122k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   122k|        {
  662|   122k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   164k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   164k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   164k|            auto rd = make_reader<T, char_type>();
 6206|   164k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   164k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 164k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   164k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   164k|                return impl(rd, range, value);
 6213|   164k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   164k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   164k|    {
 6124|   164k|        const bool need_skipped_width =
 6125|   164k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 164k]
  |  Branch (6125:33): [True: 0, False: 164k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   164k|        auto it = rng.begin();
 6129|   164k|        std::ptrdiff_t prefix_width = 0;
 6130|   164k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 164k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   164k|        else {
 6138|   164k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   164k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   164k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   164k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 956, False: 163k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    956|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    956|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    956|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    956|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    956|    }                                                  \
  |  |  |  | 3671|   164k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   163k|            std::tie(it, prefix_width) = prefix_result;
 6140|   163k|        }
 6141|   163k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   163k|        std::ptrdiff_t value_width = 0;
 6145|   163k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 163k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   163k|        else {
 6161|   163k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   163k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   163k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.0k, False: 110k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  53.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  53.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  53.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  53.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  53.0k|    }                                                  \
  |  | 3671|   163k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   110k|                                             specs, value, loc));
 6163|       |
 6164|   110k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 110k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   110k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   110k|        std::ptrdiff_t postfix_width = 0;
 6173|   110k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 110k, False: 408]
  ------------------
 6174|   110k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   110k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   110k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   110k|                                 value_width));
 6178|   110k|            std::tie(it, postfix_width) = postfix_result;
 6179|   110k|        }
 6180|       |
 6181|   110k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   110k|                                                 value_width, postfix_width);
 6183|   110k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 110k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   110k|        return it;
 6188|   110k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   347k|    {
 3691|   347k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   347k|        const std::ptrdiff_t sign_len =
 3694|   347k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 1.45k, False: 346k]
  ------------------
 3695|       |
 3696|   347k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   347k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   347k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   347k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.0k, False: 310k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  37.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  37.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  37.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  37.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  37.0k|    }                                                  \
  |  |  |  | 3671|   347k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   310k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   310k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   347k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   163k|    {
 4170|   163k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   163k|#if !SCN_DISABLE_LOCALE
 4173|   163k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 40.3k, False: 123k]
  ------------------
 4174|  40.3k|            return read_impl<Range>(
 4175|  40.3k|                range, rd,
 4176|  40.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  40.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  40.3k|                },
 4179|  40.3k|                value, loc);
 4180|  40.3k|        }
 4181|   123k|#endif
 4182|       |
 4183|   123k|        return read_impl<Range>(
 4184|   123k|            range, rd,
 4185|   123k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   123k|                return r.read_source(SCN_FWD(args)...);
 4187|   123k|            },
 4188|   123k|            value);
 4189|   163k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   224k|    {
 4206|   224k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   224k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68.8k, False: 155k]
  |  |  ------------------
  ------------------
 4208|  68.8k|            return unexpected(r.error());
 4209|  68.8k|        }
 4210|       |
 4211|   155k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 123, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    123|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    123|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    123|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    123|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    123|    }                                                  \
  |  |  |  | 3671|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   155k|        return ranges::next(range.begin(), n);
 4213|   155k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  40.3k|        : m_fptr([](storage fn,
  743|  40.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.3k|              cvref<T> obj = *get<T>(fn);
  745|  40.3k|              if constexpr (std::is_void_v<R>) {
  746|  40.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.3k|              }
  748|  40.3k|              else {
  749|  40.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.3k|              }
  751|  40.3k|          }),
  752|  40.3k|          m_storage(std::addressof(f))
  753|  40.3k|    {
  754|  40.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  40.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.3k|              else {
  749|  40.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.3k|              }
  751|  40.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.3k|        else if constexpr (std::is_object_v<T>) {
  688|  40.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  40.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  40.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  40.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  40.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.3k|        {
  662|  40.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   123k|        : m_fptr([](storage fn,
  743|   123k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   123k|              cvref<T> obj = *get<T>(fn);
  745|   123k|              if constexpr (std::is_void_v<R>) {
  746|   123k|                  obj(static_cast<decltype(args)>(args)...);
  747|   123k|              }
  748|   123k|              else {
  749|   123k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   123k|              }
  751|   123k|          }),
  752|   123k|          m_storage(std::addressof(f))
  753|   123k|    {
  754|   123k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   123k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   123k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   123k|              else {
  749|   123k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   123k|              }
  751|   123k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   123k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   123k|        else if constexpr (std::is_object_v<T>) {
  688|   123k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   123k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   123k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   123k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   123k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   123k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   123k|        {
  662|   123k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   163k|    {
 4170|   163k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   163k|#if !SCN_DISABLE_LOCALE
 4173|   163k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 40.3k, False: 123k]
  ------------------
 4174|  40.3k|            return read_impl<Range>(
 4175|  40.3k|                range, rd,
 4176|  40.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  40.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  40.3k|                },
 4179|  40.3k|                value, loc);
 4180|  40.3k|        }
 4181|   123k|#endif
 4182|       |
 4183|   123k|        return read_impl<Range>(
 4184|   123k|            range, rd,
 4185|   123k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   123k|                return r.read_source(SCN_FWD(args)...);
 4187|   123k|            },
 4188|   123k|            value);
 4189|   163k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   224k|    {
 4206|   224k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   224k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.0k, False: 192k]
  |  |  ------------------
  ------------------
 4208|  32.0k|            return unexpected(r.error());
 4209|  32.0k|        }
 4210|       |
 4211|   192k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   192k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   192k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   192k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 36.9k, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  36.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  36.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  36.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  36.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  36.9k|    }                                                  \
  |  |  |  | 3671|   192k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   155k|        return ranges::next(range.begin(), n);
 4213|   192k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  40.3k|        : m_fptr([](storage fn,
  743|  40.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.3k|              cvref<T> obj = *get<T>(fn);
  745|  40.3k|              if constexpr (std::is_void_v<R>) {
  746|  40.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.3k|              }
  748|  40.3k|              else {
  749|  40.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.3k|              }
  751|  40.3k|          }),
  752|  40.3k|          m_storage(std::addressof(f))
  753|  40.3k|    {
  754|  40.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  40.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.3k|              else {
  749|  40.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.3k|              }
  751|  40.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.3k|        else if constexpr (std::is_object_v<T>) {
  688|  40.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  40.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  40.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  40.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  40.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.3k|        {
  662|  40.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   123k|        : m_fptr([](storage fn,
  743|   123k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   123k|              cvref<T> obj = *get<T>(fn);
  745|   123k|              if constexpr (std::is_void_v<R>) {
  746|   123k|                  obj(static_cast<decltype(args)>(args)...);
  747|   123k|              }
  748|   123k|              else {
  749|   123k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   123k|              }
  751|   123k|          }),
  752|   123k|          m_storage(std::addressof(f))
  753|   123k|    {
  754|   123k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   123k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   123k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   123k|              else {
  749|   123k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   123k|              }
  751|   123k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   123k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   123k|        else if constexpr (std::is_object_v<T>) {
  688|   123k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   123k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   123k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   123k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   123k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   123k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   123k|        {
  662|   123k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   654k|{
 2061|   654k|    auto it = range.begin();
 2062|  1.11M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.11M, False: 3.22k]
  ------------------
 2063|  1.11M|        const auto val =
 2064|  1.11M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.11M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.11M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.11M, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.11M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.11M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.11M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 650k, False: 459k]
  ------------------
 2069|   650k|                return it;
 2070|   650k|            }
 2071|  1.11M|        }
 2072|   459k|        it = val.iterator;
 2073|   459k|    }
 2074|       |
 2075|  3.22k|    return it;
 2076|   654k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  1.11M|{
 1899|  1.11M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.11M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.11M|    auto it = range.begin();
 1903|  1.11M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.11M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.11M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.11M, False: 0]
  ------------------
 1912|  1.11M|        ++it;
 1913|  1.11M|        return {it, string_type(1, *range.begin())};
 1914|  1.11M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.11M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|  1.11M|    {
 1890|  1.11M|        return !codepoint.empty();
 1891|  1.11M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   654k|{
 2082|   654k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   654k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   654k|{
 2951|   654k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 654k, False: 0]
  ------------------
 2952|   654k|        auto it = read_while_classic_space(range);
 2953|   654k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   654k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   654k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.22k, False: 650k]
  |  |  ------------------
  ------------------
 2955|  3.22k|            return unexpected(e);
 2956|  3.22k|        }
 2957|       |
 2958|   650k|        return it;
 2959|   654k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   654k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   654k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|   654k|    else {
 2126|   654k|        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|   654k|        return read_while_code_point(
 2138|   654k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   654k|    }
 2140|   654k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   654k|        : m_fptr([](storage fn,
  743|   654k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   654k|              cvref<T> obj = *get<T>(fn);
  745|   654k|              if constexpr (std::is_void_v<R>) {
  746|   654k|                  obj(static_cast<decltype(args)>(args)...);
  747|   654k|              }
  748|   654k|              else {
  749|   654k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   654k|              }
  751|   654k|          }),
  752|   654k|          m_storage(std::addressof(f))
  753|   654k|    {
  754|   654k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.11M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.11M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.11M|              else {
  749|  1.11M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.11M|              }
  751|  1.11M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.11M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.11M|        else if constexpr (std::is_object_v<T>) {
  688|  1.11M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.11M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  1.11M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   654k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   654k|        {
  662|   654k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  1.21M|{
 2088|       |    if constexpr (ranges::contiguous_range<Range> &&
 2089|       |                  ranges::sized_range<Range> &&
 2090|  1.21M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2091|  1.21M|        auto buf = make_contiguous_buffer(range);
 2092|  1.21M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  1.21M|        return ranges::next(range.begin(),
 2094|  1.21M|                            ranges::distance(buf.view().begin(), it));
 2095|       |    }
 2096|       |    else {
 2097|       |        auto it = range.begin();
 2098|       |
 2099|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|       |            auto seg = get_contiguous_beginning(range);
 2101|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|       |                seg_it != seg.end()) {
 2103|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|       |            }
 2105|       |            ranges::advance(it, seg.size());
 2106|       |        }
 2107|       |
 2108|       |        return read_until_code_point(
 2109|       |            ranges::subrange{it, range.end()},
 2110|       |            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|       |    }
 2112|  1.21M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  1.21M|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|  1.21M|                  ranges::sized_range<Range>) {
 1686|  1.21M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|  1.21M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1488|  1.21M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|  1.21M|    {
 1490|  1.21M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1576|  1.21M|    {
 1577|  1.21M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.21M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|  1.21M|    {
 1621|  1.21M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  1.21M|                                          std::basic_string<CharT>>) {
 1631|  1.21M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  1.21M|            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|  1.21M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|   883k|    {
 4100|   883k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 88.3k, False: 795k]
  ------------------
 4101|  88.3k|            return std::copysign(value, T{-1.0});
 4102|  88.3k|        }
 4103|   795k|        return std::copysign(value, T{1.0});
 4104|   883k|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   430k|{
 2088|       |    if constexpr (ranges::contiguous_range<Range> &&
 2089|       |                  ranges::sized_range<Range> &&
 2090|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2091|       |        auto buf = make_contiguous_buffer(range);
 2092|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2093|       |        return ranges::next(range.begin(),
 2094|       |                            ranges::distance(buf.view().begin(), it));
 2095|       |    }
 2096|   430k|    else {
 2097|   430k|        auto it = range.begin();
 2098|       |
 2099|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|       |            auto seg = get_contiguous_beginning(range);
 2101|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|       |                seg_it != seg.end()) {
 2103|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|       |            }
 2105|       |            ranges::advance(it, seg.size());
 2106|       |        }
 2107|       |
 2108|   430k|        return read_until_code_point(
 2109|   430k|            ranges::subrange{it, range.end()},
 2110|   430k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   430k|    }
 2112|   430k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   430k|        : m_fptr([](storage fn,
  743|   430k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   430k|              cvref<T> obj = *get<T>(fn);
  745|   430k|              if constexpr (std::is_void_v<R>) {
  746|   430k|                  obj(static_cast<decltype(args)>(args)...);
  747|   430k|              }
  748|   430k|              else {
  749|   430k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   430k|              }
  751|   430k|          }),
  752|   430k|          m_storage(std::addressof(f))
  753|   430k|    {
  754|   430k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|   803k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   803k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   803k|              else {
  749|   803k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   803k|              }
  751|   803k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   803k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   803k|        else if constexpr (std::is_object_v<T>) {
  688|   803k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   803k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|   803k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   430k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   430k|        {
  662|   430k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1576|   430k|    {
 1577|   430k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   430k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|   430k|    {
 1621|   430k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   430k|                                          std::basic_string<CharT>>) {
 1631|   430k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   430k|            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|   430k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|   316k|    {
 4100|   316k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 1.03k, False: 314k]
  ------------------
 4101|  1.03k|            return std::copysign(value, T{-1.0});
 4102|  1.03k|        }
 4103|   314k|        return std::copysign(value, T{1.0});
 4104|   316k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|   917k|    {
 4100|   917k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 91.9k, False: 825k]
  ------------------
 4101|  91.9k|            return std::copysign(value, T{-1.0});
 4102|  91.9k|        }
 4103|   825k|        return std::copysign(value, T{1.0});
 4104|   917k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|   339k|    {
 4100|   339k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 1.06k, False: 338k]
  ------------------
 4101|  1.06k|            return std::copysign(value, T{-1.0});
 4102|  1.06k|        }
 4103|   338k|        return std::copysign(value, T{1.0});
 4104|   339k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|   926k|    {
 4100|   926k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 94.5k, False: 832k]
  ------------------
 4101|  94.5k|            return std::copysign(value, T{-1.0});
 4102|  94.5k|        }
 4103|   832k|        return std::copysign(value, T{1.0});
 4104|   926k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|   347k|    {
 4100|   347k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 1.08k, False: 346k]
  ------------------
 4101|  1.08k|            return std::copysign(value, T{-1.0});
 4102|  1.08k|        }
 4103|   346k|        return std::copysign(value, T{1.0});
 4104|   347k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   394k|{
 5795|   394k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   394k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.37k, False: 390k]
  |  |  ------------------
  ------------------
 5796|  4.37k|        return unexpected(e);
 5797|  4.37k|    }
 5798|       |
 5799|   390k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 390k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   390k|    return skip_classic_whitespace(range);
 5804|   390k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|   127k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|   127k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   127k|            auto rd = make_reader<T, char_type>();
 5876|   127k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   127k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   127k|    {
 5863|   127k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 125k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.43k|    }                                                  \
  |  |  |  | 3671|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   125k|                        .transform_error(make_eof_scan_error));
 5865|   125k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   127k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   125k|    {
 4152|   125k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   125k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   125k|        float_reader<CharT> rd{};
 4155|   125k|        return read_impl<Range>(
 4156|   125k|            range, rd,
 4157|   125k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   125k|                return r.read_source(SCN_FWD(args)...);
 4159|   125k|            },
 4160|   125k|            value);
 4161|   125k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|   814k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.15M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   125k|        : m_fptr([](storage fn,
  743|   125k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   125k|              cvref<T> obj = *get<T>(fn);
  745|   125k|              if constexpr (std::is_void_v<R>) {
  746|   125k|                  obj(static_cast<decltype(args)>(args)...);
  747|   125k|              }
  748|   125k|              else {
  749|   125k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   125k|              }
  751|   125k|          }),
  752|   125k|          m_storage(std::addressof(f))
  753|   125k|    {
  754|   125k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   125k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   125k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   125k|              else {
  749|   125k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   125k|              }
  751|   125k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   125k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   125k|        else if constexpr (std::is_object_v<T>) {
  688|   125k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   125k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   125k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   125k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   125k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   125k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   125k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   125k|        {
  662|   125k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   132k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|   132k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   132k|            auto rd = make_reader<T, char_type>();
 5876|   132k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   132k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   132k|    {
 5863|   132k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   132k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.64k, False: 130k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.64k|    }                                                  \
  |  |  |  | 3671|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   130k|                        .transform_error(make_eof_scan_error));
 5865|   130k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   132k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   130k|    {
 4152|   130k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   130k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   130k|        float_reader<CharT> rd{};
 4155|   130k|        return read_impl<Range>(
 4156|   130k|            range, rd,
 4157|   130k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   130k|                return r.read_source(SCN_FWD(args)...);
 4159|   130k|            },
 4160|   130k|            value);
 4161|   130k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   130k|        : m_fptr([](storage fn,
  743|   130k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   130k|              cvref<T> obj = *get<T>(fn);
  745|   130k|              if constexpr (std::is_void_v<R>) {
  746|   130k|                  obj(static_cast<decltype(args)>(args)...);
  747|   130k|              }
  748|   130k|              else {
  749|   130k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   130k|              }
  751|   130k|          }),
  752|   130k|          m_storage(std::addressof(f))
  753|   130k|    {
  754|   130k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   130k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   130k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   130k|              else {
  749|   130k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   130k|              }
  751|   130k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   130k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   130k|        else if constexpr (std::is_object_v<T>) {
  688|   130k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   130k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   130k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   130k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   130k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   130k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   130k|        {
  662|   130k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   134k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|   134k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   134k|            auto rd = make_reader<T, char_type>();
 5876|   134k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   134k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   134k|    {
 5863|   134k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.78k, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.78k|    }                                                  \
  |  |  |  | 3671|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   133k|                        .transform_error(make_eof_scan_error));
 5865|   133k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   134k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   133k|    {
 4152|   133k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   133k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   133k|        float_reader<CharT> rd{};
 4155|   133k|        return read_impl<Range>(
 4156|   133k|            range, rd,
 4157|   133k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   133k|                return r.read_source(SCN_FWD(args)...);
 4159|   133k|            },
 4160|   133k|            value);
 4161|   133k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   133k|        : m_fptr([](storage fn,
  743|   133k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   133k|              cvref<T> obj = *get<T>(fn);
  745|   133k|              if constexpr (std::is_void_v<R>) {
  746|   133k|                  obj(static_cast<decltype(args)>(args)...);
  747|   133k|              }
  748|   133k|              else {
  749|   133k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   133k|              }
  751|   133k|          }),
  752|   133k|          m_storage(std::addressof(f))
  753|   133k|    {
  754|   133k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   133k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   133k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   133k|              else {
  749|   133k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   133k|              }
  751|   133k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   133k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   133k|        else if constexpr (std::is_object_v<T>) {
  688|   133k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   133k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   133k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   133k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   133k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   133k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   133k|        {
  662|   133k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   429k|{
 5795|   429k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   429k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.54k, False: 425k]
  |  |  ------------------
  ------------------
 5796|  4.54k|        return unexpected(e);
 5797|  4.54k|    }
 5798|       |
 5799|   425k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 425k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   425k|    return skip_classic_whitespace(range);
 5804|   425k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   138k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|   138k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   138k|            auto rd = make_reader<T, char_type>();
 5880|   138k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 138k, False: 0]
  ------------------
 5881|   138k|                return impl(rd, range, value);
 5882|   138k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   138k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   138k|    {
 5863|   138k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   138k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.50k, False: 136k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.50k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.50k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.50k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.50k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.50k|    }                                                  \
  |  |  |  | 3671|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   136k|                        .transform_error(make_eof_scan_error));
 5865|   136k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   138k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   136k|    {
 4152|   136k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   136k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   136k|        float_reader<CharT> rd{};
 4155|   136k|        return read_impl<Range>(
 4156|   136k|            range, rd,
 4157|   136k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   136k|                return r.read_source(SCN_FWD(args)...);
 4159|   136k|            },
 4160|   136k|            value);
 4161|   136k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   136k|        : m_fptr([](storage fn,
  743|   136k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   136k|              cvref<T> obj = *get<T>(fn);
  745|   136k|              if constexpr (std::is_void_v<R>) {
  746|   136k|                  obj(static_cast<decltype(args)>(args)...);
  747|   136k|              }
  748|   136k|              else {
  749|   136k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   136k|              }
  751|   136k|          }),
  752|   136k|          m_storage(std::addressof(f))
  753|   136k|    {
  754|   136k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   136k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   136k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   136k|              else {
  749|   136k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   136k|              }
  751|   136k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   136k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   136k|        else if constexpr (std::is_object_v<T>) {
  688|   136k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   136k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   136k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   136k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   136k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   136k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   136k|        {
  662|   136k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   144k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|   144k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   144k|            auto rd = make_reader<T, char_type>();
 5880|   144k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 144k, False: 0]
  ------------------
 5881|   144k|                return impl(rd, range, value);
 5882|   144k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   144k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   144k|    {
 5863|   144k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   144k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   144k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   144k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.73k, False: 143k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.73k|    }                                                  \
  |  |  |  | 3671|   144k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   143k|                        .transform_error(make_eof_scan_error));
 5865|   143k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   144k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   143k|    {
 4152|   143k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   143k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   143k|        float_reader<CharT> rd{};
 4155|   143k|        return read_impl<Range>(
 4156|   143k|            range, rd,
 4157|   143k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   143k|                return r.read_source(SCN_FWD(args)...);
 4159|   143k|            },
 4160|   143k|            value);
 4161|   143k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   143k|        : m_fptr([](storage fn,
  743|   143k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   143k|              cvref<T> obj = *get<T>(fn);
  745|   143k|              if constexpr (std::is_void_v<R>) {
  746|   143k|                  obj(static_cast<decltype(args)>(args)...);
  747|   143k|              }
  748|   143k|              else {
  749|   143k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   143k|              }
  751|   143k|          }),
  752|   143k|          m_storage(std::addressof(f))
  753|   143k|    {
  754|   143k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   143k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   143k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   143k|              else {
  749|   143k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   143k|              }
  751|   143k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   143k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   143k|        else if constexpr (std::is_object_v<T>) {
  688|   143k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   143k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   143k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   143k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   143k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   143k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   143k|        {
  662|   143k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   146k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|   146k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   146k|            auto rd = make_reader<T, char_type>();
 5880|   146k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 146k, False: 0]
  ------------------
 5881|   146k|                return impl(rd, range, value);
 5882|   146k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   146k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   146k|    {
 5863|   146k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   146k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.86k, False: 144k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.86k|    }                                                  \
  |  |  |  | 3671|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   144k|                        .transform_error(make_eof_scan_error));
 5865|   144k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   146k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   144k|    {
 4152|   144k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   144k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   144k|        float_reader<CharT> rd{};
 4155|   144k|        return read_impl<Range>(
 4156|   144k|            range, rd,
 4157|   144k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   144k|                return r.read_source(SCN_FWD(args)...);
 4159|   144k|            },
 4160|   144k|            value);
 4161|   144k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   144k|        : m_fptr([](storage fn,
  743|   144k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   144k|              cvref<T> obj = *get<T>(fn);
  745|   144k|              if constexpr (std::is_void_v<R>) {
  746|   144k|                  obj(static_cast<decltype(args)>(args)...);
  747|   144k|              }
  748|   144k|              else {
  749|   144k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   144k|              }
  751|   144k|          }),
  752|   144k|          m_storage(std::addressof(f))
  753|   144k|    {
  754|   144k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   144k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   144k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   144k|              else {
  749|   144k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   144k|              }
  751|   144k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   144k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   144k|        else if constexpr (std::is_object_v<T>) {
  688|   144k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   144k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   144k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   144k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   144k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   144k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   144k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   144k|        {
  662|   144k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2875|   950k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   950k|    static_cast<    \
  |  |  929|   950k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2876|   950k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   950k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|   950k|          m_current(m_range.begin())
 2878|   950k|    {
 2879|   950k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  2.77M|    {
 2883|  2.77M|        return m_current;
 2884|  2.77M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  1.81M|    {
 2888|  1.81M|        return m_range.end();
 2889|  1.81M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   869k|    {
 2903|   869k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   869k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   869k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   869k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2905|   869k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 869k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   869k|        }
 2909|   869k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   869k|    static_cast<    \
  |  |  929|   869k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   869k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   950k|    {
 2893|   950k|        return ranges::subrange{begin(), end()};
 2894|   950k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   950k|    {
 6037|   950k|        const bool need_skipped_width =
 6038|   950k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 950k]
  |  Branch (6038:33): [True: 0, False: 950k]
  ------------------
 6039|   950k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   950k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 950k]
  ------------------
 6043|   950k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 950k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   950k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 950k, False: 0]
  |  Branch (6047:56): [True: 950k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   950k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 950k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.88M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   950k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   950k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   950k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   950k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.4k, False: 938k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.4k|    }                                                  \
  |  |  |  | 3671|   950k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   938k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.88M|                            make_eof_scan_error));
 6058|       |
 6059|  1.88M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 938k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   938k|            return result_type{it, 0};
 6067|  1.88M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   950k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   858k|    {
 6079|   858k|        const bool need_skipped_width =
 6080|   858k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 858k]
  |  Branch (6080:33): [True: 0, False: 858k]
  ------------------
 6081|   858k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   858k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 858k]
  ------------------
 6084|   858k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 858k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   858k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 858k, False: 0]
  ------------------
 6093|   858k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 858k]
  ------------------
 6094|   858k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   858k|        return result_type{rng.begin(), 0};
 6118|   858k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6192|   309k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   309k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   309k|            auto rd = make_reader<T, char_type>();
 6198|   309k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 309k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   309k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   309k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   309k|    {
 6124|   309k|        const bool need_skipped_width =
 6125|   309k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 309k]
  |  Branch (6125:33): [True: 0, False: 309k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   309k|        auto it = rng.begin();
 6129|   309k|        std::ptrdiff_t prefix_width = 0;
 6130|   309k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 309k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   309k|        else {
 6138|   309k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   309k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   309k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   309k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.74k, False: 305k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.74k|    }                                                  \
  |  |  |  | 3671|   309k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   305k|            std::tie(it, prefix_width) = prefix_result;
 6140|   305k|        }
 6141|   305k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   305k|        std::ptrdiff_t value_width = 0;
 6145|   305k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 305k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   305k|        else {
 6161|   305k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   305k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   305k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 23.2k, False: 281k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  23.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  23.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  23.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  23.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  23.2k|    }                                                  \
  |  | 3671|   305k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   281k|                                             specs, value, loc));
 6163|       |
 6164|   281k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 281k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   281k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   281k|        std::ptrdiff_t postfix_width = 0;
 6173|   281k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 278k, False: 3.33k]
  ------------------
 6174|   278k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   278k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   278k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   278k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   278k|                                 value_width));
 6178|   278k|            std::tie(it, postfix_width) = postfix_result;
 6179|   278k|        }
 6180|       |
 6181|   281k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   281k|                                                 value_width, postfix_width);
 6183|   281k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 281k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   281k|        return it;
 6188|   281k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|   319k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   319k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   319k|            auto rd = make_reader<T, char_type>();
 6198|   319k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 319k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   319k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   319k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   319k|    {
 6124|   319k|        const bool need_skipped_width =
 6125|   319k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 319k]
  |  Branch (6125:33): [True: 0, False: 319k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   319k|        auto it = rng.begin();
 6129|   319k|        std::ptrdiff_t prefix_width = 0;
 6130|   319k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 319k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   319k|        else {
 6138|   319k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   319k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   319k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   319k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.19k, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.19k|    }                                                  \
  |  |  |  | 3671|   319k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   314k|            std::tie(it, prefix_width) = prefix_result;
 6140|   314k|        }
 6141|   314k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   314k|        std::ptrdiff_t value_width = 0;
 6145|   314k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 314k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   314k|        else {
 6161|   314k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   314k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   314k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22.8k, False: 292k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  22.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  22.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  22.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  22.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  22.8k|    }                                                  \
  |  | 3671|   314k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   292k|                                             specs, value, loc));
 6163|       |
 6164|   292k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 292k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   292k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   292k|        std::ptrdiff_t postfix_width = 0;
 6173|   292k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 288k, False: 3.73k]
  ------------------
 6174|   288k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   288k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   288k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   288k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   288k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 288k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   288k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   288k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   288k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   288k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   288k|                                 value_width));
 6178|   288k|            std::tie(it, postfix_width) = postfix_result;
 6179|   288k|        }
 6180|       |
 6181|   292k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   292k|                                                 value_width, postfix_width);
 6183|   292k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 292k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   292k|        return it;
 6188|   292k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6192|   322k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   322k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   322k|            auto rd = make_reader<T, char_type>();
 6198|   322k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 322k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   322k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   322k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   322k|    {
 6124|   322k|        const bool need_skipped_width =
 6125|   322k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 322k]
  |  Branch (6125:33): [True: 0, False: 322k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   322k|        auto it = rng.begin();
 6129|   322k|        std::ptrdiff_t prefix_width = 0;
 6130|   322k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 322k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   322k|        else {
 6138|   322k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   322k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   322k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   322k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.46k, False: 317k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.46k|    }                                                  \
  |  |  |  | 3671|   322k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   317k|            std::tie(it, prefix_width) = prefix_result;
 6140|   317k|        }
 6141|   317k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   317k|        std::ptrdiff_t value_width = 0;
 6145|   317k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 317k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   317k|        else {
 6161|   317k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   317k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   317k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22.5k, False: 295k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  22.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  22.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  22.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  22.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  22.5k|    }                                                  \
  |  | 3671|   317k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   317k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   295k|                                             specs, value, loc));
 6163|       |
 6164|   295k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 295k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   295k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   295k|        std::ptrdiff_t postfix_width = 0;
 6173|   295k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 291k, False: 3.96k]
  ------------------
 6174|   291k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   291k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   291k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   291k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 291k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   291k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   291k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   291k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   291k|                                 value_width));
 6178|   291k|            std::tie(it, postfix_width) = postfix_result;
 6179|   291k|        }
 6180|       |
 6181|   295k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   295k|                                                 value_width, postfix_width);
 6183|   295k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 295k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   295k|        return it;
 6188|   295k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   173k|{
 5795|   173k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 426, False: 172k]
  |  |  ------------------
  ------------------
 5796|    426|        return unexpected(e);
 5797|    426|    }
 5798|       |
 5799|   172k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 172k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   172k|    return skip_classic_whitespace(range);
 5804|   172k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  53.5k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  53.5k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  53.5k|            auto rd = make_reader<T, char_type>();
 5876|  53.5k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  53.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  53.5k|    {
 5863|  53.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  53.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  53.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  53.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 276, False: 53.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    276|    }                                                  \
  |  |  |  | 3671|  53.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  53.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  53.2k|                        .transform_error(make_eof_scan_error));
 5865|  53.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  53.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  53.2k|    {
 4152|  53.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  53.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  53.2k|        float_reader<CharT> rd{};
 4155|  53.2k|        return read_impl<Range>(
 4156|  53.2k|            range, rd,
 4157|  53.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  53.2k|                return r.read_source(SCN_FWD(args)...);
 4159|  53.2k|            },
 4160|  53.2k|            value);
 4161|  53.2k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   344k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  53.2k|        : m_fptr([](storage fn,
  743|  53.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.2k|              cvref<T> obj = *get<T>(fn);
  745|  53.2k|              if constexpr (std::is_void_v<R>) {
  746|  53.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  53.2k|              }
  748|  53.2k|              else {
  749|  53.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.2k|              }
  751|  53.2k|          }),
  752|  53.2k|          m_storage(std::addressof(f))
  753|  53.2k|    {
  754|  53.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  53.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  53.2k|              else {
  749|  53.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.2k|              }
  751|  53.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  53.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  53.2k|        else if constexpr (std::is_object_v<T>) {
  688|  53.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  53.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  53.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  53.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  53.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  53.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  53.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  53.2k|        {
  662|  53.2k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  58.8k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  58.8k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  58.8k|            auto rd = make_reader<T, char_type>();
 5876|  58.8k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  58.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  58.8k|    {
 5863|  58.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  58.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  58.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  58.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 315, False: 58.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    315|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    315|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    315|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    315|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    315|    }                                                  \
  |  |  |  | 3671|  58.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  58.5k|                        .transform_error(make_eof_scan_error));
 5865|  58.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  58.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  58.5k|    {
 4152|  58.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  58.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  58.5k|        float_reader<CharT> rd{};
 4155|  58.5k|        return read_impl<Range>(
 4156|  58.5k|            range, rd,
 4157|  58.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  58.5k|                return r.read_source(SCN_FWD(args)...);
 4159|  58.5k|            },
 4160|  58.5k|            value);
 4161|  58.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  58.5k|        : m_fptr([](storage fn,
  743|  58.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.5k|              cvref<T> obj = *get<T>(fn);
  745|  58.5k|              if constexpr (std::is_void_v<R>) {
  746|  58.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  58.5k|              }
  748|  58.5k|              else {
  749|  58.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.5k|              }
  751|  58.5k|          }),
  752|  58.5k|          m_storage(std::addressof(f))
  753|  58.5k|    {
  754|  58.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  58.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  58.5k|              else {
  749|  58.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.5k|              }
  751|  58.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  58.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  58.5k|        else if constexpr (std::is_object_v<T>) {
  688|  58.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  58.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  58.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  58.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  58.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  58.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  58.5k|        {
  662|  58.5k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  60.9k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  60.9k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  60.9k|            auto rd = make_reader<T, char_type>();
 5876|  60.9k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  60.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  60.9k|    {
 5863|  60.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  60.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  60.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  60.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 342, False: 60.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    342|    }                                                  \
  |  |  |  | 3671|  60.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  60.5k|                        .transform_error(make_eof_scan_error));
 5865|  60.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  60.9k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  60.5k|    {
 4152|  60.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  60.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  60.5k|        float_reader<CharT> rd{};
 4155|  60.5k|        return read_impl<Range>(
 4156|  60.5k|            range, rd,
 4157|  60.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  60.5k|                return r.read_source(SCN_FWD(args)...);
 4159|  60.5k|            },
 4160|  60.5k|            value);
 4161|  60.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  60.5k|        : m_fptr([](storage fn,
  743|  60.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.5k|              cvref<T> obj = *get<T>(fn);
  745|  60.5k|              if constexpr (std::is_void_v<R>) {
  746|  60.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  60.5k|              }
  748|  60.5k|              else {
  749|  60.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.5k|              }
  751|  60.5k|          }),
  752|  60.5k|          m_storage(std::addressof(f))
  753|  60.5k|    {
  754|  60.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  60.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  60.5k|              else {
  749|  60.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.5k|              }
  751|  60.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  60.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  60.5k|        else if constexpr (std::is_object_v<T>) {
  688|  60.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  60.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  60.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  60.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  60.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  60.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  60.5k|        {
  662|  60.5k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2875|   481k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   481k|    static_cast<    \
  |  |  929|   481k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2876|   481k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   481k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|   481k|          m_current(m_range.begin())
 2878|   481k|    {
 2879|   481k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  1.28M|    {
 2883|  1.28M|        return m_current;
 2884|  1.28M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   801k|    {
 2888|   801k|        return m_range.end();
 2889|   801k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   319k|    {
 2903|   319k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   319k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   319k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   319k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2905|   319k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 319k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   319k|        }
 2909|   319k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   319k|    static_cast<    \
  |  |  929|   319k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   319k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   481k|    {
 2893|   481k|        return ranges::subrange{begin(), end()};
 2894|   481k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   481k|    {
 6037|   481k|        const bool need_skipped_width =
 6038|   481k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 481k]
  |  Branch (6038:33): [True: 0, False: 481k]
  ------------------
 6039|   481k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   481k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 481k]
  ------------------
 6043|   481k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 481k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   481k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 481k, False: 0]
  |  Branch (6047:56): [True: 481k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   481k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 481k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   960k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   481k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   481k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   481k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   481k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.72k, False: 478k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.72k|    }                                                  \
  |  |  |  | 3671|   481k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   478k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   960k|                            make_eof_scan_error));
 6058|       |
 6059|   960k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 478k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   478k|            return result_type{it, 0};
 6067|   960k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   481k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   318k|    {
 6079|   318k|        const bool need_skipped_width =
 6080|   318k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 318k]
  |  Branch (6080:33): [True: 0, False: 318k]
  ------------------
 6081|   318k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   318k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 318k]
  ------------------
 6084|   318k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 318k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   318k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 318k, False: 0]
  ------------------
 6093|   318k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 318k]
  ------------------
 6094|   318k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   318k|        return result_type{rng.begin(), 0};
 6118|   318k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6192|   154k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   154k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   154k|            auto rd = make_reader<T, char_type>();
 6198|   154k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   154k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   154k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   154k|    {
 6124|   154k|        const bool need_skipped_width =
 6125|   154k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 154k]
  |  Branch (6125:33): [True: 0, False: 154k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   154k|        auto it = rng.begin();
 6129|   154k|        std::ptrdiff_t prefix_width = 0;
 6130|   154k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 154k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   154k|        else {
 6138|   154k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 848, False: 154k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    848|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    848|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    848|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    848|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    848|    }                                                  \
  |  |  |  | 3671|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   154k|            std::tie(it, prefix_width) = prefix_result;
 6140|   154k|        }
 6141|   154k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   154k|        std::ptrdiff_t value_width = 0;
 6145|   154k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 154k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   154k|        else {
 6161|   154k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.1k, False: 100k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  53.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  53.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  53.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  53.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  53.1k|    }                                                  \
  |  | 3671|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   100k|                                             specs, value, loc));
 6163|       |
 6164|   100k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 100k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   100k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   100k|        std::ptrdiff_t postfix_width = 0;
 6173|   100k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 100k, False: 358]
  ------------------
 6174|   100k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   100k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   100k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   100k|                                 value_width));
 6178|   100k|            std::tie(it, postfix_width) = postfix_result;
 6179|   100k|        }
 6180|       |
 6181|   100k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   100k|                                                 value_width, postfix_width);
 6183|   100k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 100k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   100k|        return it;
 6188|   100k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|   162k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   162k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   162k|            auto rd = make_reader<T, char_type>();
 6198|   162k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 162k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   162k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   162k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   162k|    {
 6124|   162k|        const bool need_skipped_width =
 6125|   162k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 162k]
  |  Branch (6125:33): [True: 0, False: 162k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   162k|        auto it = rng.begin();
 6129|   162k|        std::ptrdiff_t prefix_width = 0;
 6130|   162k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 162k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   162k|        else {
 6138|   162k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   162k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   162k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   162k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 916, False: 161k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    916|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    916|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    916|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    916|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    916|    }                                                  \
  |  |  |  | 3671|   162k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   161k|            std::tie(it, prefix_width) = prefix_result;
 6140|   161k|        }
 6141|   161k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   161k|        std::ptrdiff_t value_width = 0;
 6145|   161k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 161k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   161k|        else {
 6161|   161k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   161k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   161k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   161k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.1k, False: 107k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  53.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  53.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  53.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  53.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  53.1k|    }                                                  \
  |  | 3671|   161k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   161k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   107k|                                             specs, value, loc));
 6163|       |
 6164|   107k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 107k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   107k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   107k|        std::ptrdiff_t postfix_width = 0;
 6173|   107k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 107k, False: 390]
  ------------------
 6174|   107k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   107k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   107k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   107k|                                 value_width));
 6178|   107k|            std::tie(it, postfix_width) = postfix_result;
 6179|   107k|        }
 6180|       |
 6181|   107k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   107k|                                                 value_width, postfix_width);
 6183|   107k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 107k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   107k|        return it;
 6188|   107k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6192|   164k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   164k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   164k|            auto rd = make_reader<T, char_type>();
 6198|   164k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 164k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   164k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   164k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   164k|    {
 6124|   164k|        const bool need_skipped_width =
 6125|   164k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 164k]
  |  Branch (6125:33): [True: 0, False: 164k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   164k|        auto it = rng.begin();
 6129|   164k|        std::ptrdiff_t prefix_width = 0;
 6130|   164k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 164k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   164k|        else {
 6138|   164k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   164k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   164k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   164k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 956, False: 163k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    956|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    956|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    956|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    956|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    956|    }                                                  \
  |  |  |  | 3671|   164k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   163k|            std::tie(it, prefix_width) = prefix_result;
 6140|   163k|        }
 6141|   163k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   163k|        std::ptrdiff_t value_width = 0;
 6145|   163k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 163k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   163k|        else {
 6161|   163k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   163k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   163k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.0k, False: 110k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  53.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  53.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  53.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  53.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  53.0k|    }                                                  \
  |  | 3671|   163k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   163k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   110k|                                             specs, value, loc));
 6163|       |
 6164|   110k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 110k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   110k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   110k|        std::ptrdiff_t postfix_width = 0;
 6173|   110k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 110k, False: 408]
  ------------------
 6174|   110k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   110k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   110k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   110k|                                 value_width));
 6178|   110k|            std::tie(it, postfix_width) = postfix_result;
 6179|   110k|        }
 6180|       |
 6181|   110k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   110k|                                                 value_width, postfix_width);
 6183|   110k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 110k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   110k|        return it;
 6188|   110k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   173k|{
 5795|   173k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 426, False: 172k]
  |  |  ------------------
  ------------------
 5796|    426|        return unexpected(e);
 5797|    426|    }
 5798|       |
 5799|   172k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 172k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   172k|    return skip_classic_whitespace(range);
 5804|   172k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  53.5k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  53.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  53.5k|            auto rd = make_reader<T, char_type>();
 5880|  53.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 53.5k, False: 0]
  ------------------
 5881|  53.5k|                return impl(rd, range, value);
 5882|  53.5k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  53.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  53.5k|    {
 5863|  53.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  53.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  53.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  53.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  53.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 276, False: 53.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    276|    }                                                  \
  |  |  |  | 3671|  53.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  53.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  53.2k|                        .transform_error(make_eof_scan_error));
 5865|  53.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  53.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  53.2k|    {
 4152|  53.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  53.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  53.2k|        float_reader<CharT> rd{};
 4155|  53.2k|        return read_impl<Range>(
 4156|  53.2k|            range, rd,
 4157|  53.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  53.2k|                return r.read_source(SCN_FWD(args)...);
 4159|  53.2k|            },
 4160|  53.2k|            value);
 4161|  53.2k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  53.2k|        : m_fptr([](storage fn,
  743|  53.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.2k|              cvref<T> obj = *get<T>(fn);
  745|  53.2k|              if constexpr (std::is_void_v<R>) {
  746|  53.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  53.2k|              }
  748|  53.2k|              else {
  749|  53.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.2k|              }
  751|  53.2k|          }),
  752|  53.2k|          m_storage(std::addressof(f))
  753|  53.2k|    {
  754|  53.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  53.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  53.2k|              else {
  749|  53.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.2k|              }
  751|  53.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  53.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  53.2k|        else if constexpr (std::is_object_v<T>) {
  688|  53.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  53.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  53.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  53.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  53.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  53.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  53.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  53.2k|        {
  662|  53.2k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  58.8k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  58.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  58.8k|            auto rd = make_reader<T, char_type>();
 5880|  58.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 58.8k, False: 0]
  ------------------
 5881|  58.8k|                return impl(rd, range, value);
 5882|  58.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  58.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  58.8k|    {
 5863|  58.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  58.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  58.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  58.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  58.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 315, False: 58.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    315|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    315|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    315|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    315|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    315|    }                                                  \
  |  |  |  | 3671|  58.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  58.4k|                        .transform_error(make_eof_scan_error));
 5865|  58.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  58.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  58.4k|    {
 4152|  58.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  58.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  58.4k|        float_reader<CharT> rd{};
 4155|  58.4k|        return read_impl<Range>(
 4156|  58.4k|            range, rd,
 4157|  58.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  58.4k|                return r.read_source(SCN_FWD(args)...);
 4159|  58.4k|            },
 4160|  58.4k|            value);
 4161|  58.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  58.4k|        : m_fptr([](storage fn,
  743|  58.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.4k|              cvref<T> obj = *get<T>(fn);
  745|  58.4k|              if constexpr (std::is_void_v<R>) {
  746|  58.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  58.4k|              }
  748|  58.4k|              else {
  749|  58.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.4k|              }
  751|  58.4k|          }),
  752|  58.4k|          m_storage(std::addressof(f))
  753|  58.4k|    {
  754|  58.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  58.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  58.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  58.4k|              else {
  749|  58.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  58.4k|              }
  751|  58.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  58.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  58.4k|        else if constexpr (std::is_object_v<T>) {
  688|  58.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  58.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  58.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  58.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  58.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  58.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  58.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  58.4k|        {
  662|  58.4k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  60.8k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  60.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  60.8k|            auto rd = make_reader<T, char_type>();
 5880|  60.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 60.8k, False: 0]
  ------------------
 5881|  60.8k|                return impl(rd, range, value);
 5882|  60.8k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  60.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  60.8k|    {
 5863|  60.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  60.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  60.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  60.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 342, False: 60.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    342|    }                                                  \
  |  |  |  | 3671|  60.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  60.5k|                        .transform_error(make_eof_scan_error));
 5865|  60.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  60.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  60.5k|    {
 4152|  60.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  60.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  60.5k|        float_reader<CharT> rd{};
 4155|  60.5k|        return read_impl<Range>(
 4156|  60.5k|            range, rd,
 4157|  60.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  60.5k|                return r.read_source(SCN_FWD(args)...);
 4159|  60.5k|            },
 4160|  60.5k|            value);
 4161|  60.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  60.5k|        : m_fptr([](storage fn,
  743|  60.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.5k|              cvref<T> obj = *get<T>(fn);
  745|  60.5k|              if constexpr (std::is_void_v<R>) {
  746|  60.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  60.5k|              }
  748|  60.5k|              else {
  749|  60.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.5k|              }
  751|  60.5k|          }),
  752|  60.5k|          m_storage(std::addressof(f))
  753|  60.5k|    {
  754|  60.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  60.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  60.5k|              else {
  749|  60.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.5k|              }
  751|  60.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  60.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  60.5k|        else if constexpr (std::is_object_v<T>) {
  688|  60.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  60.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  60.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  60.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  60.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  60.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  60.5k|        {
  662|  60.5k|        }

LLVMFuzzerTestOneInput:
   54|  2.70k|{
   55|  2.70k|    scn::fuzz::run(data, size);
   56|  2.70k|    return 0;
   57|  2.70k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.70k|{
   33|  2.70k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.70k]
  |  Branch (33:35): [True: 0, False: 2.70k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.70k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.70k|    const auto& f =
   40|  2.70k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.70k|    do_basic_run(sv, f);
   42|       |
   43|  2.70k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.70k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.70k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.70k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.70k, False: 0]
  ------------------
   47|  2.70k|        do_basic_run(wsv_transcode, wf);
   48|  2.70k|    }
   49|  2.70k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.70k|{
   25|  2.70k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.70k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.70k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.70k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.70k|{
   25|  2.70k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.70k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.70k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.70k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  5.40k|{
   25|  5.40k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  5.40k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  5.40k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  5.40k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  5.40k|{
   25|  5.40k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  5.40k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  5.40k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  5.40k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.70k|{
   52|  2.70k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.70k|    string_buffer.resize(size);
   56|  2.70k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.70k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.70k|    const auto wsv_reinterpret_size =
   61|  2.70k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 66, False: 2.63k]
  ------------------
   62|  2.70k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.70k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.70k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.70k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.70k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.70k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.70k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.70k|{
  122|  2.70k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.70k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.70k|    buf.resize(sizeof...(Args));
  125|  2.70k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.70k|    return buf;
  127|  2.70k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.70k|{
  108|  2.70k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  2.70k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  2.70k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.70k|{
  185|  2.70k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.70k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.70k|                                   format_strings);
  188|  2.70k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.70k|{
  133|       |    // Regular scan
  134|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.2k, False: 2.70k]
  ------------------
  135|  16.2k|        auto it = scn::ranges::begin(source);
  136|   196k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   196k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   196k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   196k|            auto result = scn::scan<T>(
  139|   196k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   196k|                scn::runtime_format(f));
  141|   196k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 16.2k, False: 180k]
  ------------------
  142|  16.2k|                break;
  143|  16.2k|            }
  144|   180k|            it = result->begin();
  145|   180k|        }
  146|  16.2k|    }
  147|       |
  148|       |    // scan localized
  149|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 16.2k, False: 2.70k]
  ------------------
  150|  16.2k|        auto it = scn::ranges::begin(source);
  151|   196k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   196k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   196k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   196k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   196k|            auto result = scn::scan<T>(
  154|   196k|                global_locale,
  155|   196k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   196k|                scn::runtime_format(f));
  157|   196k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 16.2k, False: 180k]
  ------------------
  158|  16.2k|                break;
  159|  16.2k|            }
  160|   180k|            it = result->begin();
  161|   180k|        }
  162|  16.2k|    }
  163|       |
  164|       |    // scan_value
  165|  2.70k|    {
  166|  2.70k|        auto it = scn::ranges::begin(source);
  167|  42.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  42.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  42.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  42.4k|            auto result = scn::scan_value<T>(
  170|  42.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  42.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.70k, False: 39.7k]
  ------------------
  172|  2.70k|                break;
  173|  2.70k|            }
  174|  39.7k|            it = result->begin();
  175|  39.7k|        }
  176|  2.70k|    }
  177|  2.70k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.70k|{
  133|       |    // Regular scan
  134|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.2k, False: 2.70k]
  ------------------
  135|  16.2k|        auto it = scn::ranges::begin(source);
  136|   203k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   203k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   203k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   203k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   203k|            auto result = scn::scan<T>(
  139|   203k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   203k|                scn::runtime_format(f));
  141|   203k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 16.2k, False: 187k]
  ------------------
  142|  16.2k|                break;
  143|  16.2k|            }
  144|   187k|            it = result->begin();
  145|   187k|        }
  146|  16.2k|    }
  147|       |
  148|       |    // scan localized
  149|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 16.2k, False: 2.70k]
  ------------------
  150|  16.2k|        auto it = scn::ranges::begin(source);
  151|   203k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   203k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   203k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   203k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   203k|            auto result = scn::scan<T>(
  154|   203k|                global_locale,
  155|   203k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   203k|                scn::runtime_format(f));
  157|   203k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 16.2k, False: 187k]
  ------------------
  158|  16.2k|                break;
  159|  16.2k|            }
  160|   187k|            it = result->begin();
  161|   187k|        }
  162|  16.2k|    }
  163|       |
  164|       |    // scan_value
  165|  2.70k|    {
  166|  2.70k|        auto it = scn::ranges::begin(source);
  167|  44.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  44.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  44.2k|            auto result = scn::scan_value<T>(
  170|  44.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  44.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.70k, False: 41.5k]
  ------------------
  172|  2.70k|                break;
  173|  2.70k|            }
  174|  41.5k|            it = result->begin();
  175|  41.5k|        }
  176|  2.70k|    }
  177|  2.70k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.70k|{
  133|       |    // Regular scan
  134|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.2k, False: 2.70k]
  ------------------
  135|  16.2k|        auto it = scn::ranges::begin(source);
  136|   206k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   206k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   206k|            auto result = scn::scan<T>(
  139|   206k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   206k|                scn::runtime_format(f));
  141|   206k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 16.2k, False: 189k]
  ------------------
  142|  16.2k|                break;
  143|  16.2k|            }
  144|   189k|            it = result->begin();
  145|   189k|        }
  146|  16.2k|    }
  147|       |
  148|       |    // scan localized
  149|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 16.2k, False: 2.70k]
  ------------------
  150|  16.2k|        auto it = scn::ranges::begin(source);
  151|   206k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   206k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   206k|            auto result = scn::scan<T>(
  154|   206k|                global_locale,
  155|   206k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   206k|                scn::runtime_format(f));
  157|   206k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 16.2k, False: 189k]
  ------------------
  158|  16.2k|                break;
  159|  16.2k|            }
  160|   189k|            it = result->begin();
  161|   189k|        }
  162|  16.2k|    }
  163|       |
  164|       |    // scan_value
  165|  2.70k|    {
  166|  2.70k|        auto it = scn::ranges::begin(source);
  167|  44.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  44.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  44.9k|            auto result = scn::scan_value<T>(
  170|  44.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  44.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.70k, False: 42.2k]
  ------------------
  172|  2.70k|                break;
  173|  2.70k|            }
  174|  42.2k|            it = result->begin();
  175|  42.2k|        }
  176|  2.70k|    }
  177|  2.70k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.70k|{
  133|       |    // Regular scan
  134|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.2k, False: 2.70k]
  ------------------
  135|  16.2k|        auto it = scn::ranges::begin(source);
  136|   226k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   226k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   226k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   226k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   226k|            auto result = scn::scan<T>(
  139|   226k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   226k|                scn::runtime_format(f));
  141|   226k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 16.2k, False: 209k]
  ------------------
  142|  16.2k|                break;
  143|  16.2k|            }
  144|   209k|            it = result->begin();
  145|   209k|        }
  146|  16.2k|    }
  147|       |
  148|       |    // scan localized
  149|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 16.2k, False: 2.70k]
  ------------------
  150|  16.2k|        auto it = scn::ranges::begin(source);
  151|   226k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   226k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   226k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   226k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   226k|            auto result = scn::scan<T>(
  154|   226k|                global_locale,
  155|   226k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   226k|                scn::runtime_format(f));
  157|   226k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 16.2k, False: 209k]
  ------------------
  158|  16.2k|                break;
  159|  16.2k|            }
  160|   209k|            it = result->begin();
  161|   209k|        }
  162|  16.2k|    }
  163|       |
  164|       |    // scan_value
  165|  2.70k|    {
  166|  2.70k|        auto it = scn::ranges::begin(source);
  167|  46.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  46.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  46.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  46.0k|            auto result = scn::scan_value<T>(
  170|  46.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  46.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.70k, False: 43.3k]
  ------------------
  172|  2.70k|                break;
  173|  2.70k|            }
  174|  43.3k|            it = result->begin();
  175|  43.3k|        }
  176|  2.70k|    }
  177|  2.70k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.70k|{
  133|       |    // Regular scan
  134|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.2k, False: 2.70k]
  ------------------
  135|  16.2k|        auto it = scn::ranges::begin(source);
  136|   235k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   235k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   235k|            auto result = scn::scan<T>(
  139|   235k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   235k|                scn::runtime_format(f));
  141|   235k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 16.2k, False: 219k]
  ------------------
  142|  16.2k|                break;
  143|  16.2k|            }
  144|   219k|            it = result->begin();
  145|   219k|        }
  146|  16.2k|    }
  147|       |
  148|       |    // scan localized
  149|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 16.2k, False: 2.70k]
  ------------------
  150|  16.2k|        auto it = scn::ranges::begin(source);
  151|   235k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   235k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   235k|            auto result = scn::scan<T>(
  154|   235k|                global_locale,
  155|   235k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   235k|                scn::runtime_format(f));
  157|   235k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 16.2k, False: 219k]
  ------------------
  158|  16.2k|                break;
  159|  16.2k|            }
  160|   219k|            it = result->begin();
  161|   219k|        }
  162|  16.2k|    }
  163|       |
  164|       |    // scan_value
  165|  2.70k|    {
  166|  2.70k|        auto it = scn::ranges::begin(source);
  167|  48.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  48.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  48.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  48.3k|            auto result = scn::scan_value<T>(
  170|  48.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  48.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.70k, False: 45.6k]
  ------------------
  172|  2.70k|                break;
  173|  2.70k|            }
  174|  45.6k|            it = result->begin();
  175|  45.6k|        }
  176|  2.70k|    }
  177|  2.70k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.70k|{
  133|       |    // Regular scan
  134|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.2k, False: 2.70k]
  ------------------
  135|  16.2k|        auto it = scn::ranges::begin(source);
  136|   238k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   238k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   238k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   238k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   238k|            auto result = scn::scan<T>(
  139|   238k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   238k|                scn::runtime_format(f));
  141|   238k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 16.2k, False: 221k]
  ------------------
  142|  16.2k|                break;
  143|  16.2k|            }
  144|   221k|            it = result->begin();
  145|   221k|        }
  146|  16.2k|    }
  147|       |
  148|       |    // scan localized
  149|  16.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 16.2k, False: 2.70k]
  ------------------
  150|  16.2k|        auto it = scn::ranges::begin(source);
  151|   238k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   238k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   238k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   238k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   238k|            auto result = scn::scan<T>(
  154|   238k|                global_locale,
  155|   238k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   238k|                scn::runtime_format(f));
  157|   238k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 16.2k, False: 221k]
  ------------------
  158|  16.2k|                break;
  159|  16.2k|            }
  160|   221k|            it = result->begin();
  161|   221k|        }
  162|  16.2k|    }
  163|       |
  164|       |    // scan_value
  165|  2.70k|    {
  166|  2.70k|        auto it = scn::ranges::begin(source);
  167|  48.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  48.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  48.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  48.8k|            auto result = scn::scan_value<T>(
  170|  48.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  48.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.70k, False: 46.1k]
  ------------------
  172|  2.70k|                break;
  173|  2.70k|            }
  174|  46.1k|            it = result->begin();
  175|  46.1k|        }
  176|  2.70k|    }
  177|  2.70k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.70k|{
   90|  2.70k|    using char_type = ranges::range_value_t<Source>;
   91|  2.70k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.70k|    deque.clear();
   93|  2.70k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.70k|              std::back_inserter(deque));
   95|  2.70k|    return deque;
   96|  2.70k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.70k|{
   79|  2.70k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  2.70k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  2.70k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.70k|{
  122|  2.70k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.70k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.70k|    buf.resize(sizeof...(Args));
  125|  2.70k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.70k|    return buf;
  127|  2.70k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.70k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  2.70k|    else {
  112|  2.70k|        return wformat_string_view_buffer;
  113|  2.70k|    }
  114|  2.70k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  5.40k|{
  185|  5.40k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  5.40k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  5.40k|                                   format_strings);
  188|  5.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  5.40k|{
  133|       |    // Regular scan
  134|  32.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.4k, False: 5.40k]
  ------------------
  135|  32.4k|        auto it = scn::ranges::begin(source);
  136|  95.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  95.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  95.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  95.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  95.2k|            auto result = scn::scan<T>(
  139|  95.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  95.2k|                scn::runtime_format(f));
  141|  95.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 32.4k, False: 62.8k]
  ------------------
  142|  32.4k|                break;
  143|  32.4k|            }
  144|  62.8k|            it = result->begin();
  145|  62.8k|        }
  146|  32.4k|    }
  147|       |
  148|       |    // scan localized
  149|  32.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 32.4k, False: 5.40k]
  ------------------
  150|  32.4k|        auto it = scn::ranges::begin(source);
  151|  95.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  95.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  95.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  95.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  95.2k|            auto result = scn::scan<T>(
  154|  95.2k|                global_locale,
  155|  95.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  95.2k|                scn::runtime_format(f));
  157|  95.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 32.4k, False: 62.8k]
  ------------------
  158|  32.4k|                break;
  159|  32.4k|            }
  160|  62.8k|            it = result->begin();
  161|  62.8k|        }
  162|  32.4k|    }
  163|       |
  164|       |    // scan_value
  165|  5.40k|    {
  166|  5.40k|        auto it = scn::ranges::begin(source);
  167|  17.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  17.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  17.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  17.8k|            auto result = scn::scan_value<T>(
  170|  17.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  17.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 5.40k, False: 12.4k]
  ------------------
  172|  5.40k|                break;
  173|  5.40k|            }
  174|  12.4k|            it = result->begin();
  175|  12.4k|        }
  176|  5.40k|    }
  177|  5.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  5.40k|{
  133|       |    // Regular scan
  134|  32.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.4k, False: 5.40k]
  ------------------
  135|  32.4k|        auto it = scn::ranges::begin(source);
  136|   100k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   100k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   100k|            auto result = scn::scan<T>(
  139|   100k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   100k|                scn::runtime_format(f));
  141|   100k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 32.4k, False: 68.2k]
  ------------------
  142|  32.4k|                break;
  143|  32.4k|            }
  144|  68.2k|            it = result->begin();
  145|  68.2k|        }
  146|  32.4k|    }
  147|       |
  148|       |    // scan localized
  149|  32.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 32.4k, False: 5.40k]
  ------------------
  150|  32.4k|        auto it = scn::ranges::begin(source);
  151|   100k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   100k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   100k|            auto result = scn::scan<T>(
  154|   100k|                global_locale,
  155|   100k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   100k|                scn::runtime_format(f));
  157|   100k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 32.4k, False: 68.2k]
  ------------------
  158|  32.4k|                break;
  159|  32.4k|            }
  160|  68.2k|            it = result->begin();
  161|  68.2k|        }
  162|  32.4k|    }
  163|       |
  164|       |    // scan_value
  165|  5.40k|    {
  166|  5.40k|        auto it = scn::ranges::begin(source);
  167|  19.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  19.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  19.6k|            auto result = scn::scan_value<T>(
  170|  19.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  19.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 5.40k, False: 14.2k]
  ------------------
  172|  5.40k|                break;
  173|  5.40k|            }
  174|  14.2k|            it = result->begin();
  175|  14.2k|        }
  176|  5.40k|    }
  177|  5.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  5.40k|{
  133|       |    // Regular scan
  134|  32.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.4k, False: 5.40k]
  ------------------
  135|  32.4k|        auto it = scn::ranges::begin(source);
  136|   102k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   102k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   102k|            auto result = scn::scan<T>(
  139|   102k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   102k|                scn::runtime_format(f));
  141|   102k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 32.4k, False: 70.3k]
  ------------------
  142|  32.4k|                break;
  143|  32.4k|            }
  144|  70.3k|            it = result->begin();
  145|  70.3k|        }
  146|  32.4k|    }
  147|       |
  148|       |    // scan localized
  149|  32.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 32.4k, False: 5.40k]
  ------------------
  150|  32.4k|        auto it = scn::ranges::begin(source);
  151|   102k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   102k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   102k|            auto result = scn::scan<T>(
  154|   102k|                global_locale,
  155|   102k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   102k|                scn::runtime_format(f));
  157|   102k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 32.4k, False: 70.3k]
  ------------------
  158|  32.4k|                break;
  159|  32.4k|            }
  160|  70.3k|            it = result->begin();
  161|  70.3k|        }
  162|  32.4k|    }
  163|       |
  164|       |    // scan_value
  165|  5.40k|    {
  166|  5.40k|        auto it = scn::ranges::begin(source);
  167|  20.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  20.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  20.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  20.3k|            auto result = scn::scan_value<T>(
  170|  20.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  20.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 5.40k, False: 14.9k]
  ------------------
  172|  5.40k|                break;
  173|  5.40k|            }
  174|  14.9k|            it = result->begin();
  175|  14.9k|        }
  176|  5.40k|    }
  177|  5.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  5.40k|{
  133|       |    // Regular scan
  134|  32.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.4k, False: 5.40k]
  ------------------
  135|  32.4k|        auto it = scn::ranges::begin(source);
  136|  95.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  95.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  95.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  95.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  95.2k|            auto result = scn::scan<T>(
  139|  95.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  95.2k|                scn::runtime_format(f));
  141|  95.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 32.4k, False: 62.8k]
  ------------------
  142|  32.4k|                break;
  143|  32.4k|            }
  144|  62.8k|            it = result->begin();
  145|  62.8k|        }
  146|  32.4k|    }
  147|       |
  148|       |    // scan localized
  149|  32.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 32.4k, False: 5.40k]
  ------------------
  150|  32.4k|        auto it = scn::ranges::begin(source);
  151|  95.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  95.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  95.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  95.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  95.2k|            auto result = scn::scan<T>(
  154|  95.2k|                global_locale,
  155|  95.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  95.2k|                scn::runtime_format(f));
  157|  95.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 32.4k, False: 62.8k]
  ------------------
  158|  32.4k|                break;
  159|  32.4k|            }
  160|  62.8k|            it = result->begin();
  161|  62.8k|        }
  162|  32.4k|    }
  163|       |
  164|       |    // scan_value
  165|  5.40k|    {
  166|  5.40k|        auto it = scn::ranges::begin(source);
  167|  17.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  17.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  17.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  17.8k|            auto result = scn::scan_value<T>(
  170|  17.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  17.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 5.40k, False: 12.4k]
  ------------------
  172|  5.40k|                break;
  173|  5.40k|            }
  174|  12.4k|            it = result->begin();
  175|  12.4k|        }
  176|  5.40k|    }
  177|  5.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  5.40k|{
  133|       |    // Regular scan
  134|  32.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.4k, False: 5.40k]
  ------------------
  135|  32.4k|        auto it = scn::ranges::begin(source);
  136|   100k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   100k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   100k|            auto result = scn::scan<T>(
  139|   100k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   100k|                scn::runtime_format(f));
  141|   100k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 32.4k, False: 68.1k]
  ------------------
  142|  32.4k|                break;
  143|  32.4k|            }
  144|  68.1k|            it = result->begin();
  145|  68.1k|        }
  146|  32.4k|    }
  147|       |
  148|       |    // scan localized
  149|  32.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 32.4k, False: 5.40k]
  ------------------
  150|  32.4k|        auto it = scn::ranges::begin(source);
  151|   100k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   100k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   100k|            auto result = scn::scan<T>(
  154|   100k|                global_locale,
  155|   100k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   100k|                scn::runtime_format(f));
  157|   100k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 32.4k, False: 68.1k]
  ------------------
  158|  32.4k|                break;
  159|  32.4k|            }
  160|  68.1k|            it = result->begin();
  161|  68.1k|        }
  162|  32.4k|    }
  163|       |
  164|       |    // scan_value
  165|  5.40k|    {
  166|  5.40k|        auto it = scn::ranges::begin(source);
  167|  19.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  19.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  19.6k|            auto result = scn::scan_value<T>(
  170|  19.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  19.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 5.40k, False: 14.2k]
  ------------------
  172|  5.40k|                break;
  173|  5.40k|            }
  174|  14.2k|            it = result->begin();
  175|  14.2k|        }
  176|  5.40k|    }
  177|  5.40k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  5.40k|{
  133|       |    // Regular scan
  134|  32.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.4k, False: 5.40k]
  ------------------
  135|  32.4k|        auto it = scn::ranges::begin(source);
  136|   102k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   102k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   102k|            auto result = scn::scan<T>(
  139|   102k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   102k|                scn::runtime_format(f));
  141|   102k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 32.4k, False: 70.2k]
  ------------------
  142|  32.4k|                break;
  143|  32.4k|            }
  144|  70.2k|            it = result->begin();
  145|  70.2k|        }
  146|  32.4k|    }
  147|       |
  148|       |    // scan localized
  149|  32.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 32.4k, False: 5.40k]
  ------------------
  150|  32.4k|        auto it = scn::ranges::begin(source);
  151|   102k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   102k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   102k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   102k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   102k|            auto result = scn::scan<T>(
  154|   102k|                global_locale,
  155|   102k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   102k|                scn::runtime_format(f));
  157|   102k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 32.4k, False: 70.2k]
  ------------------
  158|  32.4k|                break;
  159|  32.4k|            }
  160|  70.2k|            it = result->begin();
  161|  70.2k|        }
  162|  32.4k|    }
  163|       |
  164|       |    // scan_value
  165|  5.40k|    {
  166|  5.40k|        auto it = scn::ranges::begin(source);
  167|  20.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  20.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  20.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  20.2k|            auto result = scn::scan_value<T>(
  170|  20.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  20.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 5.40k, False: 14.8k]
  ------------------
  172|  5.40k|                break;
  173|  5.40k|            }
  174|  14.8k|            it = result->begin();
  175|  14.8k|        }
  176|  5.40k|    }
  177|  5.40k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  5.40k|{
   90|  5.40k|    using char_type = ranges::range_value_t<Source>;
   91|  5.40k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  5.40k|    deque.clear();
   93|  5.40k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  5.40k|              std::back_inserter(deque));
   95|  5.40k|    return deque;
   96|  5.40k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  5.40k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  5.40k|    else {
   83|  5.40k|        return wnoncontiguous_buffer;
   84|  5.40k|    }
   85|  5.40k|}

