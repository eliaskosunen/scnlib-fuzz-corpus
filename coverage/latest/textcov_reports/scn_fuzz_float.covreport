_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  98.6k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  98.6k|  chars_format const fmt = options.format;
  277|  98.6k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  98.6k|  parsed_number_string_t<UC> answer;
  280|  98.6k|  answer.valid = false;
  281|  98.6k|  answer.too_many_digits = false;
  282|  98.6k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  98.6k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 98.6k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  98.6k|  UC const * const start_digits = p;
  303|       |
  304|  98.6k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   597k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 561k, False: 35.9k]
  |  Branch (306:25): [True: 499k, False: 62.6k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   499k|    i = 10 * i +
  310|   499k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   499k|    ++p;
  312|   499k|  }
  313|  98.6k|  UC const * const end_of_integer_part = p;
  314|  98.6k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  98.6k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  98.6k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  98.6k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 98.6k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  98.6k|  int64_t exponent = 0;
  324|  98.6k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 62.6k, False: 35.9k]
  |  Branch (324:49): [True: 28.2k, False: 34.4k]
  ------------------
  325|  98.6k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 28.2k, False: 70.4k]
  ------------------
  326|  28.2k|    ++p;
  327|  28.2k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|  28.2k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|   127k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 108k, False: 19.1k]
  |  Branch (332:27): [True: 99.1k, False: 9.11k]
  ------------------
  333|  99.1k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  99.1k|      ++p;
  335|  99.1k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  99.1k|    }
  337|  28.2k|    exponent = before - p;
  338|  28.2k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|  28.2k|    digit_count -= exponent;
  340|  28.2k|  }
  341|  98.6k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  98.6k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 98.6k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  98.6k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 98.6k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  98.6k|  int64_t exp_number = 0;            // explicit exponential part
  351|  98.6k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 89.2k, False: 9.42k]
  ------------------
  352|  98.6k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 43.5k, False: 45.6k]
  ------------------
  353|  98.6k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 4.52k, False: 39.0k]
  |  Branch (353:29): [True: 5.64k, False: 33.4k]
  ------------------
  354|  98.6k|       ||
  355|  98.6k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  88.4k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 88.4k]
  ------------------
  356|  88.4k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  88.4k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  10.1k|    UC const * location_of_e = p;
  359|  10.1k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 4.52k, False: 5.64k]
  |  Branch (359:28): [True: 5.64k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  10.1k|      ++p;
  361|  10.1k|    }
  362|  10.1k|    bool neg_exp = false;
  363|  10.1k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 10.1k, False: 0]
  |  Branch (363:24): [True: 2.42k, False: 7.73k]
  ------------------
  364|  2.42k|      neg_exp = true;
  365|  2.42k|      ++p;
  366|  7.73k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 7.73k, False: 0]
  |  Branch (366:31): [True: 6.42k, False: 1.31k]
  ------------------
  367|  6.42k|      ++p;
  368|  6.42k|    }
  369|  10.1k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 0, False: 10.1k]
  |  Branch (369:24): [True: 5, False: 10.1k]
  ------------------
  370|      5|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 5]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|      5|      p = location_of_e;
  376|  10.1k|    } else {
  377|  27.1k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 20.5k, False: 6.54k]
  |  Branch (377:29): [True: 16.9k, False: 3.62k]
  ------------------
  378|  16.9k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  16.9k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 15.7k, False: 1.18k]
  ------------------
  380|  15.7k|          exp_number = 10 * exp_number + digit;
  381|  15.7k|        }
  382|  16.9k|        ++p;
  383|  16.9k|      }
  384|  10.1k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 2.42k, False: 7.73k]
  ------------------
  385|  10.1k|      exponent += exp_number;
  386|  10.1k|    }
  387|  88.4k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  88.4k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 79.0k, False: 9.42k]
  |  Branch (389:44): [True: 0, False: 79.0k]
  ------------------
  390|  88.4k|  }
  391|  98.6k|  answer.lastmatch = p;
  392|  98.6k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  98.6k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 31.0k, False: 67.5k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|  31.0k|    UC const * start = start_digits;
  405|   393k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 390k, False: 3.58k]
  |  Branch (405:32): [True: 352k, False: 37.1k]
  |  Branch (405:53): [True: 9.71k, False: 27.4k]
  ------------------
  406|   362k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 352k, False: 9.71k]
  ------------------
  407|   362k|      start++;
  408|   362k|    }
  409|       |
  410|  31.0k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 20.8k, False: 10.2k]
  ------------------
  411|  20.8k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|  20.8k|      i = 0;
  416|  20.8k|      p = answer.integer.ptr;
  417|  20.8k|      UC const* int_end = p + answer.integer.len();
  418|  20.8k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|   160k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 157k, False: 3.31k]
  |  Branch (419:54): [True: 139k, False: 17.5k]
  ------------------
  420|   139k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|   139k|        ++p;
  422|   139k|      }
  423|  20.8k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 3.31k, False: 17.5k]
  ------------------
  424|  3.31k|        exponent = end_of_integer_part - p + exp_number;
  425|  3.31k|      }
  426|  17.5k|      else { // We have a value with a fractional component.
  427|  17.5k|        p = answer.fraction.ptr;
  428|  17.5k|        UC const* frac_end = p + answer.fraction.len();
  429|   375k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 358k, False: 17.5k]
  |  Branch (429:56): [True: 358k, False: 0]
  ------------------
  430|   358k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|   358k|          ++p;
  432|   358k|        }
  433|  17.5k|        exponent = answer.fraction.ptr - p + exp_number;
  434|  17.5k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|  20.8k|    }
  437|  31.0k|  }
  438|  98.6k|  answer.exponent = exponent;
  439|  98.6k|  answer.mantissa = i;
  440|  98.6k|  return answer;
  441|  98.6k|}
_ZN10fast_float10is_integerIcEEbT_:
   35|   700k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   700k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 12.4k, False: 688k]
  |  Branch (36:27): [True: 62.9k, False: 625k]
  ------------------
   37|   700k|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|  28.2k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   116k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 97.2k, False: 19.4k]
  |  Branch (249:43): [True: 88.4k, False: 8.82k]
  ------------------
  250|  88.4k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|  88.4k|    p += 8;
  252|  88.4k|  }
  253|  28.2k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|  97.2k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|  97.2k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|  97.2k|     0x8080808080808080));
  172|  97.2k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|   209k|uint64_t read8_to_u64(const UC *chars) {
   54|   209k|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|   209k|  uint64_t val;
   63|   209k|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|   209k|  return val;
   69|   209k|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|   112k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|   112k|  const uint64_t mask = 0x000000FF000000FF;
  148|   112k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|   112k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|   112k|  val -= 0x3030303030303030;
  151|   112k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|   112k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|   112k|  return uint32_t(val);
  154|   112k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|  24.0k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|  24.0k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|  24.0k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|  24.0k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|  24.0k|}

_ZN10fast_float6bigintC2Ev:
  412|  8.25k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|  16.5k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|  25.7k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|  25.7k|    return small_mul(vec, y);
  565|  25.7k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|  37.8k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|  37.8k|  limb carry = 0;
  284|  85.7k|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 47.9k, False: 37.8k]
  ------------------
  285|  47.9k|    vec[index] = scalar_mul(vec[index], y, carry);
  286|  47.9k|  }
  287|  37.8k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 21.5k, False: 16.3k]
  ------------------
  288|  21.5k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  21.5k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 21.5k]
  |  |  ------------------
  ------------------
  289|  21.5k|  }
  290|  37.8k|  return true;
  291|  37.8k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|   218k|  constexpr size_t len() const noexcept {
   77|   218k|    return length;
   78|   218k|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|  47.9k|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|  47.9k|#ifdef FASTFLOAT_64BIT_LIMB
  231|  47.9k|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|  47.9k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|  47.9k|  carry = limb(z >> limb_bits);
  235|  47.9k|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|  47.9k|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|   162k|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|   162k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   162k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|   162k|    return data[index];
   60|   162k|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|  30.6k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|  30.6k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 30.6k, False: 0]
  ------------------
   93|  30.6k|      push_unchecked(value);
   94|  30.6k|      return true;
   95|  30.6k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|  30.6k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|  31.3k|  constexpr size_t capacity() const noexcept {
   83|  31.3k|    return size;
   84|  31.3k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|  38.8k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|  38.8k|    data[length] = value;
   88|  38.8k|    length++;
   89|  38.8k|  }
_ZN10fast_float6bigint3addEm:
  567|  25.7k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|  25.7k|    return small_add(vec, y);
  569|  25.7k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|  25.7k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|  25.7k|  return small_add_from(vec, y, 0);
  277|  25.7k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|  25.7k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|  25.7k|  size_t index = start;
  259|  25.7k|  limb carry = y;
  260|  25.7k|  bool overflow;
  261|  40.9k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 23.5k, False: 17.4k]
  |  Branch (261:24): [True: 15.2k, False: 8.25k]
  ------------------
  262|  15.2k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|  15.2k|    carry = limb(overflow);
  264|  15.2k|    index += 1;
  265|  15.2k|  }
  266|  25.7k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 8.25k, False: 17.4k]
  ------------------
  267|  8.25k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  8.25k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.25k]
  |  |  ------------------
  ------------------
  268|  8.25k|  }
  269|  25.7k|  return true;
  270|  25.7k|}
_ZN10fast_float10scalar_addEmmRb:
  209|  15.2k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|  15.2k|  limb z;
  211|       |// gcc and clang
  212|  15.2k|#if defined(__has_builtin)
  213|  15.2k|  #if __has_builtin(__builtin_add_overflow)
  214|  15.2k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|  15.2k|      overflow = __builtin_add_overflow(x, y, &z);
  216|  15.2k|      return z;
  217|  15.2k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|  15.2k|}
_ZN10fast_float6bigint4pow5Ej:
  577|  8.25k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  8.25k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  8.25k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  8.25k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 0, False: 8.25k]
  ------------------
  582|      0|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  583|      0|      exp -= large_step;
  584|      0|    }
  585|  8.25k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  8.25k|    uint32_t small_step = 27;
  587|  8.25k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|  13.1k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 4.89k, False: 8.25k]
  ------------------
  593|  4.89k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  4.89k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 4.89k]
  |  |  ------------------
  ------------------
  594|  4.89k|      exp -= small_step;
  595|  4.89k|    }
  596|  8.25k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 7.23k, False: 1.01k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  7.23k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  7.23k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 7.23k]
  |  |  ------------------
  ------------------
  601|  7.23k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  7.23k|      );
  603|  7.23k|    }
  604|       |
  605|  8.25k|    return true;
  606|  8.25k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|    750|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|    750|    length = uint16_t(len);
   75|    750|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  8.25k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  8.25k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 8.25k, False: 0]
  |  Branch (152:25): [True: 0, False: 8.25k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  8.25k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|  8.25k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|  8.25k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  8.25k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|  8.25k|    size_t rindex = length - index - 1;
   69|  8.25k|    return data[rindex];
   70|  8.25k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  8.25k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  8.25k|    return shl(exp);
  574|  8.25k|  }
_ZN10fast_float6bigint3shlEm:
  530|  8.25k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  8.25k|    size_t rem = n % limb_bits;
  532|  8.25k|    size_t div = n / limb_bits;
  533|  8.25k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 8.25k, False: 0]
  ------------------
  534|  8.25k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  8.25k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 8.25k]
  |  |  ------------------
  ------------------
  535|  8.25k|    }
  536|  8.25k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 750, False: 7.50k]
  ------------------
  537|    750|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|    750|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 750]
  |  |  ------------------
  ------------------
  538|    750|    }
  539|  8.25k|    return true;
  540|  8.25k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  8.25k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  8.25k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  8.25k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  8.25k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  8.25k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  8.25k|    size_t shl = n;
  493|  8.25k|    size_t shr = limb_bits - shl;
  494|  8.25k|    limb prev = 0;
  495|  26.4k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 18.2k, False: 8.25k]
  ------------------
  496|  18.2k|      limb xi = vec[index];
  497|  18.2k|      vec[index] = (xi << shl) | (prev >> shr);
  498|  18.2k|      prev = xi;
  499|  18.2k|    }
  500|       |
  501|  8.25k|    limb carry = prev >> shr;
  502|  8.25k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 844, False: 7.41k]
  ------------------
  503|    844|      return vec.try_push(carry);
  504|    844|    }
  505|  7.41k|    return true;
  506|  8.25k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|    750|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|    750|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|    750|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|    750|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 750]
  ------------------
  512|      0|      return false;
  513|    750|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 750, False: 0]
  ------------------
  514|       |      // move limbs
  515|    750|      limb* dst = vec.data + n;
  516|    750|      const limb* src = vec.data;
  517|    750|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|    750|      limb* first = vec.data;
  520|    750|      limb* last = first + n;
  521|    750|      ::std::fill(first, last, 0);
  522|    750|      vec.set_len(n + vec.len());
  523|    750|      return true;
  524|    750|    } else {
  525|      0|      return true;
  526|      0|    }
  527|    750|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|    750|  constexpr bool is_empty() const noexcept {
   80|    750|    return length == 0;
   81|    750|  }
_ZN10fast_float6bigintC2Em:
  418|  8.25k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  8.25k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  8.25k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  8.25k|    vec.normalize();
  426|  8.25k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  8.25k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  8.25k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 8.25k]
  ------------------
  464|      0|      return 1;
  465|  8.25k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 8.25k]
  ------------------
  466|      0|      return -1;
  467|  8.25k|    } else {
  468|  15.8k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 15.8k, False: 0]
  ------------------
  469|  15.8k|        limb xi = vec[index - 1];
  470|  15.8k|        limb yi = other.vec[index - 1];
  471|  15.8k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 3.32k, False: 12.5k]
  ------------------
  472|  3.32k|          return 1;
  473|  12.5k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 4.93k, False: 7.58k]
  ------------------
  474|  4.93k|          return -1;
  475|  4.93k|        }
  476|  15.8k|      }
  477|      0|      return 0;
  478|  8.25k|    }
  479|  8.25k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|  31.6k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|  31.6k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  31.6k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|  31.6k|    return data[index];
   64|  31.6k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|  22.3k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|  22.3k|  adjusted_mantissa answer;
   96|  22.3k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 1.57k, False: 20.7k]
  |  Branch (96:19): [True: 36, False: 20.7k]
  ------------------
   97|  1.61k|    answer.power2 = 0;
   98|  1.61k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  1.61k|    return answer;
  101|  1.61k|  }
  102|  20.7k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 76, False: 20.6k]
  ------------------
  103|       |    // we want to get infinity:
  104|     76|    answer.power2 = binary::infinite_power();
  105|     76|    answer.mantissa = 0;
  106|     76|    return answer;
  107|     76|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|  20.6k|  int lz = leading_zeroes(w);
  112|  20.6k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|  20.6k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|  20.6k|  int upperbit = int(product.high >> 63);
  130|       |
  131|  20.6k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|  20.6k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|  20.6k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 0, False: 20.6k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|      0|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 0, False: 0]
  ------------------
  137|      0|      answer.power2 = 0;
  138|      0|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|      0|      return answer;
  141|      0|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|      0|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|      0|    answer.mantissa += (answer.mantissa & 1); // round up
  147|      0|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|      0|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 0, False: 0]
  ------------------
  156|      0|    return answer;
  157|      0|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|  20.6k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 3.12k, False: 17.5k]
  |  Branch (162:30): [True: 2.84k, False: 288]
  |  Branch (162:77): [True: 2.84k, False: 0]
  ------------------
  163|  20.6k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 132, False: 2.70k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|    132|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 0, False: 132]
  ------------------
  168|      0|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|      0|    }
  170|    132|  }
  171|       |
  172|  20.6k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|  20.6k|  answer.mantissa >>= 1;
  174|  20.6k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 0, False: 20.6k]
  ------------------
  175|      0|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|      0|    answer.power2++; // undo previous addition
  177|      0|  }
  178|       |
  179|  20.6k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|  20.6k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 136, False: 20.5k]
  ------------------
  181|    136|    answer.power2 = binary::infinite_power();
  182|    136|    answer.mantissa = 0;
  183|    136|  }
  184|  20.6k|  return answer;
  185|  20.6k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|  20.9k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|  20.9k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|  20.9k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|  20.9k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|  20.9k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|  20.9k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|  20.9k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 1.14k, False: 19.8k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  1.14k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  1.14k|    firstproduct.low += secondproduct.high;
   35|  1.14k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 1.14k, False: 0]
  ------------------
   36|  1.14k|      firstproduct.high++;
   37|  1.14k|    }
   38|  1.14k|  }
   39|  20.9k|  return firstproduct;
   40|  20.9k|}
_ZN10fast_float6detail5powerEi:
   58|  58.1k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|  58.1k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|  58.1k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|    308|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|    308|  int lz = leading_zeroes(w);
   82|    308|  w <<= lz;
   83|    308|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|    308|  return compute_error_scaled<binary>(q, product.high, lz);
   85|    308|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|    308|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|    308|  int hilz = int(w >> 63) ^ 1;
   69|    308|  adjusted_mantissa answer;
   70|    308|  answer.mantissa = w << hilz;
   71|    308|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|    308|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|    308|  return answer;
   74|    308|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|  29.6k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|  29.6k|  adjusted_mantissa answer;
   96|  29.6k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 376, False: 29.2k]
  |  Branch (96:19): [True: 0, False: 29.2k]
  ------------------
   97|    376|    answer.power2 = 0;
   98|    376|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|    376|    return answer;
  101|    376|  }
  102|  29.2k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 34, False: 29.2k]
  ------------------
  103|       |    // we want to get infinity:
  104|     34|    answer.power2 = binary::infinite_power();
  105|     34|    answer.mantissa = 0;
  106|     34|    return answer;
  107|     34|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|  29.2k|  int lz = leading_zeroes(w);
  112|  29.2k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|  29.2k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|  29.2k|  int upperbit = int(product.high >> 63);
  130|       |
  131|  29.2k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|  29.2k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|  29.2k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 2.09k, False: 27.1k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  2.09k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 0, False: 2.09k]
  ------------------
  137|      0|      answer.power2 = 0;
  138|      0|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|      0|      return answer;
  141|      0|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  2.09k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  2.09k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  2.09k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  2.09k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 2.09k, False: 0]
  ------------------
  156|  2.09k|    return answer;
  157|  2.09k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|  27.1k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 2.68k, False: 24.4k]
  |  Branch (162:30): [True: 1.54k, False: 1.14k]
  |  Branch (162:77): [True: 1.54k, False: 0]
  ------------------
  163|  27.1k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 84, False: 1.46k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|     84|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 0, False: 84]
  ------------------
  168|      0|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|      0|    }
  170|     84|  }
  171|       |
  172|  27.1k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|  27.1k|  answer.mantissa >>= 1;
  174|  27.1k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 0, False: 27.1k]
  ------------------
  175|      0|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|      0|    answer.power2++; // undo previous addition
  177|      0|  }
  178|       |
  179|  27.1k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|  27.1k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 0, False: 27.1k]
  ------------------
  181|      0|    answer.power2 = binary::infinite_power();
  182|      0|    answer.mantissa = 0;
  183|      0|  }
  184|  27.1k|  return answer;
  185|  29.2k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|  37.1k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|  37.1k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|  37.1k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|  37.1k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|  37.1k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|  37.1k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|  37.1k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 14.7k, False: 22.4k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  14.7k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  14.7k|    firstproduct.low += secondproduct.high;
   35|  14.7k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 1.20k, False: 13.5k]
  ------------------
   36|  1.20k|      firstproduct.high++;
   37|  1.20k|    }
   38|  14.7k|  }
   39|  37.1k|  return firstproduct;
   40|  37.1k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  7.94k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  7.94k|  int lz = leading_zeroes(w);
   82|  7.94k|  w <<= lz;
   83|  7.94k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  7.94k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  7.94k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  7.94k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  7.94k|  int hilz = int(w >> 63) ^ 1;
   69|  7.94k|  adjusted_mantissa answer;
   70|  7.94k|  answer.mantissa = w << hilz;
   71|  7.94k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  7.94k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  7.94k|  return answer;
   74|  7.94k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|    308|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|    308|  am.power2 -= invalid_am_bias;
  409|       |
  410|    308|  int32_t sci_exp = scientific_exponent(num);
  411|    308|  size_t max_digits = binary_format<T>::max_digits();
  412|    308|  size_t digits = 0;
  413|    308|  bigint bigmant;
  414|    308|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|    308|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|    308|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 0, False: 308]
  ------------------
  418|      0|    return positive_digit_comp<T>(bigmant, exponent);
  419|    308|  } else {
  420|    308|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|    308|  }
  422|    308|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  8.25k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  8.25k|  uint64_t mantissa = num.mantissa;
   30|  8.25k|  int32_t exponent = int32_t(num.exponent);
   31|  41.2k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 33.0k, False: 8.25k]
  ------------------
   32|  33.0k|    mantissa /= 10000;
   33|  33.0k|    exponent += 4;
   34|  33.0k|  }
   35|  16.5k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 8.25k, False: 8.25k]
  ------------------
   36|  8.25k|    mantissa /= 100;
   37|  8.25k|    exponent += 2;
   38|  8.25k|  }
   39|  8.25k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 8.25k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  8.25k|  return exponent;
   44|  8.25k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  8.25k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  8.25k|  size_t counter = 0;
  245|  8.25k|  digits = 0;
  246|  8.25k|  limb value = 0;
  247|  8.25k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  8.25k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  8.25k|  UC const * p = num.integer.ptr;
  255|  8.25k|  UC const * pend = p + num.integer.len();
  256|  8.25k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|  15.2k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 7.03k, False: 8.25k]
  ------------------
  259|  7.34k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 308, False: 7.03k]
  |  Branch (259:45): [True: 308, False: 0]
  |  Branch (259:70): [True: 308, False: 0]
  ------------------
  260|    308|      parse_eight_digits(p, value, counter, digits);
  261|    308|    }
  262|  14.4k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 14.4k, False: 0]
  |  Branch (262:30): [True: 7.36k, False: 7.03k]
  |  Branch (262:43): [True: 7.36k, False: 0]
  ------------------
  263|  7.36k|      parse_one_digit(p, value, counter, digits);
  264|  7.36k|    }
  265|  7.03k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 0, False: 7.03k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|      0|      bool truncated = is_truncated(p, pend);
  269|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 0, False: 0]
  ------------------
  270|      0|        truncated |= is_truncated(num.fraction);
  271|      0|      }
  272|      0|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 0, False: 0]
  ------------------
  273|      0|        round_up_bigint(result, digits);
  274|      0|      }
  275|      0|      return;
  276|  7.03k|    } else {
  277|  7.03k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  7.03k|      counter = 0;
  279|  7.03k|      value = 0;
  280|  7.03k|    }
  281|  7.03k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  8.25k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 8.25k, False: 0]
  ------------------
  285|  8.25k|    p = num.fraction.ptr;
  286|  8.25k|    pend = p + num.fraction.len();
  287|  8.25k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 1.21k, False: 7.03k]
  ------------------
  288|  1.21k|      skip_zeros(p, pend);
  289|  1.21k|    }
  290|       |    // process all digits, in increments of step per loop
  291|  26.5k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 18.5k, False: 7.94k]
  ------------------
  292|  42.2k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 31.2k, False: 11.0k]
  |  Branch (292:47): [True: 23.8k, False: 7.34k]
  |  Branch (292:72): [True: 23.7k, False: 138]
  ------------------
  293|  23.7k|        parse_eight_digits(p, value, counter, digits);
  294|  23.7k|      }
  295|  76.1k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 65.8k, False: 10.3k]
  |  Branch (295:32): [True: 57.7k, False: 8.01k]
  |  Branch (295:45): [True: 57.6k, False: 170]
  ------------------
  296|  57.6k|        parse_one_digit(p, value, counter, digits);
  297|  57.6k|      }
  298|  18.5k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 308, False: 18.2k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|    308|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|    308|        bool truncated = is_truncated(p, pend);
  302|    308|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 138, False: 170]
  ------------------
  303|    138|          round_up_bigint(result, digits);
  304|    138|        }
  305|    308|        return;
  306|  18.2k|      } else {
  307|  18.2k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|  18.2k|        counter = 0;
  309|  18.2k|        value = 0;
  310|  18.2k|      }
  311|  18.5k|    }
  312|  8.25k|  }
  313|       |
  314|  7.94k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 7.94k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  7.94k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  9.47k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  9.47k|  uint64_t val;
  161|  13.0k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 5.10k, False: 7.94k]
  ------------------
  162|  5.10k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  5.10k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 1.52k, False: 3.57k]
  ------------------
  164|  1.52k|      break;
  165|  1.52k|    }
  166|  3.57k|    first += int_cmp_len<UC>();
  167|  3.57k|  }
  168|  15.8k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 14.6k, False: 1.21k]
  ------------------
  169|  14.6k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 8.25k, False: 6.39k]
  ------------------
  170|  8.25k|      break;
  171|  8.25k|    }
  172|  6.39k|    first++;
  173|  6.39k|  }
  174|  9.47k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|  24.0k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|  24.0k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|  24.0k|  p += 8;
  210|  24.0k|  counter += 8;
  211|  24.0k|  count += 8;
  212|  24.0k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|  64.9k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|  64.9k|  value = value * 10 + limb(*p - UC('0'));
  218|  64.9k|  p++;
  219|  64.9k|  counter++;
  220|  64.9k|  count++;
  221|  64.9k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|  25.7k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|  25.7k|  big.mul(power);
  226|  25.7k|  big.add(value);
  227|  25.7k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|    308|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|    308|  uint64_t val;
  183|    432|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 262, False: 170]
  ------------------
  184|    262|    ::memcpy(&val, first, sizeof(uint64_t));
  185|    262|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 138, False: 124]
  ------------------
  186|    138|      return true;
  187|    138|    }
  188|    124|    first += int_cmp_len<UC>();
  189|    124|  }
  190|    252|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 82, False: 170]
  ------------------
  191|     82|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 0, False: 82]
  ------------------
  192|      0|      return true;
  193|      0|    }
  194|     82|    ++first;
  195|     82|  }
  196|    170|  return false;
  197|    170|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|    138|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|    138|  add_native(big, 10, 1);
  234|    138|  count++;
  235|    138|}
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|    308|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|    308|  bigint& real_digits = bigmant;
  347|    308|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|    308|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|    308|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|    308|  T b;
  354|    308|  to_float(false, am_b, b);
  355|    308|  adjusted_mantissa theor = to_extended_halfway(b);
  356|    308|  bigint theor_digits(theor.mantissa);
  357|    308|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|    308|  int32_t pow2_exp = theor_exp - real_exp;
  361|    308|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|    308|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 308, False: 0]
  ------------------
  363|    308|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|    308|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|    308|  }
  365|    308|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 308, False: 0]
  ------------------
  366|    308|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|    308|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|    308|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|    308|  int ord = real_digits.compare(theor_digits);
  373|    308|  adjusted_mantissa answer = am;
  374|    308|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|    308|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|    308|      (void)_;  // not needed, since we've done our comparison
  377|    308|      (void)__; // not needed, since we've done our comparison
  378|    308|      if (ord > 0) {
  379|    308|        return true;
  380|    308|      } else if (ord < 0) {
  381|    308|        return false;
  382|    308|      } else {
  383|    308|        return is_odd;
  384|    308|      }
  385|    308|    });
  386|    308|  });
  387|       |
  388|    308|  return answer;
  389|    308|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|    308|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    308|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    308|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 308]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    308|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    308|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 308]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    308|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    308|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 308]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    308|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|    308|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  8.25k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  8.25k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 8.25k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  8.25k|  } else {
  153|  8.25k|    am.mantissa >>= shift;
  154|  8.25k|  }
  155|  8.25k|  am.power2 += shift;
  156|  8.25k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|    308|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|    308|  adjusted_mantissa am = to_extended(value);
   84|    308|  am.mantissa <<= 1;
   85|    308|  am.mantissa += 1;
   86|    308|  am.power2 -= 1;
   87|    308|  return am;
   88|    308|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|    308|adjusted_mantissa to_extended(T value) noexcept {
   50|    308|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|    308|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|    308|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|    308|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|    308|  adjusted_mantissa am;
   56|    308|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|    308|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|    308|  ::memcpy(&bits, &value, sizeof(T));
   62|    308|#endif
   63|    308|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 308]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|    308|  } else {
   68|       |    // normal
   69|    308|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|    308|    am.power2 -= bias;
   71|    308|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|    308|  }
   73|       |
   74|    308|  return am;
   75|    308|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|    308|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    308|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    308|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 308]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    308|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    308|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 308]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    308|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    308|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 308]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    308|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|    308|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|    308|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|    308|      (void)_;  // not needed, since we've done our comparison
  377|    308|      (void)__; // not needed, since we've done our comparison
  378|    308|      if (ord > 0) {
  379|    308|        return true;
  380|    308|      } else if (ord < 0) {
  381|    308|        return false;
  382|    308|      } else {
  383|    308|        return is_odd;
  384|    308|      }
  385|    308|    });
  386|    308|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|    308|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    308|  const uint64_t mask
  125|    308|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 308]
  ------------------
  126|    308|    ? UINT64_MAX
  127|    308|    : (uint64_t(1) << shift) - 1;
  128|    308|  const uint64_t halfway
  129|    308|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 308]
  ------------------
  130|    308|    ? 0
  131|    308|    : uint64_t(1) << (shift - 1);
  132|    308|  uint64_t truncated_bits = am.mantissa & mask;
  133|    308|  bool is_above = truncated_bits > halfway;
  134|    308|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    308|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 308]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    308|  } else {
  140|    308|    am.mantissa >>= shift;
  141|    308|  }
  142|    308|  am.power2 += shift;
  143|       |
  144|    308|  bool is_odd = (am.mantissa & 1) == 1;
  145|    308|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    308|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|    308|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|    308|      (void)_;  // not needed, since we've done our comparison
  377|    308|      (void)__; // not needed, since we've done our comparison
  378|    308|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 0, False: 308]
  ------------------
  379|      0|        return true;
  380|    308|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 308, False: 0]
  ------------------
  381|    308|        return false;
  382|    308|      } else {
  383|      0|        return is_odd;
  384|      0|      }
  385|    308|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  7.94k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  7.94k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  7.94k|  int32_t sci_exp = scientific_exponent(num);
  411|  7.94k|  size_t max_digits = binary_format<T>::max_digits();
  412|  7.94k|  size_t digits = 0;
  413|  7.94k|  bigint bigmant;
  414|  7.94k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  7.94k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  7.94k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 0, False: 7.94k]
  ------------------
  418|      0|    return positive_digit_comp<T>(bigmant, exponent);
  419|  7.94k|  } else {
  420|  7.94k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  7.94k|  }
  422|  7.94k|}
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  7.94k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  7.94k|  bigint& real_digits = bigmant;
  347|  7.94k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  7.94k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  7.94k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  7.94k|  T b;
  354|  7.94k|  to_float(false, am_b, b);
  355|  7.94k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  7.94k|  bigint theor_digits(theor.mantissa);
  357|  7.94k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  7.94k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  7.94k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  7.94k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 7.94k, False: 0]
  ------------------
  363|  7.94k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  7.94k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  7.94k|  }
  365|  7.94k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 86, False: 7.86k]
  ------------------
  366|     86|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|     86|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  7.86k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 7.86k, False: 0]
  ------------------
  368|  7.86k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  7.86k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  7.86k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  7.94k|  int ord = real_digits.compare(theor_digits);
  373|  7.94k|  adjusted_mantissa answer = am;
  374|  7.94k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  7.94k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  7.94k|      (void)_;  // not needed, since we've done our comparison
  377|  7.94k|      (void)__; // not needed, since we've done our comparison
  378|  7.94k|      if (ord > 0) {
  379|  7.94k|        return true;
  380|  7.94k|      } else if (ord < 0) {
  381|  7.94k|        return false;
  382|  7.94k|      } else {
  383|  7.94k|        return is_odd;
  384|  7.94k|      }
  385|  7.94k|    });
  386|  7.94k|  });
  387|       |
  388|  7.94k|  return answer;
  389|  7.94k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  7.94k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  7.94k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  7.94k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 7.94k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  7.94k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  7.94k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 7.94k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  7.94k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  7.94k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 7.94k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  7.94k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  7.94k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  7.94k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  7.94k|  adjusted_mantissa am = to_extended(value);
   84|  7.94k|  am.mantissa <<= 1;
   85|  7.94k|  am.mantissa += 1;
   86|  7.94k|  am.power2 -= 1;
   87|  7.94k|  return am;
   88|  7.94k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  7.94k|adjusted_mantissa to_extended(T value) noexcept {
   50|  7.94k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  7.94k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  7.94k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  7.94k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  7.94k|  adjusted_mantissa am;
   56|  7.94k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  7.94k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  7.94k|  ::memcpy(&bits, &value, sizeof(T));
   62|  7.94k|#endif
   63|  7.94k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 7.94k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  7.94k|  } else {
   68|       |    // normal
   69|  7.94k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  7.94k|    am.power2 -= bias;
   71|  7.94k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  7.94k|  }
   73|       |
   74|  7.94k|  return am;
   75|  7.94k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  7.94k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  7.94k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  7.94k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 7.94k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  7.94k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  7.94k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 7.94k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  7.94k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  7.94k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 7.94k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  7.94k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  7.94k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  7.94k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  7.94k|      (void)_;  // not needed, since we've done our comparison
  377|  7.94k|      (void)__; // not needed, since we've done our comparison
  378|  7.94k|      if (ord > 0) {
  379|  7.94k|        return true;
  380|  7.94k|      } else if (ord < 0) {
  381|  7.94k|        return false;
  382|  7.94k|      } else {
  383|  7.94k|        return is_odd;
  384|  7.94k|      }
  385|  7.94k|    });
  386|  7.94k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  7.94k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  7.94k|  const uint64_t mask
  125|  7.94k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 7.94k]
  ------------------
  126|  7.94k|    ? UINT64_MAX
  127|  7.94k|    : (uint64_t(1) << shift) - 1;
  128|  7.94k|  const uint64_t halfway
  129|  7.94k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 7.94k]
  ------------------
  130|  7.94k|    ? 0
  131|  7.94k|    : uint64_t(1) << (shift - 1);
  132|  7.94k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  7.94k|  bool is_above = truncated_bits > halfway;
  134|  7.94k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  7.94k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 7.94k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  7.94k|  } else {
  140|  7.94k|    am.mantissa >>= shift;
  141|  7.94k|  }
  142|  7.94k|  am.power2 += shift;
  143|       |
  144|  7.94k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  7.94k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  7.94k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  7.94k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  7.94k|      (void)_;  // not needed, since we've done our comparison
  377|  7.94k|      (void)__; // not needed, since we've done our comparison
  378|  7.94k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 3.32k, False: 4.62k]
  ------------------
  379|  3.32k|        return true;
  380|  4.62k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 4.62k, False: 0]
  ------------------
  381|  4.62k|        return false;
  382|  4.62k|      } else {
  383|      0|        return is_odd;
  384|      0|      }
  385|  7.94k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|   197k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|   126k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|  54.8k|  constexpr size_t len() const noexcept {
  238|  54.8k|    return length;
  239|  54.8k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|  40.7k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|  40.7k|  return -10;
  469|  40.7k|#endif
  470|  40.7k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|  30.2k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|  30.2k|  return 10;
  517|  30.2k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|  28.1k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|  28.1k|  return uint64_t(2) << mantissa_explicit_bits();
  531|  28.1k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|   107k|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|   107k|  return 23;
  477|   107k|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|  26.5k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|  26.5k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|  26.5k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|  68.5k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|  20.7k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|  20.7k|  return -65;
  568|  20.7k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|  20.7k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|  20.7k|  return 38;
  559|  20.7k|}
_ZN10fast_float14leading_zeroesEm:
  268|  58.1k|int leading_zeroes(uint64_t input_num) {
  269|  58.1k|  assert(input_num > 0);
  270|  58.1k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|  58.1k|  return __builtin_clzll(input_num);
  285|  58.1k|#endif
  286|  58.1k|}
_ZN10fast_float19full_multiplicationEmm:
  320|  74.0k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|  74.0k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|  74.0k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|  74.0k|  answer.low = uint64_t(r);
  337|  74.0k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|  74.0k|  return answer;
  342|  74.0k|}
_ZN10fast_float8value128C2Ev:
  251|  74.0k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|  21.2k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|  21.2k|  return -127;
  500|  21.2k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|  3.12k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|  3.12k|  return -17;
  493|  3.12k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|  2.84k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|  2.84k|  return 10;
  485|  2.84k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|  20.8k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|  20.8k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 8.25k, False: 12.5k]
  |  Branch (352:38): [True: 0, False: 12.5k]
  ------------------
  353|  20.8k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|    308|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|    308|  return 114;
  575|    308|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|  17.1k|{
  650|  17.1k|    return sizeof(uint64_t) / sizeof(UC);
  651|  17.1k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  5.36k|{
  644|  5.36k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  5.36k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  5.36k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|  8.25k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|  14.5k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|  14.5k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|  14.5k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|  14.5k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|  14.5k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|  14.5k|  ::memcpy(&value, &word, sizeof(T));
  615|  14.5k|#endif
  616|  14.5k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|  14.5k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|  35.6k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|  35.6k|  return 0xFF;
  507|  35.6k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  98.6k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|  57.9k|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|  57.9k|  return -22;
  461|  57.9k|#endif
  462|  57.9k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|  53.3k|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|  53.3k|  return 22;
  514|  53.3k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|  42.4k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|  42.4k|  return uint64_t(2) << mantissa_explicit_bits();
  521|  42.4k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|   224k|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|   224k|  return 52;
  474|   224k|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|  40.9k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|  40.9k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|  40.9k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|  29.2k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|  29.2k|  return -342;
  564|  29.2k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|  29.2k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|  29.2k|  return 308;
  555|  29.2k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|  45.1k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|  45.1k|  return -1023;
  497|  45.1k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|  2.68k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|  2.68k|  return -4;
  489|  2.68k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  1.54k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  1.54k|  return 23;
  481|  1.54k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  7.94k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  7.94k|  return 769;
  572|  7.94k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|  24.9k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|  24.9k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|  24.9k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|  24.9k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|  24.9k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|  24.9k|  ::memcpy(&value, &word, sizeof(T));
  615|  24.9k|#endif
  616|  24.9k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|  24.9k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|  60.0k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|  60.0k|  return 0x7FF;
  504|  60.0k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  40.7k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  40.7k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  40.7k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|  40.7k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  40.7k|    return from_chars_advanced(first, last, value, options);
  143|  40.7k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  40.7k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  40.7k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  40.7k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  40.7k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  40.7k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 40.7k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  40.7k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  40.7k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 40.7k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  40.7k|  answer.ec = std::errc(); // be optimistic
  221|  40.7k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  40.7k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 30.2k, False: 10.5k]
  |  Branch (227:69): [True: 29.7k, False: 452]
  |  Branch (227:131): [True: 28.1k, False: 1.63k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  28.1k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 28.1k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  28.1k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 26.5k, False: 1.58k]
  ------------------
  239|  26.5k|        value = T(pns.mantissa);
  240|  26.5k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 352, False: 26.1k]
  ------------------
  241|  26.1k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  26.5k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 26.5k]
  ------------------
  243|  26.5k|        return answer;
  244|  26.5k|      }
  245|  28.1k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  28.1k|  }
  262|  14.2k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  14.2k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 8.15k, False: 6.05k]
  |  Branch (263:29): [True: 8.15k, False: 0]
  ------------------
  264|  8.15k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 308, False: 7.84k]
  ------------------
  265|    308|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|    308|    }
  267|  8.15k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  14.2k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 308, False: 13.9k]
  ------------------
  271|  14.2k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  14.2k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 12.6k, False: 1.57k]
  |  Branch (273:29): [True: 224, False: 12.4k]
  |  Branch (273:49): [True: 36, False: 188]
  |  Branch (273:68): [True: 134, False: 14.0k]
  ------------------
  274|    170|    answer.ec = std::errc::result_out_of_range;
  275|    170|  }
  276|  14.2k|  return answer;
  277|  40.7k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  70.5k|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  70.5k|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  70.5k|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  70.5k|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  70.5k|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  70.5k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|  57.9k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|  57.9k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|  57.9k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|  57.9k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|  57.9k|    return from_chars_advanced(first, last, value, options);
  143|  57.9k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|  57.9k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|  57.9k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|  57.9k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|  57.9k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|  57.9k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 57.9k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|  57.9k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|  57.9k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 57.9k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|  57.9k|  answer.ec = std::errc(); // be optimistic
  221|  57.9k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|  57.9k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 53.3k, False: 4.61k]
  |  Branch (227:69): [True: 52.6k, False: 638]
  |  Branch (227:131): [True: 42.4k, False: 10.2k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|  42.4k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 42.4k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|  42.4k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 40.9k, False: 1.50k]
  ------------------
  239|  40.9k|        value = T(pns.mantissa);
  240|  40.9k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 4.42k, False: 36.5k]
  ------------------
  241|  36.5k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|  40.9k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 40.9k]
  ------------------
  243|  40.9k|        return answer;
  244|  40.9k|      }
  245|  42.4k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|  42.4k|  }
  262|  16.9k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  16.9k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 12.6k, False: 4.28k]
  |  Branch (263:29): [True: 12.6k, False: 0]
  ------------------
  264|  12.6k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 7.94k, False: 4.73k]
  ------------------
  265|  7.94k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  7.94k|    }
  267|  12.6k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  16.9k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 7.94k, False: 9.01k]
  ------------------
  271|  16.9k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  16.9k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 16.5k, False: 376]
  |  Branch (273:29): [True: 24, False: 16.5k]
  |  Branch (273:49): [True: 0, False: 24]
  |  Branch (273:68): [True: 24, False: 16.9k]
  ------------------
  274|     24|    answer.ec = std::errc::result_out_of_range;
  275|     24|  }
  276|  16.9k|  return answer;
  277|  57.9k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|   395k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  6.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  6.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3777|   364k|{
 3778|   364k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|   364k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|   364k|    }
 3781|   364k|    else if constexpr (sizeof(U) == 2) {
 3782|   364k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|   364k|    }
 3784|   364k|    else {
 3785|       |        // utf-32
 3786|   364k|        static_assert(sizeof(U) == 4);
 3787|   364k|        SCN_UNUSED(ch);
 3788|   364k|        return 1;
 3789|   364k|    }
 3790|   364k|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3741|   364k|{
 3742|   364k|    static_assert(sizeof(U8) == 1);
 3743|       |
 3744|   364k|    SCN_GCC_COMPAT_PUSH
 3745|   364k|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3746|   364k|    constexpr char lengths[] =
 3747|   364k|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3748|   364k|        "\1\1\1\1\1\1\1\1"
 3749|   364k|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3750|       |                            // byte
 3751|   364k|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3752|   364k|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3753|   364k|        "\4";               // highest bits 11110 -> 4-byte cp
 3754|   364k|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3755|   364k|    SCN_GCC_COMPAT_POP
 3756|   364k|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|   364k|{
 3984|   364k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|   364k|        return decode_utf8_code_point_exhaustive(input);
 3986|   364k|    }
 3987|   364k|    else if constexpr (sizeof(CharT) == 2) {
 3988|   364k|        return decode_utf16_code_point_exhaustive(input);
 3989|   364k|    }
 3990|   364k|    else {
 3991|   364k|        SCN_EXPECT(input.size() == 1);
 3992|   364k|        auto cp = static_cast<char32_t>(input.front());
 3993|   364k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 3994|   364k|            return invalid_code_point;
 3995|   364k|        }
 3996|   364k|        return cp;
 3997|   364k|    }
 3998|   364k|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3796|   364k|{
 3797|   364k|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|   364k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   364k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3798|       |
 3799|   364k|    const auto is_trailing_code_unit = [](char ch) {
 3800|   364k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|   364k|    };
 3802|       |
 3803|   364k|    if (input.size() == 1) {
  ------------------
  |  Branch (3803:9): [True: 354k, False: 10.0k]
  ------------------
 3804|   354k|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3804:13): [True: 0, False: 354k]
  ------------------
 3805|      0|            SCN_UNLIKELY_ATTR
 3806|      0|            return invalid_code_point;
 3807|      0|        }
 3808|   354k|        return static_cast<char32_t>(input[0]);
 3809|   354k|    }
 3810|       |
 3811|  10.0k|    if (input.size() == 2) {
  ------------------
  |  Branch (3811:9): [True: 10.0k, False: 5]
  ------------------
 3812|  10.0k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3812:13): [True: 0, False: 10.0k]
  ------------------
 3813|      0|            SCN_UNLIKELY_ATTR
 3814|      0|            return invalid_code_point;
 3815|      0|        }
 3816|  10.0k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3816:13): [True: 50, False: 10.0k]
  ------------------
 3817|     50|            SCN_UNLIKELY_ATTR
 3818|     50|            return invalid_code_point;
 3819|     50|        }
 3820|       |
 3821|  10.0k|        char32_t cp{};
 3822|  10.0k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3823|  10.0k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3824|  10.0k|        return cp;
 3825|  10.0k|    }
 3826|       |
 3827|      5|    if (input.size() == 3) {
  ------------------
  |  Branch (3827:9): [True: 5, False: 0]
  ------------------
 3828|      5|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3828:13): [True: 0, False: 5]
  ------------------
 3829|      0|            SCN_UNLIKELY_ATTR
 3830|      0|            return invalid_code_point;
 3831|      0|        }
 3832|      5|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3832:13): [True: 0, False: 5]
  ------------------
 3833|      5|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3833:13): [True: 0, False: 5]
  ------------------
 3834|      0|            SCN_UNLIKELY_ATTR
 3835|      0|            return invalid_code_point;
 3836|      0|        }
 3837|       |
 3838|      5|        char32_t cp{};
 3839|      5|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3840|      5|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3841|      5|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3842|      5|        return cp;
 3843|      5|    }
 3844|       |
 3845|      0|    if (input.size() == 4) {
  ------------------
  |  Branch (3845:9): [True: 0, False: 0]
  ------------------
 3846|      0|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            SCN_UNLIKELY_ATTR
 3848|      0|            return invalid_code_point;
 3849|      0|        }
 3850|      0|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3850:13): [True: 0, False: 0]
  ------------------
 3851|      0|            SCN_UNLIKELY_ATTR
 3852|      0|            return invalid_code_point;
 3853|      0|        }
 3854|      0|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3854:13): [True: 0, False: 0]
  ------------------
 3855|      0|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3855:13): [True: 0, False: 0]
  ------------------
 3856|      0|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3856:13): [True: 0, False: 0]
  ------------------
 3857|      0|            SCN_UNLIKELY_ATTR
 3858|      0|            return invalid_code_point;
 3859|      0|        }
 3860|       |
 3861|      0|        char32_t cp{};
 3862|      0|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3863|      0|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3864|      0|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3865|      0|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3866|      0|        return cp;
 3867|      0|    }
 3868|       |
 3869|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3870|       |    // gcc 7 thinks we'll get here, even when we won't
 3871|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3872|      0|#endif
 3873|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3874|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3799|  10.0k|    const auto is_trailing_code_unit = [](char ch) {
 3800|  10.0k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3801|  10.0k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3669|   640k|{
 3670|   640k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3670:19): [Folded - Ignored]
  |  Branch (3670:19): [Folded - Ignored]
  ------------------
 3671|   640k|                                          decltype(first), decltype(last)> &&
 3672|   640k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3672:19): [Folded - Ignored]
  ------------------
 3673|   640k|        return {first, last};
 3674|   640k|    }
 3675|   640k|    else {
 3676|   640k|        return {to_address(first), static_cast<size_t>(std::distance(
 3677|   640k|                                       to_address(first), to_address(last)))};
 3678|   640k|    }
 3679|   640k|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|  1.95M|{
  322|  1.95M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|  1.95M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  301|  2.18M|{
  302|  2.18M|    return p;
  303|  2.18M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3700|   973k|{
 3701|   973k|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|   973k|                      typename std::basic_string_view<CharT>::iterator,
 3703|   973k|                      decltype(it)> &&
 3704|   973k|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3704:19): [Folded - Ignored]
  ------------------
 3705|   973k|        SCN_UNUSED(sv);
  ------------------
  |  |  909|   973k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3706|   973k|        return it;
 3707|   973k|    }
 3708|   973k|    else {
 3709|   973k|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3710|   973k|    }
 3711|   973k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  1.28k|    {
 2695|  1.28k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.28k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  1.28k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  1.28k|    {
 2676|  1.28k|        return decay_copy(t.begin());
 2677|  1.28k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1919|  1.26M|{
 1920|  1.26M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  1.26M|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8827|  15.7k|{
 8828|  15.7k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  15.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  15.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  15.7k|    static_cast<    \
  |  |  929|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  15.7k|    static_cast<    \
  |  |  929|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  15.7k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5356|  61.3k|{
 5357|  61.3k|    detail::check_scan_arg_types<Args...>();
 5358|  61.3k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  61.3k|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5095|  69.2k|{
 5096|  69.2k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  69.2k|                  "Scan argument types must be default constructible");
 5098|  69.2k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  69.2k|                  "Scan argument types must be Destructible");
 5100|  69.2k|    static_assert(
 5101|  69.2k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  69.2k|        "Scan argument types must not be references");
 5103|  69.2k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5309|  61.3k|    {
 5310|  61.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  61.3k|    {
 5321|  61.3k|        return {detail::make_arg<
 5322|  61.3k|            kind, Context,
 5323|  61.3k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  61.3k|                                 typename Context::char_type>::value>(args)...};
 5325|  61.3k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5130|  61.3k|{
 5131|  61.3k|    return make_value<Context>(value).ref_value;
 5132|  61.3k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5080|  67.5k|{
 5081|  67.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  67.5k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  67.5k|                                  needs_context_tag>) {
 5085|  67.5k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  67.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  67.5k|    }
 5087|  67.5k|    else {
 5088|  67.5k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  67.5k|            value, context_tag<Context>{}));
 5090|  67.5k|    }
 5091|  67.5k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4919|  67.5k|    {                                                                        \
 4920|  67.5k|        return val;                                                          \
 4921|  67.5k|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5049|  69.2k|{
 5050|  69.2k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  69.2k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  69.2k|    constexpr bool scannable_char =
 5054|  69.2k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  69.2k|    static_assert(scannable_char,
 5056|  69.2k|                  "Cannot scan an argument of an unsupported character "
 5057|  69.2k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  69.2k|    constexpr bool scannable_const =
 5060|  69.2k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  69.2k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  69.2k|    constexpr bool scannable_disabled =
 5064|  69.2k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  69.2k|    static_assert(scannable_disabled,
 5066|  69.2k|                  "Cannot scan an argument that has been disabled by "
 5067|  69.2k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  69.2k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  69.2k|    static_assert(
 5071|  69.2k|        scannable,
 5072|  69.2k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  69.2k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  69.2k|    return arg_value{arg};
 5076|  69.2k|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4862|  69.2k|    {
 4863|  69.2k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8614|  57.2k|{
 8615|  57.2k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  57.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8616|  57.2k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8551|  57.2k|{
 8552|  57.2k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  57.2k|    auto result = vscan_impl(buffer, format, args);
 8555|  57.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  57.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 576, False: 56.6k]
  |  |  ------------------
  ------------------
 8556|    576|        return unexpected(result.error());
 8557|    576|    }
 8558|  56.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  56.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  57.2k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4680|   128k|{
 4681|   128k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|   128k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|   128k|                  "\n"
 4685|   128k|                  "Unsupported range type given as input to a scanning "
 4686|   128k|                  "function.\n"
 4687|   128k|                  "A range needs to have a character type (value type) "
 4688|   128k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|   128k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|   128k|                  "to be included.\n"
 4691|   128k|                  "See the scnlib documentation for more details.");
 4692|   128k|    static_assert(
 4693|   128k|        !std::is_same_v<T, custom_char_traits>,
 4694|   128k|        "\n"
 4695|   128k|        "Unsupported range type given as input to a scanning "
 4696|   128k|        "function.\n"
 4697|   128k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|   128k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|   128k|        "not supported.");
 4700|   128k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|   128k|                  "\n"
 4702|   128k|                  "Unsupported range type given as input to a scanning "
 4703|   128k|                  "function.\n"
 4704|   128k|                  "file_marker_found cannot be used as an "
 4705|   128k|                  "source range type to scn::scan.\n"
 4706|   128k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|   128k|                  "and do not provide an explicit source range, "
 4708|   128k|                  "or use scn::scan with a FILE* directly.");
 4709|   128k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|   128k|                  "\n"
 4711|   128k|                  "Unsupported range type given as input to a scanning "
 4712|   128k|                  "function.\n"
 4713|   128k|                  "In order to be scannable, a range needs to satisfy "
 4714|   128k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|   128k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|   128k|                  "\n"
 4717|   128k|                  "Unsupported range type given as input to a scanning "
 4718|   128k|                  "function.\n"
 4719|   128k|                  "A range needs to model forward_range and have a valid "
 4720|   128k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|   128k|                  "Examples of scannable ranges are std::string, "
 4722|   128k|                  "std::string_view, "
 4723|   128k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|   128k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|   128k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|   128k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4619|   128k|{
 4620|   128k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4620:19): [Folded - Ignored]
  ------------------
 4621|   128k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4622|   128k|    }
 4623|   128k|    else {
 4624|   128k|        return invalid_char_type{};
 4625|   128k|    }
 4626|   128k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|   128k|    {
 2826|   128k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|   128k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|   128k|    {
 2807|   128k|        return t.data();
 2808|   128k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3201|   128k|    {
 3202|   128k|        return ranges::empty(derived())
  ------------------
  |  Branch (3202:16): [True: 73, False: 128k]
  ------------------
 3203|   128k|                   ? nullptr
 3204|   128k|                   : std::addressof(*ranges::begin(derived()));
 3205|   128k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|   128k|    {
 2976|   128k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|   128k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|   128k|    {
 2949|   128k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|   128k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3309|   733k|    {
 3310|   733k|        return m_iterator == m_sentinel;
 3311|   733k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3155|   256k|    {
 3156|   256k|        return static_cast<const D&>(*this);
 3157|   256k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   255k|    {
 2695|   255k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   255k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   255k|    {
 2676|   255k|        return decay_copy(t.begin());
 2677|   255k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3300|  3.01M|    {
 3301|  3.01M|        return m_iterator;
 3302|  3.01M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2900|   128k|    {
 2901|   128k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|   128k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2866|   128k|    {
 2867|   128k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|   128k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1919|   377k|{
 1920|   377k|    return SCN_FWD(t);
  ------------------
  |  |  930|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|   377k|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3316|   733k|    {
 3317|   733k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|   733k|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1568|   872k|    {
 1569|   872k|        return has_value();
 1570|   872k|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  480|  1.74M|    {
  481|  1.74M|        return m_has_value;
  482|  1.74M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1574|  11.6k|    {
 1575|  11.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  11.6k|        return this->get_unexpected().error();
 1577|  11.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  11.6k|    {
  464|  11.6k|        return m_unexpected;
  465|  11.6k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  356|  88.3k|    {
  357|  88.3k|        return m_unexpected;
  358|  88.3k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  342|  43.2k|    {
  343|  43.2k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  43.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  43.2k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  1.24k|    {
 1447|  1.24k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|  1.24k|    {
  443|  1.24k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  351|   290k|    {
  352|   290k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   290k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   290k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   128k|    {
 1148|   128k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5883|   127k|{
 5884|   127k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|   127k|                      ranges::iterator_t<SourceRange>>) {
 5886|   127k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|   127k|    }
 5888|   127k|    else {
 5889|   127k|        auto it = ranges::begin(source);
 5890|   127k|        while (n > 0) {
 5891|   127k|            --n;
 5892|   127k|            ++it;
 5893|   127k|        }
 5894|   127k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|   127k|    }
 5896|   127k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   755k|    {
 2695|   755k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   755k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   755k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   755k|    {
 2676|   755k|        return decay_copy(t.begin());
 2677|   755k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5870|   127k|{
 5871|   127k|    return ranges::end(source);
 5872|   127k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   127k|    {
 2752|   127k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   127k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   127k|    {
 2734|   127k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   127k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3304|  1.48M|    {
 3305|  1.48M|        return m_sentinel;
 3306|  1.48M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1623|   364k|    {
 1624|   364k|        return value();
 1625|   364k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1597|   857k|    {
 1598|   857k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   857k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   857k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   857k|        return this->get_value();
 1600|   857k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  446|   857k|    {
  447|   857k|        return m_value;
  448|   857k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|   127k|    {
 1401|   127k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  432|   127k|    {
  433|   127k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7935|  31.5k|    {
 7936|  31.5k|        return m_str;
 7937|  31.5k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  61.3k|    {
 5387|  61.3k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5339|  61.3k|    {
 5340|  61.3k|        return m_argptrs;
 5341|  61.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5438|   223k|    {
 5439|   223k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  31.5k|{
 8781|  31.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 31.2k]
  |  |  ------------------
  ------------------
 8782|    384|        return unexpected(result.error());
 8783|    384|    }
 8784|  31.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  31.2k|    static_cast<    \
  |  |  929|  31.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  31.2k|    static_cast<    \
  |  |  929|  31.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  31.5k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1568|   128k|    {
 1569|   128k|        return has_value();
 1570|   128k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   257k|    {
  481|   257k|        return m_has_value;
  482|   257k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1574|  1.24k|    {
 1575|  1.24k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.24k|        return this->get_unexpected().error();
 1577|  1.24k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.24k|    {
  464|  1.24k|        return m_unexpected;
  465|  1.24k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|    416|    {
 1447|    416|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|    416|    {
  443|    416|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  35.2k|    {
 1148|  35.2k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1623|   113k|    {
 1624|   113k|        return value();
 1625|   113k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|   127k|    {
 1598|   127k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   127k|        return this->get_value();
 1600|   127k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  446|   127k|    {
  447|   127k|        return m_value;
  448|   127k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5790|  34.7k|    {
 5791|  34.7k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5641|   127k|    {
 5642|   127k|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5576|  66.7k|    {
 5577|  66.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|  34.7k|    {
 1401|  34.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  34.7k|    {
  433|  34.7k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5334|  61.3k|    {
 5335|  61.3k|        return m_args;
 5336|  61.3k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   128k|    {
 2752|   128k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   128k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   128k|    {
 2734|   128k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   128k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3286|  1.19M|    {
 3287|  1.19M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7651|   223k|{
 7652|   223k|    return s;
 7653|   223k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7628|   223k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  31.5k|    {
 7932|  31.5k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1568|  35.2k|    {
 1569|  35.2k|        return has_value();
 1570|  35.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  69.9k|    {
  481|  69.9k|        return m_has_value;
  482|  69.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1643|  34.7k|    {
 1644|  34.7k|        return &value();
 1645|  34.7k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|  34.7k|    {
 1598|  34.7k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  34.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  34.7k|        return this->get_value();
 1600|  34.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  34.7k|    {
  447|  34.7k|        return m_value;
  448|  34.7k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5658|   127k|    {
 5659|   127k|        return ranges::begin(m_range);
 5660|   127k|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8894|  15.7k|{
 8895|  15.7k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  15.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  15.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  15.7k|    static_cast<    \
  |  |  929|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  15.7k|    static_cast<    \
  |  |  929|  15.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  15.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8632|  57.2k|{
 8633|  57.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  57.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  57.2k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8567|  57.2k|{
 8568|  57.2k|#if !SCN_DISABLE_LOCALE
 8569|  57.2k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  57.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  57.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  57.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  57.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  57.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 576, False: 56.6k]
  |  |  ------------------
  ------------------
 8576|    576|        return unexpected(result.error());
 8577|    576|    }
 8578|  56.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  56.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  57.2k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8933|  3.61k|{
 8934|  3.61k|    T value;
 8935|  3.61k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  3.61k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  3.61k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  3.61k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  3.61k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 3.58k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     32|    }                                                  \
  |  |  |  | 3642|  3.61k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.58k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  3.58k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.58k|    static_cast<    \
  |  |  929|  3.58k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  3.58k|    static_cast<    \
  |  |  929|  3.58k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  3.61k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5115|  6.26k|{
 5116|  6.26k|    check_scan_arg_types<T>();
 5117|       |
 5118|  6.26k|    basic_scan_arg<Context> arg;
 5119|  6.26k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  6.26k|    arg.m_value = make_value<Context>(value);
 5121|  6.26k|    return arg;
 5122|  6.26k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5201|   248k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4858|   253k|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8645|  14.0k|{
 8646|  14.0k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8647|  14.0k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|  14.0k|{
 8592|  14.0k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|  14.0k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|  14.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  14.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 13.9k]
  |  |  ------------------
  ------------------
 8596|     96|        return unexpected(result.error());
 8597|     96|    }
 8598|  13.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  13.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|  14.0k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  13.9k|    {
 1634|  13.9k|        return std::move(value());
 1635|  13.9k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8827|  20.7k|{
 8828|  20.7k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  20.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  20.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  20.7k|    static_cast<    \
  |  |  929|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  20.7k|    static_cast<    \
  |  |  929|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  20.7k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5356|  81.0k|{
 5357|  81.0k|    detail::check_scan_arg_types<Args...>();
 5358|  81.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  81.0k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5095|  92.1k|{
 5096|  92.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  92.1k|                  "Scan argument types must be default constructible");
 5098|  92.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  92.1k|                  "Scan argument types must be Destructible");
 5100|  92.1k|    static_assert(
 5101|  92.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  92.1k|        "Scan argument types must not be references");
 5103|  92.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5309|  81.0k|    {
 5310|  81.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  81.0k|    {
 5321|  81.0k|        return {detail::make_arg<
 5322|  81.0k|            kind, Context,
 5323|  81.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  81.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  81.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5130|  81.0k|{
 5131|  81.0k|    return make_value<Context>(value).ref_value;
 5132|  81.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5080|  90.5k|{
 5081|  90.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  90.5k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  90.5k|                                  needs_context_tag>) {
 5085|  90.5k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  90.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  90.5k|    }
 5087|  90.5k|    else {
 5088|  90.5k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  90.5k|            value, context_tag<Context>{}));
 5090|  90.5k|    }
 5091|  90.5k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4919|  90.5k|    {                                                                        \
 4920|  90.5k|        return val;                                                          \
 4921|  90.5k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5049|  92.1k|{
 5050|  92.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  92.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  92.1k|    constexpr bool scannable_char =
 5054|  92.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  92.1k|    static_assert(scannable_char,
 5056|  92.1k|                  "Cannot scan an argument of an unsupported character "
 5057|  92.1k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  92.1k|    constexpr bool scannable_const =
 5060|  92.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  92.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  92.1k|    constexpr bool scannable_disabled =
 5064|  92.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  92.1k|    static_assert(scannable_disabled,
 5066|  92.1k|                  "Cannot scan an argument that has been disabled by "
 5067|  92.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  92.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  92.1k|    static_assert(
 5071|  92.1k|        scannable,
 5072|  92.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  92.1k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  92.1k|    return arg_value{arg};
 5076|  92.1k|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4862|  92.1k|    {
 4863|  92.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7935|  41.4k|    {
 7936|  41.4k|        return m_str;
 7937|  41.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  81.0k|    {
 5387|  81.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5339|  81.0k|    {
 5340|  81.0k|        return m_argptrs;
 5341|  81.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  41.4k|{
 8781|  41.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  41.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 41.0k]
  |  |  ------------------
  ------------------
 8782|    384|        return unexpected(result.error());
 8783|    384|    }
 8784|  41.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  41.0k|    static_cast<    \
  |  |  929|  41.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  41.0k|    static_cast<    \
  |  |  929|  41.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  41.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|    416|    {
 1447|    416|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|    416|    {
  443|    416|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  46.6k|    {
 1148|  46.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5790|  46.2k|    {
 5791|  46.2k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5576|  89.6k|    {
 5577|  89.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|  46.2k|    {
 1401|  46.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  46.2k|    {
  433|  46.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5334|  81.0k|    {
 5335|  81.0k|        return m_args;
 5336|  81.0k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  41.4k|    {
 7932|  41.4k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1568|  46.6k|    {
 1569|  46.6k|        return has_value();
 1570|  46.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  92.9k|    {
  481|  92.9k|        return m_has_value;
  482|  92.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1643|  46.2k|    {
 1644|  46.2k|        return &value();
 1645|  46.2k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|  46.2k|    {
 1598|  46.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  46.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  46.2k|        return this->get_value();
 1600|  46.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  46.2k|    {
  447|  46.2k|        return m_value;
  448|  46.2k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8894|  20.7k|{
 8895|  20.7k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  20.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  20.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  20.7k|    static_cast<    \
  |  |  929|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  20.7k|    static_cast<    \
  |  |  929|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  20.7k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8933|  5.20k|{
 8934|  5.20k|    T value;
 8935|  5.20k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  5.20k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  5.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  5.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  5.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 5.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     32|    }                                                  \
  |  |  |  | 3642|  5.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  5.16k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.16k|    static_cast<    \
  |  |  929|  5.16k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.16k|    static_cast<    \
  |  |  929|  5.16k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  5.20k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5115|  9.44k|{
 5116|  9.44k|    check_scan_arg_types<T>();
 5117|       |
 5118|  9.44k|    basic_scan_arg<Context> arg;
 5119|  9.44k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  9.44k|    arg.m_value = make_value<Context>(value);
 5121|  9.44k|    return arg;
 5122|  9.44k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8827|  20.7k|{
 8828|  20.7k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  20.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  20.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  20.7k|    static_cast<    \
  |  |  929|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  20.7k|    static_cast<    \
  |  |  929|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  20.7k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5356|  81.0k|{
 5357|  81.0k|    detail::check_scan_arg_types<Args...>();
 5358|  81.0k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  81.0k|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5095|  92.1k|{
 5096|  92.1k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5097|  92.1k|                  "Scan argument types must be default constructible");
 5098|  92.1k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5099|  92.1k|                  "Scan argument types must be Destructible");
 5100|  92.1k|    static_assert(
 5101|  92.1k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5102|  92.1k|        "Scan argument types must not be references");
 5103|  92.1k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5309|  81.0k|    {
 5310|  81.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  81.0k|    {
 5321|  81.0k|        return {detail::make_arg<
 5322|  81.0k|            kind, Context,
 5323|  81.0k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  81.0k|                                 typename Context::char_type>::value>(args)...};
 5325|  81.0k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5130|  81.0k|{
 5131|  81.0k|    return make_value<Context>(value).ref_value;
 5132|  81.0k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5080|  90.5k|{
 5081|  90.5k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  90.5k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  90.5k|                                  needs_context_tag>) {
 5085|  90.5k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  90.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  90.5k|    }
 5087|  90.5k|    else {
 5088|  90.5k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  90.5k|            value, context_tag<Context>{}));
 5090|  90.5k|    }
 5091|  90.5k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4919|  90.5k|    {                                                                        \
 4920|  90.5k|        return val;                                                          \
 4921|  90.5k|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5049|  92.1k|{
 5050|  92.1k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5051|  92.1k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5052|       |
 5053|  92.1k|    constexpr bool scannable_char =
 5054|  92.1k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5055|  92.1k|    static_assert(scannable_char,
 5056|  92.1k|                  "Cannot scan an argument of an unsupported character "
 5057|  92.1k|                  "type (i.e. char from a wchar_t source)");
 5058|       |
 5059|  92.1k|    constexpr bool scannable_const =
 5060|  92.1k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5061|  92.1k|    static_assert(scannable_const, "Cannot scan a const argument");
 5062|       |
 5063|  92.1k|    constexpr bool scannable_disabled =
 5064|  92.1k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5065|  92.1k|    static_assert(scannable_disabled,
 5066|  92.1k|                  "Cannot scan an argument that has been disabled by "
 5067|  92.1k|                  "flag (SCN_DISABLE_TYPE_*)");
 5068|       |
 5069|  92.1k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5070|  92.1k|    static_assert(
 5071|  92.1k|        scannable,
 5072|  92.1k|        "Cannot scan an argument. To make a type T scannable, provide "
 5073|  92.1k|        "a scn::scanner<T, CharT> specialization.");
 5074|       |
 5075|  92.1k|    return arg_value{arg};
 5076|  92.1k|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4862|  92.1k|    {
 4863|  92.1k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7935|  41.4k|    {
 7936|  41.4k|        return m_str;
 7937|  41.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  81.0k|    {
 5387|  81.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5339|  81.0k|    {
 5340|  81.0k|        return m_argptrs;
 5341|  81.0k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|  41.4k|{
 8781|  41.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  41.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 41.0k]
  |  |  ------------------
  ------------------
 8782|    384|        return unexpected(result.error());
 8783|    384|    }
 8784|  41.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  41.0k|    static_cast<    \
  |  |  929|  41.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  41.0k|    static_cast<    \
  |  |  929|  41.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  41.4k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|    416|    {
 1447|    416|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|    416|    {
  443|    416|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  46.6k|    {
 1148|  46.6k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5790|  46.2k|    {
 5791|  46.2k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5576|  89.6k|    {
 5577|  89.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|  46.2k|    {
 1401|  46.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  432|  46.2k|    {
  433|  46.2k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5334|  81.0k|    {
 5335|  81.0k|        return m_args;
 5336|  81.0k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  41.4k|    {
 7932|  41.4k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1568|  46.6k|    {
 1569|  46.6k|        return has_value();
 1570|  46.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  92.9k|    {
  481|  92.9k|        return m_has_value;
  482|  92.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1643|  46.2k|    {
 1644|  46.2k|        return &value();
 1645|  46.2k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|  46.2k|    {
 1598|  46.2k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  46.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  46.2k|        return this->get_value();
 1600|  46.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  46.2k|    {
  447|  46.2k|        return m_value;
  448|  46.2k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8894|  20.7k|{
 8895|  20.7k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  20.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  20.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  20.7k|    static_cast<    \
  |  |  929|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  20.7k|    static_cast<    \
  |  |  929|  20.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  20.7k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8933|  5.20k|{
 8934|  5.20k|    T value;
 8935|  5.20k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  5.20k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  5.20k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  5.20k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  5.20k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  5.20k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 5.16k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     32|    }                                                  \
  |  |  |  | 3642|  5.20k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  5.16k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  5.16k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.16k|    static_cast<    \
  |  |  929|  5.16k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  5.16k|    static_cast<    \
  |  |  929|  5.16k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  5.20k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5115|  9.44k|{
 5116|  9.44k|    check_scan_arg_types<T>();
 5117|       |
 5118|  9.44k|    basic_scan_arg<Context> arg;
 5119|  9.44k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|  9.44k|    arg.m_value = make_value<Context>(value);
 5121|  9.44k|    return arg;
 5122|  9.44k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  1.24k|    {
 2695|  1.24k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.24k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  1.24k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  1.24k|    {
 2676|  1.24k|        return decay_copy(t.begin());
 2677|  1.24k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1919|  2.53M|{
 1920|  2.53M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  2.53M|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8827|  14.8k|{
 8828|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  14.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  14.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8614|  54.4k|{
 8615|  54.4k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  54.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8616|  54.4k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8551|  54.4k|{
 8552|  54.4k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  54.4k|    auto result = vscan_impl(buffer, format, args);
 8555|  54.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  54.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 576, False: 53.9k]
  |  |  ------------------
  ------------------
 8556|    576|        return unexpected(result.error());
 8557|    576|    }
 8558|  53.9k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  53.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  54.4k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4680|   120k|{
 4681|   120k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|   120k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|   120k|                  "\n"
 4685|   120k|                  "Unsupported range type given as input to a scanning "
 4686|   120k|                  "function.\n"
 4687|   120k|                  "A range needs to have a character type (value type) "
 4688|   120k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|   120k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|   120k|                  "to be included.\n"
 4691|   120k|                  "See the scnlib documentation for more details.");
 4692|   120k|    static_assert(
 4693|   120k|        !std::is_same_v<T, custom_char_traits>,
 4694|   120k|        "\n"
 4695|   120k|        "Unsupported range type given as input to a scanning "
 4696|   120k|        "function.\n"
 4697|   120k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|   120k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|   120k|        "not supported.");
 4700|   120k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|   120k|                  "\n"
 4702|   120k|                  "Unsupported range type given as input to a scanning "
 4703|   120k|                  "function.\n"
 4704|   120k|                  "file_marker_found cannot be used as an "
 4705|   120k|                  "source range type to scn::scan.\n"
 4706|   120k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|   120k|                  "and do not provide an explicit source range, "
 4708|   120k|                  "or use scn::scan with a FILE* directly.");
 4709|   120k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|   120k|                  "\n"
 4711|   120k|                  "Unsupported range type given as input to a scanning "
 4712|   120k|                  "function.\n"
 4713|   120k|                  "In order to be scannable, a range needs to satisfy "
 4714|   120k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|   120k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|   120k|                  "\n"
 4717|   120k|                  "Unsupported range type given as input to a scanning "
 4718|   120k|                  "function.\n"
 4719|   120k|                  "A range needs to model forward_range and have a valid "
 4720|   120k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|   120k|                  "Examples of scannable ranges are std::string, "
 4722|   120k|                  "std::string_view, "
 4723|   120k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|   120k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|   120k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|   120k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4650|   120k|{
 4651|   120k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4651:19): [Folded - Ignored]
  ------------------
 4652|   120k|        return file_marker_found{};
 4653|   120k|    }
 4654|   120k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4654:24): [Folded - Ignored]
  ------------------
 4655|   120k|        if constexpr (ranges::range<Range>) {
 4656|   120k|            return insufficient_range{};
 4657|   120k|        }
 4658|   120k|        else {
 4659|   120k|            return invalid_input_range{};
 4660|   120k|        }
 4661|   120k|    }
 4662|   120k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4662:24): [Folded - Ignored]
  ------------------
 4663|   120k|        return invalid_char_type{};
 4664|   120k|    }
 4665|   120k|    else {
 4666|   120k|        return make_forward_scan_buffer(r);
 4667|   120k|    }
 4668|   120k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4484|   120k|{
 4485|   120k|    return basic_scan_forward_buffer_impl(range);
 4486|   120k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4377|   120k|    {
 4378|   120k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4352|   120k|    {
 4353|   120k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4121|   120k|    {
 4122|   120k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4036|   120k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   238k|    {
 2695|   238k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   238k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   238k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   238k|    {
 2676|   238k|        return decay_copy(t.begin());
 2677|   238k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3300|   357k|    {
 3301|   357k|        return m_iterator;
 3302|   357k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4381|  1.94M|    {
 4382|  1.94M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4382:13): [True: 1.82k, False: 1.93M]
  ------------------
 4383|  1.82k|            return false;
 4384|  1.82k|        }
 4385|  1.93M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4385:13): [True: 1.81M, False: 120k]
  ------------------
 4386|  1.81M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4387|  1.81M|                                          this->m_current_view.begin(),
 4388|  1.81M|                                          this->m_current_view.end());
 4389|  1.81M|        }
 4390|  1.93M|        m_latest = *m_cursor;
 4391|  1.93M|        ++m_cursor;
 4392|  1.93M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4393|  1.93M|        return true;
 4394|  1.94M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  1.94M|    {
 2752|  1.94M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  1.94M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  1.94M|    {
 2734|  1.94M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  1.94M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3304|  2.06M|    {
 3305|  2.06M|        return m_sentinel;
 3306|  2.06M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4041|   120k|    {
 4042|   120k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   120k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4043|   120k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1446|  1.24k|    {
 1447|  1.24k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|  1.24k|    {
  443|  1.24k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   120k|    {
 1148|   120k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5883|   118k|{
 5884|   118k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5884:19): [Folded - Ignored]
  ------------------
 5885|   118k|                      ranges::iterator_t<SourceRange>>) {
 5886|   118k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5887|   118k|    }
 5888|   118k|    else {
 5889|   118k|        auto it = ranges::begin(source);
 5890|   118k|        while (n > 0) {
 5891|   118k|            --n;
 5892|   118k|            ++it;
 5893|   118k|        }
 5894|   118k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5895|   118k|    }
 5896|   118k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|   118k|    {
 2695|   118k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|   118k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|   118k|    {
 2676|   118k|        return decay_copy(t.begin());
 2677|   118k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5870|   118k|{
 5871|   118k|    return ranges::end(source);
 5872|   118k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   118k|    {
 2752|   118k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   118k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   118k|    {
 2734|   118k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   118k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1400|   118k|    {
 1401|   118k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  432|   118k|    {
  433|   118k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7935|  29.7k|    {
 7936|  29.7k|        return m_str;
 7937|  29.7k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|  29.7k|{
 8781|  29.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 29.3k]
  |  |  ------------------
  ------------------
 8782|    384|        return unexpected(result.error());
 8783|    384|    }
 8784|  29.3k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  29.3k|    static_cast<    \
  |  |  929|  29.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  29.3k|    static_cast<    \
  |  |  929|  29.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  29.7k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1568|   120k|    {
 1569|   120k|        return has_value();
 1570|   120k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|   240k|    {
  481|   240k|        return m_has_value;
  482|   240k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1574|  1.24k|    {
 1575|  1.24k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  1.24k|        return this->get_unexpected().error();
 1577|  1.24k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  1.24k|    {
  464|  1.24k|        return m_unexpected;
  465|  1.24k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|    416|    {
 1447|    416|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|    416|    {
  443|    416|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  32.3k|    {
 1148|  32.3k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1623|   107k|    {
 1624|   107k|        return value();
 1625|   107k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1597|   118k|    {
 1598|   118k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   118k|        return this->get_value();
 1600|   118k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  446|   118k|    {
  447|   118k|        return m_value;
  448|   118k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5790|  31.9k|    {
 5791|  31.9k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5641|   118k|    {
 5642|   118k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|  31.9k|    {
 1401|  31.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  31.9k|    {
  433|  31.9k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|   120k|    {
 2752|   120k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|   120k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|   120k|    {
 2734|   120k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|   120k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3286|   238k|    {
 3287|   238k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  29.7k|    {
 7932|  29.7k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1568|  32.3k|    {
 1569|  32.3k|        return has_value();
 1570|  32.3k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  64.3k|    {
  481|  64.3k|        return m_has_value;
  482|  64.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1643|  31.9k|    {
 1644|  31.9k|        return &value();
 1645|  31.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|  31.9k|    {
 1598|  31.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  31.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  31.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  31.9k|        return this->get_value();
 1600|  31.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  31.9k|    {
  447|  31.9k|        return m_value;
  448|  31.9k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5658|   118k|    {
 5659|   118k|        return ranges::begin(m_range);
 5660|   118k|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8894|  14.8k|{
 8895|  14.8k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  14.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  14.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  14.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  14.8k|    static_cast<    \
  |  |  929|  14.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  14.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8632|  54.4k|{
 8633|  54.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  54.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8634|  54.4k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8567|  54.4k|{
 8568|  54.4k|#if !SCN_DISABLE_LOCALE
 8569|  54.4k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  54.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  54.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  54.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  54.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  54.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 576, False: 53.9k]
  |  |  ------------------
  ------------------
 8576|    576|        return unexpected(result.error());
 8577|    576|    }
 8578|  53.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  53.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  54.4k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8933|  2.65k|{
 8934|  2.65k|    T value;
 8935|  2.65k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  2.65k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  2.65k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.65k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.65k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 2.61k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     32|    }                                                  \
  |  |  |  | 3642|  2.65k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.61k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  2.61k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.61k|    static_cast<    \
  |  |  929|  2.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  2.61k|    static_cast<    \
  |  |  929|  2.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  2.65k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8645|  11.1k|{
 8646|  11.1k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  11.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8647|  11.1k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|  11.1k|{
 8592|  11.1k|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|  11.1k|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|  11.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 96, False: 11.0k]
  |  |  ------------------
  ------------------
 8596|     96|        return unexpected(result.error());
 8597|     96|    }
 8598|  11.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|  11.1k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1633|  11.0k|    {
 1634|  11.0k|        return std::move(value());
 1635|  11.0k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8827|  19.8k|{
 8828|  19.8k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  19.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  19.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  19.8k|    static_cast<    \
  |  |  929|  19.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  19.8k|    static_cast<    \
  |  |  929|  19.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  19.8k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7935|  39.6k|    {
 7936|  39.6k|        return m_str;
 7937|  39.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|  39.6k|{
 8781|  39.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 39.2k]
  |  |  ------------------
  ------------------
 8782|    384|        return unexpected(result.error());
 8783|    384|    }
 8784|  39.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  39.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|    416|    {
 1447|    416|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|    416|    {
  443|    416|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  43.8k|    {
 1148|  43.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5790|  43.4k|    {
 5791|  43.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|  43.4k|    {
 1401|  43.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  43.4k|    {
  433|  43.4k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  39.6k|    {
 7932|  39.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1568|  43.8k|    {
 1569|  43.8k|        return has_value();
 1570|  43.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  87.2k|    {
  481|  87.2k|        return m_has_value;
  482|  87.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1643|  43.4k|    {
 1644|  43.4k|        return &value();
 1645|  43.4k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|  43.4k|    {
 1598|  43.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  43.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  43.4k|        return this->get_value();
 1600|  43.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  43.4k|    {
  447|  43.4k|        return m_value;
  448|  43.4k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8894|  19.8k|{
 8895|  19.8k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  19.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  19.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  19.8k|    static_cast<    \
  |  |  929|  19.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  19.8k|    static_cast<    \
  |  |  929|  19.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  19.8k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8933|  4.23k|{
 8934|  4.23k|    T value;
 8935|  4.23k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  4.23k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     32|    }                                                  \
  |  |  |  | 3642|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  4.20k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.20k|    static_cast<    \
  |  |  929|  4.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.20k|    static_cast<    \
  |  |  929|  4.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  4.23k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8827|  19.8k|{
 8828|  19.8k|    auto args = make_scan_args<scan_context, Args...>();
 8829|  19.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8830|  19.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  19.8k|    static_cast<    \
  |  |  929|  19.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  19.8k|    static_cast<    \
  |  |  929|  19.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8831|  19.8k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7935|  39.6k|    {
 7936|  39.6k|        return m_str;
 7937|  39.6k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|  39.6k|{
 8781|  39.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 39.2k]
  |  |  ------------------
  ------------------
 8782|    384|        return unexpected(result.error());
 8783|    384|    }
 8784|  39.2k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  39.2k|    static_cast<    \
  |  |  929|  39.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|  39.6k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|    416|    {
 1447|    416|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|    416|    {
  443|    416|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  43.8k|    {
 1148|  43.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5790|  43.4k|    {
 5791|  43.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1400|  43.4k|    {
 1401|  43.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  432|  43.4k|    {
  433|  43.4k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7931|  39.6k|    {
 7932|  39.6k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1568|  43.8k|    {
 1569|  43.8k|        return has_value();
 1570|  43.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  87.2k|    {
  481|  87.2k|        return m_has_value;
  482|  87.2k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1643|  43.4k|    {
 1644|  43.4k|        return &value();
 1645|  43.4k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_LPv0EEERT_v:
 1597|  43.4k|    {
 1598|  43.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  43.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  43.4k|        return this->get_value();
 1600|  43.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  43.4k|    {
  447|  43.4k|        return m_value;
  448|  43.4k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8894|  19.8k|{
 8895|  19.8k|    auto args = make_scan_args<scan_context, Args...>();
 8896|  19.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  19.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8897|  19.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  19.8k|    static_cast<    \
  |  |  929|  19.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  19.8k|    static_cast<    \
  |  |  929|  19.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8898|  19.8k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8933|  4.23k|{
 8934|  4.23k|    T value;
 8935|  4.23k|    auto arg = detail::make_arg<scan_context>(value);
 8936|  4.23k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|  4.23k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  4.23k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  4.23k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32, False: 4.20k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     32|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     32|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     32|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     32|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     32|    }                                                  \
  |  |  |  | 3642|  4.23k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.20k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8937|  4.20k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.20k|    static_cast<    \
  |  |  929|  4.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.20k|    static_cast<    \
  |  |  929|  4.20k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8938|  4.23k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  2.56k|    {
 2695|  2.56k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  2.56k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  2.56k|    {
 2676|  2.56k|        return decay_copy(t.begin());
 2677|  2.56k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1919|  10.1k|{
 1920|  10.1k|    return SCN_FWD(t);
  ------------------
  |  |  930|  10.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  10.1k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5356|  1.53k|{
 5357|  1.53k|    detail::check_scan_arg_types<Args...>();
 5358|  1.53k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  1.53k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5309|  1.53k|    {
 5310|  1.53k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  1.53k|    {
 5321|  1.53k|        return {detail::make_arg<
 5322|  1.53k|            kind, Context,
 5323|  1.53k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  1.53k|                                 typename Context::char_type>::value>(args)...};
 5325|  1.53k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5130|  1.53k|{
 5131|  1.53k|    return make_value<Context>(value).ref_value;
 5132|  1.53k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5080|  1.66k|{
 5081|  1.66k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  1.66k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  1.66k|                                  needs_context_tag>) {
 5085|  1.66k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  1.66k|    }
 5087|  1.66k|    else {
 5088|  1.66k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  1.66k|            value, context_tag<Context>{}));
 5090|  1.66k|    }
 5091|  1.66k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4919|  1.66k|    {                                                                        \
 4920|  1.66k|        return val;                                                          \
 4921|  1.66k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8551|  1.15k|{
 8552|  1.15k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  1.15k|    auto result = vscan_impl(buffer, format, args);
 8555|  1.15k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.15k, False: 0]
  |  |  ------------------
  ------------------
 8556|  1.15k|        return unexpected(result.error());
 8557|  1.15k|    }
 8558|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  1.15k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4680|  2.49k|{
 4681|  2.49k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|  2.49k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|  2.49k|                  "\n"
 4685|  2.49k|                  "Unsupported range type given as input to a scanning "
 4686|  2.49k|                  "function.\n"
 4687|  2.49k|                  "A range needs to have a character type (value type) "
 4688|  2.49k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|  2.49k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|  2.49k|                  "to be included.\n"
 4691|  2.49k|                  "See the scnlib documentation for more details.");
 4692|  2.49k|    static_assert(
 4693|  2.49k|        !std::is_same_v<T, custom_char_traits>,
 4694|  2.49k|        "\n"
 4695|  2.49k|        "Unsupported range type given as input to a scanning "
 4696|  2.49k|        "function.\n"
 4697|  2.49k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|  2.49k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|  2.49k|        "not supported.");
 4700|  2.49k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|  2.49k|                  "\n"
 4702|  2.49k|                  "Unsupported range type given as input to a scanning "
 4703|  2.49k|                  "function.\n"
 4704|  2.49k|                  "file_marker_found cannot be used as an "
 4705|  2.49k|                  "source range type to scn::scan.\n"
 4706|  2.49k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|  2.49k|                  "and do not provide an explicit source range, "
 4708|  2.49k|                  "or use scn::scan with a FILE* directly.");
 4709|  2.49k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|  2.49k|                  "\n"
 4711|  2.49k|                  "Unsupported range type given as input to a scanning "
 4712|  2.49k|                  "function.\n"
 4713|  2.49k|                  "In order to be scannable, a range needs to satisfy "
 4714|  2.49k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|  2.49k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|  2.49k|                  "\n"
 4717|  2.49k|                  "Unsupported range type given as input to a scanning "
 4718|  2.49k|                  "function.\n"
 4719|  2.49k|                  "A range needs to model forward_range and have a valid "
 4720|  2.49k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|  2.49k|                  "Examples of scannable ranges are std::string, "
 4722|  2.49k|                  "std::string_view, "
 4723|  2.49k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|  2.49k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|  2.49k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|  2.49k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4619|  2.49k|{
 4620|  2.49k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4620:19): [Folded - Ignored]
  ------------------
 4621|  2.49k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4622|  2.49k|    }
 4623|  2.49k|    else {
 4624|  2.49k|        return invalid_char_type{};
 4625|  2.49k|    }
 4626|  2.49k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  2.49k|    {
 2826|  2.49k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  2.49k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  2.49k|    {
 2807|  2.49k|        return t.data();
 2808|  2.49k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3201|  2.49k|    {
 3202|  2.49k|        return ranges::empty(derived())
  ------------------
  |  Branch (3202:16): [True: 0, False: 2.49k]
  ------------------
 3203|  2.49k|                   ? nullptr
 3204|  2.49k|                   : std::addressof(*ranges::begin(derived()));
 3205|  2.49k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|  2.49k|    {
 2976|  2.49k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|  2.49k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|  2.49k|    {
 2949|  2.49k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|  2.49k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3309|  3.84k|    {
 3310|  3.84k|        return m_iterator == m_sentinel;
 3311|  3.84k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3155|  4.99k|    {
 3156|  4.99k|        return static_cast<const D&>(*this);
 3157|  4.99k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  2.49k|    {
 2695|  2.49k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  2.49k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  2.49k|    {
 2676|  2.49k|        return decay_copy(t.begin());
 2677|  2.49k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3300|  57.9k|    {
 3301|  57.9k|        return m_iterator;
 3302|  57.9k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2900|  2.49k|    {
 2901|  2.49k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|  2.49k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2866|  2.49k|    {
 2867|  2.49k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|  2.49k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3316|  10.1k|    {
 3317|  10.1k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3318|  10.1k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|  2.49k|    {
 1447|  2.49k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  442|  2.49k|    {
  443|  2.49k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.49k|    {
 1148|  2.49k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  2.49k|    {
 2695|  2.49k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  2.49k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  2.49k|    {
 2676|  2.49k|        return decay_copy(t.begin());
 2677|  2.49k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3304|  26.4k|    {
 3305|  26.4k|        return m_sentinel;
 3306|  26.4k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7935|    768|    {
 7936|    768|        return m_str;
 7937|    768|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  1.53k|    {
 5387|  1.53k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5339|  1.53k|    {
 5340|  1.53k|        return m_argptrs;
 5341|  1.53k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5438|  4.60k|    {
 5439|  4.60k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|    768|{
 8781|    768|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|    768|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 768, False: 0]
  |  |  ------------------
  ------------------
 8782|    768|        return unexpected(result.error());
 8783|    768|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|    768|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1568|  2.49k|    {
 1569|  2.49k|        return has_value();
 1570|  2.49k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.99k|    {
  481|  4.99k|        return m_has_value;
  482|  4.99k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1574|  2.49k|    {
 1575|  2.49k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  2.49k|        return this->get_unexpected().error();
 1577|  2.49k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  2.49k|    {
  464|  2.49k|        return m_unexpected;
  465|  2.49k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|    832|    {
 1447|    832|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|    832|    {
  443|    832|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    832|    {
 1148|    832|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5334|  1.53k|    {
 5335|  1.53k|        return m_args;
 5336|  1.53k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.56k|    {
 2752|  2.56k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.56k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.56k|    {
 2734|  2.56k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.56k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.56k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3286|  19.7k|    {
 3287|  19.7k|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7656|  4.60k|{
 7657|  4.60k|    return s;
 7658|  4.60k|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7628|  4.60k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|    768|    {
 7932|    768|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1568|    832|    {
 1569|    832|        return has_value();
 1570|    832|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|    832|    {
  481|    832|        return m_has_value;
  482|    832|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8567|  1.15k|{
 8568|  1.15k|#if !SCN_DISABLE_LOCALE
 8569|  1.15k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  1.15k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  1.15k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  1.15k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  1.15k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.15k, False: 0]
  |  |  ------------------
  ------------------
 8576|  1.15k|        return unexpected(result.error());
 8577|  1.15k|    }
 8578|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  1.15k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5115|    128|{
 5116|    128|    check_scan_arg_types<T>();
 5117|       |
 5118|    128|    basic_scan_arg<Context> arg;
 5119|    128|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|    128|    arg.m_value = make_value<Context>(value);
 5121|    128|    return arg;
 5122|    128|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5201|  4.99k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|    192|{
 8592|    192|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|    192|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|    192|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 192, False: 0]
  |  |  ------------------
  ------------------
 8596|    192|        return unexpected(result.error());
 8597|    192|    }
 8598|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|    192|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5356|  1.53k|{
 5357|  1.53k|    detail::check_scan_arg_types<Args...>();
 5358|  1.53k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  1.53k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5309|  1.53k|    {
 5310|  1.53k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  1.53k|    {
 5321|  1.53k|        return {detail::make_arg<
 5322|  1.53k|            kind, Context,
 5323|  1.53k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  1.53k|                                 typename Context::char_type>::value>(args)...};
 5325|  1.53k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5130|  1.53k|{
 5131|  1.53k|    return make_value<Context>(value).ref_value;
 5132|  1.53k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5080|  1.66k|{
 5081|  1.66k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  1.66k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  1.66k|                                  needs_context_tag>) {
 5085|  1.66k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  1.66k|    }
 5087|  1.66k|    else {
 5088|  1.66k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  1.66k|            value, context_tag<Context>{}));
 5090|  1.66k|    }
 5091|  1.66k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4919|  1.66k|    {                                                                        \
 4920|  1.66k|        return val;                                                          \
 4921|  1.66k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7935|    768|    {
 7936|    768|        return m_str;
 7937|    768|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  1.53k|    {
 5387|  1.53k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5339|  1.53k|    {
 5340|  1.53k|        return m_argptrs;
 5341|  1.53k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|    768|{
 8781|    768|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|    768|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 768, False: 0]
  |  |  ------------------
  ------------------
 8782|    768|        return unexpected(result.error());
 8783|    768|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|    768|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|    832|    {
 1447|    832|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|    832|    {
  443|    832|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    832|    {
 1148|    832|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5334|  1.53k|    {
 5335|  1.53k|        return m_args;
 5336|  1.53k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|    768|    {
 7932|    768|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1568|    832|    {
 1569|    832|        return has_value();
 1570|    832|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|    832|    {
  481|    832|        return m_has_value;
  482|    832|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5115|    128|{
 5116|    128|    check_scan_arg_types<T>();
 5117|       |
 5118|    128|    basic_scan_arg<Context> arg;
 5119|    128|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|    128|    arg.m_value = make_value<Context>(value);
 5121|    128|    return arg;
 5122|    128|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5356|  1.53k|{
 5357|  1.53k|    detail::check_scan_arg_types<Args...>();
 5358|  1.53k|    return detail::scan_arg_store<Context, Args...>{};
 5359|  1.53k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5309|  1.53k|    {
 5310|  1.53k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5320|  1.53k|    {
 5321|  1.53k|        return {detail::make_arg<
 5322|  1.53k|            kind, Context,
 5323|  1.53k|            mapped_type_constant<remove_cvref_t<A>,
 5324|  1.53k|                                 typename Context::char_type>::value>(args)...};
 5325|  1.53k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5130|  1.53k|{
 5131|  1.53k|    return make_value<Context>(value).ref_value;
 5132|  1.53k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5080|  1.66k|{
 5081|  1.66k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5082|       |
 5083|  1.66k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5083:19): [Folded - Ignored]
  ------------------
 5084|  1.66k|                                  needs_context_tag>) {
 5085|  1.66k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.66k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5086|  1.66k|    }
 5087|  1.66k|    else {
 5088|  1.66k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5089|  1.66k|            value, context_tag<Context>{}));
 5090|  1.66k|    }
 5091|  1.66k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4919|  1.66k|    {                                                                        \
 4920|  1.66k|        return val;                                                          \
 4921|  1.66k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7935|    768|    {
 7936|    768|        return m_str;
 7937|    768|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5386|  1.53k|    {
 5387|  1.53k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5339|  1.53k|    {
 5340|  1.53k|        return m_argptrs;
 5341|  1.53k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8780|    768|{
 8781|    768|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|    768|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 768, False: 0]
  |  |  ------------------
  ------------------
 8782|    768|        return unexpected(result.error());
 8783|    768|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|    768|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_LPv0ELSE_0EEEONS0_10unexpectedIT_EE:
 1446|    832|    {
 1447|    832|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  442|    832|    {
  443|    832|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    832|    {
 1148|    832|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5334|  1.53k|    {
 5335|  1.53k|        return m_args;
 5336|  1.53k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|    768|    {
 7932|    768|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1568|    832|    {
 1569|    832|        return has_value();
 1570|    832|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|    832|    {
  481|    832|        return m_has_value;
  482|    832|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5115|    128|{
 5116|    128|    check_scan_arg_types<T>();
 5117|       |
 5118|    128|    basic_scan_arg<Context> arg;
 5119|    128|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5120|    128|    arg.m_value = make_value<Context>(value);
 5121|    128|    return arg;
 5122|    128|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  2.49k|    {
 2695|  2.49k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  2.49k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  2.49k|    {
 2676|  2.49k|        return decay_copy(t.begin());
 2677|  2.49k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1919|  17.4k|{
 1920|  17.4k|    return SCN_FWD(t);
  ------------------
  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  17.4k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8551|  1.15k|{
 8552|  1.15k|    auto buffer = make_scan_buffer(range);
 8553|       |
 8554|  1.15k|    auto result = vscan_impl(buffer, format, args);
 8555|  1.15k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.15k, False: 0]
  |  |  ------------------
  ------------------
 8556|  1.15k|        return unexpected(result.error());
 8557|  1.15k|    }
 8558|      0|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8559|  1.15k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4680|  2.49k|{
 4681|  2.49k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4682|       |
 4683|  2.49k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4684|  2.49k|                  "\n"
 4685|  2.49k|                  "Unsupported range type given as input to a scanning "
 4686|  2.49k|                  "function.\n"
 4687|  2.49k|                  "A range needs to have a character type (value type) "
 4688|  2.49k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4689|  2.49k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4690|  2.49k|                  "to be included.\n"
 4691|  2.49k|                  "See the scnlib documentation for more details.");
 4692|  2.49k|    static_assert(
 4693|  2.49k|        !std::is_same_v<T, custom_char_traits>,
 4694|  2.49k|        "\n"
 4695|  2.49k|        "Unsupported range type given as input to a scanning "
 4696|  2.49k|        "function.\n"
 4697|  2.49k|        "String types (std::basic_string, and std::basic_string_view) "
 4698|  2.49k|        "need to use std::char_traits. Strings with custom Traits are "
 4699|  2.49k|        "not supported.");
 4700|  2.49k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4701|  2.49k|                  "\n"
 4702|  2.49k|                  "Unsupported range type given as input to a scanning "
 4703|  2.49k|                  "function.\n"
 4704|  2.49k|                  "file_marker_found cannot be used as an "
 4705|  2.49k|                  "source range type to scn::scan.\n"
 4706|  2.49k|                  "To read from stdin, use scn::input or scn::prompt, "
 4707|  2.49k|                  "and do not provide an explicit source range, "
 4708|  2.49k|                  "or use scn::scan with a FILE* directly.");
 4709|  2.49k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4710|  2.49k|                  "\n"
 4711|  2.49k|                  "Unsupported range type given as input to a scanning "
 4712|  2.49k|                  "function.\n"
 4713|  2.49k|                  "In order to be scannable, a range needs to satisfy "
 4714|  2.49k|                  "`forward_range`. `input_range` is not sufficient.");
 4715|  2.49k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4716|  2.49k|                  "\n"
 4717|  2.49k|                  "Unsupported range type given as input to a scanning "
 4718|  2.49k|                  "function.\n"
 4719|  2.49k|                  "A range needs to model forward_range and have a valid "
 4720|  2.49k|                  "character type (char or wchar_t) to be scannable.\n"
 4721|  2.49k|                  "Examples of scannable ranges are std::string, "
 4722|  2.49k|                  "std::string_view, "
 4723|  2.49k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4724|  2.49k|                  "See the scnlib documentation for more details.");
 4725|       |
 4726|  2.49k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4727|  2.49k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4650|  2.49k|{
 4651|  2.49k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4651:19): [Folded - Ignored]
  ------------------
 4652|  2.49k|        return file_marker_found{};
 4653|  2.49k|    }
 4654|  2.49k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4654:24): [Folded - Ignored]
  ------------------
 4655|  2.49k|        if constexpr (ranges::range<Range>) {
 4656|  2.49k|            return insufficient_range{};
 4657|  2.49k|        }
 4658|  2.49k|        else {
 4659|  2.49k|            return invalid_input_range{};
 4660|  2.49k|        }
 4661|  2.49k|    }
 4662|  2.49k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4662:24): [Folded - Ignored]
  ------------------
 4663|  2.49k|        return invalid_char_type{};
 4664|  2.49k|    }
 4665|  2.49k|    else {
 4666|  2.49k|        return make_forward_scan_buffer(r);
 4667|  2.49k|    }
 4668|  2.49k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4484|  2.49k|{
 4485|  2.49k|    return basic_scan_forward_buffer_impl(range);
 4486|  2.49k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4377|  2.49k|    {
 4378|  2.49k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4352|  2.49k|    {
 4353|  2.49k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4121|  2.49k|    {
 4122|  2.49k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4036|  2.49k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2694|  2.49k|    {
 2695|  2.49k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  2.49k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2675|  2.49k|    {
 2676|  2.49k|        return decay_copy(t.begin());
 2677|  2.49k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3300|  2.49k|    {
 3301|  2.49k|        return m_iterator;
 3302|  2.49k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4381|  9.98k|    {
 4382|  9.98k|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4382:13): [True: 0, False: 9.98k]
  ------------------
 4383|      0|            return false;
 4384|      0|        }
 4385|  9.98k|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4385:13): [True: 7.48k, False: 2.49k]
  ------------------
 4386|  7.48k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4387|  7.48k|                                          this->m_current_view.begin(),
 4388|  7.48k|                                          this->m_current_view.end());
 4389|  7.48k|        }
 4390|  9.98k|        m_latest = *m_cursor;
 4391|  9.98k|        ++m_cursor;
 4392|  9.98k|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4393|  9.98k|        return true;
 4394|  9.98k|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  9.98k|    {
 2752|  9.98k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  9.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  9.98k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  9.98k|    {
 2734|  9.98k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  9.98k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  9.98k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3304|  9.98k|    {
 3305|  9.98k|        return m_sentinel;
 3306|  9.98k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4041|  2.49k|    {
 4042|  2.49k|        SCN_UNUSED(position);
  ------------------
  |  |  909|  2.49k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4043|  2.49k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1446|  2.49k|    {
 1447|  2.49k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  442|  2.49k|    {
  443|  2.49k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.49k|    {
 1148|  2.49k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7935|    768|    {
 7936|    768|        return m_str;
 7937|    768|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|    768|{
 8781|    768|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|    768|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 768, False: 0]
  |  |  ------------------
  ------------------
 8782|    768|        return unexpected(result.error());
 8783|    768|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|    768|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1568|  2.49k|    {
 1569|  2.49k|        return has_value();
 1570|  2.49k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.99k|    {
  481|  4.99k|        return m_has_value;
  482|  4.99k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1574|  2.49k|    {
 1575|  2.49k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  2.49k|        return this->get_unexpected().error();
 1577|  2.49k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  2.49k|    {
  464|  2.49k|        return m_unexpected;
  465|  2.49k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|    832|    {
 1447|    832|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|    832|    {
  443|    832|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    832|    {
 1148|    832|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2751|  2.49k|    {
 2752|  2.49k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2753|  2.49k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2733|  2.49k|    {
 2734|  2.49k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2735|  2.49k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3286|  2.49k|    {
 3287|  2.49k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|    768|    {
 7932|    768|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1568|    832|    {
 1569|    832|        return has_value();
 1570|    832|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  480|    832|    {
  481|    832|        return m_has_value;
  482|    832|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8567|  1.15k|{
 8568|  1.15k|#if !SCN_DISABLE_LOCALE
 8569|  1.15k|    auto buffer = detail::make_scan_buffer(range);
 8570|       |
 8571|  1.15k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8572|  1.15k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8573|  1.15k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8574|       |
 8575|  1.15k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.15k, False: 0]
  |  |  ------------------
  ------------------
 8576|  1.15k|        return unexpected(result.error());
 8577|  1.15k|    }
 8578|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8579|       |#else
 8580|       |    static_assert(dependent_false<Locale>::value,
 8581|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8582|       |
 8583|       |    return {};
 8584|       |#endif
 8585|  1.15k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8591|    192|{
 8592|    192|    auto buffer = detail::make_scan_buffer(range);
 8593|       |
 8594|    192|    auto result = detail::vscan_value_impl(buffer, arg);
 8595|    192|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 192, False: 0]
  |  |  ------------------
  ------------------
 8596|    192|        return unexpected(result.error());
 8597|    192|    }
 8598|      0|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8599|    192|}
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7935|    768|    {
 7936|    768|        return m_str;
 7937|    768|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|    768|{
 8781|    768|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|    768|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 768, False: 0]
  |  |  ------------------
  ------------------
 8782|    768|        return unexpected(result.error());
 8783|    768|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|    768|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|    832|    {
 1447|    832|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|    832|    {
  443|    832|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    832|    {
 1148|    832|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|    768|    {
 7932|    768|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1568|    832|    {
 1569|    832|        return has_value();
 1570|    832|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  480|    832|    {
  481|    832|        return m_has_value;
  482|    832|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7935|    768|    {
 7936|    768|        return m_str;
 7937|    768|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8780|    768|{
 8781|    768|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|    768|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 768, False: 0]
  |  |  ------------------
  ------------------
 8782|    768|        return unexpected(result.error());
 8783|    768|    }
 8784|      0|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8785|    768|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_LPv0ELSK_0EEEONS0_10unexpectedIT_EE:
 1446|    832|    {
 1447|    832|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  442|    832|    {
  443|    832|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|    832|    {
 1148|    832|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7931|    768|    {
 7932|    768|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1568|    832|    {
 1569|    832|        return has_value();
 1570|    832|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|    832|    {
  481|    832|        return m_has_value;
  482|    832|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3538|   247k|    {
 3539|   247k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   247k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3540|   247k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3544|  1.19M|    {
 3545|  1.19M|        return m_code == good;
 3546|  1.19M|    }
_ZNK3scn2v310scan_error4codeEv:
 3555|  5.76k|    {
 3556|  5.76k|        return m_code;
 3557|  5.76k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3300|  5.56M|    {
 3301|  5.56M|        return m_iterator;
 3302|  5.56M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3300|  76.9k|    {
 3301|  76.9k|        return m_iterator;
 3302|  76.9k|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6220|   177k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6232|  56.8k|    {
 6233|  56.8k|        if constexpr (!SCN_DISABLE_LOCALE) {
  ------------------
  |  |  114|  56.8k|#define SCN_DISABLE_LOCALE 0
  ------------------
  |  Branch (6233:23): [Folded - Ignored]
  ------------------
 6234|  56.8k|            m_specs.localized = true;
 6235|  56.8k|        }
 6236|      0|        else {
 6237|      0|            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6238|      0|        }
 6239|  56.8k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6263|   120k|    {
 6264|   120k|        m_specs.type = type;
 6265|   120k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6336|   177k|    {
 6337|   177k|        return static_cast<bool>(m_error);
 6338|   177k|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3579|  5.76k|{
 3580|  5.76k|    return a.code() == b;
 3581|  5.76k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3583|  5.76k|{
 3584|  5.76k|    return !(a == b);
 3585|  5.76k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7023|  56.8k|{
 7024|  56.8k|    switch (type) {
 7025|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7025:9): [True: 0, False: 56.8k]
  ------------------
 7026|      0|            return arg_type_category::none;
 7027|       |
 7028|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7028:9): [True: 0, False: 56.8k]
  ------------------
 7029|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7029:9): [True: 0, False: 56.8k]
  ------------------
 7030|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7030:9): [True: 0, False: 56.8k]
  ------------------
 7031|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7031:9): [True: 0, False: 56.8k]
  ------------------
 7032|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7032:9): [True: 0, False: 56.8k]
  ------------------
 7033|      0|            return arg_type_category::integer;
 7034|       |
 7035|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7035:9): [True: 0, False: 56.8k]
  ------------------
 7036|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7036:9): [True: 0, False: 56.8k]
  ------------------
 7037|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7037:9): [True: 0, False: 56.8k]
  ------------------
 7038|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7038:9): [True: 0, False: 56.8k]
  ------------------
 7039|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7039:9): [True: 0, False: 56.8k]
  ------------------
 7040|      0|            return arg_type_category::unsigned_integer;
 7041|       |
 7042|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7042:9): [True: 0, False: 56.8k]
  ------------------
 7043|      0|            return arg_type_category::pointer;
 7044|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7044:9): [True: 0, False: 56.8k]
  ------------------
 7045|      0|            return arg_type_category::boolean;
 7046|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7046:9): [True: 0, False: 56.8k]
  ------------------
 7047|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7047:9): [True: 0, False: 56.8k]
  ------------------
 7048|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7048:9): [True: 0, False: 56.8k]
  ------------------
 7049|      0|            return arg_type_category::character;
 7050|       |
 7051|  14.7k|        case arg_type::float_type:
  ------------------
  |  Branch (7051:9): [True: 14.7k, False: 42.1k]
  ------------------
 7052|  35.7k|        case arg_type::double_type:
  ------------------
  |  Branch (7052:9): [True: 21.0k, False: 35.7k]
  ------------------
 7053|  56.8k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7053:9): [True: 21.0k, False: 35.7k]
  ------------------
 7054|  56.8k|            return arg_type_category::floating;
 7055|       |
 7056|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7056:9): [True: 0, False: 56.8k]
  ------------------
 7057|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7057:9): [True: 0, False: 56.8k]
  ------------------
 7058|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7058:9): [True: 0, False: 56.8k]
  ------------------
 7059|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7059:9): [True: 0, False: 56.8k]
  ------------------
 7060|      0|            return arg_type_category::string;
 7061|       |
 7062|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7062:9): [True: 0, False: 56.8k]
  ------------------
 7063|      0|            return arg_type_category::custom;
 7064|       |
 7065|      0|            SCN_CLANG_PUSH
 7066|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7067|      0|        default:
  ------------------
  |  Branch (7067:9): [True: 0, False: 56.8k]
  ------------------
 7068|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7069|  56.8k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7070|  56.8k|            SCN_CLANG_POP
 7071|  56.8k|    }
 7072|       |
 7073|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7074|  56.8k|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2866|   246k|    {
 2867|   246k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2868|   246k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2900|   246k|    {
 2901|   246k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2902|   246k|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2923|   246k|    {
 2924|   246k|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2925|   246k|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2932|   246k|    {
 2933|   246k|        return fn::impl(std::forward<T>(t));
 2934|   246k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3624|     16|{
 3625|     16|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|     16|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|     16|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3624|    376|{
 3625|    376|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    376|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|    376|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7153|   177k|{
 7154|   177k|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7154:9): [True: 120k, False: 56.8k]
  ------------------
 7155|   177k|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7155:10): [True: 0, False: 120k]
  ------------------
 7156|   120k|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7156:10): [True: 0, False: 120k]
  ------------------
 7157|      0|        SCN_UNLIKELY_ATTR
 7158|      0|        return handler.on_error("Invalid type specifier for float type");
 7159|      0|    }
 7160|   177k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4165|  41.8M|    {
 4166|  41.8M|        return m_end == nullptr;
 4167|  41.8M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3685|   100k|{
 3686|   100k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3686:19): [Folded - Ignored]
  ------------------
 3687|   100k|                                          const CharT*, const CharT*>) {
 3688|   100k|        return {first, last};
 3689|   100k|    }
 3690|   100k|    else {
 3691|   100k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3692|   100k|    }
 3693|   100k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4181|   465k|    {
 4182|   465k|        if (!stores_parent()) {
  ------------------
  |  Branch (4182:13): [True: 0, False: 465k]
  ------------------
 4183|      0|            return make_string_view_from_pointers(
 4184|      0|                static_cast<const CharT*>(m_begin) + position(),
 4185|      0|                static_cast<const CharT*>(m_end));
 4186|      0|        }
 4187|   465k|        return parent()->get_segment_starting_at(position());
 4188|   465k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4175|  23.4M|    {
 4176|  23.4M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  23.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|  23.4M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4178|  23.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4071|   465k|    {
 4072|   465k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   465k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 212k, False: 252k]
  |  |  ------------------
  ------------------
 4073|   465k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4074|   212k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4075|   212k|        }
 4076|   252k|        const auto start = pos - m_putback_buffer.size();
 4077|   252k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   252k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   252k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4078|   252k|        return m_current_view.substr(start);
 4079|   252k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4170|   329k|    {
 4171|   329k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4172|   329k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4173|   329k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4160|   851k|    {
 4161|   851k|        return m_position;
 4162|   851k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4093|   360k|    {
 4094|   360k|        return m_is_contiguous;
 4095|   360k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4165|   209k|    {
 4166|   209k|        return m_end == nullptr;
 4167|   209k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4181|  2.49k|    {
 4182|  2.49k|        if (!stores_parent()) {
  ------------------
  |  Branch (4182:13): [True: 0, False: 2.49k]
  ------------------
 4183|      0|            return make_string_view_from_pointers(
 4184|      0|                static_cast<const CharT*>(m_begin) + position(),
 4185|      0|                static_cast<const CharT*>(m_end));
 4186|      0|        }
 4187|  2.49k|        return parent()->get_segment_starting_at(position());
 4188|  2.49k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4175|   113k|    {
 4176|   113k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   113k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   113k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4177|   113k|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4178|   113k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4071|  2.49k|    {
 4072|  2.49k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49k]
  |  |  ------------------
  ------------------
 4073|  2.49k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4074|      0|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4075|      0|        }
 4076|  2.49k|        const auto start = pos - m_putback_buffer.size();
 4077|  2.49k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4078|  2.49k|        return m_current_view.substr(start);
 4079|  2.49k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4170|  6.33k|    {
 4171|  6.33k|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  6.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4172|  6.33k|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4173|  6.33k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4160|  8.83k|    {
 4161|  8.83k|        return m_position;
 4162|  8.83k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4093|  7.48k|    {
 4094|  7.48k|        return m_is_contiguous;
 4095|  7.48k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3150|  1.20M|    {
 3151|  1.20M|        return static_cast<D&>(*this);
 3152|  1.20M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|   604k|    {
 2949|   604k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   604k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|   604k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|   604k|    {
 2976|   604k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   604k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|   604k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3191|   604k|    {
 3192|   604k|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 46, False: 604k]
  ------------------
 3193|   604k|                   ? nullptr
 3194|   604k|                   : std::addressof(*ranges::begin(derived()));
 3195|   604k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3150|  2.68k|    {
 3151|  2.68k|        return static_cast<D&>(*this);
 3152|  2.68k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2948|  1.34k|    {
 2949|  1.34k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2950|  1.34k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 2975|  1.34k|    {
 2976|  1.34k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2977|  1.34k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3191|  1.34k|    {
 3192|  1.34k|        return ranges::empty(derived())
  ------------------
  |  Branch (3192:16): [True: 0, False: 1.34k]
  ------------------
 3193|  1.34k|                   ? nullptr
 3194|  1.34k|                   : std::addressof(*ranges::begin(derived()));
 3195|  1.34k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8129|  86.7k|    {
 8130|  86.7k|        return ranges::subrange{begin(), end()};
 8131|  86.7k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8113|   259k|    {
 8114|   259k|        return m_current;
 8115|   259k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8121|  86.7k|    {
 8122|  86.7k|        return ranges::default_sentinel;
 8123|  86.7k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3286|  1.37M|    {
 3287|  1.37M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7951|   387k|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|   120k|    {
 1808|   120k|        return detail::transform_error_impl(std::move(*this),
 1809|   120k|                                            std::forward<F>(f));
 1810|   120k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|   120k|{
 1294|   120k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   120k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   120k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   120k|            return result(*std::forward<Exp>(exp));
 1298|   120k|        }
 1299|       |
 1300|   120k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   120k|        return result(unexpect, monostate{});
 1302|   120k|    }
 1303|   120k|    else {
 1304|   120k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   120k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   120k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 119k, False: 142]
  |  |  ------------------
  ------------------
 1306|   120k|                   ? result(*std::forward<Exp>(exp))
 1307|   120k|                   : result(unexpect,
 1308|    142|                            trivial_invoke(std::forward<F>(f),
 1309|    142|                                           std::forward<Exp>(exp).error()));
 1310|   120k|    }
 1311|   120k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  1.32M|    {
  481|  1.32M|        return m_has_value;
  482|  1.32M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1633|   449k|    {
 1634|   449k|        return std::move(value());
 1635|   449k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1597|   518k|    {
 1598|   518k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   518k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   518k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   518k|        return this->get_value();
 1600|   518k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   518k|    {
  447|   518k|        return m_value;
  448|   518k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1400|   476k|    {
 1401|   476k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   476k|    {
  433|   476k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   686k|    {
 1148|   686k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1181|    263|{
 1182|    263|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|    263|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1584|    351|    {
 1585|    351|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    351|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    351|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|    351|        return std::move(this->get_unexpected().error());
 1587|    351|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|    531|    {
  464|    531|        return m_unexpected;
  465|    531|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  356|  1.32k|    {
  357|  1.32k|        return m_unexpected;
  358|  1.32k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1456|   114k|    {
 1457|   114k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|   117k|    {
  443|   117k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8129|  1.92k|    {
 8130|  1.92k|        return ranges::subrange{begin(), end()};
 8131|  1.92k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8113|  3.84k|    {
 8114|  3.84k|        return m_current;
 8115|  3.84k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8121|  1.92k|    {
 8122|  1.92k|        return ranges::default_sentinel;
 8123|  1.92k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3286|  17.2k|    {
 3287|  17.2k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|  2.49k|    {
 1808|  2.49k|        return detail::transform_error_impl(std::move(*this),
 1809|  2.49k|                                            std::forward<F>(f));
 1810|  2.49k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|  2.49k|{
 1294|  2.49k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.49k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.49k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.49k|            return result(*std::forward<Exp>(exp));
 1298|  2.49k|        }
 1299|       |
 1300|  2.49k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.49k|        return result(unexpect, monostate{});
 1302|  2.49k|    }
 1303|  2.49k|    else {
 1304|  2.49k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.49k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.49k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.49k, False: 0]
  |  |  ------------------
  ------------------
 1306|  2.49k|                   ? result(*std::forward<Exp>(exp))
 1307|  2.49k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  2.49k|    }
 1311|  2.49k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  20.1k|    {
  481|  20.1k|        return m_has_value;
  482|  20.1k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1633|  8.83k|    {
 1634|  8.83k|        return std::move(value());
 1635|  8.83k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1597|  8.83k|    {
 1598|  8.83k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  8.83k|        return this->get_value();
 1600|  8.83k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  8.83k|    {
  447|  8.83k|        return m_value;
  448|  8.83k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1400|  2.49k|    {
 1401|  2.49k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  2.49k|    {
  433|  2.49k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.4k|    {
 1148|  14.4k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1456|  4.99k|    {
 1457|  4.99k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  11.9k|    {
  443|  11.9k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  342|  2.17k|    {
  343|  2.17k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.17k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  2.17k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|  2.88k|    {
 1447|  2.88k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|   125k|    {
  443|   125k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   727k|    {
 1148|   727k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|   510k|    {
 1401|   510k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   510k|    {
  433|   510k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1568|   855k|    {
 1569|   855k|        return has_value();
 1570|   855k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  480|  1.33M|    {
  481|  1.33M|        return m_has_value;
  482|  1.33M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1574|  3.34k|    {
 1575|  3.34k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  3.34k|        return this->get_unexpected().error();
 1577|  3.34k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  3.34k|    {
  464|  3.34k|        return m_unexpected;
  465|  3.34k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|   383k|    {
 1634|   383k|        return std::move(value());
 1635|   383k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|   474k|    {
 1598|   474k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   474k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   474k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   474k|        return this->get_value();
 1600|   474k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  446|   474k|    {
  447|   474k|        return m_value;
  448|   474k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1446|  5.56k|    {
 1447|  5.56k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  442|  9.21k|    {
  443|  9.21k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  14.4k|    {
 1148|  14.4k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1400|  5.18k|    {
 1401|  5.18k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  5.18k|    {
  433|  5.18k|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1568|  16.8k|    {
 1569|  16.8k|        return has_value();
 1570|  16.8k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  480|  27.4k|    {
  481|  27.4k|        return m_has_value;
  482|  27.4k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1574|  6.72k|    {
 1575|  6.72k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  6.72k|        return this->get_unexpected().error();
 1577|  6.72k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  6.72k|    {
  464|  6.72k|        return m_unexpected;
  465|  6.72k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1633|  3.84k|    {
 1634|  3.84k|        return std::move(value());
 1635|  3.84k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1597|  3.84k|    {
 1598|  3.84k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  3.84k|        return this->get_value();
 1600|  3.84k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  446|  3.84k|    {
  447|  3.84k|        return m_value;
  448|  3.84k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|   128k|    {
 1808|   128k|        return detail::transform_error_impl(std::move(*this),
 1809|   128k|                                            std::forward<F>(f));
 1810|   128k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|   128k|{
 1294|   128k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   128k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   128k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   128k|            return result(*std::forward<Exp>(exp));
 1298|   128k|        }
 1299|       |
 1300|   128k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   128k|        return result(unexpect, monostate{});
 1302|   128k|    }
 1303|   128k|    else {
 1304|   128k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   128k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   128k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 128k, False: 121]
  |  |  ------------------
  ------------------
 1306|   128k|                   ? result(*std::forward<Exp>(exp))
 1307|   128k|                   : result(unexpect,
 1308|    121|                            trivial_invoke(std::forward<F>(f),
 1309|    121|                                           std::forward<Exp>(exp).error()));
 1310|   128k|    }
 1311|   128k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|   469k|    {
  481|   469k|        return m_has_value;
  482|   469k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|   128k|    {
 1634|   128k|        return std::move(value());
 1635|   128k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|   165k|    {
 1598|   165k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   165k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   165k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   165k|        return this->get_value();
 1600|   165k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|   165k|    {
  447|   165k|        return m_value;
  448|   165k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1584|    121|    {
 1585|    121|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    121|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    121|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1586|    121|        return std::move(this->get_unexpected().error());
 1587|    121|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  463|    133|    {
  464|    133|        return m_unexpected;
  465|    133|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|   122k|    {
 1457|   122k|    }
_ZN3scn2v310scan_errorC2Ev:
 3533|   836k|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  3.25k|    {
 1447|  3.25k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4209|  3.33M|    {
 4210|  3.33M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  3.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4211|       |
 4212|  3.33M|        if (!stores_parent()) {
  ------------------
  |  Branch (4212:13): [True: 0, False: 3.33M]
  ------------------
 4213|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4214|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|      0|            return *ptr;
 4216|      0|        }
 4217|       |
 4218|  3.33M|        auto res = read_at_position();
 4219|  3.33M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  3.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|  3.33M|        return parent()->get_character_at(m_position);
 4221|  3.33M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4274|  13.8M|    {
 4275|  13.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  13.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4276|       |
 4277|  13.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4277:13): [True: 0, False: 13.8M]
  ------------------
 4278|      0|            return true;
 4279|      0|        }
 4280|       |
 4281|  13.8M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  13.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.9M, False: 1.94M]
  |  |  ------------------
  ------------------
 4282|  11.9M|            return true;
 4283|  11.9M|        }
 4284|       |
 4285|  3.88M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4285:16): [True: 1.94M, False: 1.93M]
  ------------------
 4286|  1.94M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4286:17): [True: 1.82k, False: 1.93M]
  ------------------
 4287|  1.82k|                return false;
 4288|  1.82k|            }
 4289|  1.94M|        }
 4290|  1.93M|        return true;
 4291|  1.94M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4051|  18.0M|    {
 4052|  18.0M|        return m_putback_buffer.size() + m_current_view.size();
 4053|  18.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4082|  3.33M|    {
 4083|  3.33M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  3.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.81M, False: 1.51M]
  |  |  ------------------
  ------------------
 4084|  3.33M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4085|  1.81M|            return m_putback_buffer[pos];
 4086|  1.81M|        }
 4087|  1.51M|        const auto start = pos - m_putback_buffer.size();
 4088|  1.51M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4089|  1.51M|        return m_current_view[start];
 4090|  1.51M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4195|  7.45M|    {
 4196|  7.45M|        ++m_position;
 4197|  7.45M|        (void)read_at_position();
 4198|  7.45M|        return *this;
 4199|  7.45M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4244|  3.50M|    {
 4245|  3.50M|        return !(lhs == rhs);
 4246|  3.50M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4239|  3.81M|    {
 4240|  3.81M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4240:16): [True: 3.81M, False: 0]
  |  Branch (4240:46): [True: 412k, False: 3.40M]
  ------------------
 4241|  3.81M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4250|  1.08M|    {
 4251|  1.08M|        return x.is_at_end();
 4252|  1.08M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4294|  3.09M|    {
 4295|  3.09M|        if (m_end) {
  ------------------
  |  Branch (4295:13): [True: 0, False: 3.09M]
  ------------------
 4296|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4297|      0|        }
 4298|  3.09M|        if (!m_begin) {
  ------------------
  |  Branch (4298:13): [True: 0, False: 3.09M]
  ------------------
 4299|      0|            return true;
 4300|      0|        }
 4301|  3.09M|        return !read_at_position();
 4302|  3.09M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1400|   801k|    {
 1401|   801k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   801k|    {
  433|   801k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   802k|    {
 1148|   802k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  342|    209|    {
  343|    209|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    209|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|    209|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|    531|    {
 1447|    531|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|    531|    {
  443|    531|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|    664|    {
  352|    664|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    664|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|    664|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1568|   352k|    {
 1569|   352k|        return has_value();
 1570|   352k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEERT_v:
 1623|  68.4k|    {
 1624|  68.4k|        return value();
 1625|  68.4k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  342|    455|    {
  343|    455|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    455|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|    455|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1446|    106|    {
 1447|    106|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  442|    106|    {
  443|    106|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   172k|    {
 1148|   172k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|   172k|    {
 1401|   172k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|   172k|    {
  433|   172k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1568|   172k|    {
 1569|   172k|        return has_value();
 1570|   172k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|   344k|    {
  481|   344k|        return m_has_value;
  482|   344k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1574|    106|    {
 1575|    106|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    106|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    106|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|    106|        return this->get_unexpected().error();
 1577|    106|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|    106|    {
  464|    106|        return m_unexpected;
  465|    106|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|   172k|    {
 1634|   172k|        return std::move(value());
 1635|   172k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|   172k|    {
 1598|   172k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   172k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   172k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   172k|        return this->get_value();
 1600|   172k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|   172k|    {
  447|   172k|        return m_value;
  448|   172k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3304|  4.25M|    {
 3305|  4.25M|        return m_sentinel;
 3306|  4.25M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  342|    419|    {
  343|    419|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|    419|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|    419|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  356|   957k|    {
  357|   957k|        return m_unexpected;
  358|   957k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  351|   252k|    {
  352|   252k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   252k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|   252k|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  342|  1.19M|    {
  343|  1.19M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.19M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|  1.19M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  356|  1.19M|    {
  357|  1.19M|        return m_unexpected;
  358|  1.19M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  351|  1.19M|    {
  352|  1.19M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.19M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  353|  1.19M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1181|    209|{
 1182|    209|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|    209|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  342|   252k|    {
  343|   252k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   252k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  344|   252k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1574|    180|    {
 1575|    180|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    180|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    180|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|    180|        return this->get_unexpected().error();
 1577|    180|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|   119k|    {
 1447|   119k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|   119k|    {
  443|   119k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.36M|    {
 1148|  1.36M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1400|  68.9k|    {
 1401|  68.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  68.9k|    {
  433|  68.9k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1446|   681k|    {
 1447|   681k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|   681k|    {
  443|   681k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1568|  1.48M|    {
 1569|  1.48M|        return has_value();
 1570|  1.48M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  2.63M|    {
  481|  2.63M|        return m_has_value;
  482|  2.63M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1574|   331k|    {
 1575|   331k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   331k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   331k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   331k|        return this->get_unexpected().error();
 1577|   331k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|   331k|    {
  464|   331k|        return m_unexpected;
  465|   331k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1400|   128k|    {
 1401|   128k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|   128k|    {
  433|   128k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   128k|    {
 1148|   128k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEERT_v:
 1623|   377k|    {
 1624|   377k|        return value();
 1625|   377k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1597|   706k|    {
 1598|   706k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   706k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   706k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   706k|        return this->get_value();
 1600|   706k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   706k|    {
  447|   706k|        return m_value;
  448|   706k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1568|  8.29k|    {
 1569|  8.29k|        return has_value();
 1570|  8.29k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|   256k|    {
  481|   256k|        return m_has_value;
  482|   256k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1633|   119k|    {
 1634|   119k|        return std::move(value());
 1635|   119k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1597|   128k|    {
 1598|   128k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   128k|        return this->get_value();
 1600|   128k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|   128k|    {
  447|   128k|        return m_value;
  448|   128k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|   329k|    {
 1808|   329k|        return detail::transform_error_impl(std::move(*this),
 1809|   329k|                                            std::forward<F>(f));
 1810|   329k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|   329k|{
 1294|   329k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   329k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   329k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   329k|            return result(*std::forward<Exp>(exp));
 1298|   329k|        }
 1299|       |
 1300|   329k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   329k|        return result(unexpect, monostate{});
 1302|   329k|    }
 1303|   329k|    else {
 1304|   329k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   329k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   329k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 329k, False: 209]
  |  |  ------------------
  ------------------
 1306|   329k|                   ? result(*std::forward<Exp>(exp))
 1307|   329k|                   : result(unexpect,
 1308|    209|                            trivial_invoke(std::forward<F>(f),
 1309|    209|                                           std::forward<Exp>(exp).error()));
 1310|   329k|    }
 1311|   329k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1400|   495k|    {
 1401|   495k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|   495k|    {
  433|   495k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1456|    209|    {
 1457|    209|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1633|   329k|    {
 1634|   329k|        return std::move(value());
 1635|   329k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3300|   136k|    {
 3301|   136k|        return m_iterator;
 3302|   136k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3304|   136k|    {
 3305|   136k|        return m_sentinel;
 3306|   136k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1568|   805k|    {
 1569|   805k|        return has_value();
 1570|   805k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  1.25M|    {
  481|  1.25M|        return m_has_value;
  482|  1.25M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1574|  4.17k|    {
 1575|  4.17k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  4.17k|        return this->get_unexpected().error();
 1577|  4.17k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  4.17k|    {
  464|  4.17k|        return m_unexpected;
  465|  4.17k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1633|   357k|    {
 1634|   357k|        return std::move(value());
 1635|   357k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1597|   449k|    {
 1598|   449k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   449k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   449k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   449k|        return this->get_value();
 1600|   449k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|   449k|    {
  447|   449k|        return m_value;
  448|   449k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  321|   224k|{
  322|   224k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  323|   224k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3286|   112k|    {
 3287|   112k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4261|  2.00M|    {
 4262|  2.00M|        return !x.is_at_end();
 4263|  2.00M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1400|  92.3k|    {
 1401|  92.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  432|  92.3k|    {
  433|  92.3k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|    133|    {
 1447|    133|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|    133|    {
  443|    133|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   304k|    {
 1148|   304k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|   304k|    {
 1401|   304k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|   304k|    {
  433|   304k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1568|   175k|    {
 1569|   175k|        return has_value();
 1570|   175k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEERT_v:
 1623|  36.8k|    {
 1624|  36.8k|        return value();
 1625|  36.8k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|     76|    {
 1447|     76|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  442|     76|    {
  443|     76|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   171k|    {
 1148|   171k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|   171k|    {
 1401|   171k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|   171k|    {
  433|   171k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1568|   171k|    {
 1569|   171k|        return has_value();
 1570|   171k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  480|   343k|    {
  481|   343k|        return m_has_value;
  482|   343k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1574|     76|    {
 1575|     76|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     76|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     76|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|     76|        return this->get_unexpected().error();
 1577|     76|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|     76|    {
  464|     76|        return m_unexpected;
  465|     76|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|   171k|    {
 1634|   171k|        return std::move(value());
 1635|   171k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|   171k|    {
 1598|   171k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   171k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   171k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   171k|        return this->get_value();
 1600|   171k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  446|   171k|    {
  447|   171k|        return m_value;
  448|   171k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1574|     12|    {
 1575|     12|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|     12|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     12|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|     12|        return this->get_unexpected().error();
 1577|     12|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|   127k|    {
 1447|   127k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|   127k|    {
  443|   127k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   708k|    {
 1148|   708k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1400|  37.3k|    {
 1401|  37.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  37.3k|    {
  433|  37.3k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|   491k|    {
 1447|   491k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|   491k|    {
  443|   491k|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1568|   836k|    {
 1569|   836k|        return has_value();
 1570|   836k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  1.43M|    {
  481|  1.43M|        return m_has_value;
  482|  1.43M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1574|   355k|    {
 1575|   355k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   355k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   355k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|   355k|        return this->get_unexpected().error();
 1577|   355k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|   355k|    {
  464|   355k|        return m_unexpected;
  465|   355k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1400|   130k|    {
 1401|   130k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|   130k|    {
  433|   130k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   130k|    {
 1148|   130k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_LPv0EEERT_v:
 1623|   121k|    {
 1624|   121k|        return value();
 1625|   121k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1597|   121k|    {
 1598|   121k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   121k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   121k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   121k|        return this->get_value();
 1600|   121k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|   121k|    {
  447|   121k|        return m_value;
  448|   121k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1568|  2.38k|    {
 1569|  2.38k|        return has_value();
 1570|  2.38k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|   261k|    {
  481|   261k|        return m_has_value;
  482|   261k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1633|   128k|    {
 1634|   128k|        return std::move(value());
 1635|   128k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1597|   130k|    {
 1598|   130k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   130k|        return this->get_value();
 1600|   130k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|   130k|    {
  447|   130k|        return m_value;
  448|   130k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1400|  51.7k|    {
 1401|  51.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  51.7k|    {
  433|  51.7k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|   249k|    {
 2826|   249k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|   249k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|   249k|    {
 2807|   249k|        return t.data();
 2808|   249k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1400|  92.0k|    {
 1401|  92.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  432|  92.0k|    {
  433|  92.0k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1446|  11.6k|    {
 1447|  11.6k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  442|  11.6k|    {
  443|  11.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   750k|    {
 1148|   750k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1400|   725k|    {
 1401|   725k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  432|   725k|    {
  433|   725k|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEEOT_v:
 1633|   492k|    {
 1634|   492k|        return std::move(value());
 1635|   492k|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1181|   244k|{
 1182|   244k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1183|   244k|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1807|   119k|    {
 1808|   119k|        return detail::transform_error_impl(std::move(*this),
 1809|   119k|                                            std::forward<F>(f));
 1810|   119k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1293|   119k|{
 1294|   119k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   119k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   119k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   119k|            return result(*std::forward<Exp>(exp));
 1298|   119k|        }
 1299|       |
 1300|   119k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   119k|        return result(unexpect, monostate{});
 1302|   119k|    }
 1303|   119k|    else {
 1304|   119k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   119k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   119k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 119k, False: 0]
  |  |  ------------------
  ------------------
 1306|   119k|                   ? result(*std::forward<Exp>(exp))
 1307|   119k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|   119k|    }
 1311|   119k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|   119k|    {
 1401|   119k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|   119k|    {
  433|   119k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   119k|    {
 1148|   119k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|   119k|    {
 1569|   119k|        return has_value();
 1570|   119k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   239k|    {
  481|   239k|        return m_has_value;
  482|   239k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1633|   119k|    {
 1634|   119k|        return std::move(value());
 1635|   119k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|   119k|    {
 1598|   119k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   119k|        return this->get_value();
 1600|   119k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   119k|    {
  447|   119k|        return m_value;
  448|   119k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1793|   114k|    {
 1794|   114k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|   114k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1293|   114k|{
 1294|   114k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   114k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   114k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   114k|            return result(*std::forward<Exp>(exp));
 1298|   114k|        }
 1299|       |
 1300|   114k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   114k|        return result(unexpect, monostate{});
 1302|   114k|    }
 1303|   114k|    else {
 1304|   114k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   114k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   114k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 114k]
  |  |  ------------------
  ------------------
 1306|   114k|                   ? result(*std::forward<Exp>(exp))
 1307|   114k|                   : result(unexpect,
 1308|   114k|                            trivial_invoke(std::forward<F>(f),
 1309|   114k|                                           std::forward<Exp>(exp).error()));
 1310|   114k|    }
 1311|   114k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1623|  91.6k|    {
 1624|  91.6k|        return value();
 1625|  91.6k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3638|  37.8k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1643|  8.29k|    {
 1644|  8.29k|        return &value();
 1645|  8.29k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2694|  75.5k|    {
 2695|  75.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  75.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  75.5k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2675|  75.5k|    {
 2676|  75.5k|        return decay_copy(t.begin());
 2677|  75.5k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1919|  75.5k|{
 1920|  75.5k|    return SCN_FWD(t);
  ------------------
  |  |  930|  75.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  75.5k|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3638|  52.0k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1807|   128k|    {
 1808|   128k|        return detail::transform_error_impl(std::move(*this),
 1809|   128k|                                            std::forward<F>(f));
 1810|   128k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1293|   128k|{
 1294|   128k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   128k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   128k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   128k|            return result(*std::forward<Exp>(exp));
 1298|   128k|        }
 1299|       |
 1300|   128k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   128k|        return result(unexpect, monostate{});
 1302|   128k|    }
 1303|   128k|    else {
 1304|   128k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   128k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   128k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 128k, False: 0]
  |  |  ------------------
  ------------------
 1306|   128k|                   ? result(*std::forward<Exp>(exp))
 1307|   128k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|   128k|    }
 1311|   128k|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|   128k|    {
 1401|   128k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|   128k|    {
  433|   128k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|   128k|    {
 1148|   128k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|   128k|    {
 1569|   128k|        return has_value();
 1570|   128k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|   256k|    {
  481|   256k|        return m_has_value;
  482|   256k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|   128k|    {
 1634|   128k|        return std::move(value());
 1635|   128k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|   128k|    {
 1598|   128k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   128k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   128k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|   128k|        return this->get_value();
 1600|   128k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|   128k|    {
  447|   128k|        return m_value;
  448|   128k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1793|   122k|    {
 1794|   122k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|   122k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1293|   122k|{
 1294|   122k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|   122k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|   122k|        if (SCN_LIKELY(exp.has_value())) {
 1297|   122k|            return result(*std::forward<Exp>(exp));
 1298|   122k|        }
 1299|       |
 1300|   122k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|   122k|        return result(unexpect, monostate{});
 1302|   122k|    }
 1303|   122k|    else {
 1304|   122k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|   122k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   122k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 122k]
  |  |  ------------------
  ------------------
 1306|   122k|                   ? result(*std::forward<Exp>(exp))
 1307|   122k|                   : result(unexpect,
 1308|   122k|                            trivial_invoke(std::forward<F>(f),
 1309|   122k|                                           std::forward<Exp>(exp).error()));
 1310|   122k|    }
 1311|   122k|}
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3618|   122k|    {
 3619|   122k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1623|  91.3k|    {
 1624|  91.3k|        return value();
 1625|  91.3k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1643|  2.38k|    {
 1644|  2.38k|        return &value();
 1645|  2.38k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3618|   114k|    {
 3619|   114k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  6.91k|    {
 1447|  6.91k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4209|  18.8k|    {
 4210|  18.8k|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4211|       |
 4212|  18.8k|        if (!stores_parent()) {
  ------------------
  |  Branch (4212:13): [True: 0, False: 18.8k]
  ------------------
 4213|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4214|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|      0|            return *ptr;
 4216|      0|        }
 4217|       |
 4218|  18.8k|        auto res = read_at_position();
 4219|  18.8k|        SCN_EXPECT(res);
  ------------------
  |  |  924|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4220|  18.8k|        return parent()->get_character_at(m_position);
 4221|  18.8k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4274|  62.0k|    {
 4275|  62.0k|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  62.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4276|       |
 4277|  62.0k|        if (!stores_parent()) {
  ------------------
  |  Branch (4277:13): [True: 0, False: 62.0k]
  ------------------
 4278|      0|            return true;
 4279|      0|        }
 4280|       |
 4281|  62.0k|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  62.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 52.0k, False: 9.98k]
  |  |  ------------------
  ------------------
 4282|  52.0k|            return true;
 4283|  52.0k|        }
 4284|       |
 4285|  19.9k|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4285:16): [True: 9.98k, False: 9.98k]
  ------------------
 4286|  9.98k|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4286:17): [True: 0, False: 9.98k]
  ------------------
 4287|      0|                return false;
 4288|      0|            }
 4289|  9.98k|        }
 4290|  9.98k|        return true;
 4291|  9.98k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4051|  88.3k|    {
 4052|  88.3k|        return m_putback_buffer.size() + m_current_view.size();
 4053|  88.3k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4082|  18.8k|    {
 4083|  18.8k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.3k, False: 2.49k]
  |  |  ------------------
  ------------------
 4084|  18.8k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4085|  16.3k|            return m_putback_buffer[pos];
 4086|  16.3k|        }
 4087|  2.49k|        const auto start = pos - m_putback_buffer.size();
 4088|  2.49k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4089|  2.49k|        return m_current_view[start];
 4090|  2.49k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4195|  22.6k|    {
 4196|  22.6k|        ++m_position;
 4197|  22.6k|        (void)read_at_position();
 4198|  22.6k|        return *this;
 4199|  22.6k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4244|  6.33k|    {
 4245|  6.33k|        return !(lhs == rhs);
 4246|  6.33k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4239|  8.83k|    {
 4240|  8.83k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4240:16): [True: 8.83k, False: 0]
  |  Branch (4240:46): [True: 2.49k, False: 6.33k]
  ------------------
 4241|  8.83k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4250|  15.5k|    {
 4251|  15.5k|        return x.is_at_end();
 4252|  15.5k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4294|  20.5k|    {
 4295|  20.5k|        if (m_end) {
  ------------------
  |  Branch (4295:13): [True: 0, False: 20.5k]
  ------------------
 4296|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4297|      0|        }
 4298|  20.5k|        if (!m_begin) {
  ------------------
  |  Branch (4298:13): [True: 0, False: 20.5k]
  ------------------
 4299|      0|            return true;
 4300|      0|        }
 4301|  20.5k|        return !read_at_position();
 4302|  20.5k|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3777|  4.99k|{
 3778|  4.99k|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3778:19): [Folded - Ignored]
  ------------------
 3779|  4.99k|        return utf8_code_point_length_by_starting_code_unit(ch);
 3780|  4.99k|    }
 3781|  4.99k|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3781:24): [Folded - Ignored]
  ------------------
 3782|  4.99k|        return utf16_code_point_length_by_starting_code_unit(ch);
 3783|  4.99k|    }
 3784|  4.99k|    else {
 3785|       |        // utf-32
 3786|  4.99k|        static_assert(sizeof(U) == 4);
 3787|  4.99k|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  4.99k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3788|  4.99k|        return 1;
 3789|  4.99k|    }
 3790|  4.99k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1400|  11.3k|    {
 1401|  11.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  11.3k|    {
  433|  11.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  11.3k|    {
 1148|  11.3k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1568|  2.49k|    {
 1569|  2.49k|        return has_value();
 1570|  2.49k|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 3983|  4.99k|{
 3984|  4.99k|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (3984:19): [Folded - Ignored]
  ------------------
 3985|  4.99k|        return decode_utf8_code_point_exhaustive(input);
 3986|  4.99k|    }
 3987|  4.99k|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (3987:24): [Folded - Ignored]
  ------------------
 3988|  4.99k|        return decode_utf16_code_point_exhaustive(input);
 3989|  4.99k|    }
 3990|  4.99k|    else {
 3991|  4.99k|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  4.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3992|  4.99k|        auto cp = static_cast<char32_t>(input.front());
 3993|  4.99k|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  4.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.49k, False: 2.49k]
  |  |  ------------------
  ------------------
 3994|  2.49k|            return invalid_code_point;
 3995|  2.49k|        }
 3996|  2.49k|        return cp;
 3997|  4.99k|    }
 3998|  4.99k|}
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.92k|    {
 1148|  1.92k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  1.92k|    {
 1401|  1.92k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  432|  1.92k|    {
  433|  1.92k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1568|  1.92k|    {
 1569|  1.92k|        return has_value();
 1570|  1.92k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  480|  3.84k|    {
  481|  3.84k|        return m_has_value;
  482|  3.84k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  1.92k|    {
 1634|  1.92k|        return std::move(value());
 1635|  1.92k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  1.92k|    {
 1598|  1.92k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  1.92k|        return this->get_value();
 1600|  1.92k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  446|  1.92k|    {
  447|  1.92k|        return m_value;
  448|  1.92k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3304|  33.4k|    {
 3305|  33.4k|        return m_sentinel;
 3306|  33.4k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1446|  2.49k|    {
 1447|  2.49k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  442|  2.49k|    {
  443|  2.49k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  20.1k|    {
 1148|  20.1k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeELPv0ELSB_0EEEONS0_10unexpectedIT_EE:
 1446|  11.3k|    {
 1447|  11.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  11.3k|    {
  443|  11.3k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1568|  22.6k|    {
 1569|  22.6k|        return has_value();
 1570|  22.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  43.9k|    {
  481|  43.9k|        return m_has_value;
  482|  43.9k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1574|  9.98k|    {
 1575|  9.98k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  9.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  9.98k|        return this->get_unexpected().error();
 1577|  9.98k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  9.98k|    {
  464|  9.98k|        return m_unexpected;
  465|  9.98k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1400|  2.49k|    {
 1401|  2.49k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|  2.49k|    {
  433|  2.49k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.49k|    {
 1148|  2.49k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_LPv0EEERT_v:
 1597|  6.33k|    {
 1598|  6.33k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  6.33k|        return this->get_value();
 1600|  6.33k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  6.33k|    {
  447|  6.33k|        return m_value;
  448|  6.33k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  480|  4.99k|    {
  481|  4.99k|        return m_has_value;
  482|  4.99k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_LPv0EEEOT_v:
 1633|  2.49k|    {
 1634|  2.49k|        return std::move(value());
 1635|  2.49k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_LPv0EEERT_v:
 1597|  2.49k|    {
 1598|  2.49k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.49k|        return this->get_value();
 1600|  2.49k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  446|  2.49k|    {
  447|  2.49k|        return m_value;
  448|  2.49k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1807|  6.33k|    {
 1808|  6.33k|        return detail::transform_error_impl(std::move(*this),
 1809|  6.33k|                                            std::forward<F>(f));
 1810|  6.33k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1293|  6.33k|{
 1294|  6.33k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  6.33k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  6.33k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  6.33k|            return result(*std::forward<Exp>(exp));
 1298|  6.33k|        }
 1299|       |
 1300|  6.33k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  6.33k|        return result(unexpect, monostate{});
 1302|  6.33k|    }
 1303|  6.33k|    else {
 1304|  6.33k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  6.33k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  6.33k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.33k, False: 0]
  |  |  ------------------
  ------------------
 1306|  6.33k|                   ? result(*std::forward<Exp>(exp))
 1307|  6.33k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  6.33k|    }
 1311|  6.33k|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1400|  6.33k|    {
 1401|  6.33k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  432|  6.33k|    {
  433|  6.33k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_LPv0EEEOT_v:
 1633|  6.33k|    {
 1634|  6.33k|        return std::move(value());
 1635|  6.33k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1568|  16.8k|    {
 1569|  16.8k|        return has_value();
 1570|  16.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  480|  28.8k|    {
  481|  28.8k|        return m_has_value;
  482|  28.8k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1574|  9.40k|    {
 1575|  9.40k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  9.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  9.40k|        return this->get_unexpected().error();
 1577|  9.40k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  463|  9.40k|    {
  464|  9.40k|        return m_unexpected;
  465|  9.40k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1633|  2.49k|    {
 1634|  2.49k|        return std::move(value());
 1635|  2.49k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1597|  2.49k|    {
 1598|  2.49k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.49k|        return this->get_value();
 1600|  2.49k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.49k|    {
  447|  2.49k|        return m_value;
  448|  2.49k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4261|  4.99k|    {
 4262|  4.99k|        return !x.is_at_end();
 4263|  4.99k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  11.3k|    {
 1148|  11.3k|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1400|  11.3k|    {
 1401|  11.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  11.3k|    {
  433|  11.3k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1568|  2.49k|    {
 1569|  2.49k|        return has_value();
 1570|  2.49k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  480|  20.1k|    {
  481|  20.1k|        return m_has_value;
  482|  20.1k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1597|  8.83k|    {
 1598|  8.83k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  8.83k|        return this->get_value();
 1600|  8.83k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  446|  8.83k|    {
  447|  8.83k|        return m_value;
  448|  8.83k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  1.92k|    {
 1148|  1.92k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1400|  1.92k|    {
 1401|  1.92k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  432|  1.92k|    {
  433|  1.92k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  2.49k|    {
 1808|  2.49k|        return detail::transform_error_impl(std::move(*this),
 1809|  2.49k|                                            std::forward<F>(f));
 1810|  2.49k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  2.49k|{
 1294|  2.49k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.49k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.49k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.49k|            return result(*std::forward<Exp>(exp));
 1298|  2.49k|        }
 1299|       |
 1300|  2.49k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.49k|        return result(unexpect, monostate{});
 1302|  2.49k|    }
 1303|  2.49k|    else {
 1304|  2.49k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.49k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.49k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.49k, False: 0]
  |  |  ------------------
  ------------------
 1306|  2.49k|                   ? result(*std::forward<Exp>(exp))
 1307|  2.49k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  2.49k|    }
 1311|  2.49k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1633|  8.83k|    {
 1634|  8.83k|        return std::move(value());
 1635|  8.83k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1456|  3.64k|    {
 1457|  3.64k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1568|  1.92k|    {
 1569|  1.92k|        return has_value();
 1570|  1.92k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  480|  3.84k|    {
  481|  3.84k|        return m_has_value;
  482|  3.84k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1633|  1.92k|    {
 1634|  1.92k|        return std::move(value());
 1635|  1.92k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1597|  1.92k|    {
 1598|  1.92k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  1.92k|        return this->get_value();
 1600|  1.92k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  446|  1.92k|    {
  447|  1.92k|        return m_value;
  448|  1.92k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1446|  2.49k|    {
 1447|  2.49k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  442|  2.49k|    {
  443|  2.49k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  18.8k|    {
 1148|  18.8k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeELPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1446|  9.98k|    {
 1447|  9.98k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  442|  9.98k|    {
  443|  9.98k|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1568|  21.3k|    {
 1569|  21.3k|        return has_value();
 1570|  21.3k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  480|  39.9k|    {
  481|  39.9k|        return m_has_value;
  482|  39.9k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1574|  8.64k|    {
 1575|  8.64k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  8.64k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.64k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1576|  8.64k|        return this->get_unexpected().error();
 1577|  8.64k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  463|  8.64k|    {
  464|  8.64k|        return m_unexpected;
  465|  8.64k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1400|  2.49k|    {
 1401|  2.49k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.49k|    {
  433|  2.49k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.49k|    {
 1148|  2.49k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_LPv0EEERT_v:
 1597|  6.33k|    {
 1598|  6.33k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  6.33k|        return this->get_value();
 1600|  6.33k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  446|  6.33k|    {
  447|  6.33k|        return m_value;
  448|  6.33k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  480|  4.99k|    {
  481|  4.99k|        return m_has_value;
  482|  4.99k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_LPv0EEEOT_v:
 1633|  2.49k|    {
 1634|  2.49k|        return std::move(value());
 1635|  2.49k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_LPv0EEERT_v:
 1597|  2.49k|    {
 1598|  2.49k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.49k|        return this->get_value();
 1600|  2.49k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  446|  2.49k|    {
  447|  2.49k|        return m_value;
  448|  2.49k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1807|  6.33k|    {
 1808|  6.33k|        return detail::transform_error_impl(std::move(*this),
 1809|  6.33k|                                            std::forward<F>(f));
 1810|  6.33k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1293|  6.33k|{
 1294|  6.33k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  6.33k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  6.33k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  6.33k|            return result(*std::forward<Exp>(exp));
 1298|  6.33k|        }
 1299|       |
 1300|  6.33k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  6.33k|        return result(unexpect, monostate{});
 1302|  6.33k|    }
 1303|  6.33k|    else {
 1304|  6.33k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  6.33k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  6.33k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.33k, False: 0]
  |  |  ------------------
  ------------------
 1306|  6.33k|                   ? result(*std::forward<Exp>(exp))
 1307|  6.33k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  6.33k|    }
 1311|  6.33k|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1400|  6.33k|    {
 1401|  6.33k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  432|  6.33k|    {
  433|  6.33k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_LPv0EEEOT_v:
 1633|  6.33k|    {
 1634|  6.33k|        return std::move(value());
 1635|  6.33k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|  1.34k|    {
 2826|  1.34k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|  1.34k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|  1.34k|    {
 2807|  1.34k|        return t.data();
 2808|  1.34k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1807|  2.49k|    {
 1808|  2.49k|        return detail::transform_error_impl(std::move(*this),
 1809|  2.49k|                                            std::forward<F>(f));
 1810|  2.49k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ELPv0ESE_EEDaOT_OT0_:
 1293|  2.49k|{
 1294|  2.49k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.49k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.49k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.49k|            return result(*std::forward<Exp>(exp));
 1298|  2.49k|        }
 1299|       |
 1300|  2.49k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.49k|        return result(unexpect, monostate{});
 1302|  2.49k|    }
 1303|  2.49k|    else {
 1304|  2.49k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.49k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.49k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.49k, False: 0]
  |  |  ------------------
  ------------------
 1306|  2.49k|                   ? result(*std::forward<Exp>(exp))
 1307|  2.49k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  2.49k|    }
 1311|  2.49k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1400|  2.49k|    {
 1401|  2.49k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  432|  2.49k|    {
  433|  2.49k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.49k|    {
 1148|  2.49k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|  2.49k|    {
 1569|  2.49k|        return has_value();
 1570|  2.49k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.99k|    {
  481|  4.99k|        return m_has_value;
  482|  4.99k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_LPv0EEEOT_v:
 1633|  2.49k|    {
 1634|  2.49k|        return std::move(value());
 1635|  2.49k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_LPv0EEERT_v:
 1597|  2.49k|    {
 1598|  2.49k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.49k|        return this->get_value();
 1600|  2.49k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.49k|    {
  447|  2.49k|        return m_value;
  448|  2.49k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1793|  4.99k|    {
 1794|  4.99k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|  4.99k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_LPv0ESB_EEDaOT_OT0_:
 1293|  4.99k|{
 1294|  4.99k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  4.99k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  4.99k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  4.99k|            return result(*std::forward<Exp>(exp));
 1298|  4.99k|        }
 1299|       |
 1300|  4.99k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  4.99k|        return result(unexpect, monostate{});
 1302|  4.99k|    }
 1303|  4.99k|    else {
 1304|  4.99k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  4.99k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  4.99k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 4.99k]
  |  |  ------------------
  ------------------
 1306|  4.99k|                   ? result(*std::forward<Exp>(exp))
 1307|  4.99k|                   : result(unexpect,
 1308|  4.99k|                            trivial_invoke(std::forward<F>(f),
 1309|  4.99k|                                           std::forward<Exp>(exp).error()));
 1310|  4.99k|    }
 1311|  4.99k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3638|    384|    auto&& SCN_TRY_TMP = (x);                          \
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2694|  2.11k|    {
 2695|  2.11k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2696|  2.11k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2675|  2.11k|    {
 2676|  2.11k|        return decay_copy(t.begin());
 2677|  2.11k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1919|  2.11k|{
 1920|  2.11k|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.11k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1921|  2.11k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3638|    960|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1807|  2.49k|    {
 1808|  2.49k|        return detail::transform_error_impl(std::move(*this),
 1809|  2.49k|                                            std::forward<F>(f));
 1810|  2.49k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ELPv0ESD_EEDaOT_OT0_:
 1293|  2.49k|{
 1294|  2.49k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  2.49k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  2.49k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  2.49k|            return result(*std::forward<Exp>(exp));
 1298|  2.49k|        }
 1299|       |
 1300|  2.49k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  2.49k|        return result(unexpect, monostate{});
 1302|  2.49k|    }
 1303|  2.49k|    else {
 1304|  2.49k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  2.49k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.49k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.49k, False: 0]
  |  |  ------------------
  ------------------
 1306|  2.49k|                   ? result(*std::forward<Exp>(exp))
 1307|  2.49k|                   : result(unexpect,
 1308|      0|                            trivial_invoke(std::forward<F>(f),
 1309|      0|                                           std::forward<Exp>(exp).error()));
 1310|  2.49k|    }
 1311|  2.49k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1400|  2.49k|    {
 1401|  2.49k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  432|  2.49k|    {
  433|  2.49k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1147|  2.49k|    {
 1148|  2.49k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1568|  2.49k|    {
 1569|  2.49k|        return has_value();
 1570|  2.49k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  480|  4.99k|    {
  481|  4.99k|        return m_has_value;
  482|  4.99k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1633|  2.49k|    {
 1634|  2.49k|        return std::move(value());
 1635|  2.49k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1597|  2.49k|    {
 1598|  2.49k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1599|  2.49k|        return this->get_value();
 1600|  2.49k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  446|  2.49k|    {
  447|  2.49k|        return m_value;
  448|  2.49k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1793|  3.64k|    {
 1794|  3.64k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1795|  3.64k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_LPv0ESA_EEDaOT_OT0_:
 1293|  3.64k|{
 1294|  3.64k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1294:19): [Folded - Ignored]
  ------------------
 1295|  3.64k|        using result = expected<expected_value_type<Exp>, monostate>;
 1296|  3.64k|        if (SCN_LIKELY(exp.has_value())) {
 1297|  3.64k|            return result(*std::forward<Exp>(exp));
 1298|  3.64k|        }
 1299|       |
 1300|  3.64k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1301|  3.64k|        return result(unexpect, monostate{});
 1302|  3.64k|    }
 1303|  3.64k|    else {
 1304|  3.64k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1305|  3.64k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.64k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 3.64k]
  |  |  ------------------
  ------------------
 1306|  3.64k|                   ? result(*std::forward<Exp>(exp))
 1307|  3.64k|                   : result(unexpect,
 1308|  3.64k|                            trivial_invoke(std::forward<F>(f),
 1309|  3.64k|                                           std::forward<Exp>(exp).error()));
 1310|  3.64k|    }
 1311|  3.64k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3618|  3.64k|    {
 3619|  3.64k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3618|  4.99k|    {
 3619|  4.99k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1400|  13.1k|    {
 1401|  13.1k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  432|  13.1k|    {
  433|  13.1k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3624|  1.78k|{
 3625|  1.78k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.78k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3626|  1.78k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2825|   130k|    {
 2826|   130k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2827|   130k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2806|   130k|    {
 2807|   130k|        return t.data();
 2808|   130k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5426|   223k|    {
 5427|   223k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 223k]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|   223k|        return static_cast<std::size_t>(m_desc &
 5432|   223k|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|   223k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5451|   446k|    {
 5452|   446k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|   446k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5394|   223k|    {
 5395|   223k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 223k]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|   223k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 223k]
  |  |  ------------------
  ------------------
 5403|      0|            return {};
 5404|      0|        }
 5405|       |
 5406|   223k|        const auto t = type(id);
 5407|   223k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 223k]
  |  |  ------------------
  ------------------
 5408|      0|            return {};
 5409|      0|        }
 5410|       |
 5411|   223k|        basic_scan_arg<Context> arg;
 5412|   223k|        arg.m_type = t;
 5413|   223k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 223k, False: 0]
  ------------------
 5414|   223k|            arg.m_value.ref_value = m_builtin_values[id];
 5415|   223k|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|   223k|        return arg;
 5420|   223k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5460|   223k|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|   223k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|   223k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|   223k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|   223k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5455|   223k|    {
 5456|   223k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|   223k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5207|   421k|    {
 5208|   421k|        return m_type != detail::arg_type::none_type;
 5209|   421k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  42.0k|{
 8378|  42.0k|#define SCN_VISIT(Type)                                         \
 8379|  42.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  42.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  42.0k|    }                                                           \
 8382|  42.0k|    else {                                                      \
 8383|  42.0k|        return vis(monostate_val);                              \
 8384|  42.0k|    }
 8385|       |
 8386|  42.0k|    monostate monostate_val{};
 8387|       |
 8388|  42.0k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 42.0k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 42.0k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 42.0k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 42.0k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 42.0k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 42.0k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 42.0k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 42.0k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 42.0k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 42.0k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 42.0k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 42.0k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 42.0k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 42.0k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 42.0k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|  10.8k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 10.8k, False: 31.2k]
  ------------------
 8420|  10.8k|            SCN_VISIT(float);
  ------------------
  |  | 8379|  10.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  10.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  10.8k|    }                                                           \
  |  | 8382|  10.8k|    else {                                                      \
  |  | 8383|  10.8k|        return vis(monostate_val);                              \
  |  | 8384|  10.8k|    }
  ------------------
 8421|  15.6k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 15.6k, False: 26.4k]
  ------------------
 8422|  15.6k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  15.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  15.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  15.6k|    }                                                           \
  |  | 8382|  15.6k|    else {                                                      \
  |  | 8383|  15.6k|        return vis(monostate_val);                              \
  |  | 8384|  15.6k|    }
  ------------------
 8423|  15.6k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 15.6k, False: 26.4k]
  ------------------
 8424|  15.6k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|  15.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  15.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  15.6k|    }                                                           \
  |  | 8382|  15.6k|    else {                                                      \
  |  | 8383|  15.6k|        return vis(monostate_val);                              \
  |  | 8384|  15.6k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 42.0k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 42.0k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 42.0k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 42.0k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 42.0k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 42.0k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 42.0k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 42.0k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 42.0k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  42.0k|            SCN_CLANG_POP
 8456|  42.0k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5505|   173k|    {
 5506|   173k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8098|  86.7k|    {
 8099|  86.7k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8016|   173k|    {
 8017|   173k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4314|   120k|{
 4315|   120k|    if (is_contiguous()) {
  ------------------
  |  Branch (4315:9): [True: 0, False: 120k]
  ------------------
 4316|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4317|      0|                                ranges::default_sentinel};
 4318|      0|    }
 4319|   120k|    return ranges::subrange{forward_iterator{this, 0},
 4320|   120k|                            ranges::default_sentinel};
 4321|   120k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4147|   120k|    {
 4148|   120k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4149|   120k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4150|   120k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  33.3k|{
 8378|  33.3k|#define SCN_VISIT(Type)                                         \
 8379|  33.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  33.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  33.3k|    }                                                           \
 8382|  33.3k|    else {                                                      \
 8383|  33.3k|        return vis(monostate_val);                              \
 8384|  33.3k|    }
 8385|       |
 8386|  33.3k|    monostate monostate_val{};
 8387|       |
 8388|  33.3k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 33.3k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 33.3k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 33.3k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 33.3k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 33.3k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 33.3k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 33.3k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 33.3k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 33.3k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 33.3k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 33.3k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 33.3k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 33.3k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 33.3k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 33.3k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|  7.95k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 7.95k, False: 25.4k]
  ------------------
 8420|  7.95k|            SCN_VISIT(float);
  ------------------
  |  | 8379|  7.95k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  7.95k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  7.95k|    }                                                           \
  |  | 8382|  7.95k|    else {                                                      \
  |  | 8383|  7.95k|        return vis(monostate_val);                              \
  |  | 8384|  7.95k|    }
  ------------------
 8421|  12.7k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 12.7k, False: 20.6k]
  ------------------
 8422|  12.7k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  12.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  12.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  12.7k|    }                                                           \
  |  | 8382|  12.7k|    else {                                                      \
  |  | 8383|  12.7k|        return vis(monostate_val);                              \
  |  | 8384|  12.7k|    }
  ------------------
 8423|  12.7k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 12.7k, False: 20.6k]
  ------------------
 8424|  12.7k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|  12.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  12.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  12.7k|    }                                                           \
  |  | 8382|  12.7k|    else {                                                      \
  |  | 8383|  12.7k|        return vis(monostate_val);                              \
  |  | 8384|  12.7k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 33.3k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 33.3k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 33.3k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 33.3k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 33.3k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 33.3k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 33.3k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 33.3k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 33.3k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  33.3k|            SCN_CLANG_POP
 8456|  33.3k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  86.4k|{
 7005|  86.4k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  86.4k|    handler.check_args_exhausted();
 7007|  86.4k|    return handler.get_error();
 7008|  86.4k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  86.4k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  86.4k|    auto begin = format.data();
 6974|  86.4k|    auto it = begin;
 6975|  86.4k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   171k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 86.4k, False: 85.5k]
  ------------------
 6978|  86.4k|        const auto ch = *it++;
 6979|  86.4k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 86.4k, False: 0]
  ------------------
 6980|  86.4k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  86.4k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  86.4k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 960, False: 85.5k]
  ------------------
 6984|    960|                return;
 6985|    960|            }
 6986|  86.4k|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|  86.4k|    }
 6997|       |
 6998|  85.5k|    handler.on_literal_text(begin, end);
 6999|  85.5k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6902|  86.4k|{
 6903|  86.4k|    struct id_adapter {
 6904|  86.4k|        constexpr void operator()()
 6905|  86.4k|        {
 6906|  86.4k|            arg_id = handler.on_arg_id();
 6907|  86.4k|        }
 6908|  86.4k|        constexpr void operator()(std::size_t id)
 6909|  86.4k|        {
 6910|  86.4k|            arg_id = handler.on_arg_id(id);
 6911|  86.4k|        }
 6912|       |
 6913|  86.4k|        constexpr void on_error(const char* msg)
 6914|  86.4k|        {
 6915|  86.4k|            SCN_UNLIKELY_ATTR
 6916|  86.4k|            handler.on_error(msg);
 6917|  86.4k|        }
 6918|       |
 6919|  86.4k|        Handler& handler;
 6920|  86.4k|        std::size_t arg_id;
 6921|  86.4k|    };
 6922|       |
 6923|  86.4k|    ++begin;
 6924|  86.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  86.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.4k]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|  86.4k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 86.4k]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|  86.4k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 86.4k]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|  86.4k|    else {
 6936|  86.4k|        auto adapter = id_adapter{handler, 0};
 6937|  86.4k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  86.4k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  86.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.4k]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|  86.4k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 86.4k]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|  86.4k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 86.4k, False: 0]
  ------------------
 6948|  86.4k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  86.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.4k]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|  86.4k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  86.4k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.4k]
  |  |  |  Branch (859:45): [True: 0, False: 86.4k]
  |  |  |  Branch (859:45): [True: 0, False: 86.4k]
  |  |  ------------------
  ------------------
 6954|      0|                handler.on_error("Unknown format specifier");
 6955|      0|                return begin;
 6956|      0|            }
 6957|  86.4k|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|  86.4k|    }
 6964|  86.4k|    return begin + 1;
 6965|  86.4k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 7999|   173k|    {
 8000|   173k|        return m_args.get(id);
 8001|   173k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8009|   173k|    {
 8010|   173k|        return m_locale;
 8011|   173k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5526|   173k|    {
 5527|   173k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 5528|      0|            on_error(
 5529|      0|                "Cannot switch from manual to automatic argument indexing");
 5530|      0|            return 0;
 5531|      0|        }
 5532|       |
 5533|   173k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|   173k|        do_check_arg_id(id);
 5535|   173k|        return id;
 5536|   173k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6014|   173k|{
 6015|   173k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|   173k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|   173k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  86.4k|{
 6404|  86.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  86.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  86.4k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 86.4k, False: 0]
  |  Branch (6405:26): [True: 0, False: 86.4k]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|  86.4k|    handler();
 6410|  86.4k|    return begin;
 6411|  86.4k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  86.4k|        {
 6906|  86.4k|            arg_id = handler.on_arg_id();
 6907|  86.4k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5212|   346k|    {
 5213|   346k|        return m_type;
 5214|   346k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5521|   173k|    {
 5522|   173k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|   173k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5510|   346k|    {
 5511|   346k|        return m_format.data();
 5512|   346k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|  86.4k|    {
 7083|  86.4k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  86.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  86.4k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6818|  86.4k|{
 6819|  86.4k|    auto do_presentation = [&]() -> const CharT* {
 6820|  86.4k|        if (*begin == CharT{'['}) {
 6821|  86.4k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  86.4k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  86.4k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  86.4k|                return begin;
 6827|  86.4k|            }
 6828|  86.4k|            handler.on_character_set_string(set);
 6829|  86.4k|            return begin;
 6830|  86.4k|        }
 6831|  86.4k|        if (*begin == CharT{'/'}) {
 6832|  86.4k|            return parse_presentation_regex(begin, end, handler);
 6833|  86.4k|        }
 6834|  86.4k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  86.4k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  86.4k|            handler.on_error("Invalid type specifier in format string");
 6837|  86.4k|            return begin;
 6838|  86.4k|        }
 6839|  86.4k|        handler.on_type(type);
 6840|  86.4k|        return begin;
 6841|  86.4k|    };
 6842|       |
 6843|  86.4k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 86.4k, False: 0]
  |  Branch (6843:28): [True: 86.4k, False: 0]
  ------------------
 6844|  86.4k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 86.4k, False: 0]
  |  Branch (6844:36): [True: 58.4k, False: 28.0k]
  ------------------
 6845|  58.4k|        return do_presentation();
 6846|  58.4k|    }
 6847|       |
 6848|  28.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  28.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28.0k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  28.0k|    begin = parse_align(begin, end, handler);
 6854|  28.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  28.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28.0k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|  28.0k|    begin = parse_width(begin, end, handler);
 6860|  28.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  28.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28.0k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|  28.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 28.0k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  28.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 28.0k, False: 0]
  ------------------
 6879|  28.0k|        handler.on_localized();
 6880|  28.0k|        ++begin;
 6881|  28.0k|    }
 6882|  28.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  28.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28.0k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|  28.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 28.0k, False: 0]
  |  Branch (6887:25): [True: 0, False: 28.0k]
  ------------------
 6888|      0|        do_presentation();
 6889|      0|    }
 6890|  28.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  28.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28.0k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|  28.0k|    return begin;
 6896|  28.0k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6467|   173k|{
 6468|   173k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 117k, False: 56.0k]
  |  Branch (6468:33): [True: 117k, False: 0]
  ------------------
 6469|   173k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 56.0k, False: 0]
  |  Branch (6469:33): [True: 56.0k, False: 0]
  ------------------
 6470|   173k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|  58.4k|    auto do_presentation = [&]() -> const CharT* {
 6820|  58.4k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 0, False: 58.4k]
  ------------------
 6821|      0|            auto set = parse_presentation_set(begin, end, handler);
 6822|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|      0|            handler.on_character_set_string(set);
 6829|      0|            return begin;
 6830|      0|        }
 6831|  58.4k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 58.4k]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|  58.4k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  58.4k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  58.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 58.4k]
  |  |  ------------------
  ------------------
 6836|      0|            handler.on_error("Invalid type specifier in format string");
 6837|      0|            return begin;
 6838|      0|        }
 6839|  58.4k|        handler.on_type(type);
 6840|  58.4k|        return begin;
 6841|  58.4k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6415|   117k|{
 6416|   117k|    switch (type) {
 6417|      0|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 0, False: 117k]
  ------------------
 6418|      0|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 0, False: 117k]
  ------------------
 6419|      0|            return presentation_type::int_binary;
 6420|      0|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 0, False: 117k]
  ------------------
 6421|      0|            return presentation_type::int_decimal;
 6422|      0|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 0, False: 117k]
  ------------------
 6423|      0|            return presentation_type::int_generic;
 6424|      0|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 0, False: 117k]
  ------------------
 6425|      0|            return presentation_type::int_unsigned_decimal;
 6426|      0|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 0, False: 117k]
  ------------------
 6427|      0|            return presentation_type::int_octal;
 6428|      0|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 0, False: 117k]
  ------------------
 6429|      0|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 0, False: 117k]
  ------------------
 6430|      0|            return presentation_type::int_hex;
 6431|      0|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 0, False: 117k]
  ------------------
 6432|      0|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 0, False: 117k]
  ------------------
 6433|      0|            return presentation_type::int_arbitrary_base;
 6434|  67.2k|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 67.2k, False: 49.9k]
  ------------------
 6435|  67.2k|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 0, False: 117k]
  ------------------
 6436|  67.2k|            return presentation_type::float_hex;
 6437|    436|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 436, False: 116k]
  ------------------
 6438|    436|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 0, False: 117k]
  ------------------
 6439|    436|            return presentation_type::float_scientific;
 6440|  14.7k|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 14.7k, False: 102k]
  ------------------
 6441|  14.7k|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 0, False: 117k]
  ------------------
 6442|  14.7k|            return presentation_type::float_fixed;
 6443|  34.7k|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 34.7k, False: 82.3k]
  ------------------
 6444|  34.7k|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 0, False: 117k]
  ------------------
 6445|  34.7k|            return presentation_type::float_general;
 6446|      0|        case 's':
  ------------------
  |  Branch (6446:9): [True: 0, False: 117k]
  ------------------
 6447|      0|            return presentation_type::string;
 6448|      0|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 0, False: 117k]
  ------------------
 6449|      0|            return presentation_type::character;
 6450|      0|        case '?':
  ------------------
  |  Branch (6450:9): [True: 0, False: 117k]
  ------------------
 6451|      0|            return presentation_type::escaped_character;
 6452|      0|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 0, False: 117k]
  ------------------
 6453|      0|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 117k]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 117k]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|      0|        default:
  ------------------
  |  Branch (6460:9): [True: 0, False: 117k]
  ------------------
 6461|      0|            return presentation_type::none;
 6462|   117k|    }
 6463|   117k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6492|  28.0k|{
 6493|  28.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  28.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  28.0k|    auto check_align = [](wchar_t ch) {
 6496|  28.0k|        switch (ch) {
 6497|  28.0k|            case L'<':
 6498|  28.0k|                return align_type::left;
 6499|  28.0k|            case L'>':
 6500|  28.0k|                return align_type::right;
 6501|  28.0k|            case L'^':
 6502|  28.0k|                return align_type::center;
 6503|  28.0k|            default:
 6504|  28.0k|                return align_type::none;
 6505|  28.0k|        }
 6506|  28.0k|    };
 6507|       |
 6508|  28.0k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  28.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28.0k]
  |  |  |  Branch (859:45): [True: 0, False: 28.0k]
  |  |  |  Branch (859:45): [True: 0, False: 28.0k]
  |  |  ------------------
  ------------------
 6510|  28.0k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  28.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  28.0k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  28.0k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  28.0k|    const auto begin_before_fill = begin;
 6520|  28.0k|    begin += potential_fill_len;
 6521|       |
 6522|  28.0k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 28.0k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|  28.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  28.0k|    const auto begin_after_fill = begin;
 6528|  28.0k|    ++begin;
 6529|       |
 6530|  28.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 28.0k, False: 0]
  ------------------
 6531|  28.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  28.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28.0k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|  28.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 0, False: 28.0k]
  ------------------
 6536|      0|            return begin_before_fill;
 6537|      0|        }
 6538|  28.0k|    }
 6539|       |
 6540|  28.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 28.0k, False: 0]
  ------------------
 6541|  28.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 28.0k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|  28.0k|        return begin_before_fill;
 6546|  28.0k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|  28.0k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6474|  56.0k|{
 6475|  56.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  56.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  56.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|  56.0k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|  56.0k|        return 1;
 6478|  56.0k|    }
 6479|  56.0k|    else {
 6480|  56.0k|        const auto lengths =
 6481|  56.0k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|  56.0k|            "\3\4";
 6483|  56.0k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|  56.0k|        return len;
 6485|  56.0k|    }
 6486|  56.0k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|  56.0k|    auto check_align = [](wchar_t ch) {
 6496|  56.0k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 56.0k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 56.0k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 56.0k]
  ------------------
 6502|      0|                return align_type::center;
 6503|  56.0k|            default:
  ------------------
  |  Branch (6503:13): [True: 56.0k, False: 0]
  ------------------
 6504|  56.0k|                return align_type::none;
 6505|  56.0k|        }
 6506|  56.0k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6557|  28.0k|{
 6558|  28.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  28.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  28.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 28.0k, False: 0]
  |  Branch (6560:33): [True: 0, False: 28.0k]
  ------------------
 6561|      0|        int width = parse_simple_int(begin, end);
 6562|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6563|      0|            handler.on_width(width);
 6564|      0|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|      0|    }
 6570|  28.0k|    return begin;
 6571|  28.0k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7087|  28.0k|    {
 7088|  28.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|  28.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 28.0k, False: 0]
  ------------------
 7090|  28.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 28.0k, False: 0]
  ------------------
 7091|  28.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 0, False: 28.0k]
  ------------------
 7092|  28.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 0, False: 0]
  ------------------
 7093|      0|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|      0|        }
 7098|       |
 7099|  28.0k|        Handler::on_localized();
 7100|  28.0k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  86.4k|{
 8378|  86.4k|#define SCN_VISIT(Type)                                         \
 8379|  86.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  86.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  86.4k|    }                                                           \
 8382|  86.4k|    else {                                                      \
 8383|  86.4k|        return vis(monostate_val);                              \
 8384|  86.4k|    }
 8385|       |
 8386|  86.4k|    monostate monostate_val{};
 8387|       |
 8388|  86.4k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 86.4k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 86.4k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 86.4k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 86.4k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 86.4k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 86.4k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 86.4k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 86.4k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 86.4k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 86.4k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 86.4k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 86.4k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 86.4k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 86.4k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 86.4k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|  24.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 24.3k, False: 62.1k]
  ------------------
 8420|  24.3k|            SCN_VISIT(float);
  ------------------
  |  | 8379|  24.3k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  24.3k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  24.3k|    }                                                           \
  |  | 8382|  24.3k|    else {                                                      \
  |  | 8383|  24.3k|        return vis(monostate_val);                              \
  |  | 8384|  24.3k|    }
  ------------------
 8421|  31.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 31.0k, False: 55.4k]
  ------------------
 8422|  31.0k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  31.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  31.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  31.0k|    }                                                           \
  |  | 8382|  31.0k|    else {                                                      \
  |  | 8383|  31.0k|        return vis(monostate_val);                              \
  |  | 8384|  31.0k|    }
  ------------------
 8423|  31.0k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 31.0k, False: 55.4k]
  ------------------
 8424|  31.0k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|  31.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  31.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  31.0k|    }                                                           \
  |  | 8382|  31.0k|    else {                                                      \
  |  | 8383|  31.0k|        return vis(monostate_val);                              \
  |  | 8384|  31.0k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 86.4k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 86.4k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 86.4k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 86.4k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 86.4k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 86.4k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 86.4k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 86.4k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 86.4k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  86.4k|            SCN_CLANG_POP
 8456|  86.4k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  86.7k|{
 7005|  86.7k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  86.7k|    handler.check_args_exhausted();
 7007|  86.7k|    return handler.get_error();
 7008|  86.7k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  86.7k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  86.7k|    auto begin = format.data();
 6974|  86.7k|    auto it = begin;
 6975|  86.7k|    const auto end = format.data() + format.size();
 6976|       |
 6977|   172k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 86.7k, False: 85.7k]
  ------------------
 6978|  86.7k|        const auto ch = *it++;
 6979|  86.7k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 86.7k, False: 0]
  ------------------
 6980|  86.7k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  86.7k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  86.7k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 960, False: 85.7k]
  ------------------
 6984|    960|                return;
 6985|    960|            }
 6986|  86.7k|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|  86.7k|    }
 6997|       |
 6998|  85.7k|    handler.on_literal_text(begin, end);
 6999|  85.7k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8135|  85.7k|    {
 8136|  85.7k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  85.7k|    static_cast<    \
  |  |  929|  85.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|  85.7k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6902|  86.7k|{
 6903|  86.7k|    struct id_adapter {
 6904|  86.7k|        constexpr void operator()()
 6905|  86.7k|        {
 6906|  86.7k|            arg_id = handler.on_arg_id();
 6907|  86.7k|        }
 6908|  86.7k|        constexpr void operator()(std::size_t id)
 6909|  86.7k|        {
 6910|  86.7k|            arg_id = handler.on_arg_id(id);
 6911|  86.7k|        }
 6912|       |
 6913|  86.7k|        constexpr void on_error(const char* msg)
 6914|  86.7k|        {
 6915|  86.7k|            SCN_UNLIKELY_ATTR
 6916|  86.7k|            handler.on_error(msg);
 6917|  86.7k|        }
 6918|       |
 6919|  86.7k|        Handler& handler;
 6920|  86.7k|        std::size_t arg_id;
 6921|  86.7k|    };
 6922|       |
 6923|  86.7k|    ++begin;
 6924|  86.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.7k]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|  86.7k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 86.7k]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|  86.7k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 86.7k]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|  86.7k|    else {
 6936|  86.7k|        auto adapter = id_adapter{handler, 0};
 6937|  86.7k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  86.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.7k]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|  86.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 86.7k]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|  86.7k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 86.7k, False: 0]
  ------------------
 6948|  86.7k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.7k]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|  86.7k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  86.7k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.7k]
  |  |  |  Branch (859:45): [True: 0, False: 86.7k]
  |  |  |  Branch (859:45): [True: 0, False: 86.7k]
  |  |  ------------------
  ------------------
 6954|      0|                handler.on_error("Unknown format specifier");
 6955|      0|                return begin;
 6956|      0|            }
 6957|  86.7k|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|  86.7k|    }
 6964|  86.7k|    return begin + 1;
 6965|  86.7k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  86.7k|{
 6404|  86.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  86.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  86.7k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 86.7k, False: 0]
  |  Branch (6405:26): [True: 0, False: 86.7k]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|  86.7k|    handler();
 6410|  86.7k|    return begin;
 6411|  86.7k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  86.7k|        {
 6906|  86.7k|            arg_id = handler.on_arg_id();
 6907|  86.7k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7082|  86.7k|    {
 7083|  86.7k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  86.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  86.7k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6818|  86.7k|{
 6819|  86.7k|    auto do_presentation = [&]() -> const CharT* {
 6820|  86.7k|        if (*begin == CharT{'['}) {
 6821|  86.7k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  86.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  86.7k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  86.7k|                return begin;
 6827|  86.7k|            }
 6828|  86.7k|            handler.on_character_set_string(set);
 6829|  86.7k|            return begin;
 6830|  86.7k|        }
 6831|  86.7k|        if (*begin == CharT{'/'}) {
 6832|  86.7k|            return parse_presentation_regex(begin, end, handler);
 6833|  86.7k|        }
 6834|  86.7k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  86.7k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  86.7k|            handler.on_error("Invalid type specifier in format string");
 6837|  86.7k|            return begin;
 6838|  86.7k|        }
 6839|  86.7k|        handler.on_type(type);
 6840|  86.7k|        return begin;
 6841|  86.7k|    };
 6842|       |
 6843|  86.7k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 86.7k, False: 0]
  |  Branch (6843:28): [True: 86.7k, False: 0]
  ------------------
 6844|  86.7k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 86.7k, False: 0]
  |  Branch (6844:36): [True: 58.7k, False: 28.0k]
  ------------------
 6845|  58.7k|        return do_presentation();
 6846|  58.7k|    }
 6847|       |
 6848|  28.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  28.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28.0k]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|  28.0k|    begin = parse_align(begin, end, handler);
 6854|  28.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  28.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28.0k]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|  28.0k|    begin = parse_width(begin, end, handler);
 6860|  28.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  28.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28.0k]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|  28.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 28.0k]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|  28.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 28.0k, False: 0]
  ------------------
 6879|  28.0k|        handler.on_localized();
 6880|  28.0k|        ++begin;
 6881|  28.0k|    }
 6882|  28.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  28.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28.0k]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|  28.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 28.0k, False: 0]
  |  Branch (6887:25): [True: 0, False: 28.0k]
  ------------------
 6888|      0|        do_presentation();
 6889|      0|    }
 6890|  28.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  28.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28.0k]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|  28.0k|    return begin;
 6896|  28.0k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6819|  58.7k|    auto do_presentation = [&]() -> const CharT* {
 6820|  58.7k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 0, False: 58.7k]
  ------------------
 6821|      0|            auto set = parse_presentation_set(begin, end, handler);
 6822|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|      0|            handler.on_character_set_string(set);
 6829|      0|            return begin;
 6830|      0|        }
 6831|  58.7k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 58.7k]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|  58.7k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  58.7k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  58.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 58.7k]
  |  |  ------------------
  ------------------
 6836|      0|            handler.on_error("Invalid type specifier in format string");
 6837|      0|            return begin;
 6838|      0|        }
 6839|  58.7k|        handler.on_type(type);
 6840|  58.7k|        return begin;
 6841|  58.7k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6492|  28.0k|{
 6493|  28.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  28.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|  28.0k|    auto check_align = [](wchar_t ch) {
 6496|  28.0k|        switch (ch) {
 6497|  28.0k|            case L'<':
 6498|  28.0k|                return align_type::left;
 6499|  28.0k|            case L'>':
 6500|  28.0k|                return align_type::right;
 6501|  28.0k|            case L'^':
 6502|  28.0k|                return align_type::center;
 6503|  28.0k|            default:
 6504|  28.0k|                return align_type::none;
 6505|  28.0k|        }
 6506|  28.0k|    };
 6507|       |
 6508|  28.0k|    auto potential_fill_len = code_point_length(begin, end);
 6509|  28.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  56.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28.0k]
  |  |  |  Branch (859:45): [True: 0, False: 28.0k]
  |  |  |  Branch (859:45): [True: 0, False: 28.0k]
  |  |  ------------------
  ------------------
 6510|  28.0k|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|  28.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|  28.0k|    auto potential_fill = std::basic_string_view<CharT>{
 6518|  28.0k|        begin, static_cast<size_t>(potential_fill_len)};
 6519|  28.0k|    const auto begin_before_fill = begin;
 6520|  28.0k|    begin += potential_fill_len;
 6521|       |
 6522|  28.0k|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 28.0k]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|  28.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|  28.0k|    const auto begin_after_fill = begin;
 6528|  28.0k|    ++begin;
 6529|       |
 6530|  28.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 28.0k, False: 0]
  ------------------
 6531|  28.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  28.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 28.0k]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|  28.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 0, False: 28.0k]
  ------------------
 6536|      0|            return begin_before_fill;
 6537|      0|        }
 6538|  28.0k|    }
 6539|       |
 6540|  28.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 28.0k, False: 0]
  ------------------
 6541|  28.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 28.0k]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|  28.0k|        return begin_before_fill;
 6546|  28.0k|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|  28.0k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6495|  56.0k|    auto check_align = [](wchar_t ch) {
 6496|  56.0k|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 56.0k]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 56.0k]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 56.0k]
  ------------------
 6502|      0|                return align_type::center;
 6503|  56.0k|            default:
  ------------------
  |  Branch (6503:13): [True: 56.0k, False: 0]
  ------------------
 6504|  56.0k|                return align_type::none;
 6505|  56.0k|        }
 6506|  56.0k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6557|  28.0k|{
 6558|  28.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  28.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|  28.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 28.0k, False: 0]
  |  Branch (6560:33): [True: 0, False: 28.0k]
  ------------------
 6561|      0|        int width = parse_simple_int(begin, end);
 6562|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6563|      0|            handler.on_width(width);
 6564|      0|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|      0|    }
 6570|  28.0k|    return begin;
 6571|  28.0k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7087|  28.0k|    {
 7088|  28.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|  28.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 28.0k, False: 0]
  ------------------
 7090|  28.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 28.0k, False: 0]
  ------------------
 7091|  28.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 0, False: 28.0k]
  ------------------
 7092|  28.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 0, False: 0]
  ------------------
 7093|      0|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|      0|        }
 7098|       |
 7099|  28.0k|        Handler::on_localized();
 7100|  28.0k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  86.7k|{
 8378|  86.7k|#define SCN_VISIT(Type)                                         \
 8379|  86.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  86.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  86.7k|    }                                                           \
 8382|  86.7k|    else {                                                      \
 8383|  86.7k|        return vis(monostate_val);                              \
 8384|  86.7k|    }
 8385|       |
 8386|  86.7k|    monostate monostate_val{};
 8387|       |
 8388|  86.7k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 86.7k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 86.7k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 86.7k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 86.7k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 86.7k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 86.7k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 86.7k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 86.7k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 86.7k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 86.7k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 86.7k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 86.7k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 86.7k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 86.7k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 86.7k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|  24.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 24.4k, False: 62.2k]
  ------------------
 8420|  24.4k|            SCN_VISIT(float);
  ------------------
  |  | 8379|  24.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  24.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  24.4k|    }                                                           \
  |  | 8382|  24.4k|    else {                                                      \
  |  | 8383|  24.4k|        return vis(monostate_val);                              \
  |  | 8384|  24.4k|    }
  ------------------
 8421|  31.1k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 31.1k, False: 55.5k]
  ------------------
 8422|  31.1k|            SCN_VISIT(double);
  ------------------
  |  | 8379|  31.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  31.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  31.1k|    }                                                           \
  |  | 8382|  31.1k|    else {                                                      \
  |  | 8383|  31.1k|        return vis(monostate_val);                              \
  |  | 8384|  31.1k|    }
  ------------------
 8423|  31.1k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 31.1k, False: 55.5k]
  ------------------
 8424|  31.1k|            SCN_VISIT(long double);
  ------------------
  |  | 8379|  31.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|  31.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|  31.1k|    }                                                           \
  |  | 8382|  31.1k|    else {                                                      \
  |  | 8383|  31.1k|        return vis(monostate_val);                              \
  |  | 8384|  31.1k|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 86.7k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 86.7k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 86.7k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 86.7k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 86.7k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 86.7k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 86.7k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 86.7k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 86.7k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  86.7k|            SCN_CLANG_POP
 8456|  86.7k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4046|  1.24k|    {
 4047|  1.24k|        sync(0);
 4048|  1.24k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5426|  4.60k|    {
 5427|  4.60k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.60k]
  |  |  ------------------
  ------------------
 5428|      0|            return max_size();
 5429|      0|        }
 5430|       |
 5431|  4.60k|        return static_cast<std::size_t>(m_desc &
 5432|  4.60k|                                        ((1 << detail::packed_arg_bits) - 1));
 5433|  4.60k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5451|  9.21k|    {
 5452|  9.21k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5453|  9.21k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5394|  4.60k|    {
 5395|  4.60k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  4.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.60k]
  |  |  ------------------
  ------------------
 5396|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5397|      0|                return m_args[id];
 5398|      0|            }
 5399|      0|            return {};
 5400|      0|        }
 5401|       |
 5402|  4.60k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  4.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.60k]
  |  |  ------------------
  ------------------
 5403|      0|            return {};
 5404|      0|        }
 5405|       |
 5406|  4.60k|        const auto t = type(id);
 5407|  4.60k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  4.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.60k]
  |  |  ------------------
  ------------------
 5408|      0|            return {};
 5409|      0|        }
 5410|       |
 5411|  4.60k|        basic_scan_arg<Context> arg;
 5412|  4.60k|        arg.m_type = t;
 5413|  4.60k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5413:13): [True: 4.60k, False: 0]
  ------------------
 5414|  4.60k|            arg.m_value.ref_value = m_builtin_values[id];
 5415|  4.60k|        }
 5416|      0|        else {
 5417|      0|            arg.m_value = m_values[id];
 5418|      0|        }
 5419|  4.60k|        return arg;
 5420|  4.60k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5460|  4.60k|    {
 5461|       |        // First (0th) index is size, types start after that
 5462|  4.60k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5463|  4.60k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5464|  4.60k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5465|  4.60k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5455|  4.60k|    {
 5456|  4.60k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5457|  4.60k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5207|  8.83k|    {
 5208|  8.83k|        return m_type != detail::arg_type::none_type;
 5209|  8.83k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|    576|{
 8378|    576|#define SCN_VISIT(Type)                                         \
 8379|    576|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|    576|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|    576|    }                                                           \
 8382|    576|    else {                                                      \
 8383|    576|        return vis(monostate_val);                              \
 8384|    576|    }
 8385|       |
 8386|    576|    monostate monostate_val{};
 8387|       |
 8388|    576|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 576]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 576]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 576]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 576]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 576]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 576]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 576]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 576]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 576]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 576]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 576]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 576]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 576]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 576]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 576]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|    192|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 192, False: 384]
  ------------------
 8420|    192|            SCN_VISIT(float);
  ------------------
  |  | 8379|    192|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    192|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    192|    }                                                           \
  |  | 8382|    192|    else {                                                      \
  |  | 8383|    192|        return vis(monostate_val);                              \
  |  | 8384|    192|    }
  ------------------
 8421|    192|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 192, False: 384]
  ------------------
 8422|    192|            SCN_VISIT(double);
  ------------------
  |  | 8379|    192|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    192|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    192|    }                                                           \
  |  | 8382|    192|    else {                                                      \
  |  | 8383|    192|        return vis(monostate_val);                              \
  |  | 8384|    192|    }
  ------------------
 8423|    192|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 192, False: 384]
  ------------------
 8424|    192|            SCN_VISIT(long double);
  ------------------
  |  | 8379|    192|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    192|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    192|    }                                                           \
  |  | 8382|    192|    else {                                                      \
  |  | 8383|    192|        return vis(monostate_val);                              \
  |  | 8384|    192|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 576]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 576]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 576]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 576]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 576]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 576]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 576]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 576]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 576]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|    576|            SCN_CLANG_POP
 8456|    576|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5505|  3.84k|    {
 5506|  3.84k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8098|  1.92k|    {
 8099|  1.92k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8016|  3.84k|    {
 8017|  3.84k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  1.92k|{
 7005|  1.92k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  1.92k|    handler.check_args_exhausted();
 7007|  1.92k|    return handler.get_error();
 7008|  1.92k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  1.92k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  1.92k|    auto begin = format.data();
 6974|  1.92k|    auto it = begin;
 6975|  1.92k|    const auto end = format.data() + format.size();
 6976|       |
 6977|  1.92k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 1.92k, False: 0]
  ------------------
 6978|  1.92k|        const auto ch = *it++;
 6979|  1.92k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 1.92k, False: 0]
  ------------------
 6980|  1.92k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  1.92k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  1.92k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 1.92k, False: 0]
  ------------------
 6984|  1.92k|                return;
 6985|  1.92k|            }
 6986|  1.92k|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|  1.92k|    }
 6997|       |
 6998|      0|    handler.on_literal_text(begin, end);
 6999|      0|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6902|  1.92k|{
 6903|  1.92k|    struct id_adapter {
 6904|  1.92k|        constexpr void operator()()
 6905|  1.92k|        {
 6906|  1.92k|            arg_id = handler.on_arg_id();
 6907|  1.92k|        }
 6908|  1.92k|        constexpr void operator()(std::size_t id)
 6909|  1.92k|        {
 6910|  1.92k|            arg_id = handler.on_arg_id(id);
 6911|  1.92k|        }
 6912|       |
 6913|  1.92k|        constexpr void on_error(const char* msg)
 6914|  1.92k|        {
 6915|  1.92k|            SCN_UNLIKELY_ATTR
 6916|  1.92k|            handler.on_error(msg);
 6917|  1.92k|        }
 6918|       |
 6919|  1.92k|        Handler& handler;
 6920|  1.92k|        std::size_t arg_id;
 6921|  1.92k|    };
 6922|       |
 6923|  1.92k|    ++begin;
 6924|  1.92k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|  1.92k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 1.92k]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|  1.92k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 1.92k]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|  1.92k|    else {
 6936|  1.92k|        auto adapter = id_adapter{handler, 0};
 6937|  1.92k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  1.92k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|  1.92k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 1.92k]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|  1.92k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 1.92k, False: 0]
  ------------------
 6948|  1.92k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|  1.92k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  1.92k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.92k]
  |  |  |  Branch (859:45): [True: 0, False: 1.92k]
  |  |  |  Branch (859:45): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 6954|      0|                handler.on_error("Unknown format specifier");
 6955|      0|                return begin;
 6956|      0|            }
 6957|  1.92k|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|  1.92k|    }
 6964|  1.92k|    return begin + 1;
 6965|  1.92k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 7999|  3.84k|    {
 8000|  3.84k|        return m_args.get(id);
 8001|  3.84k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8009|  3.84k|    {
 8010|  3.84k|        return m_locale;
 8011|  3.84k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5526|  3.84k|    {
 5527|  3.84k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  3.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.84k]
  |  |  ------------------
  ------------------
 5528|      0|            on_error(
 5529|      0|                "Cannot switch from manual to automatic argument indexing");
 5530|      0|            return 0;
 5531|      0|        }
 5532|       |
 5533|  3.84k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5534|  3.84k|        do_check_arg_id(id);
 5535|  3.84k|        return id;
 5536|  3.84k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6014|  3.84k|{
 6015|  3.84k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6015:9): [Folded - Ignored]
  ------------------
 6016|  3.84k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6016:10): [Folded - Ignored]
  |  Branch (6016:22): [Folded - Ignored]
  ------------------
 6017|       |        // The cast below will cause an error on gcc pre-12
 6018|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6019|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6019:13): [True: 0, False: 0]
  ------------------
 6020|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6021|      0|            SCN_UNLIKELY_ATTR
 6022|      0|            on_error("Argument not found");
 6023|      0|        }
 6024|      0|    }
 6025|  3.84k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  1.92k|{
 6404|  1.92k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  1.92k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 1.92k, False: 0]
  |  Branch (6405:26): [True: 0, False: 1.92k]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|  1.92k|    handler();
 6410|  1.92k|    return begin;
 6411|  1.92k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  1.92k|        {
 6906|  1.92k|            arg_id = handler.on_arg_id();
 6907|  1.92k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5212|  7.68k|    {
 5213|  7.68k|        return m_type;
 5214|  7.68k|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5521|  3.84k|    {
 5522|  3.84k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5523|  3.84k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4314|  2.49k|{
 4315|  2.49k|    if (is_contiguous()) {
  ------------------
  |  Branch (4315:9): [True: 0, False: 2.49k]
  ------------------
 4316|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4317|      0|                                ranges::default_sentinel};
 4318|      0|    }
 4319|  2.49k|    return ranges::subrange{forward_iterator{this, 0},
 4320|  2.49k|                            ranges::default_sentinel};
 4321|  2.49k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4147|  2.49k|    {
 4148|  2.49k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4149|  2.49k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4150|  2.49k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5510|  7.68k|    {
 5511|  7.68k|        return m_format.data();
 5512|  7.68k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7082|  1.92k|    {
 7083|  1.92k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  1.92k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6818|  1.92k|{
 6819|  1.92k|    auto do_presentation = [&]() -> const CharT* {
 6820|  1.92k|        if (*begin == CharT{'['}) {
 6821|  1.92k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  1.92k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  1.92k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  1.92k|                return begin;
 6827|  1.92k|            }
 6828|  1.92k|            handler.on_character_set_string(set);
 6829|  1.92k|            return begin;
 6830|  1.92k|        }
 6831|  1.92k|        if (*begin == CharT{'/'}) {
 6832|  1.92k|            return parse_presentation_regex(begin, end, handler);
 6833|  1.92k|        }
 6834|  1.92k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.92k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  1.92k|            handler.on_error("Invalid type specifier in format string");
 6837|  1.92k|            return begin;
 6838|  1.92k|        }
 6839|  1.92k|        handler.on_type(type);
 6840|  1.92k|        return begin;
 6841|  1.92k|    };
 6842|       |
 6843|  1.92k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 1.92k, False: 0]
  |  Branch (6843:28): [True: 1.92k, False: 0]
  ------------------
 6844|  1.92k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 1.92k, False: 0]
  |  Branch (6844:36): [True: 1.53k, False: 384]
  ------------------
 6845|  1.53k|        return do_presentation();
 6846|  1.53k|    }
 6847|       |
 6848|    384|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 384]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|    384|    begin = parse_align(begin, end, handler);
 6854|    384|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 384]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|    384|    begin = parse_width(begin, end, handler);
 6860|    384|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 384]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|    384|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 384]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|    384|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 384, False: 0]
  ------------------
 6879|    384|        handler.on_localized();
 6880|    384|        ++begin;
 6881|    384|    }
 6882|    384|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 384]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|    384|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 384, False: 0]
  |  Branch (6887:25): [True: 0, False: 384]
  ------------------
 6888|      0|        do_presentation();
 6889|      0|    }
 6890|    384|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 384]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|    384|    return begin;
 6896|    384|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6467|  3.84k|{
 6468|  3.84k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6468:13): [True: 3.07k, False: 768]
  |  Branch (6468:33): [True: 3.07k, False: 0]
  ------------------
 6469|  3.84k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6469:13): [True: 768, False: 0]
  |  Branch (6469:33): [True: 768, False: 0]
  ------------------
 6470|  3.84k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6819|  1.53k|    auto do_presentation = [&]() -> const CharT* {
 6820|  1.53k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 0, False: 1.53k]
  ------------------
 6821|      0|            auto set = parse_presentation_set(begin, end, handler);
 6822|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|      0|            handler.on_character_set_string(set);
 6829|      0|            return begin;
 6830|      0|        }
 6831|  1.53k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 1.53k]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|  1.53k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.53k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.53k]
  |  |  ------------------
  ------------------
 6836|      0|            handler.on_error("Invalid type specifier in format string");
 6837|      0|            return begin;
 6838|      0|        }
 6839|  1.53k|        handler.on_type(type);
 6840|  1.53k|        return begin;
 6841|  1.53k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6415|  3.07k|{
 6416|  3.07k|    switch (type) {
 6417|      0|        case 'b':
  ------------------
  |  Branch (6417:9): [True: 0, False: 3.07k]
  ------------------
 6418|      0|        case 'B':
  ------------------
  |  Branch (6418:9): [True: 0, False: 3.07k]
  ------------------
 6419|      0|            return presentation_type::int_binary;
 6420|      0|        case 'd':
  ------------------
  |  Branch (6420:9): [True: 0, False: 3.07k]
  ------------------
 6421|      0|            return presentation_type::int_decimal;
 6422|      0|        case 'i':
  ------------------
  |  Branch (6422:9): [True: 0, False: 3.07k]
  ------------------
 6423|      0|            return presentation_type::int_generic;
 6424|      0|        case 'u':
  ------------------
  |  Branch (6424:9): [True: 0, False: 3.07k]
  ------------------
 6425|      0|            return presentation_type::int_unsigned_decimal;
 6426|      0|        case 'o':
  ------------------
  |  Branch (6426:9): [True: 0, False: 3.07k]
  ------------------
 6427|      0|            return presentation_type::int_octal;
 6428|      0|        case 'x':
  ------------------
  |  Branch (6428:9): [True: 0, False: 3.07k]
  ------------------
 6429|      0|        case 'X':
  ------------------
  |  Branch (6429:9): [True: 0, False: 3.07k]
  ------------------
 6430|      0|            return presentation_type::int_hex;
 6431|      0|        case 'r':
  ------------------
  |  Branch (6431:9): [True: 0, False: 3.07k]
  ------------------
 6432|      0|        case 'R':
  ------------------
  |  Branch (6432:9): [True: 0, False: 3.07k]
  ------------------
 6433|      0|            return presentation_type::int_arbitrary_base;
 6434|    768|        case 'a':
  ------------------
  |  Branch (6434:9): [True: 768, False: 2.30k]
  ------------------
 6435|    768|        case 'A':
  ------------------
  |  Branch (6435:9): [True: 0, False: 3.07k]
  ------------------
 6436|    768|            return presentation_type::float_hex;
 6437|    768|        case 'e':
  ------------------
  |  Branch (6437:9): [True: 768, False: 2.30k]
  ------------------
 6438|    768|        case 'E':
  ------------------
  |  Branch (6438:9): [True: 0, False: 3.07k]
  ------------------
 6439|    768|            return presentation_type::float_scientific;
 6440|    768|        case 'f':
  ------------------
  |  Branch (6440:9): [True: 768, False: 2.30k]
  ------------------
 6441|    768|        case 'F':
  ------------------
  |  Branch (6441:9): [True: 0, False: 3.07k]
  ------------------
 6442|    768|            return presentation_type::float_fixed;
 6443|    768|        case 'g':
  ------------------
  |  Branch (6443:9): [True: 768, False: 2.30k]
  ------------------
 6444|    768|        case 'G':
  ------------------
  |  Branch (6444:9): [True: 0, False: 3.07k]
  ------------------
 6445|    768|            return presentation_type::float_general;
 6446|      0|        case 's':
  ------------------
  |  Branch (6446:9): [True: 0, False: 3.07k]
  ------------------
 6447|      0|            return presentation_type::string;
 6448|      0|        case 'c':
  ------------------
  |  Branch (6448:9): [True: 0, False: 3.07k]
  ------------------
 6449|      0|            return presentation_type::character;
 6450|      0|        case '?':
  ------------------
  |  Branch (6450:9): [True: 0, False: 3.07k]
  ------------------
 6451|      0|            return presentation_type::escaped_character;
 6452|      0|        case 'p':
  ------------------
  |  Branch (6452:9): [True: 0, False: 3.07k]
  ------------------
 6453|      0|            return presentation_type::pointer;
 6454|      0|        case '[':
  ------------------
  |  Branch (6454:9): [True: 0, False: 3.07k]
  ------------------
 6455|      0|        case '/':
  ------------------
  |  Branch (6455:9): [True: 0, False: 3.07k]
  ------------------
 6456|       |            // Should be handled by parse_presentation_set and
 6457|       |            // parse_presentation_regex
 6458|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6459|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6460|      0|        default:
  ------------------
  |  Branch (6460:9): [True: 0, False: 3.07k]
  ------------------
 6461|      0|            return presentation_type::none;
 6462|  3.07k|    }
 6463|  3.07k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6492|    384|{
 6493|    384|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    384|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    384|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|    384|    auto check_align = [](wchar_t ch) {
 6496|    384|        switch (ch) {
 6497|    384|            case L'<':
 6498|    384|                return align_type::left;
 6499|    384|            case L'>':
 6500|    384|                return align_type::right;
 6501|    384|            case L'^':
 6502|    384|                return align_type::center;
 6503|    384|            default:
 6504|    384|                return align_type::none;
 6505|    384|        }
 6506|    384|    };
 6507|       |
 6508|    384|    auto potential_fill_len = code_point_length(begin, end);
 6509|    384|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|    768|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 384]
  |  |  |  Branch (859:45): [True: 0, False: 384]
  |  |  |  Branch (859:45): [True: 0, False: 384]
  |  |  ------------------
  ------------------
 6510|    384|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|    384|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|    384|    auto potential_fill = std::basic_string_view<CharT>{
 6518|    384|        begin, static_cast<size_t>(potential_fill_len)};
 6519|    384|    const auto begin_before_fill = begin;
 6520|    384|    begin += potential_fill_len;
 6521|       |
 6522|    384|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 384]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|    384|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|    384|    const auto begin_after_fill = begin;
 6528|    384|    ++begin;
 6529|       |
 6530|    384|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 384, False: 0]
  ------------------
 6531|    384|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 384]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|    384|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 0, False: 384]
  ------------------
 6536|      0|            return begin_before_fill;
 6537|      0|        }
 6538|    384|    }
 6539|       |
 6540|    384|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 384, False: 0]
  ------------------
 6541|    384|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 384]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|    384|        return begin_before_fill;
 6546|    384|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|    384|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6474|    768|{
 6475|    768|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    768|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    768|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6476|    768|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6476:19): [Folded - Ignored]
  ------------------
 6477|    768|        return 1;
 6478|    768|    }
 6479|    768|    else {
 6480|    768|        const auto lengths =
 6481|    768|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6482|    768|            "\3\4";
 6483|    768|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6484|    768|        return len;
 6485|    768|    }
 6486|    768|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6495|    768|    auto check_align = [](wchar_t ch) {
 6496|    768|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 768]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 768]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 768]
  ------------------
 6502|      0|                return align_type::center;
 6503|    768|            default:
  ------------------
  |  Branch (6503:13): [True: 768, False: 0]
  ------------------
 6504|    768|                return align_type::none;
 6505|    768|        }
 6506|    768|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6557|    384|{
 6558|    384|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    384|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    384|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|    384|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 384, False: 0]
  |  Branch (6560:33): [True: 0, False: 384]
  ------------------
 6561|      0|        int width = parse_simple_int(begin, end);
 6562|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6563|      0|            handler.on_width(width);
 6564|      0|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|      0|    }
 6570|    384|    return begin;
 6571|    384|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7087|    384|    {
 7088|    384|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|    384|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 384, False: 0]
  ------------------
 7090|    384|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 384, False: 0]
  ------------------
 7091|    384|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 0, False: 384]
  ------------------
 7092|    384|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 0, False: 0]
  ------------------
 7093|      0|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|      0|        }
 7098|       |
 7099|    384|        Handler::on_localized();
 7100|    384|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  1.92k|{
 8378|  1.92k|#define SCN_VISIT(Type)                                         \
 8379|  1.92k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  1.92k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  1.92k|    }                                                           \
 8382|  1.92k|    else {                                                      \
 8383|  1.92k|        return vis(monostate_val);                              \
 8384|  1.92k|    }
 8385|       |
 8386|  1.92k|    monostate monostate_val{};
 8387|       |
 8388|  1.92k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 1.92k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 1.92k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 1.92k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 1.92k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 1.92k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 1.92k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 1.92k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 1.92k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 1.92k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 1.92k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 1.92k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 1.92k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 1.92k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 1.92k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 1.92k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|    640|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 640, False: 1.28k]
  ------------------
 8420|    640|            SCN_VISIT(float);
  ------------------
  |  | 8379|    640|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    640|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    640|    }                                                           \
  |  | 8382|    640|    else {                                                      \
  |  | 8383|    640|        return vis(monostate_val);                              \
  |  | 8384|    640|    }
  ------------------
 8421|    640|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 640, False: 1.28k]
  ------------------
 8422|    640|            SCN_VISIT(double);
  ------------------
  |  | 8379|    640|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    640|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    640|    }                                                           \
  |  | 8382|    640|    else {                                                      \
  |  | 8383|    640|        return vis(monostate_val);                              \
  |  | 8384|    640|    }
  ------------------
 8423|    640|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 640, False: 1.28k]
  ------------------
 8424|    640|            SCN_VISIT(long double);
  ------------------
  |  | 8379|    640|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    640|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    640|    }                                                           \
  |  | 8382|    640|    else {                                                      \
  |  | 8383|    640|        return vis(monostate_val);                              \
  |  | 8384|    640|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 1.92k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 1.92k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 1.92k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 1.92k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 1.92k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 1.92k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.92k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.92k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 1.92k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  1.92k|            SCN_CLANG_POP
 8456|  1.92k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|    576|{
 8378|    576|#define SCN_VISIT(Type)                                         \
 8379|    576|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|    576|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|    576|    }                                                           \
 8382|    576|    else {                                                      \
 8383|    576|        return vis(monostate_val);                              \
 8384|    576|    }
 8385|       |
 8386|    576|    monostate monostate_val{};
 8387|       |
 8388|    576|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 576]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 576]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 576]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 576]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 576]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 576]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 576]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 576]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 576]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 576]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 576]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 576]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 576]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 576]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 576]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|    192|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 192, False: 384]
  ------------------
 8420|    192|            SCN_VISIT(float);
  ------------------
  |  | 8379|    192|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    192|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    192|    }                                                           \
  |  | 8382|    192|    else {                                                      \
  |  | 8383|    192|        return vis(monostate_val);                              \
  |  | 8384|    192|    }
  ------------------
 8421|    192|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 192, False: 384]
  ------------------
 8422|    192|            SCN_VISIT(double);
  ------------------
  |  | 8379|    192|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    192|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    192|    }                                                           \
  |  | 8382|    192|    else {                                                      \
  |  | 8383|    192|        return vis(monostate_val);                              \
  |  | 8384|    192|    }
  ------------------
 8423|    192|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 192, False: 384]
  ------------------
 8424|    192|            SCN_VISIT(long double);
  ------------------
  |  | 8379|    192|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    192|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    192|    }                                                           \
  |  | 8382|    192|    else {                                                      \
  |  | 8383|    192|        return vis(monostate_val);                              \
  |  | 8384|    192|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 576]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 576]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 576]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 576]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 576]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 576]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 576]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 576]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 576]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|    576|            SCN_CLANG_POP
 8456|    576|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7004|  1.92k|{
 7005|  1.92k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7006|  1.92k|    handler.check_args_exhausted();
 7007|  1.92k|    return handler.get_error();
 7008|  1.92k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 6970|  1.92k|{
 6971|       |    // TODO: memchr fast path with a larger (> 32) format string
 6972|       |
 6973|  1.92k|    auto begin = format.data();
 6974|  1.92k|    auto it = begin;
 6975|  1.92k|    const auto end = format.data() + format.size();
 6976|       |
 6977|  1.92k|    while (it != end) {
  ------------------
  |  Branch (6977:12): [True: 1.92k, False: 0]
  ------------------
 6978|  1.92k|        const auto ch = *it++;
 6979|  1.92k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (6979:13): [True: 1.92k, False: 0]
  ------------------
 6980|  1.92k|            handler.on_literal_text(begin, it - 1);
 6981|       |
 6982|  1.92k|            begin = it = parse_replacement_field(it - 1, end, handler);
 6983|  1.92k|            if (!handler) {
  ------------------
  |  Branch (6983:17): [True: 1.92k, False: 0]
  ------------------
 6984|  1.92k|                return;
 6985|  1.92k|            }
 6986|  1.92k|        }
 6987|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (6987:18): [True: 0, False: 0]
  ------------------
 6988|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6989|      0|                handler.on_error("Unmatched '}' in format string");
 6990|      0|                return;
 6991|      0|            }
 6992|       |
 6993|      0|            handler.on_literal_text(begin, it);
 6994|      0|            begin = ++it;
 6995|      0|        }
 6996|  1.92k|    }
 6997|       |
 6998|      0|    handler.on_literal_text(begin, end);
 6999|      0|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6902|  1.92k|{
 6903|  1.92k|    struct id_adapter {
 6904|  1.92k|        constexpr void operator()()
 6905|  1.92k|        {
 6906|  1.92k|            arg_id = handler.on_arg_id();
 6907|  1.92k|        }
 6908|  1.92k|        constexpr void operator()(std::size_t id)
 6909|  1.92k|        {
 6910|  1.92k|            arg_id = handler.on_arg_id(id);
 6911|  1.92k|        }
 6912|       |
 6913|  1.92k|        constexpr void on_error(const char* msg)
 6914|  1.92k|        {
 6915|  1.92k|            SCN_UNLIKELY_ATTR
 6916|  1.92k|            handler.on_error(msg);
 6917|  1.92k|        }
 6918|       |
 6919|  1.92k|        Handler& handler;
 6920|  1.92k|        std::size_t arg_id;
 6921|  1.92k|    };
 6922|       |
 6923|  1.92k|    ++begin;
 6924|  1.92k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 6925|      0|        handler.on_error("Unexpected end of replacement field");
 6926|      0|        return begin;
 6927|      0|    }
 6928|       |
 6929|  1.92k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6929:9): [True: 0, False: 1.92k]
  ------------------
 6930|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6931|      0|    }
 6932|  1.92k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6932:14): [True: 0, False: 1.92k]
  ------------------
 6933|      0|        handler.on_literal_text(begin, begin + 1);
 6934|      0|    }
 6935|  1.92k|    else {
 6936|  1.92k|        auto adapter = id_adapter{handler, 0};
 6937|  1.92k|        begin = parse_arg_id(begin, end, adapter);
 6938|       |
 6939|  1.92k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 6940|      0|            handler.on_error("Missing '}' in format string");
 6941|      0|            return begin;
 6942|      0|        }
 6943|       |
 6944|  1.92k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6944:13): [True: 0, False: 1.92k]
  ------------------
 6945|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6946|      0|        }
 6947|  1.92k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6947:18): [True: 1.92k, False: 0]
  ------------------
 6948|  1.92k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 6949|      0|                handler.on_error("Unexpected end of replacement field");
 6950|      0|                return begin;
 6951|      0|            }
 6952|  1.92k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6953|  1.92k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  3.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.92k]
  |  |  |  Branch (859:45): [True: 0, False: 1.92k]
  |  |  |  Branch (859:45): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 6954|      0|                handler.on_error("Unknown format specifier");
 6955|      0|                return begin;
 6956|      0|            }
 6957|  1.92k|        }
 6958|      0|        else {
 6959|      0|            SCN_UNLIKELY_ATTR
 6960|      0|            handler.on_error("Missing '}' in format string");
 6961|      0|            return begin;
 6962|      0|        }
 6963|  1.92k|    }
 6964|  1.92k|    return begin + 1;
 6965|  1.92k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6403|  1.92k|{
 6404|  1.92k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|  1.92k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6405:9): [True: 1.92k, False: 0]
  |  Branch (6405:26): [True: 0, False: 1.92k]
  ------------------
 6406|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6407|      0|    }
 6408|       |
 6409|  1.92k|    handler();
 6410|  1.92k|    return begin;
 6411|  1.92k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6905|  1.92k|        {
 6906|  1.92k|            arg_id = handler.on_arg_id();
 6907|  1.92k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7082|  1.92k|    {
 7083|  1.92k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7084|  1.92k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6818|  1.92k|{
 6819|  1.92k|    auto do_presentation = [&]() -> const CharT* {
 6820|  1.92k|        if (*begin == CharT{'['}) {
 6821|  1.92k|            auto set = parse_presentation_set(begin, end, handler);
 6822|  1.92k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6823|       |                // clang-format off
 6824|  1.92k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|  1.92k|                return begin;
 6827|  1.92k|            }
 6828|  1.92k|            handler.on_character_set_string(set);
 6829|  1.92k|            return begin;
 6830|  1.92k|        }
 6831|  1.92k|        if (*begin == CharT{'/'}) {
 6832|  1.92k|            return parse_presentation_regex(begin, end, handler);
 6833|  1.92k|        }
 6834|  1.92k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.92k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6836|  1.92k|            handler.on_error("Invalid type specifier in format string");
 6837|  1.92k|            return begin;
 6838|  1.92k|        }
 6839|  1.92k|        handler.on_type(type);
 6840|  1.92k|        return begin;
 6841|  1.92k|    };
 6842|       |
 6843|  1.92k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6843:9): [True: 1.92k, False: 0]
  |  Branch (6843:28): [True: 1.92k, False: 0]
  ------------------
 6844|  1.92k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6844:9): [True: 1.92k, False: 0]
  |  Branch (6844:36): [True: 1.53k, False: 384]
  ------------------
 6845|  1.53k|        return do_presentation();
 6846|  1.53k|    }
 6847|       |
 6848|    384|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 384]
  |  |  ------------------
  ------------------
 6849|      0|        handler.on_error("Unexpected end of format string");
 6850|      0|        return begin;
 6851|      0|    }
 6852|       |
 6853|    384|    begin = parse_align(begin, end, handler);
 6854|    384|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 384]
  |  |  ------------------
  ------------------
 6855|      0|        handler.on_error("Unexpected end of format string");
 6856|      0|        return begin;
 6857|      0|    }
 6858|       |
 6859|    384|    begin = parse_width(begin, end, handler);
 6860|    384|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 384]
  |  |  ------------------
  ------------------
 6861|      0|        handler.on_error("Unexpected end of format string");
 6862|      0|        return begin;
 6863|      0|    }
 6864|       |
 6865|    384|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6865:9): [True: 0, False: 384]
  ------------------
 6866|      0|        ++begin;
 6867|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6868|      0|            handler.on_error("Unexpected end of format string");
 6869|      0|            return begin;
 6870|      0|        }
 6871|      0|        begin = parse_precision(begin, end, handler);
 6872|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|      0|            handler.on_error("Unexpected end of format string");
 6874|      0|            return begin;
 6875|      0|        }
 6876|      0|    }
 6877|       |
 6878|    384|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6878:9): [True: 384, False: 0]
  ------------------
 6879|    384|        handler.on_localized();
 6880|    384|        ++begin;
 6881|    384|    }
 6882|    384|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 384]
  |  |  ------------------
  ------------------
 6883|      0|        handler.on_error("Unexpected end of format string");
 6884|      0|        return begin;
 6885|      0|    }
 6886|       |
 6887|    384|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6887:9): [True: 384, False: 0]
  |  Branch (6887:25): [True: 0, False: 384]
  ------------------
 6888|      0|        do_presentation();
 6889|      0|    }
 6890|    384|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 384]
  |  |  ------------------
  ------------------
 6891|      0|        handler.on_error("Unexpected end of format string");
 6892|      0|        return begin;
 6893|      0|    }
 6894|       |
 6895|    384|    return begin;
 6896|    384|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6819|  1.53k|    auto do_presentation = [&]() -> const CharT* {
 6820|  1.53k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6820:13): [True: 0, False: 1.53k]
  ------------------
 6821|      0|            auto set = parse_presentation_set(begin, end, handler);
 6822|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6823|       |                // clang-format off
 6824|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6825|       |                // clang-format on
 6826|      0|                return begin;
 6827|      0|            }
 6828|      0|            handler.on_character_set_string(set);
 6829|      0|            return begin;
 6830|      0|        }
 6831|  1.53k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6831:13): [True: 0, False: 1.53k]
  ------------------
 6832|      0|            return parse_presentation_regex(begin, end, handler);
 6833|      0|        }
 6834|  1.53k|        presentation_type type = parse_presentation_type(*begin++);
 6835|  1.53k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.53k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.53k]
  |  |  ------------------
  ------------------
 6836|      0|            handler.on_error("Invalid type specifier in format string");
 6837|      0|            return begin;
 6838|      0|        }
 6839|  1.53k|        handler.on_type(type);
 6840|  1.53k|        return begin;
 6841|  1.53k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6492|    384|{
 6493|    384|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    384|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    384|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6494|       |
 6495|    384|    auto check_align = [](wchar_t ch) {
 6496|    384|        switch (ch) {
 6497|    384|            case L'<':
 6498|    384|                return align_type::left;
 6499|    384|            case L'>':
 6500|    384|                return align_type::right;
 6501|    384|            case L'^':
 6502|    384|                return align_type::center;
 6503|    384|            default:
 6504|    384|                return align_type::none;
 6505|    384|        }
 6506|    384|    };
 6507|       |
 6508|    384|    auto potential_fill_len = code_point_length(begin, end);
 6509|    384|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|    768|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 384]
  |  |  |  Branch (859:45): [True: 0, False: 384]
  |  |  |  Branch (859:45): [True: 0, False: 384]
  |  |  ------------------
  ------------------
 6510|    384|                     std::distance(begin, end) < potential_fill_len)) {
 6511|      0|        handler.on_error("Invalid encoding in fill character");
 6512|      0|        return begin;
 6513|      0|    }
 6514|       |
 6515|    384|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6516|       |
 6517|    384|    auto potential_fill = std::basic_string_view<CharT>{
 6518|    384|        begin, static_cast<size_t>(potential_fill_len)};
 6519|    384|    const auto begin_before_fill = begin;
 6520|    384|    begin += potential_fill_len;
 6521|       |
 6522|    384|    if (begin == end) {
  ------------------
  |  Branch (6522:9): [True: 0, False: 384]
  ------------------
 6523|      0|        return begin_before_fill;
 6524|      0|    }
 6525|       |
 6526|    384|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6527|    384|    const auto begin_after_fill = begin;
 6528|    384|    ++begin;
 6529|       |
 6530|    384|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6530:9): [True: 384, False: 0]
  ------------------
 6531|    384|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 384]
  |  |  ------------------
  ------------------
 6532|      0|            handler.on_error("Invalid fill character '{' in format string");
 6533|      0|            return begin;
 6534|      0|        }
 6535|    384|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6535:13): [True: 0, False: 384]
  ------------------
 6536|      0|            return begin_before_fill;
 6537|      0|        }
 6538|    384|    }
 6539|       |
 6540|    384|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6540:9): [True: 384, False: 0]
  ------------------
 6541|    384|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6541:13): [True: 0, False: 384]
  ------------------
 6542|      0|            handler.on_align(potential_align_on_fill);
 6543|      0|            return begin_after_fill;
 6544|      0|        }
 6545|    384|        return begin_before_fill;
 6546|    384|    }
 6547|       |
 6548|      0|    handler.on_fill(potential_fill);
 6549|      0|    handler.on_align(potential_align_after_fill);
 6550|      0|    return begin;
 6551|    384|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6495|    768|    auto check_align = [](wchar_t ch) {
 6496|    768|        switch (ch) {
 6497|      0|            case L'<':
  ------------------
  |  Branch (6497:13): [True: 0, False: 768]
  ------------------
 6498|      0|                return align_type::left;
 6499|      0|            case L'>':
  ------------------
  |  Branch (6499:13): [True: 0, False: 768]
  ------------------
 6500|      0|                return align_type::right;
 6501|      0|            case L'^':
  ------------------
  |  Branch (6501:13): [True: 0, False: 768]
  ------------------
 6502|      0|                return align_type::center;
 6503|    768|            default:
  ------------------
  |  Branch (6503:13): [True: 768, False: 0]
  ------------------
 6504|    768|                return align_type::none;
 6505|    768|        }
 6506|    768|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6557|    384|{
 6558|    384|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|    384|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    384|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6559|       |
 6560|    384|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6560:9): [True: 384, False: 0]
  |  Branch (6560:33): [True: 0, False: 384]
  ------------------
 6561|      0|        int width = parse_simple_int(begin, end);
 6562|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6563|      0|            handler.on_width(width);
 6564|      0|        }
 6565|      0|        else {
 6566|      0|            handler.on_error("Invalid field width");
 6567|      0|            return begin;
 6568|      0|        }
 6569|      0|    }
 6570|    384|    return begin;
 6571|    384|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7087|    384|    {
 7088|    384|        const auto cat = get_category_for_arg_type(m_arg_type);
 7089|    384|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7089:13): [True: 384, False: 0]
  ------------------
 7090|    384|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7090:13): [True: 384, False: 0]
  ------------------
 7091|    384|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7091:13): [True: 0, False: 384]
  ------------------
 7092|    384|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7092:13): [True: 0, False: 0]
  ------------------
 7093|      0|            SCN_UNLIKELY_ATTR
 7094|       |            // clang-format off
 7095|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7096|       |            // clang-format on
 7097|      0|        }
 7098|       |
 7099|    384|        Handler::on_localized();
 7100|    384|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8377|  1.92k|{
 8378|  1.92k|#define SCN_VISIT(Type)                                         \
 8379|  1.92k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8380|  1.92k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8381|  1.92k|    }                                                           \
 8382|  1.92k|    else {                                                      \
 8383|  1.92k|        return vis(monostate_val);                              \
 8384|  1.92k|    }
 8385|       |
 8386|  1.92k|    monostate monostate_val{};
 8387|       |
 8388|  1.92k|    switch (arg.m_type) {
 8389|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8389:9): [True: 0, False: 1.92k]
  ------------------
 8390|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8391|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8391:9): [True: 0, False: 1.92k]
  ------------------
 8392|      0|            SCN_VISIT(short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8393|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8393:9): [True: 0, False: 1.92k]
  ------------------
 8394|      0|            SCN_VISIT(int);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8395|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8395:9): [True: 0, False: 1.92k]
  ------------------
 8396|      0|            SCN_VISIT(long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8397|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8397:9): [True: 0, False: 1.92k]
  ------------------
 8398|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8399|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8399:9): [True: 0, False: 1.92k]
  ------------------
 8400|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8401|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8401:9): [True: 0, False: 1.92k]
  ------------------
 8402|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8403|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8403:9): [True: 0, False: 1.92k]
  ------------------
 8404|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8405|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8405:9): [True: 0, False: 1.92k]
  ------------------
 8406|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8407|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8407:9): [True: 0, False: 1.92k]
  ------------------
 8408|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8409|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8409:9): [True: 0, False: 1.92k]
  ------------------
 8410|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8411|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8411:9): [True: 0, False: 1.92k]
  ------------------
 8412|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8413|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8413:9): [True: 0, False: 1.92k]
  ------------------
 8414|      0|            SCN_VISIT(char);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8415|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8415:9): [True: 0, False: 1.92k]
  ------------------
 8416|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8417|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8417:9): [True: 0, False: 1.92k]
  ------------------
 8418|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8419|    640|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8419:9): [True: 640, False: 1.28k]
  ------------------
 8420|    640|            SCN_VISIT(float);
  ------------------
  |  | 8379|    640|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    640|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    640|    }                                                           \
  |  | 8382|    640|    else {                                                      \
  |  | 8383|    640|        return vis(monostate_val);                              \
  |  | 8384|    640|    }
  ------------------
 8421|    640|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8421:9): [True: 640, False: 1.28k]
  ------------------
 8422|    640|            SCN_VISIT(double);
  ------------------
  |  | 8379|    640|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    640|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    640|    }                                                           \
  |  | 8382|    640|    else {                                                      \
  |  | 8383|    640|        return vis(monostate_val);                              \
  |  | 8384|    640|    }
  ------------------
 8423|    640|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8423:9): [True: 640, False: 1.28k]
  ------------------
 8424|    640|            SCN_VISIT(long double);
  ------------------
  |  | 8379|    640|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|    640|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|    640|    }                                                           \
  |  | 8382|    640|    else {                                                      \
  |  | 8383|    640|        return vis(monostate_val);                              \
  |  | 8384|    640|    }
  ------------------
 8425|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8425:9): [True: 0, False: 1.92k]
  ------------------
 8426|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8427|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8427:9): [True: 0, False: 1.92k]
  ------------------
 8428|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8429|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8429:9): [True: 0, False: 1.92k]
  ------------------
 8430|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8431|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8431:9): [True: 0, False: 1.92k]
  ------------------
 8432|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8433|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8433:9): [True: 0, False: 1.92k]
  ------------------
 8434|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8435|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8435:9): [True: 0, False: 1.92k]
  ------------------
 8436|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8379|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8379:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8380|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8381|      0|    }                                                           \
  |  | 8382|      0|    else {                                                      \
  |  | 8383|      0|        return vis(monostate_val);                              \
  |  | 8384|      0|    }
  ------------------
 8437|       |
 8438|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.92k]
  ------------------
 8439|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8440|      0|            return vis(
 8441|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8442|       |#else
 8443|       |            return vis(monostate_val);
 8444|       |#endif
 8445|       |
 8446|      0|            SCN_CLANG_PUSH
 8447|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8448|       |
 8449|      0|            SCN_UNLIKELY_ATTR
 8450|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.92k]
  ------------------
 8451|      0|        default: {
  ------------------
  |  Branch (8451:9): [True: 0, False: 1.92k]
  ------------------
 8452|      0|            return vis(monostate_val);
 8453|      0|        }
 8454|       |
 8455|  1.92k|            SCN_CLANG_POP
 8456|  1.92k|    }
 8457|       |
 8458|      0|#undef SCN_VISIT
 8459|       |
 8460|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8461|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8462|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4046|  2.49k|    {
 4047|  2.49k|        sync(0);
 4048|  2.49k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5380|  25.1k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5380|    384|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|    384|{
   89|    384|    auto args = make_scan_args<wscan_context, Args...>();
   90|    384|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|    384|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|    384|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  1.15k|{
   44|  1.15k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  1.15k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|    384|{
  127|    384|    auto args = make_scan_args<wscan_context, Args...>();
  128|    384|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|    384|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|    384|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  1.15k|{
   60|  1.15k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  1.15k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|     64|{
  163|     64|    T value;
  164|     64|    auto arg = detail::make_arg<wscan_context>(value);
  165|     64|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|     64|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     64|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     64|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 64, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     64|    }                                                  \
  |  |  |  | 3642|     64|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|     64|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|    192|{
   72|    192|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|    192|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|    384|{
   89|    384|    auto args = make_scan_args<wscan_context, Args...>();
   90|    384|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|    384|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|    384|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|    384|{
  127|    384|    auto args = make_scan_args<wscan_context, Args...>();
  128|    384|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|    384|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|    384|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|     64|{
  163|     64|    T value;
  164|     64|    auto arg = detail::make_arg<wscan_context>(value);
  165|     64|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|     64|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     64|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     64|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 64, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     64|    }                                                  \
  |  |  |  | 3642|     64|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|     64|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEEOSE_NS0_24basic_scan_format_stringIwNSJ_13type_identityISE_E4typeEJDpNSV_ISP_E4typeEEEE:
   88|    384|{
   89|    384|    auto args = make_scan_args<wscan_context, Args...>();
   90|    384|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|    384|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|    384|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0ELSB_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEERKT0_OSF_NS0_24basic_scan_format_stringIwNSK_13type_identityISF_E4typeEJDpNSZ_ISQ_E4typeEEEE:
  126|    384|{
  127|    384|    auto args = make_scan_args<wscan_context, Args...>();
  128|    384|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|    384|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|    384|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJT_EEEEEOSE_:
  162|     64|{
  163|     64|    T value;
  164|     64|    auto arg = detail::make_arg<wscan_context>(value);
  165|     64|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|     64|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     64|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     64|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 64, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     64|    }                                                  \
  |  |  |  | 3642|     64|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|     64|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|    384|{
   89|    384|    auto args = make_scan_args<wscan_context, Args...>();
   90|    384|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|    384|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|    384|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  1.15k|{
   44|  1.15k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  1.15k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|    384|{
  127|    384|    auto args = make_scan_args<wscan_context, Args...>();
  128|    384|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|    384|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|    384|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  1.15k|{
   60|  1.15k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  1.15k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  1.15k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|     64|{
  163|     64|    T value;
  164|     64|    auto arg = detail::make_arg<wscan_context>(value);
  165|     64|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|     64|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     64|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     64|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 64, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     64|    }                                                  \
  |  |  |  | 3642|     64|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|     64|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|    192|{
   72|    192|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|    192|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|    384|{
   89|    384|    auto args = make_scan_args<wscan_context, Args...>();
   90|    384|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|    384|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|    384|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|    384|{
  127|    384|    auto args = make_scan_args<wscan_context, Args...>();
  128|    384|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|    384|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|    384|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|     64|{
  163|     64|    T value;
  164|     64|    auto arg = detail::make_arg<wscan_context>(value);
  165|     64|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|     64|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     64|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     64|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 64, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     64|    }                                                  \
  |  |  |  | 3642|     64|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|     64|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
   88|    384|{
   89|    384|    auto args = make_scan_args<wscan_context, Args...>();
   90|    384|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|    384|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|    384|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EELPv0ELSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|    384|{
  127|    384|    auto args = make_scan_args<wscan_context, Args...>();
  128|    384|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|    384|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|    384|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|    384|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
  162|     64|{
  163|     64|    T value;
  164|     64|    auto arg = detail::make_arg<wscan_context>(value);
  165|     64|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3643|     64|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|     64|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|     64|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|     64|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 64, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     64|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     64|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     64|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     64|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     64|    }                                                  \
  |  |  |  | 3642|     64|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|      0|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|     64|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|   114k|{
  653|   114k|    static_assert(std::is_same_v<Locale, std::locale>);
  654|   114k|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|  56.7k|{
  659|  56.7k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|  56.7k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 28.3k, False: 28.3k]
  ------------------
  661|  56.7k|                    : std::locale{};
  662|  56.7k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|  67.1k|{
 1221|  67.1k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  67.1k|                                  m_nan_payload_buffer, value);
 1223|  67.1k|    value = this->setsign(value);
 1224|  67.1k|    return n;
 1225|  67.1k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|    448|{
 1221|    448|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    448|                                  m_nan_payload_buffer, value);
 1223|    448|    value = this->setsign(value);
 1224|    448|    return n;
 1225|    448|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|  89.8k|{
 1221|  89.8k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  89.8k|                                  m_nan_payload_buffer, value);
 1223|  89.8k|    value = this->setsign(value);
 1224|  89.8k|    return n;
 1225|  89.8k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|    448|{
 1221|    448|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    448|                                  m_nan_payload_buffer, value);
 1223|    448|    value = this->setsign(value);
 1224|    448|    return n;
 1225|    448|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|  89.8k|{
 1221|  89.8k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|  89.8k|                                  m_nan_payload_buffer, value);
 1223|  89.8k|    value = this->setsign(value);
 1224|  89.8k|    return n;
 1225|  89.8k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|    448|{
 1221|    448|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|    448|                                  m_nan_payload_buffer, value);
 1223|    448|    value = this->setsign(value);
 1224|    448|    return n;
 1225|    448|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2175|  57.2k|{
 2176|  57.2k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2177|  57.2k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  54.4k|{
 2184|  54.4k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  54.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  54.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 53.9k, False: 576]
  |  |  ------------------
  ------------------
 2186|  53.9k|        source.sync(*n);
 2187|  53.9k|    }
 2188|    576|    else {
 2189|    576|        source.sync_all();
 2190|    576|    }
 2191|  54.4k|    return n;
 2192|  54.4k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2199|  1.15k|{
 2200|  1.15k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2201|  1.15k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|  1.15k|{
 2208|  1.15k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|  1.15k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.15k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.15k]
  |  |  ------------------
  ------------------
 2210|      0|        source.sync(*n);
 2211|      0|    }
 2212|  1.15k|    else {
 2213|  1.15k|        source.sync_all();
 2214|  1.15k|    }
 2215|  1.15k|    return n;
 2216|  1.15k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   130k|{
  194|   130k|    return find_classic_impl(
  195|   130k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   130k|        [](char32_t cp) { return is_cp_space(cp); });
  197|   130k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   248k|{
  202|   248k|    return find_classic_impl(
  203|   248k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   248k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|   248k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2132|  57.2k|{
 2133|  57.2k|    return vscan_internal(source, format, args);
 2134|  57.2k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2138|  54.4k|{
 2139|  54.4k|    auto n = vscan_internal(source, format, args);
 2140|  54.4k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  54.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 53.9k, False: 576]
  |  |  ------------------
  ------------------
 2141|  53.9k|        source.sync(*n);
 2142|  53.9k|    }
 2143|    576|    else {
 2144|    576|        source.sync_all();
 2145|    576|    }
 2146|  54.4k|    return n;
 2147|  54.4k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2152|  1.15k|{
 2153|  1.15k|    return vscan_internal(source, format, args);
 2154|  1.15k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2158|  1.15k|{
 2159|  1.15k|    auto n = vscan_internal(source, format, args);
 2160|  1.15k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.15k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.15k]
  |  |  ------------------
  ------------------
 2161|      0|        source.sync(*n);
 2162|      0|    }
 2163|  1.15k|    else {
 2164|  1.15k|        source.sync_all();
 2165|  1.15k|    }
 2166|  1.15k|    return n;
 2167|  1.15k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2242|  14.0k|{
 2243|  14.0k|    return vscan_value_internal(source, arg);
 2244|  14.0k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2247|  11.1k|{
 2248|  11.1k|    auto n = vscan_value_internal(source, arg);
 2249|  11.1k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  11.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.0k, False: 96]
  |  |  ------------------
  ------------------
 2250|  11.0k|        source.sync(*n);
 2251|  11.0k|    }
 2252|     96|    else {
 2253|     96|        source.sync_all();
 2254|     96|    }
 2255|  11.1k|    return n;
 2256|  11.1k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2261|    192|{
 2262|    192|    return vscan_value_internal(source, arg);
 2263|    192|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2267|    192|{
 2268|    192|    auto n = vscan_value_internal(source, arg);
 2269|    192|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|    192|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 192]
  |  |  ------------------
  ------------------
 2270|      0|        source.sync(*n);
 2271|      0|    }
 2272|    192|    else {
 2273|    192|        source.sync_all();
 2274|    192|    }
 2275|    192|    return n;
 2276|    192|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   130k|{
  118|   130k|    auto it = source.begin();
  119|       |
  120|   397k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 328k, False: 69.5k]
  ------------------
  121|   328k|        auto sv =
  122|   328k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   328k|                .substr(0, 8);
  124|       |
  125|   328k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 323k, False: 4.54k]
  ------------------
  126|   323k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   323k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   323k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 56.4k, False: 267k]
  ------------------
  129|  56.4k|                break;
  130|  56.4k|            }
  131|   267k|            continue;
  132|   323k|        }
  133|       |
  134|  12.9k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 12.7k, False: 200]
  ------------------
  135|  12.7k|            auto tmp =
  136|  12.7k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  12.7k|            auto res = get_next_code_point(tmp);
  138|  12.7k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 4.34k, False: 8.44k]
  ------------------
  139|  4.34k|                return it;
  140|  4.34k|            }
  141|  8.44k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  8.44k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  8.44k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  8.44k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  8.44k|        }
  145|  4.54k|    }
  146|       |
  147|   125k|    return detail::make_string_view_iterator(source, it);
  148|   130k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|   492k|{
  105|   492k|    static_assert(sizeof(*source.data()) == 1);
  106|   492k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|   492k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   492k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|   492k|    uint64_t word{};
  108|   492k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|   492k|    return has_byte_greater(word, 127) != 0;
  111|   492k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  2.01M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|  12.7k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   248k|{
  118|   248k|    auto it = source.begin();
  119|       |
  120|   272k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 163k, False: 109k]
  ------------------
  121|   163k|        auto sv =
  122|   163k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   163k|                .substr(0, 8);
  124|       |
  125|   163k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 151k, False: 12.2k]
  ------------------
  126|   151k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   151k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   151k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 128k, False: 22.5k]
  ------------------
  129|   128k|                break;
  130|   128k|            }
  131|  22.5k|            continue;
  132|   151k|        }
  133|       |
  134|  36.1k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 34.2k, False: 1.89k]
  ------------------
  135|  34.2k|            auto tmp =
  136|  34.2k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  34.2k|            auto res = get_next_code_point(tmp);
  138|  34.2k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 10.3k, False: 23.8k]
  ------------------
  139|  10.3k|                return it;
  140|  10.3k|            }
  141|  23.8k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  23.8k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  23.8k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  23.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  23.8k|        }
  145|  12.2k|    }
  146|       |
  147|   238k|    return detail::make_string_view_iterator(source, it);
  148|   248k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|   248k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  34.2k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  67.1k|{
 1138|  67.1k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 166, False: 66.9k]
  ------------------
 1139|    166|        value = std::numeric_limits<T>::infinity();
 1140|    166|        return 3;
 1141|    166|    }
 1142|  66.9k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 258, False: 66.6k]
  ------------------
 1143|    258|        value = std::numeric_limits<T>::infinity();
 1144|    258|        return 8;
 1145|    258|    }
 1146|  66.6k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 3.77k, False: 62.9k]
  ------------------
 1147|  3.77k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  3.77k|        return 3;
 1149|  3.77k|    }
 1150|  62.9k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 62.9k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  62.9k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  62.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  62.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  62.9k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 18.1k, False: 44.7k]
  ------------------
 1185|  18.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  18.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38, False: 18.0k]
  |  |  ------------------
  ------------------
 1186|     38|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     38|                                         "Invalid floating-point digit");
 1188|     38|        }
 1189|  18.1k|    }
 1190|  62.8k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  62.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75, False: 62.8k]
  |  |  ------------------
  ------------------
 1191|     75|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|     75|                                     "Invalid floating-point digit");
 1193|     75|    }
 1194|       |
 1195|  62.8k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  62.8k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  62.8k|            double tmp{};
 1200|  62.8k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  62.8k|            value = tmp;
 1202|  62.8k|            return ret;
 1203|  62.8k|        }
 1204|  62.8k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  62.8k|            return fast_float_fallback(data, value);
 1208|  62.8k|        }
 1209|  62.8k|    }
 1210|  62.8k|    else {
 1211|       |        // Default to fast_float
 1212|  62.8k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  62.8k|    }
 1214|  62.8k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|  62.8k|    {
 1078|  62.8k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|   282k|    {
  712|   282k|        return {kind, options};
  713|   282k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|  62.8k|    {
 1082|  62.8k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 18.0k, False: 44.7k]
  ------------------
 1083|  62.8k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 3.95k, False: 40.7k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  22.0k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  22.0k|                                              value);
 1087|  22.0k|        }
 1088|       |
 1089|  40.7k|        const auto flags = get_flags();
 1090|  40.7k|        const auto view = get_view();
 1091|  40.7k|        const auto result = fast_float::from_chars(
 1092|  40.7k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  40.7k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  40.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 40.7k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  40.7k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  40.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 170, False: 40.5k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|    170|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|    170|                                              value);
 1102|    170|        }
 1103|       |
 1104|  40.5k|        return result.ptr - view.data();
 1105|  40.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  22.2k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  22.2k|    {
 1048|  22.2k|#if !SCN_DISABLE_STRTOD
 1049|  22.2k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  22.2k|    }
 1056|  22.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|  22.2k|    {
  894|  22.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|  22.2k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|  22.2k|    {
  898|  22.2k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  22.2k|                           generic_strtod);
  900|  22.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  22.2k|    {
  732|  22.2k|        CharT* end{};
  733|  22.2k|        errno = 0;
  734|  22.2k|        value = strtod_cb(src, &end);
  735|  22.2k|        const auto saved_errno = errno;
  736|  22.2k|        auto chars_read = end - src;
  737|       |
  738|  22.2k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  22.2k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 236, False: 21.9k]
  |  |  ------------------
  ------------------
  740|    236|            return unexpected(e);
  741|    236|        }
  742|       |
  743|  21.9k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 18.0k, False: 3.91k]
  ------------------
  744|  21.9k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 18.0k, False: 0]
  ------------------
  745|  18.0k|            chars_read -= 2;
  746|  18.0k|        }
  747|       |
  748|  21.9k|        return chars_read;
  749|  22.2k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|  22.2k|    {
  778|  22.2k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 7.60k, False: 14.6k]
  |  Branch (778:37): [True: 0, False: 7.60k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  22.2k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 3.95k, False: 18.2k]
  ------------------
  785|  22.2k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 3.95k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  22.2k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 560, False: 21.6k]
  |  Branch (791:34): [True: 36, False: 524]
  ------------------
  792|     36|            SCN_UNLIKELY_ATTR
  793|     36|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|     36|        }
  795|       |
  796|  22.1k|        SCN_GCC_COMPAT_PUSH
  797|  22.1k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  22.1k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 22.1k, False: 0]
  ------------------
  800|  22.1k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 22.1k, False: 0]
  ------------------
  801|  22.1k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 200, False: 21.9k]
  ------------------
  802|    200|            SCN_UNLIKELY_ATTR
  803|    200|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|    200|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  21.9k|            return {};
  809|  22.1k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|  22.7k|{
  687|  22.7k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 7.64k, False: 15.1k]
  |  Branch (687:25): [True: 0, False: 15.1k]
  ------------------
  688|  22.7k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  22.2k|    {
  755|  22.2k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 22.1k, False: 69]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  22.1k|            auto first_space = read_until_classic_space(input.view());
  758|  22.1k|            input.assign(
  759|  22.1k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  22.1k|        }
  761|       |
  762|  22.2k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 18.0k, False: 4.12k]
  ------------------
  763|  18.0k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  18.0k|                input.get_allocated_string().insert(0, "0x");
  765|  18.0k|            }
  766|  18.0k|            else {
  767|  18.0k|                input.get_allocated_string().insert(0, L"0x");
  768|  18.0k|            }
  769|  18.0k|        }
  770|       |
  771|  22.2k|        return input.get_allocated_string().c_str();
  772|  22.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|  22.2k|    {
  905|  22.2k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  22.2k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  22.2k|        }
  908|  22.2k|        else {
  909|  22.2k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  22.2k|        }
  911|  22.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|  22.2k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  22.2k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|  22.2k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|  22.2k|            return std::strtof(str, str_end);
  839|  22.2k|        }
  840|  22.2k|        else if constexpr (std::is_same_v<T, double>) {
  841|  22.2k|            return std::strtod(str, str_end);
  842|  22.2k|        }
  843|  22.2k|        else if constexpr (std::is_same_v<T, long double>) {
  844|  22.2k|            return std::strtold(str, str_end);
  845|  22.2k|        }
  846|  22.2k|#endif
  847|  22.2k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  98.6k|    {
 1061|  98.6k|        unsigned format_flags{};
 1062|  98.6k|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 98.6k, False: 40]
  ------------------
 1063|  98.6k|            format_flags |= fast_float::fixed;
 1064|  98.6k|        }
 1065|  98.6k|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 89.2k, False: 9.42k]
  ------------------
 1066|  89.2k|            format_flags |= fast_float::scientific;
 1067|  89.2k|        }
 1068|       |
 1069|  98.6k|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  98.6k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|  40.7k|    {
 1110|  40.7k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  40.7k|            return m_input.view();
 1112|  40.7k|        }
 1113|  40.7k|        else if constexpr (sizeof(CharT) == 2) {
 1114|  40.7k|            return std::u16string_view{
 1115|  40.7k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  40.7k|                m_input.view().size()};
 1117|  40.7k|        }
 1118|  40.7k|        else {
 1119|  40.7k|            return std::u32string_view{
 1120|  40.7k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  40.7k|                m_input.view().size()};
 1122|  40.7k|        }
 1123|  40.7k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    448|{
 1138|    448|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 448]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    448|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 448]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    448|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 448]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    448|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 448]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    448|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    448|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    448|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    448|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 128, False: 320]
  ------------------
 1185|    128|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 0]
  |  |  ------------------
  ------------------
 1186|    128|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|    128|                                         "Invalid floating-point digit");
 1188|    128|        }
 1189|    128|    }
 1190|    320|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 320, False: 0]
  |  |  ------------------
  ------------------
 1191|    320|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    320|                                     "Invalid floating-point digit");
 1193|    320|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  89.8k|{
 1138|  89.8k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 202, False: 89.6k]
  ------------------
 1139|    202|        value = std::numeric_limits<T>::infinity();
 1140|    202|        return 3;
 1141|    202|    }
 1142|  89.6k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 286, False: 89.3k]
  ------------------
 1143|    286|        value = std::numeric_limits<T>::infinity();
 1144|    286|        return 8;
 1145|    286|    }
 1146|  89.3k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 3.97k, False: 85.4k]
  ------------------
 1147|  3.97k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  3.97k|        return 3;
 1149|  3.97k|    }
 1150|  85.4k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 85.4k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  85.4k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  85.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  85.4k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 20.1k, False: 65.2k]
  ------------------
 1185|  20.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48, False: 20.0k]
  |  |  ------------------
  ------------------
 1186|     48|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     48|                                         "Invalid floating-point digit");
 1188|     48|        }
 1189|  20.1k|    }
 1190|  85.3k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 115, False: 85.2k]
  |  |  ------------------
  ------------------
 1191|    115|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    115|                                     "Invalid floating-point digit");
 1193|    115|    }
 1194|       |
 1195|  85.2k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  85.2k|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  85.2k|            double tmp{};
 1200|  85.2k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  85.2k|            value = tmp;
 1202|  85.2k|            return ret;
 1203|  85.2k|        }
 1204|  85.2k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  85.2k|            return fast_float_fallback(data, value);
 1208|  85.2k|        }
 1209|  85.2k|    }
 1210|  85.2k|    else {
 1211|       |        // Default to fast_float
 1212|  85.2k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  85.2k|    }
 1214|  85.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|  85.2k|    {
 1078|  85.2k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|  85.2k|    {
 1082|  85.2k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 20.0k, False: 65.1k]
  ------------------
 1083|  85.2k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 7.26k, False: 57.9k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  27.3k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  27.3k|                                              value);
 1087|  27.3k|        }
 1088|       |
 1089|  57.9k|        const auto flags = get_flags();
 1090|  57.9k|        const auto view = get_view();
 1091|  57.9k|        const auto result = fast_float::from_chars(
 1092|  57.9k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|  57.9k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 57.9k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|  57.9k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 57.8k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|     24|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|     24|                                              value);
 1102|     24|        }
 1103|       |
 1104|  57.8k|        return result.ptr - view.data();
 1105|  57.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  27.3k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  27.3k|    {
 1048|  27.3k|#if !SCN_DISABLE_STRTOD
 1049|  27.3k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  27.3k|    }
 1056|  27.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|  27.3k|    {
  894|  27.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|  27.3k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|  27.3k|    {
  898|  27.3k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  27.3k|                           generic_strtod);
  900|  27.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  27.3k|    {
  732|  27.3k|        CharT* end{};
  733|  27.3k|        errno = 0;
  734|  27.3k|        value = strtod_cb(src, &end);
  735|  27.3k|        const auto saved_errno = errno;
  736|  27.3k|        auto chars_read = end - src;
  737|       |
  738|  27.3k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  27.3k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  27.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 27.3k]
  |  |  ------------------
  ------------------
  740|     24|            return unexpected(e);
  741|     24|        }
  742|       |
  743|  27.3k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 20.0k, False: 7.26k]
  ------------------
  744|  27.3k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 20.0k, False: 0]
  ------------------
  745|  20.0k|            chars_read -= 2;
  746|  20.0k|        }
  747|       |
  748|  27.3k|        return chars_read;
  749|  27.3k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|  27.3k|    {
  778|  27.3k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 8.12k, False: 19.2k]
  |  Branch (778:37): [True: 0, False: 8.12k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  27.3k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 7.26k, False: 20.0k]
  ------------------
  785|  27.3k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 7.26k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  27.3k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 24, False: 27.3k]
  |  Branch (791:34): [True: 0, False: 24]
  ------------------
  792|      0|            SCN_UNLIKELY_ATTR
  793|      0|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|      0|        }
  795|       |
  796|  27.3k|        SCN_GCC_COMPAT_PUSH
  797|  27.3k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  27.3k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 27.3k, False: 0]
  ------------------
  800|  27.3k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 27.3k, False: 0]
  ------------------
  801|  27.3k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 24, False: 27.3k]
  ------------------
  802|     24|            SCN_UNLIKELY_ATTR
  803|     24|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|     24|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  27.3k|            return {};
  809|  27.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|  27.3k|{
  691|  27.3k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 8.12k, False: 19.2k]
  |  Branch (691:24): [True: 0, False: 19.2k]
  ------------------
  692|  27.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  27.3k|    {
  755|  27.3k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 27.3k, False: 36]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  27.3k|            auto first_space = read_until_classic_space(input.view());
  758|  27.3k|            input.assign(
  759|  27.3k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  27.3k|        }
  761|       |
  762|  27.3k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 20.0k, False: 7.28k]
  ------------------
  763|  20.0k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  20.0k|                input.get_allocated_string().insert(0, "0x");
  765|  20.0k|            }
  766|  20.0k|            else {
  767|  20.0k|                input.get_allocated_string().insert(0, L"0x");
  768|  20.0k|            }
  769|  20.0k|        }
  770|       |
  771|  27.3k|        return input.get_allocated_string().c_str();
  772|  27.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|  27.3k|    {
  905|  27.3k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  27.3k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  27.3k|        }
  908|  27.3k|        else {
  909|  27.3k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  27.3k|        }
  911|  27.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|  27.3k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  27.3k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|  27.3k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|  27.3k|            return std::strtof(str, str_end);
  839|  27.3k|        }
  840|  27.3k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|  27.3k|            return std::strtod(str, str_end);
  842|  27.3k|        }
  843|  27.3k|        else if constexpr (std::is_same_v<T, long double>) {
  844|  27.3k|            return std::strtold(str, str_end);
  845|  27.3k|        }
  846|  27.3k|#endif
  847|  27.3k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|  57.9k|    {
 1110|  57.9k|        if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (1110:23): [Folded - Ignored]
  ------------------
 1111|  57.9k|            return m_input.view();
 1112|  57.9k|        }
 1113|  57.9k|        else if constexpr (sizeof(CharT) == 2) {
 1114|  57.9k|            return std::u16string_view{
 1115|  57.9k|                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|  57.9k|                m_input.view().size()};
 1117|  57.9k|        }
 1118|  57.9k|        else {
 1119|  57.9k|            return std::u32string_view{
 1120|  57.9k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|  57.9k|                m_input.view().size()};
 1122|  57.9k|        }
 1123|  57.9k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    448|{
 1138|    448|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 448]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    448|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 448]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    448|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 448]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    448|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 448]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    448|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    448|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    448|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    448|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 128, False: 320]
  ------------------
 1185|    128|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 0]
  |  |  ------------------
  ------------------
 1186|    128|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|    128|                                         "Invalid floating-point digit");
 1188|    128|        }
 1189|    128|    }
 1190|    320|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 320, False: 0]
  |  |  ------------------
  ------------------
 1191|    320|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    320|                                     "Invalid floating-point digit");
 1193|    320|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|  89.8k|{
 1138|  89.8k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 202, False: 89.6k]
  ------------------
 1139|    202|        value = std::numeric_limits<T>::infinity();
 1140|    202|        return 3;
 1141|    202|    }
 1142|  89.6k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 286, False: 89.3k]
  ------------------
 1143|    286|        value = std::numeric_limits<T>::infinity();
 1144|    286|        return 8;
 1145|    286|    }
 1146|  89.3k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 3.97k, False: 85.4k]
  ------------------
 1147|  3.97k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  3.97k|        return 3;
 1149|  3.97k|    }
 1150|  85.4k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 85.4k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|  85.4k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|  85.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|  85.4k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 20.1k, False: 65.2k]
  ------------------
 1185|  20.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  20.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48, False: 20.0k]
  |  |  ------------------
  ------------------
 1186|     48|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|     48|                                         "Invalid floating-point digit");
 1188|     48|        }
 1189|  20.1k|    }
 1190|  85.3k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|  85.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 115, False: 85.2k]
  |  |  ------------------
  ------------------
 1191|    115|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    115|                                     "Invalid floating-point digit");
 1193|    115|    }
 1194|       |
 1195|  85.2k|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|  85.2k|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|  85.2k|            double tmp{};
 1200|  85.2k|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|  85.2k|            value = tmp;
 1202|  85.2k|            return ret;
 1203|  85.2k|        }
 1204|  85.2k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|  85.2k|            return fast_float_fallback(data, value);
 1208|  85.2k|        }
 1209|  85.2k|    }
 1210|  85.2k|    else {
 1211|       |        // Default to fast_float
 1212|  85.2k|        return fast_float_impl<CharT, T>{data}(value);
 1213|  85.2k|    }
 1214|  85.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  85.2k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  85.2k|    {
 1048|  85.2k|#if !SCN_DISABLE_STRTOD
 1049|  85.2k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  85.2k|    }
 1056|  85.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|  85.2k|    {
  894|  85.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  85.2k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|  85.2k|    {
  898|  85.2k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  85.2k|                           generic_strtod);
  900|  85.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|  85.2k|    {
  732|  85.2k|        CharT* end{};
  733|  85.2k|        errno = 0;
  734|  85.2k|        value = strtod_cb(src, &end);
  735|  85.2k|        const auto saved_errno = errno;
  736|  85.2k|        auto chars_read = end - src;
  737|       |
  738|  85.2k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  85.2k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  85.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24, False: 85.2k]
  |  |  ------------------
  ------------------
  740|     24|            return unexpected(e);
  741|     24|        }
  742|       |
  743|  85.2k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 20.0k, False: 65.1k]
  ------------------
  744|  85.2k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 20.0k, False: 0]
  ------------------
  745|  20.0k|            chars_read -= 2;
  746|  20.0k|        }
  747|       |
  748|  85.2k|        return chars_read;
  749|  85.2k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  85.2k|    {
  778|  85.2k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 23.7k, False: 61.4k]
  |  Branch (778:37): [True: 0, False: 23.7k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  85.2k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 7.26k, False: 77.9k]
  ------------------
  785|  85.2k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 7.26k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  85.2k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 24, False: 85.2k]
  |  Branch (791:34): [True: 0, False: 24]
  ------------------
  792|      0|            SCN_UNLIKELY_ATTR
  793|      0|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|      0|        }
  795|       |
  796|  85.2k|        SCN_GCC_COMPAT_PUSH
  797|  85.2k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  85.2k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 85.2k, False: 0]
  ------------------
  800|  85.2k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 85.2k, False: 0]
  ------------------
  801|  85.2k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 24, False: 85.2k]
  ------------------
  802|     24|            SCN_UNLIKELY_ATTR
  803|     24|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|     24|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  85.2k|            return {};
  809|  85.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  85.2k|{
  695|  85.2k|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 23.7k, False: 61.5k]
  |  Branch (695:26): [True: 0, False: 61.5k]
  ------------------
  696|  85.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  85.2k|    {
  755|  85.2k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 80.8k, False: 4.43k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  80.8k|            auto first_space = read_until_classic_space(input.view());
  758|  80.8k|            input.assign(
  759|  80.8k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  80.8k|        }
  761|       |
  762|  85.2k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 20.0k, False: 65.1k]
  ------------------
  763|  20.0k|            if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (763:27): [Folded - Ignored]
  ------------------
  764|  20.0k|                input.get_allocated_string().insert(0, "0x");
  765|  20.0k|            }
  766|  20.0k|            else {
  767|  20.0k|                input.get_allocated_string().insert(0, L"0x");
  768|  20.0k|            }
  769|  20.0k|        }
  770|       |
  771|  85.2k|        return input.get_allocated_string().c_str();
  772|  85.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|  85.2k|    {
  905|  85.2k|        if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (905:23): [Folded - Ignored]
  ------------------
  906|  85.2k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|  85.2k|        }
  908|  85.2k|        else {
  909|  85.2k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  85.2k|        }
  911|  85.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|  85.2k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|  85.2k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|  85.2k|        if constexpr (std::is_same_v<T, float>) {
  ------------------
  |  Branch (837:23): [Folded - Ignored]
  ------------------
  838|  85.2k|            return std::strtof(str, str_end);
  839|  85.2k|        }
  840|  85.2k|        else if constexpr (std::is_same_v<T, double>) {
  ------------------
  |  Branch (840:28): [Folded - Ignored]
  ------------------
  841|  85.2k|            return std::strtod(str, str_end);
  842|  85.2k|        }
  843|  85.2k|        else if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (843:28): [Folded - Ignored]
  ------------------
  844|  85.2k|            return std::strtold(str, str_end);
  845|  85.2k|        }
  846|  85.2k|#endif
  847|  85.2k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|    448|{
 1138|    448|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 448]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|    448|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 448]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|    448|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 448]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|    448|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 448]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|    448|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|    448|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    448|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|    448|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 128, False: 320]
  ------------------
 1185|    128|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|    128|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128, False: 0]
  |  |  ------------------
  ------------------
 1186|    128|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|    128|                                         "Invalid floating-point digit");
 1188|    128|        }
 1189|    128|    }
 1190|    320|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|    320|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 320, False: 0]
  |  |  ------------------
  ------------------
 1191|    320|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|    320|                                     "Invalid floating-point digit");
 1193|    320|    }
 1194|       |
 1195|      0|    if constexpr (std::is_same_v<T, long double>) {
  ------------------
  |  Branch (1195:19): [Folded - Ignored]
  ------------------
 1196|      0|        if constexpr (sizeof(double) == sizeof(long double)) {
  ------------------
  |  Branch (1196:23): [Folded - Ignored]
  ------------------
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|      0|            double tmp{};
 1200|      0|            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|      0|            value = tmp;
 1202|      0|            return ret;
 1203|      0|        }
 1204|      0|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|      0|            return fast_float_fallback(data, value);
 1208|      0|        }
 1209|      0|    }
 1210|      0|    else {
 1211|       |        // Default to fast_float
 1212|      0|        return fast_float_impl<CharT, T>{data}(value);
 1213|      0|    }
 1214|      0|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|   108k|{
 2065|   108k|    const auto argcount = args.size();
 2066|   108k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 22.2k, False: 86.7k]
  |  Branch (2066:60): [True: 22.2k, False: 0]
  ------------------
 2067|  22.2k|        auto arg = args.get(0);
 2068|  22.2k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  22.2k|    static_cast<    \
  |  |  929|  22.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|  22.2k|    }
 2070|       |
 2071|  86.7k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 86.7k]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|  86.7k|    SCN_UNLIKELY_ATTR
 2079|  86.7k|    {
 2080|  86.7k|        auto handler = format_handler<false, CharT>{
 2081|  86.7k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  86.7k|    static_cast<    \
  |  |  929|  86.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  86.7k|    static_cast<    \
  |  |  929|  86.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|  86.7k|        return vscan_parse_format_string(format, handler);
 2083|  86.7k|    }
 2084|  86.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   223k|{
 1625|   223k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 173k, False: 50.2k]
  ------------------
 1626|   173k|        return false;
 1627|   173k|    }
 1628|  50.2k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 50.2k, False: 0]
  |  Branch (1628:39): [True: 50.2k, False: 0]
  ------------------
 1629|   223k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  33.3k|{
 1658|  33.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.3k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  33.3k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  33.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 33.3k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  33.3k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  33.3k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  33.3k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|  33.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  33.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  33.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 288, False: 33.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    288|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    288|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    288|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    288|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    288|    }                                                  \
  |  |  |  | 3642|  33.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  33.0k|    return it.position();
 1675|  33.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|  86.4k|    {
 1903|  86.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|   177k|    {
 1722|   177k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|   177k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|  86.4k|    {
 1853|  86.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  86.4k|{
 2030|  86.4k|    const auto beg = handler.get_ctx().begin();
 2031|  86.4k|    detail::parse_format_string<false>(format, handler);
 2032|  86.4k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  86.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 960, False: 85.5k]
  |  |  ------------------
  ------------------
 2033|    960|        return unexpected(handler.error);
 2034|    960|    }
 2035|  85.5k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  86.4k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2013|   603k|    {
 2014|   603k|        return ctx.get();
 2015|   603k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   603k|    {
 1857|   603k|        return contiguous_ctx;
 1858|   603k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   171k|    {
 1907|   171k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 171k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   171k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  86.4k|{
 1681|  86.4k|    auto arg = ctx.arg(id);
 1682|  86.4k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  86.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.4k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  86.4k|    return arg;
 1686|  86.4k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|   177k|    {
 1797|   177k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|   177k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|   177k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   177k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 177k, False: 0]
  |  |  ------------------
  ------------------
 1807|   177k|            visited_args_lower64 |= (1ull << id);
 1808|   177k|            return;
 1809|   177k|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|   177k|    {
 1782|   177k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|   177k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|   177k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 177k, False: 0]
  |  |  ------------------
  ------------------
 1788|   177k|            return (visited_args_lower64 >> id) & 1ull;
 1789|   177k|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|   177k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  5.76k|    {
 1766|  5.76k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  5.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.76k, False: 0]
  |  |  ------------------
  ------------------
 1767|  5.76k|            error = err;
 1768|  5.76k|        }
 1769|  5.76k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1935|  86.4k|    {
 1936|  86.4k|        return parse_ctx.next_arg_id();
 1937|  86.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1976|  86.4k|    {
 1977|  86.4k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  86.4k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  86.4k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 86.4k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  86.4k|        auto specs = detail::format_specs{};
 1990|  86.4k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  86.4k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  86.4k|            arg.type()};
 1993|       |
 1994|  86.4k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  86.4k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 86.4k]
  |  Branch (1995:29): [True: 0, False: 86.4k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  86.4k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  86.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.4k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  86.4k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  86.4k|        on_visit_scan_arg(
 2006|  86.4k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  86.4k|                                           get_ctx().locale()},
 2008|  86.4k|            arg);
 2009|  86.4k|        return parse_ctx.begin();
 2010|  86.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|  86.4k|    {
 1701|  86.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1947|  86.4k|    {
 1948|  86.4k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 86.4k]
  |  Branch (1948:23): [True: 0, False: 86.4k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  86.4k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  86.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  86.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  86.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 960, False: 85.5k]
  |  |  ------------------
  ------------------
 1955|    960|            on_error(r.error());
 1956|    960|        }
 1957|  85.5k|        else {
 1958|  85.5k|            get_ctx().advance_to(*r);
 1959|  85.5k|        }
 1960|  86.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|   177k|    {
 1729|   177k|        {
 1730|   177k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 177k]
  ------------------
 1731|   177k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 177k]
  ------------------
 1732|   177k|                                      ? std::numeric_limits<uint64_t>::max()
 1733|   177k|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|   177k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 177k]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|   177k|        }
 1739|       |
 1740|   177k|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 177k, False: 0]
  ------------------
 1741|   177k|            return;
 1742|   177k|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|   177k|    {
 1777|   177k|        return error;
 1778|   177k|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|   531k|    {
 1773|   531k|        return static_cast<bool>(error);
 1774|   531k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  86.7k|    {
 1903|  86.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  86.7k|    {
 1830|  86.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  86.7k|{
 2030|  86.7k|    const auto beg = handler.get_ctx().begin();
 2031|  86.7k|    detail::parse_format_string<false>(format, handler);
 2032|  86.7k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 960, False: 85.7k]
  |  |  ------------------
  ------------------
 2033|    960|        return unexpected(handler.error);
 2034|    960|    }
 2035|  85.7k|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  86.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2013|   605k|    {
 2014|   605k|        return ctx.get();
 2015|   605k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|   605k|    {
 1834|   605k|        return ctx;
 1835|   605k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|   172k|    {
 1907|   172k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 172k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|   172k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  86.7k|{
 1681|  86.7k|    auto arg = ctx.arg(id);
 1682|  86.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.7k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  86.7k|    return arg;
 1686|  86.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1935|  86.7k|    {
 1936|  86.7k|        return parse_ctx.next_arg_id();
 1937|  86.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1976|  86.7k|    {
 1977|  86.7k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  86.7k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  86.7k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 86.7k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  86.7k|        auto specs = detail::format_specs{};
 1990|  86.7k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  86.7k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  86.7k|            arg.type()};
 1993|       |
 1994|  86.7k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  86.7k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 86.7k]
  |  Branch (1995:29): [True: 0, False: 86.7k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  86.7k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 86.7k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  86.7k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  86.7k|        on_visit_scan_arg(
 2006|  86.7k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  86.7k|                                           get_ctx().locale()},
 2008|  86.7k|            arg);
 2009|  86.7k|        return parse_ctx.begin();
 2010|  86.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  86.7k|    {
 1701|  86.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|  86.7k|    {
 1948|  86.7k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 86.7k]
  |  Branch (1948:23): [True: 0, False: 86.7k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  86.7k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  86.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  86.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 960, False: 85.7k]
  |  |  ------------------
  ------------------
 1955|    960|            on_error(r.error());
 1956|    960|        }
 1957|  85.7k|        else {
 1958|  85.7k|            get_ctx().advance_to(*r);
 1959|  85.7k|        }
 1960|  86.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|   114k|{
 2045|   114k|    const auto argcount = args.size();
 2046|   114k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 28.0k, False: 86.4k]
  |  Branch (2046:60): [True: 28.0k, False: 0]
  ------------------
 2047|  28.0k|        auto arg = args.get(0);
 2048|  28.0k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  28.0k|    static_cast<    \
  |  |  929|  28.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|  28.0k|    }
 2050|       |
 2051|  86.4k|    auto handler = format_handler<true, CharT>{
 2052|  86.4k|        ranges::subrange<const CharT*>{source.data(),
 2053|  86.4k|                                       source.data() + source.size()},
 2054|  86.4k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  86.4k|    static_cast<    \
  |  |  929|  86.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  86.4k|    static_cast<    \
  |  |  929|  86.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  86.4k|    return vscan_parse_format_string(format, handler);
 2056|   114k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  42.0k|{
 1638|  42.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.0k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  42.0k|    auto reader =
 1644|  42.0k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  42.0k|            ranges::subrange<const CharT*>{source.data(),
 1646|  42.0k|                                           source.data() + source.size()},
 1647|  42.0k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  42.0k|    static_cast<    \
  |  |  929|  42.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  42.0k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|  42.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  42.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  42.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 288, False: 41.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    288|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    288|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    288|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    288|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    288|    }                                                  \
  |  |  |  | 3642|  42.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  41.7k|    return ranges::distance(source.data(), it);
 1650|  42.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2044|  2.30k|{
 2045|  2.30k|    const auto argcount = args.size();
 2046|  2.30k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2046:9): [True: 384, False: 1.92k]
  |  Branch (2046:60): [True: 384, False: 0]
  ------------------
 2047|    384|        auto arg = args.get(0);
 2048|    384|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2049|    384|    }
 2050|       |
 2051|  1.92k|    auto handler = format_handler<true, CharT>{
 2052|  1.92k|        ranges::subrange<const CharT*>{source.data(),
 2053|  1.92k|                                       source.data() + source.size()},
 2054|  1.92k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.92k|    static_cast<    \
  |  |  929|  1.92k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.92k|    static_cast<    \
  |  |  929|  1.92k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2055|  1.92k|    return vscan_parse_format_string(format, handler);
 2056|  2.30k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  4.60k|{
 1625|  4.60k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 3.84k, False: 768]
  ------------------
 1626|  3.84k|        return false;
 1627|  3.84k|    }
 1628|    768|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 768, False: 0]
  |  Branch (1628:39): [True: 768, False: 0]
  ------------------
 1629|  4.60k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|    576|{
 1638|    576|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|    576|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 576]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|    576|    auto reader =
 1644|    576|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|    576|            ranges::subrange<const CharT*>{source.data(),
 1646|    576|                                           source.data() + source.size()},
 1647|    576|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|    576|    static_cast<    \
  |  |  929|    576|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|    576|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|    576|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    576|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    576|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    576|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 576, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    576|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    576|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    576|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    576|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    576|    }                                                  \
  |  |  |  | 3642|    576|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|      0|    return ranges::distance(source.data(), it);
 1650|    576|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|  1.92k|    {
 1903|  1.92k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|  1.92k|    {
 1853|  1.92k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.92k|{
 2030|  1.92k|    const auto beg = handler.get_ctx().begin();
 2031|  1.92k|    detail::parse_format_string<false>(format, handler);
 2032|  1.92k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.92k, False: 0]
  |  |  ------------------
  ------------------
 2033|  1.92k|        return unexpected(handler.error);
 2034|  1.92k|    }
 2035|      0|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.92k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2013|  9.60k|    {
 2014|  9.60k|        return ctx.get();
 2015|  9.60k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  9.60k|    {
 1857|  9.60k|        return contiguous_ctx;
 1858|  9.60k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  1.92k|    {
 1907|  1.92k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.92k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  1.92k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  1.92k|{
 1681|  1.92k|    auto arg = ctx.arg(id);
 1682|  1.92k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.92k|    return arg;
 1686|  1.92k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1935|  1.92k|    {
 1936|  1.92k|        return parse_ctx.next_arg_id();
 1937|  1.92k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1976|  1.92k|    {
 1977|  1.92k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.92k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.92k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.92k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.92k|        auto specs = detail::format_specs{};
 1990|  1.92k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.92k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.92k|            arg.type()};
 1993|       |
 1994|  1.92k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.92k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.92k]
  |  Branch (1995:29): [True: 0, False: 1.92k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  1.92k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  1.92k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.92k|        on_visit_scan_arg(
 2006|  1.92k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.92k|                                           get_ctx().locale()},
 2008|  1.92k|            arg);
 2009|  1.92k|        return parse_ctx.begin();
 2010|  1.92k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  1.92k|    {
 1701|  1.92k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1947|  1.92k|    {
 1948|  1.92k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.92k]
  |  Branch (1948:23): [True: 0, False: 1.92k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.92k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.92k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.92k, False: 0]
  |  |  ------------------
  ------------------
 1955|  1.92k|            on_error(r.error());
 1956|  1.92k|        }
 1957|      0|        else {
 1958|      0|            get_ctx().advance_to(*r);
 1959|      0|        }
 1960|  1.92k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2064|  2.30k|{
 2065|  2.30k|    const auto argcount = args.size();
 2066|  2.30k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2066:9): [True: 384, False: 1.92k]
  |  Branch (2066:60): [True: 384, False: 0]
  ------------------
 2067|    384|        auto arg = args.get(0);
 2068|    384|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|    384|    static_cast<    \
  |  |  929|    384|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2069|    384|    }
 2070|       |
 2071|  1.92k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2071:9): [True: 0, False: 1.92k]
  ------------------
 2072|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2073|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2074|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2075|      0|        return vscan_parse_format_string(format, handler);
 2076|      0|    }
 2077|       |
 2078|  1.92k|    SCN_UNLIKELY_ATTR
 2079|  1.92k|    {
 2080|  1.92k|        auto handler = format_handler<false, CharT>{
 2081|  1.92k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.92k|    static_cast<    \
  |  |  929|  1.92k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.92k|    static_cast<    \
  |  |  929|  1.92k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|  1.92k|        return vscan_parse_format_string(format, handler);
 2083|  1.92k|    }
 2084|  1.92k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|    576|{
 1658|    576|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|    576|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 576]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|    576|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|    576|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 576]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|    576|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|    576|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|    576|    static_cast<    \
  |  |  929|    576|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|    576|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3643|    576|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    576|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    576|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    576|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 576, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    576|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    576|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    576|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    576|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    576|    }                                                  \
  |  |  |  | 3642|    576|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|      0|    return it.position();
 1675|    576|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|  1.92k|    {
 1903|  1.92k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|  1.92k|    {
 1830|  1.92k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2029|  1.92k|{
 2030|  1.92k|    const auto beg = handler.get_ctx().begin();
 2031|  1.92k|    detail::parse_format_string<false>(format, handler);
 2032|  1.92k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.92k, False: 0]
  |  |  ------------------
  ------------------
 2033|  1.92k|        return unexpected(handler.error);
 2034|  1.92k|    }
 2035|      0|    return ranges::distance(beg, handler.get_ctx().begin());
 2036|  1.92k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2013|  9.60k|    {
 2014|  9.60k|        return ctx.get();
 2015|  9.60k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  9.60k|    {
 1834|  9.60k|        return ctx;
 1835|  9.60k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|  1.92k|    {
 1907|  1.92k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.92k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                return on_error("Invalid encoding in format string");
 1918|      0|            }
 1919|      0|            else if (is_space) {
  ------------------
  |  Branch (1919:22): [True: 0, False: 0]
  ------------------
 1920|      0|                get_ctx().advance_to(
 1921|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1922|      0|                begin = detail::to_address(std::prev(after_space_it));
 1923|      0|                continue;
 1924|      0|            }
 1925|       |
 1926|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1926:17): [True: 0, False: 0]
  ------------------
 1927|      0|                SCN_UNLIKELY_ATTR
 1928|      0|                return on_error("Unexpected literal character in source");
 1929|      0|            }
 1930|      0|            get_ctx().advance_to(ranges::next(it));
 1931|      0|        }
 1932|  1.92k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.92k|{
 1681|  1.92k|    auto arg = ctx.arg(id);
 1682|  1.92k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.92k|    return arg;
 1686|  1.92k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1935|  1.92k|    {
 1936|  1.92k|        return parse_ctx.next_arg_id();
 1937|  1.92k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1976|  1.92k|    {
 1977|  1.92k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1978|  1.92k|        set_arg_as_visited(arg_id);
 1979|       |
 1980|  1.92k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1980:13): [True: 0, False: 1.92k]
  ------------------
 1981|      0|            parse_ctx.advance_to(begin);
 1982|      0|            on_visit_scan_arg(
 1983|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1984|      0|                    parse_ctx, get_custom_ctx()},
 1985|      0|                arg);
 1986|      0|            return parse_ctx.begin();
 1987|      0|        }
 1988|       |
 1989|  1.92k|        auto specs = detail::format_specs{};
 1990|  1.92k|        detail::specs_checker<specs_handler<context_type>> handler{
 1991|  1.92k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1992|  1.92k|            arg.type()};
 1993|       |
 1994|  1.92k|        begin = detail::parse_format_specs(begin, end, handler);
 1995|  1.92k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1995:13): [True: 0, False: 1.92k]
  |  Branch (1995:29): [True: 0, False: 1.92k]
  ------------------
 1996|      0|            SCN_UNLIKELY_ATTR
 1997|      0|            on_error("Missing '}' in format string");
 1998|      0|            return parse_ctx.begin();
 1999|      0|        }
 2000|  1.92k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.92k]
  |  |  ------------------
  ------------------
 2001|      0|            return parse_ctx.begin();
 2002|      0|        }
 2003|  1.92k|        parse_ctx.advance_to(begin);
 2004|       |
 2005|  1.92k|        on_visit_scan_arg(
 2006|  1.92k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2007|  1.92k|                                           get_ctx().locale()},
 2008|  1.92k|            arg);
 2009|  1.92k|        return parse_ctx.begin();
 2010|  1.92k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|  1.92k|    {
 1701|  1.92k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1947|  1.92k|    {
 1948|  1.92k|        if (!*this || !arg) {
  ------------------
  |  Branch (1948:13): [True: 0, False: 1.92k]
  |  Branch (1948:23): [True: 0, False: 1.92k]
  ------------------
 1949|      0|            SCN_UNLIKELY_ATTR
 1950|      0|            return;
 1951|      0|        }
 1952|       |
 1953|  1.92k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1954|  1.92k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.92k, False: 0]
  |  |  ------------------
  ------------------
 1955|  1.92k|            on_error(r.error());
 1956|  1.92k|        }
 1957|      0|        else {
 1958|      0|            get_ctx().advance_to(*r);
 1959|      0|        }
 1960|  1.92k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  14.0k|{
 2091|  14.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  14.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|  11.1k|{
 2091|  11.1k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  11.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|  11.1k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|    192|{
 2091|    192|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|    192|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2090|    192|{
 2091|    192|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2092|    192|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|     32|{
 1363|     32|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|     32|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|     32|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|     32|            std::u32string tmp;
 1368|     32|            transcode_to_string_impl_to32(src, tmp);
 1369|     32|            return transcode_to_string_impl_32to16<false>(
 1370|     32|                std::u32string_view{tmp}, dest);
 1371|     32|        }
 1372|     32|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|     32|            return transcode_to_string_impl_to32(src, dest);
 1374|     32|        }
 1375|     32|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|     32|{
 1256|     32|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|     32|    auto it = src.begin();
 1259|   101k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 101k, False: 32]
  ------------------
 1260|   101k|        auto res = get_next_code_point(
 1261|   101k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   101k|                                                                 src.end()));
 1263|   101k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7, False: 101k]
  |  |  ------------------
  ------------------
 1264|      7|            dest.push_back(DestCharT{0xfffd});
 1265|      7|        }
 1266|   101k|        else {
 1267|   101k|            dest.push_back(res.value);
 1268|   101k|        }
 1269|   101k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   101k|    }
 1271|     32|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   148k|{
 1169|   148k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   148k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   148k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   148k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   148k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 147, False: 148k]
  |  |  ------------------
  ------------------
 1173|    147|        return {get_start_for_next_code_point(input),
 1174|    147|                detail::invalid_code_point};
 1175|    147|    }
 1176|   148k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33, False: 148k]
  |  |  ------------------
  ------------------
 1177|     33|        return {input.end(), detail::invalid_code_point};
 1178|     33|    }
 1179|       |
 1180|   148k|    return {input.begin() + len,
 1181|   148k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   148k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|    147|{
 1155|    147|    auto it = input.begin();
 1156|    294|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 276, False: 18]
  ------------------
 1157|    276|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 129, False: 147]
  ------------------
 1158|    129|            break;
 1159|    129|        }
 1160|    276|    }
 1161|    147|    return it;
 1162|    147|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  808|  1.89M|    {
  809|  1.89M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  1.89M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  1.89M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|   697k|    {
  823|   697k|        return a.m_code == b.m_code;
  824|   697k|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1727|   134k|    {
 1728|   134k|        const auto loc = std::setlocale(cat, nullptr);
 1729|   134k|        std::strcpy(m_locbuf, loc);
 1730|   134k|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|   134k|    {
 1733|       |        // Restore locale to what it was before
 1734|   134k|        std::setlocale(m_category, m_locbuf);
 1735|   134k|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1756|   134k|    {
 1757|   134k|        std::setlocale(cat, "C");
 1758|   134k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|   177k|    {
 2936|   177k|        return m_msg == nullptr;
 2937|   177k|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3645|   176k|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  2.26M|{
  458|  2.26M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  2.26M|        static_cast<unsigned char>(ch))];
  460|  2.26M|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|   492k|{
  539|   492k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   492k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|   863k|{
  784|   863k|    return e != eof_error::good;
  785|   863k|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|    263|{
  798|    263|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    263|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    263|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|    263|    return scan_error{scan_error::end_of_range, "EOF"};
  800|    263|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|    628|{
  845|    628|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|    628|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    628|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|    628|    return parse_error::eof;
  847|    628|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|   244k|{
  854|   244k|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 244k]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|   244k|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 181, False: 244k]
  ------------------
  859|    181|        return scan_error{scan_error::end_of_range, "EOF"};
  860|    181|    }
  861|       |
  862|   244k|    return scan_error{code, msg};
  863|   244k|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|   244k|{
  868|   244k|    return [code, msg](parse_error err) {
  869|   244k|        return make_scan_error_from_parse_error(err, code, msg);
  870|   244k|    };
  871|   244k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   267k|{
 1200|       |    // Pattern_White_Space property
 1201|   267k|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 264k, False: 2.54k]
  |  Branch (1201:27): [True: 122k, False: 142k]
  ------------------
 1202|   267k|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 3.31k, False: 141k]
  ------------------
 1203|   267k|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 8.40k, False: 132k]
  ------------------
 1204|   267k|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 0, False: 132k]
  ------------------
 1205|   267k|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 0, False: 132k]
  ------------------
 1206|   267k|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 0, False: 132k]
  ------------------
 1207|   267k|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 132k]
  ------------------
 1208|   267k|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|   354k|{
 2220|   354k|    unsigned char running_diff{0};
 2221|  1.32M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 967k, False: 354k]
  ------------------
 2222|   967k|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|   967k|    }
 2224|   354k|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 15.9k, False: 338k]
  |  Branch (2224:33): [True: 996, False: 337k]
  ------------------
 2225|   354k|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  2.43M|{
 3123|  2.43M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  2.43M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  4.99k|{
 3127|  4.99k|#if WCHAR_MIN < 0
 3128|  4.99k|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 4.99k, False: 0]
  |  Branch (3128:20): [True: 2.49k, False: 2.49k]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  2.49k|        return char_to_int(static_cast<char>(ch));
 3133|  2.49k|    }
 3134|  2.49k|    return 255;
 3135|  4.99k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6009|   171k|{
 6010|   171k|    if (specs.width != 0) {
  ------------------
  |  Branch (6010:9): [True: 0, False: 171k]
  ------------------
 6011|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6011:13): [True: 0, False: 0]
  ------------------
 6012|      0|            return {scan_error::invalid_scanned_value,
 6013|      0|                    "Scanned value too narrow, width did not exceed what "
 6014|      0|                    "was specified in the format string"};
 6015|      0|        }
 6016|      0|    }
 6017|   171k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6017:9): [True: 0, False: 171k]
  ------------------
 6018|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6018:13): [True: 0, False: 0]
  ------------------
 6019|      0|            return {scan_error::invalid_scanned_value,
 6020|      0|                    "Scanned value too wide, width exceeded the specified "
 6021|      0|                    "precision"};
 6022|      0|        }
 6023|      0|    }
 6024|   171k|    return {};
 6025|   171k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   403k|    {
  304|   403k|        ranges::advance(x, n);
  305|   403k|        return x;
  306|   403k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   403k|    {
  268|   403k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   403k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   403k|    {
  151|   403k|        i += n;
  152|   403k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   461k|    {
  108|   461k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   461k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   461k|    {
   87|   461k|        return s - i;
   88|   461k|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  6.33k|    {
  304|  6.33k|        ranges::advance(x, n);
  305|  6.33k|        return x;
  306|  6.33k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  6.33k|    {
  268|  6.33k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  6.33k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  6.33k|    {
  151|  6.33k|        i += n;
  152|  6.33k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   120k|{
  981|   120k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   120k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   120k|        return true;
  984|   120k|    }
  985|   120k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   120k|                           ranges::const_iterator_t<Range>,
  987|   120k|                           typename detail::basic_scan_buffer<
  988|   120k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   120k|        auto beg = r.begin();
  990|   120k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 120k, False: 0]
  ------------------
  991|   120k|            return false;
  992|   120k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   120k|    else {
 1006|   120k|        return false;
 1007|   120k|    }
 1008|   120k|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6038|  86.7k|    {
 6039|  86.7k|        const bool need_skipped_width =
 6040|  86.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6040:13): [True: 0, False: 86.7k]
  |  Branch (6040:33): [True: 0, False: 86.7k]
  ------------------
 6041|  86.7k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6042|       |
 6043|       |        // Read prefix
 6044|  86.7k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6044:13): [True: 0, False: 86.7k]
  ------------------
 6045|  86.7k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6045:13): [True: 0, False: 86.7k]
  ------------------
 6046|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6047|      0|                             need_skipped_width);
 6048|      0|        }
 6049|  86.7k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6049:13): [True: 86.7k, False: 0]
  |  Branch (6049:56): [True: 86.7k, False: 0]
  ------------------
 6050|       |            // Default alignment:
 6051|       |            // Skip preceding whitespace, if required by the reader
 6052|  86.7k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6052:17): [True: 0, False: 86.7k]
  ------------------
 6053|      0|                auto max_width_view = take_width(rng, specs.precision);
 6054|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6055|      0|                                  .transform_error(make_eof_scan_error));
 6056|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6057|      0|            }
 6058|   173k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  86.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  86.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  86.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  86.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 106, False: 86.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    106|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    106|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    106|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    106|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    106|    }                                                  \
  |  |  |  | 3642|  86.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  86.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6059|   173k|                            make_eof_scan_error));
 6060|       |
 6061|   173k|            if (need_skipped_width) {
  ------------------
  |  Branch (6061:17): [True: 0, False: 86.6k]
  ------------------
 6062|      0|                return result_type{
 6063|      0|                    it,
 6064|      0|                    calculate_text_width(make_contiguous_buffer(
 6065|      0|                                             ranges::subrange{rng.begin(), it})
 6066|      0|                                             .view())};
 6067|      0|            }
 6068|  86.6k|            return result_type{it, 0};
 6069|   173k|        }
 6070|       |
 6071|      0|        return result_type{rng.begin(), 0};
 6072|  86.7k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|   234k|{
 1976|   234k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   234k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|   234k|{
 1957|   234k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|   234k|        return std::find_if(range.begin(), range.end(), pred);
 1959|   234k|    }
 1960|   234k|    else {
 1961|   234k|        auto first = range.begin();
 1962|  1.70M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.70M, False: 200]
  ------------------
 1963|  1.70M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 234k, False: 1.46M]
  ------------------
 1964|   234k|                return first;
 1965|   234k|            }
 1966|  1.70M|        }
 1967|    200|        return first;
 1968|   234k|    }
 1969|   234k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  4.27M|    {
  763|  4.27M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  4.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  4.27M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   283k|    {
  754|   283k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  2.13M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.13M|              cvref<T> obj = *get<T>(fn);
  745|  2.13M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.13M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.13M|              }
  748|  2.13M|              else {
  749|  2.13M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.13M|              }
  751|  2.13M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  2.13M|    {
  684|  2.13M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.13M|            return static_cast<T*>(s.m_cp);
  686|  2.13M|        }
  687|  2.13M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.13M|            return static_cast<T*>(s.m_p);
  689|  2.13M|        }
  690|  2.13M|        else {
  691|  2.13M|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.13M|        }
  693|  2.13M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|   283k|        {
  662|   283k|        }
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   227k|    {
  108|   227k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   227k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   227k|    {
   94|   227k|        iter_difference_t<I> counter{0};
   95|  2.86M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 2.63M, False: 227k]
  ------------------
   96|  2.63M|            ++i;
   97|  2.63M|            ++counter;
   98|  2.63M|        }
   99|   227k|        return counter;
  100|   227k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|   329k|{
 1857|   329k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|   329k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|   329k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|   329k|        if (sz < count) {
 1862|   329k|            return unexpected(eof_error::eof);
 1863|   329k|        }
 1864|       |
 1865|   329k|        return ranges::next(range.begin(), count);
 1866|   329k|    }
 1867|   329k|    else {
 1868|   329k|        auto it = range.begin();
 1869|   329k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 209k, False: 120k]
  ------------------
 1870|   209k|            return ranges::next(it, count);
 1871|   209k|        }
 1872|       |
 1873|   484k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 363k, False: 120k]
  ------------------
 1874|   363k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 209, False: 363k]
  ------------------
 1875|    209|                return unexpected(eof_error::eof);
 1876|    209|            }
 1877|   363k|        }
 1878|       |
 1879|   120k|        return it;
 1880|   120k|    }
 1881|   329k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|   329k|{
 1095|   329k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|   329k|        return r.size();
 1097|   329k|    }
 1098|   329k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|   329k|                           ranges::const_iterator_t<Range>,
 1100|   329k|                           typename detail::basic_scan_buffer<
 1101|   329k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|   329k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|   329k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|   329k|        }
 1105|   329k|        else {
 1106|   329k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 329k, False: 0]
  ------------------
 1107|   329k|                return static_cast<size_t>(
 1108|   329k|                    r.begin().parent()->chars_available() -
 1109|   329k|                    r.begin().position());
 1110|   329k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|   329k|        }
 1113|   329k|    }
 1114|   329k|    else {
 1115|   329k|        return 0;
 1116|   329k|    }
 1117|   329k|}
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|   440k|    {
  763|   440k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   440k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|   114k|    {
  754|   114k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|   220k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   220k|              cvref<T> obj = *get<T>(fn);
  745|   220k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   220k|                  obj(static_cast<decltype(args)>(args)...);
  747|   220k|              }
  748|   220k|              else {
  749|   220k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   220k|              }
  751|   220k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   220k|    {
  684|   220k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   220k|            return static_cast<T*>(s.m_cp);
  686|   220k|        }
  687|   220k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   220k|            return static_cast<T*>(s.m_p);
  689|   220k|        }
  690|   220k|        else {
  691|   220k|            return reinterpret_cast<T*>(s.m_fp);
  692|   220k|        }
  693|   220k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|   114k|        {
  662|   114k|        }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|   244k|    return [code, msg](parse_error err) {
  869|   244k|        return make_scan_error_from_parse_error(err, code, msg);
  870|   244k|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|  55.9k|    {
 1780|  55.9k|        auto stdloc = loc.get<std::locale>();
 1781|  55.9k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|  55.9k|        grouping = numpunct.grouping();
 1783|  55.9k|        thousands_sep =
 1784|  55.9k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 55.9k]
  ------------------
 1785|  55.9k|        decimal_point = numpunct.decimal_point();
 1786|  55.9k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|  55.9k|{
 1717|  55.9k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 55.9k, False: 0]
  ------------------
 1718|  55.9k|        return std::use_facet<Facet>(stdloc);
 1719|  55.9k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|  55.9k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|   352k|{
 1846|   352k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 180, False: 352k]
  |  |  ------------------
  ------------------
 1847|    180|        return unexpected(e);
 1848|    180|    }
 1849|       |
 1850|   352k|    return ranges::next(range.begin());
 1851|   352k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   505k|{
  950|   505k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   505k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 322, False: 505k]
  |  |  ------------------
  ------------------
  951|    322|        return eof_error::eof;
  952|    322|    }
  953|   505k|    return eof_error::good;
  954|   505k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|   721k|{
  944|   721k|    return is_range_eof(r.begin(), r.end());
  945|   721k|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|   721k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   721k|    {
  937|   721k|        return begin == end;
  938|   721k|    }
  939|   721k|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|   352k|    {
  296|   352k|        ++x;
  297|   352k|        return x;
  298|   352k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   128k|{
 3141|   128k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   128k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 97.6k, False: 30.6k]
  ------------------
 3143|  97.6k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 97.6k, False: 0]
  ------------------
 3144|  97.6k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  97.6k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  97.6k|    }
 3148|       |
 3149|  30.6k|    auto& it = *r;
 3150|  30.6k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 16.4k, False: 14.1k]
  ------------------
 3151|  16.4k|        return std::pair{it, sign_type::minus_sign};
 3152|  16.4k|    }
 3153|  14.1k|    return std::pair{it, sign_type::plus_sign};
 3154|  30.6k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|   233k|{
 2272|   233k|    auto it = read_code_unit(range);
 2273|   233k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 105, False: 233k]
  |  |  ------------------
  ------------------
 2274|    105|        return unexpected(make_eof_parse_error(it.error()));
 2275|    105|    }
 2276|       |
 2277|   449k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 449k, False: 194k]
  ------------------
 2278|   449k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 38.9k, False: 410k]
  ------------------
 2279|  38.9k|            return *it;
 2280|  38.9k|        }
 2281|   449k|    }
 2282|       |
 2283|   194k|    return unexpected(parse_error::error);
 2284|   233k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|   329k|{
 2231|   329k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   329k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   329k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   329k|        if (range.size() < str.size()) {
 2236|   329k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|   329k|        }
 2238|   329k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|   329k|            return unexpected(parse_error::error);
 2240|   329k|        }
 2241|   329k|        return ranges::next(range.begin(), str.size());
 2242|   329k|    }
 2243|   329k|    else {
 2244|   329k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   329k|            if (ch < 'A' || ch > 'Z') {
 2246|   329k|                return ch;
 2247|   329k|            }
 2248|   329k|            return static_cast<char_type>(ch +
 2249|   329k|                                          static_cast<char_type>('a' - 'A'));
 2250|   329k|        };
 2251|       |
 2252|   329k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|   329k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   329k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   329k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 209, False: 329k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    209|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    209|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    209|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    209|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    209|    }                                                  \
  |  |  |  | 3642|   329k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   329k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|   329k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   329k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   329k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 314k, False: 15.5k]
  |  |  ------------------
  ------------------
 2257|   329k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   329k|                    return ascii_tolower(a) ==
 2259|   329k|                           static_cast<detail::char_t<Range>>(b);
 2260|   329k|                }))) {
 2261|   314k|            return unexpected(parse_error::error);
 2262|   314k|        }
 2263|       |
 2264|  15.5k|        return it;
 2265|   329k|    }
 2266|   329k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|   395k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   395k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 357k, False: 38.7k]
  |  Branch (2245:29): [True: 36.0k, False: 2.68k]
  ------------------
 2246|   393k|                return ch;
 2247|   393k|            }
 2248|  2.68k|            return static_cast<char_type>(ch +
 2249|  2.68k|                                          static_cast<char_type>('a' - 'A'));
 2250|   395k|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   118k|{
 2146|   118k|    auto it = read_code_unit(range);
 2147|   118k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 75, False: 118k]
  |  |  ------------------
  ------------------
 2148|     75|        return unexpected(make_eof_parse_error(it.error()));
 2149|     75|    }
 2150|       |
 2151|   118k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 88.8k, False: 29.5k]
  |  |  ------------------
  ------------------
 2152|   118k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  88.8k|        return unexpected(parse_error::error);
 2154|  88.8k|    }
 2155|       |
 2156|  29.5k|    return *it;
 2157|   118k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|   234k|{
 1996|   234k|    auto it = read_while_code_unit(range, pred);
 1997|   234k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 84.0k, False: 150k]
  ------------------
 1998|  84.0k|        return unexpected(parse_error::error);
 1999|  84.0k|    }
 2000|   150k|    return it;
 2001|   234k|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|   112k|    {
 1621|   112k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   112k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   112k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   112k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   112k|            m_storage.reset();
 1627|   112k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   112k|        }
 1629|   112k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   112k|                                          std::basic_string<CharT>>) {
 1631|   112k|            m_storage.emplace(SCN_FWD(range));
 1632|   112k|            m_view = string_view_type{*m_storage};
 1633|   112k|        }
 1634|   112k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   112k|                                          typename detail::basic_scan_buffer<
 1636|   112k|                                              value_t>::forward_iterator> &&
 1637|   112k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   112k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   112k|            auto end_seg = range.end().contiguous_segment();
 1640|   112k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.9k, False: 100k]
  |  |  ------------------
  ------------------
 1641|   112k|                             detail::to_address(end_seg.end()))) {
 1642|  11.9k|                auto& str = m_storage.emplace();
 1643|  11.9k|                str.reserve(range.end().position() - range.begin().position());
 1644|  11.9k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  11.9k|                m_view = string_view_type{str};
 1646|  11.9k|                return;
 1647|  11.9k|            }
 1648|       |
 1649|   100k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   100k|                                                            end_seg.data());
 1651|   100k|            m_storage.reset();
 1652|   100k|        }
 1653|   112k|        else {
 1654|   112k|            auto& str = m_storage.emplace();
 1655|   112k|            if constexpr (ranges::sized_range<Range>) {
 1656|   112k|                str.reserve(range.size());
 1657|   112k|            }
 1658|   112k|            if constexpr (ranges::common_range<Range>) {
 1659|   112k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   112k|                          std::back_inserter(str));
 1661|   112k|            }
 1662|   112k|            else {
 1663|   112k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   112k|                     ++it) {
 1665|   112k|                    str.push_back(*it);
 1666|   112k|                }
 1667|   112k|            }
 1668|   112k|            m_view = string_view_type{str};
 1669|   112k|        }
 1670|   112k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|   884k|    {
 1582|   884k|        return m_view;
 1583|   884k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|   496k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6080|  85.6k|    {
 6081|  85.6k|        const bool need_skipped_width =
 6082|  85.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6082:13): [True: 0, False: 85.6k]
  |  Branch (6082:33): [True: 0, False: 85.6k]
  ------------------
 6083|  85.6k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6084|       |
 6085|  85.6k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6085:13): [True: 0, False: 85.6k]
  ------------------
 6086|  85.6k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6086:13): [True: 0, False: 85.6k]
  ------------------
 6087|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6088|      0|                             specs.fill, need_skipped_width);
 6089|      0|        }
 6090|  85.6k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6090:13): [True: 85.6k, False: 0]
  ------------------
 6091|  85.6k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6091:13): [True: 0, False: 85.6k]
  ------------------
 6092|  85.6k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  |  Branch (6092:35): [True: 0, False: 0]
  ------------------
 6093|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  ------------------
 6095|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6095:17): [True: 0, False: 0]
  ------------------
 6096|      0|                const auto initial_width =
 6097|      0|                    specs.precision - prefix_width - value_width;
 6098|      0|                auto max_width_view = take_width(rng, initial_width);
 6099|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6100|      0|                                  .transform_error(make_eof_scan_error));
 6101|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6102|      0|            }
 6103|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6104|      0|                            make_eof_scan_error));
 6105|       |
 6106|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6106:17): [True: 0, False: 0]
  ------------------
 6107|      0|                return result_type{
 6108|      0|                    it,
 6109|      0|                    calculate_text_width(make_contiguous_buffer(
 6110|      0|                                             ranges::subrange{rng.begin(), it})
 6111|      0|                                             .view())};
 6112|      0|            }
 6113|      0|            return result_type{it, 0};
 6114|      0|        }
 6115|  85.6k|        return result_type{rng.begin(), 0};
 6116|  85.6k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   175k|{
 1846|   175k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12, False: 175k]
  |  |  ------------------
  ------------------
 1847|     12|        return unexpected(e);
 1848|     12|    }
 1849|       |
 1850|   175k|    return ranges::next(range.begin());
 1851|   175k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|   346k|{
  950|   346k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 133, False: 346k]
  |  |  ------------------
  ------------------
  951|    133|        return eof_error::eof;
  952|    133|    }
  953|   346k|    return eof_error::good;
  954|   346k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   346k|{
  944|   346k|    return is_range_eof(r.begin(), r.end());
  945|   346k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   346k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   346k|    {
  937|   346k|        return begin == end;
  938|   346k|    }
  939|   346k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   175k|    {
  296|   175k|        ++x;
  297|   175k|        return x;
  298|   175k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   130k|{
 3141|   130k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   130k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 105k, False: 25.5k]
  ------------------
 3143|   105k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 105k, False: 0]
  ------------------
 3144|   105k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   105k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|   105k|    }
 3148|       |
 3149|  25.5k|    auto& it = *r;
 3150|  25.5k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 14.7k, False: 10.7k]
  ------------------
 3151|  14.7k|        return std::pair{it, sign_type::minus_sign};
 3152|  14.7k|    }
 3153|  10.7k|    return std::pair{it, sign_type::plus_sign};
 3154|  25.5k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   146k|{
 2272|   146k|    auto it = read_code_unit(range);
 2273|   146k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 146k]
  |  |  ------------------
  ------------------
 2274|      6|        return unexpected(make_eof_parse_error(it.error()));
 2275|      6|    }
 2276|       |
 2277|   281k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 281k, False: 118k]
  ------------------
 2278|   281k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 27.8k, False: 253k]
  ------------------
 2279|  27.8k|            return *it;
 2280|  27.8k|        }
 2281|   281k|    }
 2282|       |
 2283|   118k|    return unexpected(parse_error::error);
 2284|   146k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|   355k|{
 2231|   355k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|   355k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|   355k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|   355k|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 227, False: 354k]
  ------------------
 2236|    227|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|    227|        }
 2238|   354k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 337k, False: 16.9k]
  ------------------
 2239|   337k|            return unexpected(parse_error::error);
 2240|   337k|        }
 2241|  16.9k|        return ranges::next(range.begin(), str.size());
 2242|   354k|    }
 2243|   355k|    else {
 2244|   355k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|   355k|            if (ch < 'A' || ch > 'Z') {
 2246|   355k|                return ch;
 2247|   355k|            }
 2248|   355k|            return static_cast<char_type>(ch +
 2249|   355k|                                          static_cast<char_type>('a' - 'A'));
 2250|   355k|        };
 2251|       |
 2252|   355k|        SCN_TRY(it, read_exactly_n_code_units(
 2253|   355k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|   355k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|   355k|        if (SCN_UNLIKELY(!std::equal(
 2257|   355k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|   355k|                    return ascii_tolower(a) ==
 2259|   355k|                           static_cast<detail::char_t<Range>>(b);
 2260|   355k|                }))) {
 2261|   355k|            return unexpected(parse_error::error);
 2262|   355k|        }
 2263|       |
 2264|   355k|        return it;
 2265|   355k|    }
 2266|   355k|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|  28.9k|{
 2146|  28.9k|    auto it = read_code_unit(range);
 2147|  28.9k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6, False: 28.9k]
  |  |  ------------------
  ------------------
 2148|      6|        return unexpected(make_eof_parse_error(it.error()));
 2149|      6|    }
 2150|       |
 2151|  28.9k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.9k, False: 9.00k]
  |  |  ------------------
  ------------------
 2152|  28.9k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  19.9k|        return unexpected(parse_error::error);
 2154|  19.9k|    }
 2155|       |
 2156|  9.00k|    return *it;
 2157|  28.9k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|   517k|    {
 1503|   517k|        return sv;
 1504|   517k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  48.9k|{
 1976|  48.9k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  48.9k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  48.9k|{
 1957|  48.9k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  48.9k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  48.9k|    }
 1960|  48.9k|    else {
 1961|  48.9k|        auto first = range.begin();
 1962|  48.9k|        for (; first != range.end(); ++first) {
 1963|  48.9k|            if (pred(*first)) {
 1964|  48.9k|                return first;
 1965|  48.9k|            }
 1966|  48.9k|        }
 1967|  48.9k|        return first;
 1968|  48.9k|    }
 1969|  48.9k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   128k|{
 2951|   128k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 128k, False: 0]
  ------------------
 2952|   128k|        auto it = read_while_classic_space(range);
 2953|   128k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   128k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 94, False: 128k]
  |  |  ------------------
  ------------------
 2955|     94|            return unexpected(e);
 2956|     94|        }
 2957|       |
 2958|   128k|        return it;
 2959|   128k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   128k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   128k|{
 2117|   128k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   128k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   128k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   128k|        auto buf = make_contiguous_buffer(range);
 2121|   128k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   128k|        return ranges::next(range.begin(),
 2123|   128k|                            ranges::distance(buf.view().begin(), it));
 2124|   128k|    }
 2125|   128k|    else {
 2126|   128k|        auto it = range.begin();
 2127|       |
 2128|   128k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|   128k|            auto seg = get_contiguous_beginning(range);
 2130|   128k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   128k|                seg_it != seg.end()) {
 2132|   128k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   128k|            }
 2134|   128k|            ranges::advance(it, seg.size());
 2135|   128k|        }
 2136|       |
 2137|   128k|        return read_while_code_point(
 2138|   128k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   128k|    }
 2140|   128k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   128k|{
 1683|   128k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   128k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   128k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   128k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   128k|    }
 1688|   128k|    else {
 1689|   128k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   128k|    }
 1691|   128k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   128k|    {
 1490|   128k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|   338k|    {
  304|   338k|        ranges::advance(x, n);
  305|   338k|        return x;
  306|   338k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   448k|    {
  268|   448k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   448k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   448k|    {
  181|  2.57M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 2.12M, False: 448k]
  ------------------
  182|  2.12M|            ++i;
  183|  2.12M|        }
  184|   448k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6179|  24.4k|    {
 6180|  24.4k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  24.4k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|      0|                          basic_contiguous_scan_context<char_type>>) {
 6184|  24.4k|            auto rd = make_reader<T, char_type>();
 6185|  24.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6186|  24.4k|                return unexpected(e);
 6187|  24.4k|            }
 6188|       |
 6189|  24.4k|            return impl(rd, range, value);
 6190|  24.4k|        }
 6191|  24.4k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6191:28): [Folded - Ignored]
  ------------------
 6192|  24.4k|            auto rd = make_reader<T, char_type>();
 6193|  24.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  24.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.4k]
  |  |  ------------------
  ------------------
 6194|      0|                return unexpected(e);
 6195|      0|            }
 6196|       |
 6197|  24.4k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6197:17): [True: 24.4k, False: 0]
  |  Branch (6197:50): [True: 0, False: 0]
  ------------------
 6198|  24.4k|                specs.width != 0) {
  ------------------
  |  Branch (6198:17): [True: 0, False: 0]
  ------------------
 6199|  24.4k|                return impl(rd, range, value);
 6200|  24.4k|            }
 6201|       |
 6202|      0|            auto crange = get_as_contiguous(range);
 6203|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6204|      0|            return ranges::next(range.begin(),
 6205|      0|                                ranges::distance(crange.begin(), it));
 6206|      0|        }
 6207|  24.4k|        else {
 6208|  24.4k|            SCN_EXPECT(false);
 6209|  24.4k|            SCN_UNREACHABLE;
 6210|  24.4k|        }
 6211|  24.4k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|   173k|    {
 3040|   173k|        reader_error_handler eh{};
 3041|   173k|        get_derived().check_specs_impl(specs, eh);
 3042|   173k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 173k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   173k|        return {};
 3046|   173k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|   173k|    {
 3051|   173k|        return static_cast<Derived&>(*this);
 3052|   173k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4146|   173k|    {
 4147|   173k|        detail::check_float_type_specs(specs, eh);
 4148|   173k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6121|  24.4k|    {
 6122|  24.4k|        const bool need_skipped_width =
 6123|  24.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 24.4k]
  |  Branch (6123:33): [True: 0, False: 24.4k]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|  24.4k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  24.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  24.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  24.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  24.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 26, False: 24.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     26|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     26|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     26|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     26|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     26|    }                                                  \
  |  |  |  | 3642|  24.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|  24.4k|        auto [it, prefix_width] = prefix_result;
 6128|  24.4k|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|  24.4k|        std::ptrdiff_t value_width = 0;
 6132|  24.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 24.4k]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|  24.4k|        else {
 6148|  24.4k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  24.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  24.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  24.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 294, False: 24.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    294|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    294|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    294|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    294|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    294|    }                                                  \
  |  | 3642|  24.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  24.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|  24.1k|                                             specs, value, loc));
 6150|       |
 6151|  24.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 24.1k]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|  24.1k|        }
 6157|       |
 6158|       |        // Read postfix
 6159|  24.1k|        std::ptrdiff_t postfix_width = 0;
 6160|  24.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 24.1k, False: 16]
  ------------------
 6161|  24.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  24.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  24.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  24.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  24.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 24.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  24.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|  24.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|  24.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6164|  24.1k|                                 value_width));
 6165|  24.1k|            std::tie(it, postfix_width) = postfix_result;
 6166|  24.1k|        }
 6167|       |
 6168|  24.1k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|  24.1k|                                                 value_width, postfix_width);
 6170|  24.1k|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 24.1k]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|  24.1k|        return it;
 6175|  24.1k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|   419k|    {
 3035|   419k|        return true;
 3036|   419k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4218|   173k|    {
 4219|   173k|        unsigned options{};
 4220|   173k|        if (specs.localized) {
  ------------------
  |  Branch (4220:13): [True: 55.9k, False: 117k]
  ------------------
 4221|  55.9k|            options |= float_reader_base::allow_thsep;
 4222|  55.9k|        }
 4223|       |
 4224|   173k|        SCN_GCC_COMPAT_PUSH
 4225|   173k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4226|       |
 4227|   173k|        switch (specs.type) {
 4228|  14.7k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4228:13): [True: 14.7k, False: 158k]
  ------------------
 4229|  14.7k|                return options | float_reader_base::allow_fixed;
 4230|       |
 4231|    436|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4231:13): [True: 436, False: 172k]
  ------------------
 4232|    436|                return options | float_reader_base::allow_scientific;
 4233|       |
 4234|  67.1k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4234:13): [True: 67.1k, False: 105k]
  ------------------
 4235|  67.1k|                return options | float_reader_base::allow_hex;
 4236|       |
 4237|  34.7k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4237:13): [True: 34.7k, False: 138k]
  ------------------
 4238|  34.7k|                return options | float_reader_base::allow_scientific |
 4239|  34.7k|                       float_reader_base::allow_fixed;
 4240|       |
 4241|  55.9k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4241:13): [True: 55.9k, False: 117k]
  ------------------
 4242|  55.9k|                return options | float_reader_base::allow_scientific |
 4243|  55.9k|                       float_reader_base::allow_fixed |
 4244|  55.9k|                       float_reader_base::allow_hex;
 4245|       |
 4246|      0|            default:
  ------------------
  |  Branch (4246:13): [True: 0, False: 173k]
  ------------------
 4247|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4248|   173k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4249|   173k|        }
 4250|       |
 4251|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4252|   173k|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3660|   173k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|   248k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|   496k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3691|  67.1k|    {
 3692|  67.1k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  67.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  67.1k|        const std::ptrdiff_t sign_len =
 3695|  67.1k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 13.9k, False: 53.1k]
  ------------------
 3696|       |
 3697|  67.1k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  67.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  67.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  67.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  67.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 349, False: 66.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    349|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    349|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    349|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    349|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    349|    }                                                  \
  |  |  |  | 3642|  67.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  66.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  66.7k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  67.1k|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4057|   246k|    {
 4058|   246k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4058:13): [True: 246k, False: 0]
  ------------------
 4059|   246k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4059:13): [True: 246k, False: 0]
  ------------------
 4060|   246k|            return;
 4061|   246k|        }
 4062|       |
 4063|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4064|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4064:13): [True: 0, False: 0]
  ------------------
 4065|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4065:27): [True: 0, False: 0]
  ------------------
 4066|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4066:21): [True: 0, False: 0]
  ------------------
 4067|      0|                    ch = CharT{'.'};
 4068|      0|                }
 4069|      0|            }
 4070|      0|        }
 4071|       |
 4072|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4072:13): [True: 0, False: 0]
  ------------------
 4073|      0|            return;
 4074|      0|        }
 4075|       |
 4076|      0|        auto first =
 4077|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4078|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4078:13): [True: 0, False: 0]
  ------------------
 4079|      0|            return;
 4080|      0|        }
 4081|       |
 4082|      0|        m_thsep_indices.push_back(
 4083|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4084|       |
 4085|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4085:31): [True: 0, False: 0]
  ------------------
 4086|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4086:17): [True: 0, False: 0]
  ------------------
 4087|      0|                *first++ = std::move(*it);
 4088|      0|            }
 4089|      0|            else {
 4090|      0|                m_thsep_indices.push_back(
 4091|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4092|      0|            }
 4093|      0|        }
 4094|       |
 4095|      0|        str.erase(first, str.end());
 4096|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|   327k|    {
 1587|   327k|        return m_storage.has_value();
 1588|   327k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|   193k|    {
 1592|   193k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   193k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   193k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|   193k|        return *m_storage;
 1594|   193k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4171|  24.4k|    {
 4172|  24.4k|        float_reader<CharT> rd{get_options(specs)};
 4173|       |
 4174|  24.4k|#if !SCN_DISABLE_LOCALE
 4175|  24.4k|        if (specs.localized) {
  ------------------
  |  Branch (4175:13): [True: 7.21k, False: 17.2k]
  ------------------
 4176|  7.21k|            return read_impl<Range>(
 4177|  7.21k|                range, rd,
 4178|  7.21k|                [](float_reader<CharT>& r, auto&&... args) {
 4179|  7.21k|                    return r.read_source_localized(SCN_FWD(args)...);
 4180|  7.21k|                },
 4181|  7.21k|                value, loc);
 4182|  7.21k|        }
 4183|  17.2k|#endif
 4184|       |
 4185|  17.2k|        return read_impl<Range>(
 4186|  17.2k|            range, rd,
 4187|  17.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4188|  17.2k|                return r.read_source(SCN_FWD(args)...);
 4189|  17.2k|            },
 4190|  17.2k|            value);
 4191|  24.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4207|  32.3k|    {
 4208|  32.3k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4209|  32.3k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 266, False: 32.1k]
  |  |  ------------------
  ------------------
 4210|    266|            return unexpected(r.error());
 4211|    266|        }
 4212|       |
 4213|  32.1k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  32.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  32.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  32.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 118, False: 31.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    118|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    118|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    118|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    118|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    118|    }                                                  \
  |  |  |  | 3642|  32.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4214|  31.9k|        return ranges::next(range.begin(), n);
 4215|  32.1k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   119k|    {
  763|   119k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   119k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  7.21k|    {
  754|  7.21k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  7.21k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.21k|              cvref<T> obj = *get<T>(fn);
  745|  7.21k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.21k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.21k|              }
  748|  7.21k|              else {
  749|  7.21k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.21k|              }
  751|  7.21k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  7.21k|    {
  684|  7.21k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.21k|            return static_cast<T*>(s.m_cp);
  686|  7.21k|        }
  687|  7.21k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.21k|            return static_cast<T*>(s.m_p);
  689|  7.21k|        }
  690|  7.21k|        else {
  691|  7.21k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.21k|        }
  693|  7.21k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4178|  7.21k|                [](float_reader<CharT>& r, auto&&... args) {
 4179|  7.21k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  7.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4180|  7.21k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3679|  27.9k|    {
 3680|  27.9k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|  27.9k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  27.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 27.9k]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|  27.9k|        return read_source_impl(range);
 3686|  27.9k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3705|   119k|    {
 3706|   119k|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|   119k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   119k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   119k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 119k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   119k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|   119k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|   119k|        auto it = sign_result.first;
 3709|   119k|        m_sign = sign_result.second;
 3710|       |
 3711|   119k|        auto digits_begin = it;
 3712|   119k|        auto r = ranges::subrange{it, range.end()};
 3713|   119k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   119k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|   119k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3716|   119k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|   119k|                SCN_TRY_ASSIGN(
 3718|   119k|                    it,
 3719|   119k|                    do_read_source_impl(
 3720|   119k|                        r,
 3721|   119k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|   119k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|   119k|            }
 3724|   119k|            else {
 3725|   119k|                auto cb = [&](const auto& rr)
 3726|   119k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|   119k|                    auto res = read_all(rr);
 3728|   119k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|   119k|                        return unexpected_scan_error(
 3730|   119k|                            scan_error::invalid_scanned_value,
 3731|   119k|                            "Invalid float value");
 3732|   119k|                    }
 3733|   119k|                    return res;
 3734|   119k|                };
 3735|   119k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3736|   119k|            }
 3737|   119k|        }
 3738|   119k|        else {
 3739|   119k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|   119k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   119k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 964, False: 119k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    964|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    964|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    964|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    964|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    964|    }                                                  \
  |  | 3642|   119k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   119k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3740|   119k|                it,
 3741|   119k|                do_read_source_impl(
 3742|   119k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|   119k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|   119k|        }
 3745|       |
 3746|   119k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|   119k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 118k, False: 285]
  |  Branch (3748:48): [True: 118k, False: 415]
  ------------------
 3749|   119k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 112k, False: 5.86k]
  ------------------
 3750|   119k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 112k, False: 0]
  ------------------
 3751|   112k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|   112k|        }
 3753|       |
 3754|   119k|        handle_separators();
 3755|       |
 3756|   119k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 119k]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|   119k|        return it;
 3769|   119k|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4000|   119k|    {
 4001|   119k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|   119k|        const bool allowed_nonhex =
 4003|   119k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|   119k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|   119k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 119k, False: 700]
  |  Branch (4006:45): [True: 0, False: 119k]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|   119k|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 700, False: 119k]
  ------------------
 4012|    700|            return *r;
 4013|    700|        }
 4014|       |
 4015|   119k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 113k, False: 5.86k]
  |  Branch (4015:45): [True: 0, False: 113k]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|   119k|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 5.86k, False: 113k]
  ------------------
 4019|  5.86k|            return *r;
 4020|  5.86k|        }
 4021|       |
 4022|   113k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 89.9k, False: 23.4k]
  |  Branch (4022:28): [True: 32.1k, False: 57.7k]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|  32.1k|            auto it = range.begin();
 4026|       |
 4027|  32.1k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 2.85k, False: 29.3k]
  ------------------
 4028|  2.85k|                m_kind = float_kind::hex_with_prefix;
 4029|  2.85k|                it = *r;
 4030|  2.85k|            }
 4031|  29.3k|            else {
 4032|  29.3k|                m_kind = float_kind::hex_without_prefix;
 4033|  29.3k|            }
 4034|       |
 4035|  32.1k|            return read_hex(ranges::subrange{it, range.end()});
 4036|  32.1k|        }
 4037|  81.2k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 23.4k, False: 57.7k]
  |  Branch (4037:29): [True: 23.4k, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|  23.4k|            m_kind = float_kind::generic;
 4041|  23.4k|            return read_regular_float(range);
 4042|  23.4k|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|  57.7k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  57.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.69k, False: 52.0k]
  |  |  ------------------
  ------------------
 4048|  5.69k|            m_kind = float_kind::hex_with_prefix;
 4049|  5.69k|            return read_hex(ranges::subrange{*r, range.end()});
 4050|  5.69k|        }
 4051|       |
 4052|  52.0k|        m_kind = float_kind::generic;
 4053|  52.0k|        return read_regular(range);
 4054|  57.7k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3811|   119k|    {
 3812|   119k|        auto it = range.begin();
 3813|   119k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 119k, False: 700]
  ------------------
 3814|   119k|            return unexpected(r.error());
 3815|   119k|        }
 3816|    700|        else {
 3817|    700|            it = *r;
 3818|    700|        }
 3819|       |
 3820|    700|        if (auto r = read_matching_string_classic_nocase(
 3821|    700|                ranges::subrange{it, range.end()}, "inity");
 3822|    700|            !r) {
  ------------------
  |  Branch (3822:13): [True: 285, False: 415]
  ------------------
 3823|    285|            m_kind = float_kind::inf_short;
 3824|    285|            return it;
 3825|    285|        }
 3826|    415|        else {
 3827|    415|            m_kind = float_kind::inf_long;
 3828|    415|            return *r;
 3829|    415|        }
 3830|    700|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3834|   119k|    {
 3835|   119k|        auto it = range.begin();
 3836|   119k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 113k, False: 5.86k]
  ------------------
 3837|   113k|            return r.transform_error(map_parse_error_to_scan_error(
 3838|   113k|                scan_error::invalid_scanned_value,
 3839|   113k|                "Invalid floating-point NaN value"));
 3840|   113k|        }
 3841|  5.86k|        else {
 3842|  5.86k|            it = *r;
 3843|  5.86k|        }
 3844|       |
 3845|  5.86k|        if (auto r =
 3846|  5.86k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|  5.86k|            !r) {
  ------------------
  |  Branch (3847:13): [True: 5.86k, False: 0]
  ------------------
 3848|  5.86k|            m_kind = float_kind::nan_simple;
 3849|  5.86k|            return it;
 3850|  5.86k|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3804|  89.9k|    {
 3805|  89.9k|        return read_matching_string_classic_nocase(range, "0x");
 3806|  89.9k|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3904|  37.8k|    {
 3905|  37.8k|        auto it = range.begin();
 3906|       |
 3907|  37.8k|        std::ptrdiff_t digits_count = 0;
 3908|  37.8k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3909|  37.8k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 140, False: 37.7k]
  |  |  ------------------
  ------------------
 3910|    140|            return r.transform_error(map_parse_error_to_scan_error(
 3911|    140|                scan_error::invalid_scanned_value,
 3912|    140|                "Invalid hexadecimal floating-point value"));
 3913|    140|        }
 3914|  37.7k|        else {
 3915|  37.7k|            digits_count += ranges::distance(it, *r);
 3916|  37.7k|            it = *r;
 3917|  37.7k|        }
 3918|       |
 3919|  37.7k|        m_integral_part_length = digits_count;
 3920|  37.7k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3920:18): [True: 6.96k, False: 30.7k]
  ------------------
 3921|  37.7k|                                             m_locale_options.decimal_point)) {
 3922|  6.96k|            it = *r;
 3923|  6.96k|        }
 3924|       |
 3925|  37.7k|        if (auto r =
  ------------------
  |  Branch (3925:18): [True: 6.93k, False: 30.8k]
  ------------------
 3926|  37.7k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3927|  6.93k|            digits_count += ranges::distance(it, *r);
 3928|  6.93k|            it = *r;
 3929|  6.93k|        }
 3930|       |
 3931|  37.7k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  37.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.7k]
  |  |  ------------------
  ------------------
 3932|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3933|      0|                                         "No significand digits in hexfloat");
 3934|      0|        }
 3935|       |
 3936|  37.7k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3937|       |
 3938|  37.7k|        return it;
 3939|  37.7k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3789|  75.6k|    {
 3790|  75.6k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 75.6k]
  |  |  |  Branch (859:45): [True: 0, False: 75.6k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3791|  75.6k|                         thsep_allowed)) {
 3792|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3793|      0|                return char_to_int(ch) < 16 ||
 3794|      0|                       ch == m_locale_options.thousands_sep;
 3795|      0|            });
 3796|      0|        }
 3797|       |
 3798|  75.6k|        return read_while1_code_unit(
 3799|  75.6k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3800|  75.6k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|  75.6k|    {
  754|  75.6k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|   500k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   500k|              cvref<T> obj = *get<T>(fn);
  745|   500k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   500k|                  obj(static_cast<decltype(args)>(args)...);
  747|   500k|              }
  748|   500k|              else {
  749|   500k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   500k|              }
  751|   500k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|   500k|    {
  684|   500k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   500k|            return static_cast<T*>(s.m_cp);
  686|   500k|        }
  687|   500k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   500k|            return static_cast<T*>(s.m_p);
  689|   500k|        }
  690|   500k|        else {
  691|   500k|            return reinterpret_cast<T*>(s.m_fp);
  692|   500k|        }
  693|   500k|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3799|   500k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|  75.6k|        {
  662|  75.6k|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3876|   105k|    {
 3877|   105k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3877:18): [True: 8.29k, False: 97.2k]
  ------------------
 3878|  8.29k|            auto beg_exp_it = range.begin();
 3879|  8.29k|            auto it = *r;
 3880|       |
 3881|  8.29k|            if (auto r_sign =
  ------------------
  |  Branch (3881:22): [True: 8.29k, False: 0]
  ------------------
 3882|  8.29k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3883|  8.29k|                it = r_sign->first;
 3884|  8.29k|            }
 3885|       |
 3886|  8.29k|            if (auto r_exp = read_while1_code_unit(
 3887|  8.29k|                    ranges::subrange{it, range.end()},
 3888|  8.29k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3889|  8.29k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  8.29k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14, False: 8.28k]
  |  |  ------------------
  ------------------
 3890|     14|                it = beg_exp_it;
 3891|     14|            }
 3892|  8.28k|            else {
 3893|  8.28k|                it = *r_exp;
 3894|  8.28k|            }
 3895|       |
 3896|  8.29k|            return it;
 3897|  8.29k|        }
 3898|  97.2k|        return range.begin();
 3899|   105k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_:
  753|  8.29k|    {
  754|  8.29k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_LPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clESZ_c:
  743|  22.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.8k|              cvref<T> obj = *get<T>(fn);
  745|  22.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  22.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  22.8k|              }
  748|  22.8k|              else {
  749|  22.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.8k|              }
  751|  22.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  22.8k|    {
  684|  22.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  22.8k|            return static_cast<T*>(s.m_cp);
  686|  22.8k|        }
  687|  22.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  22.8k|            return static_cast<T*>(s.m_p);
  689|  22.8k|        }
  690|  22.8k|        else {
  691|  22.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  22.8k|        }
  693|  22.8k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3888|  22.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_LPv0EEEPSL_:
  661|  8.29k|        {
  662|  8.29k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3944|  75.5k|    {
 3945|  75.5k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|  75.5k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 68.2k, False: 7.31k]
  |  Branch (3946:50): [True: 218, False: 67.9k]
  ------------------
 3947|       |
 3948|  75.5k|        auto it = ranges::begin(range);
 3949|  75.5k|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|  75.5k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|  75.5k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  75.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 636, False: 74.8k]
  |  |  ------------------
  ------------------
 3953|    636|            return r.transform_error(
 3954|    636|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|    636|                                              "Invalid floating-point value"));
 3956|    636|        }
 3957|  74.8k|        else {
 3958|  74.8k|            digits_count += ranges::distance(it, *r);
 3959|  74.8k|            it = *r;
 3960|  74.8k|        }
 3961|       |
 3962|  74.8k|        m_integral_part_length = digits_count;
 3963|  74.8k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 22.5k, False: 52.3k]
  ------------------
 3964|  74.8k|                                             m_locale_options.decimal_point)) {
 3965|  22.5k|            it = *r;
 3966|  22.5k|        }
 3967|       |
 3968|  74.8k|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 22.4k, False: 52.4k]
  ------------------
 3969|  74.8k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|  22.4k|            digits_count += ranges::distance(it, *r);
 3971|  22.4k|            it = *r;
 3972|  22.4k|        }
 3973|       |
 3974|  74.8k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  74.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 74.8k]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|  74.8k|        auto beg_exp_it = it;
 3980|  74.8k|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 67.7k, False: 7.12k]
  ------------------
 3981|  67.7k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|  67.7k|        }
 3983|  74.8k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 218, False: 74.6k]
  |  Branch (3983:29): [True: 188, False: 30]
  ------------------
 3984|    188|            return unexpected_scan_error(
 3985|    188|                scan_error::invalid_scanned_value,
 3986|    188|                "No exponent given to scientific float");
 3987|    188|        }
 3988|       |
 3989|  74.7k|        m_kind =
 3990|  74.7k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 66.4k, False: 8.28k]
  ------------------
 3991|       |
 3992|  74.7k|        return it;
 3993|  74.8k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3774|   150k|    {
 3775|   150k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 150k]
  |  |  |  Branch (859:45): [True: 0, False: 150k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|   150k|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|   150k|        return read_while1_code_unit(
 3784|   150k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|   150k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_:
  753|   150k|    {
  754|   150k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  1.17M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.17M|              cvref<T> obj = *get<T>(fn);
  745|  1.17M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.17M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.17M|              }
  748|  1.17M|              else {
  749|  1.17M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.17M|              }
  751|  1.17M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  1.17M|    {
  684|  1.17M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.17M|            return static_cast<T*>(s.m_cp);
  686|  1.17M|        }
  687|  1.17M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.17M|            return static_cast<T*>(s.m_p);
  689|  1.17M|        }
  690|  1.17M|        else {
  691|  1.17M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.17M|        }
  693|  1.17M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3784|  1.17M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_LPv0EEEPSM_:
  661|   150k|        {
  662|   150k|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEvOT_:
 1576|   112k|    {
 1577|   112k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   112k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  7.21k|        {
  662|  7.21k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  17.2k|    {
  754|  17.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  17.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.2k|              cvref<T> obj = *get<T>(fn);
  745|  17.2k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  17.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.2k|              }
  748|  17.2k|              else {
  749|  17.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.2k|              }
  751|  17.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|  17.2k|    {
  684|  17.2k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  17.2k|            return static_cast<T*>(s.m_cp);
  686|  17.2k|        }
  687|  17.2k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  17.2k|            return static_cast<T*>(s.m_p);
  689|  17.2k|        }
  690|  17.2k|        else {
  691|  17.2k|            return reinterpret_cast<T*>(s.m_fp);
  692|  17.2k|        }
  693|  17.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4187|  17.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4188|  17.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  17.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4189|  17.2k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3665|  91.9k|    {
 3666|  91.9k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  91.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.9k]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|  91.9k|        return read_source_impl(range);
 3672|  91.9k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|  17.2k|        {
  662|  17.2k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4171|  24.3k|    {
 4172|  24.3k|        float_reader<CharT> rd{get_options(specs)};
 4173|       |
 4174|  24.3k|#if !SCN_DISABLE_LOCALE
 4175|  24.3k|        if (specs.localized) {
  ------------------
  |  Branch (4175:13): [True: 7.21k, False: 17.1k]
  ------------------
 4176|  7.21k|            return read_impl<Range>(
 4177|  7.21k|                range, rd,
 4178|  7.21k|                [](float_reader<CharT>& r, auto&&... args) {
 4179|  7.21k|                    return r.read_source_localized(SCN_FWD(args)...);
 4180|  7.21k|                },
 4181|  7.21k|                value, loc);
 4182|  7.21k|        }
 4183|  17.1k|#endif
 4184|       |
 4185|  17.1k|        return read_impl<Range>(
 4186|  17.1k|            range, rd,
 4187|  17.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4188|  17.1k|                return r.read_source(SCN_FWD(args)...);
 4189|  17.1k|            },
 4190|  17.1k|            value);
 4191|  24.3k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4207|  35.1k|    {
 4208|  35.1k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4209|  35.1k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  35.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 160, False: 35.0k]
  |  |  ------------------
  ------------------
 4210|    160|            return unexpected(r.error());
 4211|    160|        }
 4212|       |
 4213|  35.0k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  35.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  35.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  35.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 231, False: 34.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    231|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    231|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    231|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    231|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    231|    }                                                  \
  |  |  |  | 3642|  35.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4214|  34.7k|        return ranges::next(range.begin(), n);
 4215|  35.0k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   128k|    {
  763|   128k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   128k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  7.21k|    {
  754|  7.21k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  7.21k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.21k|              cvref<T> obj = *get<T>(fn);
  745|  7.21k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.21k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.21k|              }
  748|  7.21k|              else {
  749|  7.21k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.21k|              }
  751|  7.21k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  7.21k|    {
  684|  7.21k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.21k|            return static_cast<T*>(s.m_cp);
  686|  7.21k|        }
  687|  7.21k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.21k|            return static_cast<T*>(s.m_p);
  689|  7.21k|        }
  690|  7.21k|        else {
  691|  7.21k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.21k|        }
  693|  7.21k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4178|  7.21k|                [](float_reader<CharT>& r, auto&&... args) {
 4179|  7.21k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  7.21k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4180|  7.21k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3679|  27.9k|    {
 3680|  27.9k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|  27.9k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  27.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 27.9k]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|  27.9k|        return read_source_impl(range);
 3686|  27.9k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3705|   128k|    {
 3706|   128k|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|   128k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|   128k|        auto it = sign_result.first;
 3709|   128k|        m_sign = sign_result.second;
 3710|       |
 3711|   128k|        auto digits_begin = it;
 3712|   128k|        auto r = ranges::subrange{it, range.end()};
 3713|   128k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|   128k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|   128k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 128k]
  |  |  |  Branch (859:45): [True: 0, False: 128k]
  |  |  |  Branch (859:45): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
 3716|   128k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3718|      0|                    it,
 3719|      0|                    do_read_source_impl(
 3720|      0|                        r,
 3721|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|      0|            }
 3724|   128k|            else {
 3725|   128k|                auto cb = [&](const auto& rr)
 3726|   128k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|   128k|                    auto res = read_all(rr);
 3728|   128k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|   128k|                        return unexpected_scan_error(
 3730|   128k|                            scan_error::invalid_scanned_value,
 3731|   128k|                            "Invalid float value");
 3732|   128k|                    }
 3733|   128k|                    return res;
 3734|   128k|                };
 3735|   128k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3638|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 546, False: 127k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    546|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    546|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    546|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    546|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    546|    }                                                  \
  |  | 3642|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3736|   127k|            }
 3737|   128k|        }
 3738|   127k|        else {
 3739|   127k|            SCN_TRY_ASSIGN(
 3740|   127k|                it,
 3741|   127k|                do_read_source_impl(
 3742|   127k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|   127k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|   127k|        }
 3745|       |
 3746|   127k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   127k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   127k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|   127k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 127k, False: 285]
  |  Branch (3748:48): [True: 127k, False: 415]
  ------------------
 3749|   127k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 121k, False: 5.86k]
  ------------------
 3750|   127k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 121k, False: 0]
  ------------------
 3751|   121k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|   121k|        }
 3753|       |
 3754|   127k|        handle_separators();
 3755|       |
 3756|   127k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 127k]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|   127k|        return it;
 3769|   127k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3811|   128k|    {
 3812|   128k|        auto it = range.begin();
 3813|   128k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 127k, False: 700]
  ------------------
 3814|   127k|            return unexpected(r.error());
 3815|   127k|        }
 3816|    700|        else {
 3817|    700|            it = *r;
 3818|    700|        }
 3819|       |
 3820|    700|        if (auto r = read_matching_string_classic_nocase(
 3821|    700|                ranges::subrange{it, range.end()}, "inity");
 3822|    700|            !r) {
  ------------------
  |  Branch (3822:13): [True: 285, False: 415]
  ------------------
 3823|    285|            m_kind = float_kind::inf_short;
 3824|    285|            return it;
 3825|    285|        }
 3826|    415|        else {
 3827|    415|            m_kind = float_kind::inf_long;
 3828|    415|            return *r;
 3829|    415|        }
 3830|    700|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3834|   127k|    {
 3835|   127k|        auto it = range.begin();
 3836|   127k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 121k, False: 5.86k]
  ------------------
 3837|   121k|            return r.transform_error(map_parse_error_to_scan_error(
 3838|   121k|                scan_error::invalid_scanned_value,
 3839|   121k|                "Invalid floating-point NaN value"));
 3840|   121k|        }
 3841|  5.86k|        else {
 3842|  5.86k|            it = *r;
 3843|  5.86k|        }
 3844|       |
 3845|  5.86k|        if (auto r =
 3846|  5.86k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|  5.86k|            !r) {
  ------------------
  |  Branch (3847:13): [True: 5.86k, False: 0]
  ------------------
 3848|  5.86k|            m_kind = float_kind::nan_simple;
 3849|  5.86k|            return it;
 3850|  5.86k|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3804|  98.3k|    {
 3805|  98.3k|        return read_matching_string_classic_nocase(range, "0x");
 3806|  98.3k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|  48.9k|{
 1996|  48.9k|    auto it = read_while_code_unit(range, pred);
 1997|  48.9k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 14.5k, False: 34.4k]
  ------------------
 1998|  14.5k|        return unexpected(parse_error::error);
 1999|  14.5k|    }
 2000|  34.4k|    return it;
 2001|  48.9k|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3876|  16.0k|    {
 3877|  16.0k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3877:18): [True: 2.38k, False: 13.6k]
  ------------------
 3878|  2.38k|            auto beg_exp_it = range.begin();
 3879|  2.38k|            auto it = *r;
 3880|       |
 3881|  2.38k|            if (auto r_sign =
  ------------------
  |  Branch (3881:22): [True: 2.38k, False: 0]
  ------------------
 3882|  2.38k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3883|  2.38k|                it = r_sign->first;
 3884|  2.38k|            }
 3885|       |
 3886|  2.38k|            if (auto r_exp = read_while1_code_unit(
 3887|  2.38k|                    ranges::subrange{it, range.end()},
 3888|  2.38k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3889|  2.38k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  2.38k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4, False: 2.38k]
  |  |  ------------------
  ------------------
 3890|      4|                it = beg_exp_it;
 3891|      4|            }
 3892|  2.38k|            else {
 3893|  2.38k|                it = *r_exp;
 3894|  2.38k|            }
 3895|       |
 3896|  2.38k|            return it;
 3897|  2.38k|        }
 3898|  13.6k|        return range.begin();
 3899|  16.0k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_:
  753|  2.38k|    {
  754|  2.38k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_LPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clESW_c:
  743|  6.40k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.40k|              cvref<T> obj = *get<T>(fn);
  745|  6.40k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.40k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.40k|              }
  748|  6.40k|              else {
  749|  6.40k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.40k|              }
  751|  6.40k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  6.40k|    {
  684|  6.40k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.40k|            return static_cast<T*>(s.m_cp);
  686|  6.40k|        }
  687|  6.40k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  6.40k|            return static_cast<T*>(s.m_p);
  689|  6.40k|        }
  690|  6.40k|        else {
  691|  6.40k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.40k|        }
  693|  6.40k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3888|  6.40k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_LPv0EEEPSI_:
  661|  2.38k|        {
  662|  2.38k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3944|  23.4k|    {
 3945|  23.4k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|  23.4k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 16.1k, False: 7.30k]
  |  Branch (3946:50): [True: 218, False: 15.9k]
  ------------------
 3947|       |
 3948|  23.4k|        auto it = ranges::begin(range);
 3949|  23.4k|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|  23.4k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|  23.4k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  23.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 342, False: 23.1k]
  |  |  ------------------
  ------------------
 3953|    342|            return r.transform_error(
 3954|    342|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|    342|                                              "Invalid floating-point value"));
 3956|    342|        }
 3957|  23.1k|        else {
 3958|  23.1k|            digits_count += ranges::distance(it, *r);
 3959|  23.1k|            it = *r;
 3960|  23.1k|        }
 3961|       |
 3962|  23.1k|        m_integral_part_length = digits_count;
 3963|  23.1k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 9.00k, False: 14.1k]
  ------------------
 3964|  23.1k|                                             m_locale_options.decimal_point)) {
 3965|  9.00k|            it = *r;
 3966|  9.00k|        }
 3967|       |
 3968|  23.1k|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 8.96k, False: 14.1k]
  ------------------
 3969|  23.1k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|  8.96k|            digits_count += ranges::distance(it, *r);
 3971|  8.96k|            it = *r;
 3972|  8.96k|        }
 3973|       |
 3974|  23.1k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  23.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.1k]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|  23.1k|        auto beg_exp_it = it;
 3980|  23.1k|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 16.0k, False: 7.11k]
  ------------------
 3981|  16.0k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|  16.0k|        }
 3983|  23.1k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 218, False: 22.9k]
  |  Branch (3983:29): [True: 188, False: 30]
  ------------------
 3984|    188|            return unexpected_scan_error(
 3985|    188|                scan_error::invalid_scanned_value,
 3986|    188|                "No exponent given to scientific float");
 3987|    188|        }
 3988|       |
 3989|  22.9k|        m_kind =
 3990|  22.9k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 20.5k, False: 2.38k]
  ------------------
 3991|       |
 3992|  22.9k|        return it;
 3993|  23.1k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3774|  46.6k|    {
 3775|  46.6k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 46.6k]
  |  |  |  Branch (859:45): [True: 0, False: 46.6k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|  46.6k|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|  46.6k|        return read_while1_code_unit(
 3784|  46.6k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|  46.6k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_:
  753|  46.6k|    {
  754|  46.6k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESU_c:
  743|   429k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   429k|              cvref<T> obj = *get<T>(fn);
  745|   429k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   429k|                  obj(static_cast<decltype(args)>(args)...);
  747|   429k|              }
  748|   429k|              else {
  749|   429k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   429k|              }
  751|   429k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|   429k|    {
  684|   429k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   429k|            return static_cast<T*>(s.m_cp);
  686|   429k|        }
  687|   429k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   429k|            return static_cast<T*>(s.m_p);
  689|   429k|        }
  690|   429k|        else {
  691|   429k|            return reinterpret_cast<T*>(s.m_fp);
  692|   429k|        }
  693|   429k|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3784|   429k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_LPv0EEEPSJ_:
  661|  46.6k|        {
  662|  46.6k|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4000|   128k|    {
 4001|   128k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|   128k|        const bool allowed_nonhex =
 4003|   128k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|   128k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|   128k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 127k, False: 700]
  |  Branch (4006:45): [True: 0, False: 127k]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|   128k|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 700, False: 127k]
  ------------------
 4012|    700|            return *r;
 4013|    700|        }
 4014|       |
 4015|   127k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 121k, False: 5.86k]
  |  Branch (4015:45): [True: 0, False: 121k]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|   127k|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 5.86k, False: 121k]
  ------------------
 4019|  5.86k|            return *r;
 4020|  5.86k|        }
 4021|       |
 4022|   121k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 98.3k, False: 23.4k]
  |  Branch (4022:28): [True: 31.9k, False: 66.3k]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|  31.9k|            auto it = range.begin();
 4026|       |
 4027|  31.9k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 2.85k, False: 29.1k]
  ------------------
 4028|  2.85k|                m_kind = float_kind::hex_with_prefix;
 4029|  2.85k|                it = *r;
 4030|  2.85k|            }
 4031|  29.1k|            else {
 4032|  29.1k|                m_kind = float_kind::hex_without_prefix;
 4033|  29.1k|            }
 4034|       |
 4035|  31.9k|            return read_hex(ranges::subrange{it, range.end()});
 4036|  31.9k|        }
 4037|  89.8k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 23.4k, False: 66.3k]
  |  Branch (4037:29): [True: 23.4k, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|  23.4k|            m_kind = float_kind::generic;
 4041|  23.4k|            return read_regular_float(range);
 4042|  23.4k|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|  66.3k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|  66.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.13k, False: 59.2k]
  |  |  ------------------
  ------------------
 4048|  7.13k|            m_kind = float_kind::hex_with_prefix;
 4049|  7.13k|            return read_hex(ranges::subrange{*r, range.end()});
 4050|  7.13k|        }
 4051|       |
 4052|  59.2k|        m_kind = float_kind::generic;
 4053|  59.2k|        return read_regular(range);
 4054|  66.3k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3726|  98.3k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  98.3k|                    auto res = read_all(rr);
 3728|  98.3k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  98.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16, False: 98.3k]
  |  |  ------------------
  ------------------
 3729|     16|                        return unexpected_scan_error(
 3730|     16|                            scan_error::invalid_scanned_value,
 3731|     16|                            "Invalid float value");
 3732|     16|                    }
 3733|  98.3k|                    return res;
 3734|  98.3k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  98.3k|{
 1839|  98.3k|    return ranges::next(range.begin(), range.end());
 1840|  98.3k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  98.3k|    {
  313|  98.3k|        ranges::advance(x, bound);
  314|  98.3k|        return x;
  315|  98.3k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  98.3k|    {
  275|  98.3k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  98.3k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  98.3k|    {
  190|  98.3k|        i = std::move(bound);
  191|  98.3k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEvOT_:
 1576|   121k|    {
 1577|   121k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   121k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|   121k|    {
 1621|   121k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   121k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   121k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   121k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   121k|            m_storage.reset();
 1627|   121k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   121k|        }
 1629|   121k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   121k|                                          std::basic_string<CharT>>) {
 1631|   121k|            m_storage.emplace(SCN_FWD(range));
 1632|   121k|            m_view = string_view_type{*m_storage};
 1633|   121k|        }
 1634|   121k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   121k|                                          typename detail::basic_scan_buffer<
 1636|   121k|                                              value_t>::forward_iterator> &&
 1637|   121k|                           ranges::common_range<Range>) {
 1638|   121k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   121k|            auto end_seg = range.end().contiguous_segment();
 1640|   121k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   121k|                             detail::to_address(end_seg.end()))) {
 1642|   121k|                auto& str = m_storage.emplace();
 1643|   121k|                str.reserve(range.end().position() - range.begin().position());
 1644|   121k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   121k|                m_view = string_view_type{str};
 1646|   121k|                return;
 1647|   121k|            }
 1648|       |
 1649|   121k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   121k|                                                            end_seg.data());
 1651|   121k|            m_storage.reset();
 1652|   121k|        }
 1653|   121k|        else {
 1654|   121k|            auto& str = m_storage.emplace();
 1655|   121k|            if constexpr (ranges::sized_range<Range>) {
 1656|   121k|                str.reserve(range.size());
 1657|   121k|            }
 1658|   121k|            if constexpr (ranges::common_range<Range>) {
 1659|   121k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   121k|                          std::back_inserter(str));
 1661|   121k|            }
 1662|   121k|            else {
 1663|   121k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   121k|                     ++it) {
 1665|   121k|                    str.push_back(*it);
 1666|   121k|                }
 1667|   121k|            }
 1668|   121k|            m_view = string_view_type{str};
 1669|   121k|        }
 1670|   121k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  7.21k|        {
  662|  7.21k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  17.1k|    {
  754|  17.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  17.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.1k|              cvref<T> obj = *get<T>(fn);
  745|  17.1k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  17.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.1k|              }
  748|  17.1k|              else {
  749|  17.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.1k|              }
  751|  17.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|  17.1k|    {
  684|  17.1k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  17.1k|            return static_cast<T*>(s.m_cp);
  686|  17.1k|        }
  687|  17.1k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  17.1k|            return static_cast<T*>(s.m_p);
  689|  17.1k|        }
  690|  17.1k|        else {
  691|  17.1k|            return reinterpret_cast<T*>(s.m_fp);
  692|  17.1k|        }
  693|  17.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4187|  17.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4188|  17.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  17.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4189|  17.1k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3665|   100k|    {
 3666|   100k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|   100k|        return read_source_impl(range);
 3672|   100k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|  17.1k|        {
  662|  17.1k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6179|  31.1k|    {
 6180|  31.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  31.1k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|      0|                          basic_contiguous_scan_context<char_type>>) {
 6184|  31.1k|            auto rd = make_reader<T, char_type>();
 6185|  31.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6186|  31.1k|                return unexpected(e);
 6187|  31.1k|            }
 6188|       |
 6189|  31.1k|            return impl(rd, range, value);
 6190|  31.1k|        }
 6191|  31.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6191:28): [Folded - Ignored]
  ------------------
 6192|  31.1k|            auto rd = make_reader<T, char_type>();
 6193|  31.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 31.1k]
  |  |  ------------------
  ------------------
 6194|      0|                return unexpected(e);
 6195|      0|            }
 6196|       |
 6197|  31.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6197:17): [True: 31.1k, False: 0]
  |  Branch (6197:50): [True: 0, False: 0]
  ------------------
 6198|  31.1k|                specs.width != 0) {
  ------------------
  |  Branch (6198:17): [True: 0, False: 0]
  ------------------
 6199|  31.1k|                return impl(rd, range, value);
 6200|  31.1k|            }
 6201|       |
 6202|      0|            auto crange = get_as_contiguous(range);
 6203|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6204|      0|            return ranges::next(range.begin(),
 6205|      0|                                ranges::distance(crange.begin(), it));
 6206|      0|        }
 6207|  31.1k|        else {
 6208|  31.1k|            SCN_EXPECT(false);
 6209|  31.1k|            SCN_UNREACHABLE;
 6210|  31.1k|        }
 6211|  31.1k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6121|  31.1k|    {
 6122|  31.1k|        const bool need_skipped_width =
 6123|  31.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 31.1k]
  |  Branch (6123:33): [True: 0, False: 31.1k]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|  31.1k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 31.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     40|    }                                                  \
  |  |  |  | 3642|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|  31.1k|        auto [it, prefix_width] = prefix_result;
 6128|  31.1k|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|  31.1k|        std::ptrdiff_t value_width = 0;
 6132|  31.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 31.1k]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|  31.1k|        else {
 6148|  31.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 280, False: 30.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    280|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    280|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    280|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    280|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    280|    }                                                  \
  |  | 3642|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|  30.8k|                                             specs, value, loc));
 6150|       |
 6151|  30.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 30.8k]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|  30.8k|        }
 6157|       |
 6158|       |        // Read postfix
 6159|  30.8k|        std::ptrdiff_t postfix_width = 0;
 6160|  30.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 30.7k, False: 30]
  ------------------
 6161|  30.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  30.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  30.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  30.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  30.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|  30.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|  30.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6164|  30.7k|                                 value_width));
 6165|  30.7k|            std::tie(it, postfix_width) = postfix_result;
 6166|  30.7k|        }
 6167|       |
 6168|  30.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|  30.8k|                                                 value_width, postfix_width);
 6170|  30.8k|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 30.8k]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|  30.8k|        return it;
 6175|  30.8k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3691|  89.8k|    {
 3692|  89.8k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  89.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  89.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  89.8k|        const std::ptrdiff_t sign_len =
 3695|  89.8k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 16.4k, False: 73.4k]
  ------------------
 3696|       |
 3697|  89.8k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  89.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  89.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  89.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  89.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 187, False: 89.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    187|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    187|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    187|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    187|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    187|    }                                                  \
  |  |  |  | 3642|  89.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  89.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  89.6k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  89.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4171|  31.1k|    {
 4172|  31.1k|        float_reader<CharT> rd{get_options(specs)};
 4173|       |
 4174|  31.1k|#if !SCN_DISABLE_LOCALE
 4175|  31.1k|        if (specs.localized) {
  ------------------
  |  Branch (4175:13): [True: 10.3k, False: 20.7k]
  ------------------
 4176|  10.3k|            return read_impl<Range>(
 4177|  10.3k|                range, rd,
 4178|  10.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4179|  10.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4180|  10.3k|                },
 4181|  10.3k|                value, loc);
 4182|  10.3k|        }
 4183|  20.7k|#endif
 4184|       |
 4185|  20.7k|        return read_impl<Range>(
 4186|  20.7k|            range, rd,
 4187|  20.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4188|  20.7k|                return r.read_source(SCN_FWD(args)...);
 4189|  20.7k|            },
 4190|  20.7k|            value);
 4191|  31.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4207|  43.8k|    {
 4208|  43.8k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4209|  43.8k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 349, False: 43.4k]
  |  |  ------------------
  ------------------
 4210|    349|            return unexpected(r.error());
 4211|    349|        }
 4212|       |
 4213|  43.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  43.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  43.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  43.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  43.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 43.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     12|    }                                                  \
  |  |  |  | 3642|  43.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4214|  43.4k|        return ranges::next(range.begin(), n);
 4215|  43.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  10.3k|    {
  754|  10.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  10.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.3k|              cvref<T> obj = *get<T>(fn);
  745|  10.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  10.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  10.3k|              }
  748|  10.3k|              else {
  749|  10.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.3k|              }
  751|  10.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  10.3k|    {
  684|  10.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  10.3k|            return static_cast<T*>(s.m_cp);
  686|  10.3k|        }
  687|  10.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  10.3k|            return static_cast<T*>(s.m_p);
  689|  10.3k|        }
  690|  10.3k|        else {
  691|  10.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  10.3k|        }
  693|  10.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4178|  10.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4179|  10.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4180|  10.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  10.3k|        {
  662|  10.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  20.7k|    {
  754|  20.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  20.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.7k|              cvref<T> obj = *get<T>(fn);
  745|  20.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.7k|              }
  748|  20.7k|              else {
  749|  20.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.7k|              }
  751|  20.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|  20.7k|    {
  684|  20.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.7k|            return static_cast<T*>(s.m_cp);
  686|  20.7k|        }
  687|  20.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.7k|            return static_cast<T*>(s.m_p);
  689|  20.7k|        }
  690|  20.7k|        else {
  691|  20.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.7k|        }
  693|  20.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4187|  20.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4188|  20.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4189|  20.7k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|  20.7k|        {
  662|  20.7k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4171|  31.0k|    {
 4172|  31.0k|        float_reader<CharT> rd{get_options(specs)};
 4173|       |
 4174|  31.0k|#if !SCN_DISABLE_LOCALE
 4175|  31.0k|        if (specs.localized) {
  ------------------
  |  Branch (4175:13): [True: 10.3k, False: 20.6k]
  ------------------
 4176|  10.3k|            return read_impl<Range>(
 4177|  10.3k|                range, rd,
 4178|  10.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4179|  10.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4180|  10.3k|                },
 4181|  10.3k|                value, loc);
 4182|  10.3k|        }
 4183|  20.6k|#endif
 4184|       |
 4185|  20.6k|        return read_impl<Range>(
 4186|  20.6k|            range, rd,
 4187|  20.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4188|  20.6k|                return r.read_source(SCN_FWD(args)...);
 4189|  20.6k|            },
 4190|  20.6k|            value);
 4191|  31.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4207|  46.6k|    {
 4208|  46.6k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4209|  46.6k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 193, False: 46.4k]
  |  |  ------------------
  ------------------
 4210|    193|            return unexpected(r.error());
 4211|    193|        }
 4212|       |
 4213|  46.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  46.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  46.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  46.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 175, False: 46.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    175|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    175|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    175|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    175|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    175|    }                                                  \
  |  |  |  | 3642|  46.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4214|  46.2k|        return ranges::next(range.begin(), n);
 4215|  46.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  10.3k|    {
  754|  10.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  10.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.3k|              cvref<T> obj = *get<T>(fn);
  745|  10.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  10.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  10.3k|              }
  748|  10.3k|              else {
  749|  10.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.3k|              }
  751|  10.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  10.3k|    {
  684|  10.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  10.3k|            return static_cast<T*>(s.m_cp);
  686|  10.3k|        }
  687|  10.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  10.3k|            return static_cast<T*>(s.m_p);
  689|  10.3k|        }
  690|  10.3k|        else {
  691|  10.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  10.3k|        }
  693|  10.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4178|  10.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4179|  10.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4180|  10.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  10.3k|        {
  662|  10.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  20.6k|    {
  754|  20.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  20.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.6k|              cvref<T> obj = *get<T>(fn);
  745|  20.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.6k|              }
  748|  20.6k|              else {
  749|  20.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.6k|              }
  751|  20.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|  20.6k|    {
  684|  20.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.6k|            return static_cast<T*>(s.m_cp);
  686|  20.6k|        }
  687|  20.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.6k|            return static_cast<T*>(s.m_p);
  689|  20.6k|        }
  690|  20.6k|        else {
  691|  20.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.6k|        }
  693|  20.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4187|  20.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4188|  20.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4189|  20.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|  20.6k|        {
  662|  20.6k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6179|  31.1k|    {
 6180|  31.1k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  31.1k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|      0|                          basic_contiguous_scan_context<char_type>>) {
 6184|  31.1k|            auto rd = make_reader<T, char_type>();
 6185|  31.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6186|  31.1k|                return unexpected(e);
 6187|  31.1k|            }
 6188|       |
 6189|  31.1k|            return impl(rd, range, value);
 6190|  31.1k|        }
 6191|  31.1k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6191:28): [Folded - Ignored]
  ------------------
 6192|  31.1k|            auto rd = make_reader<T, char_type>();
 6193|  31.1k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 31.1k]
  |  |  ------------------
  ------------------
 6194|      0|                return unexpected(e);
 6195|      0|            }
 6196|       |
 6197|  31.1k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6197:17): [True: 31.1k, False: 0]
  |  Branch (6197:50): [True: 0, False: 0]
  ------------------
 6198|  31.1k|                specs.width != 0) {
  ------------------
  |  Branch (6198:17): [True: 0, False: 0]
  ------------------
 6199|  31.1k|                return impl(rd, range, value);
 6200|  31.1k|            }
 6201|       |
 6202|      0|            auto crange = get_as_contiguous(range);
 6203|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6204|      0|            return ranges::next(range.begin(),
 6205|      0|                                ranges::distance(crange.begin(), it));
 6206|      0|        }
 6207|  31.1k|        else {
 6208|  31.1k|            SCN_EXPECT(false);
 6209|  31.1k|            SCN_UNREACHABLE;
 6210|  31.1k|        }
 6211|  31.1k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6121|  31.1k|    {
 6122|  31.1k|        const bool need_skipped_width =
 6123|  31.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 31.1k]
  |  Branch (6123:33): [True: 0, False: 31.1k]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|  31.1k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  31.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40, False: 31.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     40|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     40|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     40|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     40|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     40|    }                                                  \
  |  |  |  | 3642|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|  31.1k|        auto [it, prefix_width] = prefix_result;
 6128|  31.1k|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|  31.1k|        std::ptrdiff_t value_width = 0;
 6132|  31.1k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 31.1k]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|  31.1k|        else {
 6148|  31.1k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  31.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  31.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 280, False: 30.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    280|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    280|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    280|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    280|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    280|    }                                                  \
  |  | 3642|  31.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|  30.8k|                                             specs, value, loc));
 6150|       |
 6151|  30.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 30.8k]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|  30.8k|        }
 6157|       |
 6158|       |        // Read postfix
 6159|  30.8k|        std::ptrdiff_t postfix_width = 0;
 6160|  30.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 30.7k, False: 30]
  ------------------
 6161|  30.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  30.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  30.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  30.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  30.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|  30.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|  30.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6164|  30.7k|                                 value_width));
 6165|  30.7k|            std::tie(it, postfix_width) = postfix_result;
 6166|  30.7k|        }
 6167|       |
 6168|  30.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|  30.8k|                                                 value_width, postfix_width);
 6170|  30.8k|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 30.8k]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|  30.8k|        return it;
 6175|  30.8k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3691|  89.8k|    {
 3692|  89.8k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  89.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  89.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|  89.8k|        const std::ptrdiff_t sign_len =
 3695|  89.8k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 16.4k, False: 73.4k]
  ------------------
 3696|       |
 3697|  89.8k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|  89.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  89.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  89.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  89.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 187, False: 89.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    187|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    187|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    187|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    187|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    187|    }                                                  \
  |  |  |  | 3642|  89.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  89.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|  89.6k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|  89.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4171|  31.1k|    {
 4172|  31.1k|        float_reader<CharT> rd{get_options(specs)};
 4173|       |
 4174|  31.1k|#if !SCN_DISABLE_LOCALE
 4175|  31.1k|        if (specs.localized) {
  ------------------
  |  Branch (4175:13): [True: 10.3k, False: 20.7k]
  ------------------
 4176|  10.3k|            return read_impl<Range>(
 4177|  10.3k|                range, rd,
 4178|  10.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4179|  10.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4180|  10.3k|                },
 4181|  10.3k|                value, loc);
 4182|  10.3k|        }
 4183|  20.7k|#endif
 4184|       |
 4185|  20.7k|        return read_impl<Range>(
 4186|  20.7k|            range, rd,
 4187|  20.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4188|  20.7k|                return r.read_source(SCN_FWD(args)...);
 4189|  20.7k|            },
 4190|  20.7k|            value);
 4191|  31.1k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4207|  43.8k|    {
 4208|  43.8k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4209|  43.8k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  43.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 349, False: 43.4k]
  |  |  ------------------
  ------------------
 4210|    349|            return unexpected(r.error());
 4211|    349|        }
 4212|       |
 4213|  43.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  43.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  43.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  43.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  43.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12, False: 43.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     12|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     12|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     12|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     12|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     12|    }                                                  \
  |  |  |  | 3642|  43.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4214|  43.4k|        return ranges::next(range.begin(), n);
 4215|  43.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|  10.3k|    {
  754|  10.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  10.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.3k|              cvref<T> obj = *get<T>(fn);
  745|  10.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  10.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  10.3k|              }
  748|  10.3k|              else {
  749|  10.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.3k|              }
  751|  10.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  10.3k|    {
  684|  10.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  10.3k|            return static_cast<T*>(s.m_cp);
  686|  10.3k|        }
  687|  10.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  10.3k|            return static_cast<T*>(s.m_p);
  689|  10.3k|        }
  690|  10.3k|        else {
  691|  10.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  10.3k|        }
  693|  10.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4178|  10.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4179|  10.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4180|  10.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  10.3k|        {
  662|  10.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|  20.7k|    {
  754|  20.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|  20.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.7k|              cvref<T> obj = *get<T>(fn);
  745|  20.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.7k|              }
  748|  20.7k|              else {
  749|  20.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.7k|              }
  751|  20.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|  20.7k|    {
  684|  20.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.7k|            return static_cast<T*>(s.m_cp);
  686|  20.7k|        }
  687|  20.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.7k|            return static_cast<T*>(s.m_p);
  689|  20.7k|        }
  690|  20.7k|        else {
  691|  20.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.7k|        }
  693|  20.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4187|  20.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4188|  20.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4189|  20.7k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSM_:
  661|  20.7k|        {
  662|  20.7k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4171|  31.0k|    {
 4172|  31.0k|        float_reader<CharT> rd{get_options(specs)};
 4173|       |
 4174|  31.0k|#if !SCN_DISABLE_LOCALE
 4175|  31.0k|        if (specs.localized) {
  ------------------
  |  Branch (4175:13): [True: 10.3k, False: 20.6k]
  ------------------
 4176|  10.3k|            return read_impl<Range>(
 4177|  10.3k|                range, rd,
 4178|  10.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4179|  10.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4180|  10.3k|                },
 4181|  10.3k|                value, loc);
 4182|  10.3k|        }
 4183|  20.6k|#endif
 4184|       |
 4185|  20.6k|        return read_impl<Range>(
 4186|  20.6k|            range, rd,
 4187|  20.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4188|  20.6k|                return r.read_source(SCN_FWD(args)...);
 4189|  20.6k|            },
 4190|  20.6k|            value);
 4191|  31.0k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4207|  46.6k|    {
 4208|  46.6k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4209|  46.6k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  46.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 193, False: 46.4k]
  |  |  ------------------
  ------------------
 4210|    193|            return unexpected(r.error());
 4211|    193|        }
 4212|       |
 4213|  46.4k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|  46.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  46.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  46.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 175, False: 46.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    175|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    175|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    175|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    175|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    175|    }                                                  \
  |  |  |  | 3642|  46.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4214|  46.2k|        return ranges::next(range.begin(), n);
 4215|  46.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|  10.3k|    {
  754|  10.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  10.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.3k|              cvref<T> obj = *get<T>(fn);
  745|  10.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  10.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  10.3k|              }
  748|  10.3k|              else {
  749|  10.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.3k|              }
  751|  10.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  10.3k|    {
  684|  10.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  10.3k|            return static_cast<T*>(s.m_cp);
  686|  10.3k|        }
  687|  10.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  10.3k|            return static_cast<T*>(s.m_p);
  689|  10.3k|        }
  690|  10.3k|        else {
  691|  10.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  10.3k|        }
  693|  10.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4178|  10.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4179|  10.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  10.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4180|  10.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  10.3k|        {
  662|  10.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|  20.6k|    {
  754|  20.6k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|  20.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.6k|              cvref<T> obj = *get<T>(fn);
  745|  20.6k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  20.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.6k|              }
  748|  20.6k|              else {
  749|  20.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.6k|              }
  751|  20.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|  20.6k|    {
  684|  20.6k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  20.6k|            return static_cast<T*>(s.m_cp);
  686|  20.6k|        }
  687|  20.6k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  20.6k|            return static_cast<T*>(s.m_p);
  689|  20.6k|        }
  690|  20.6k|        else {
  691|  20.6k|            return reinterpret_cast<T*>(s.m_fp);
  692|  20.6k|        }
  693|  20.6k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4187|  20.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4188|  20.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  20.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4189|  20.6k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_LPv0EEEPSJ_:
  661|  20.6k|        {
  662|  20.6k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   120k|{
 1039|   120k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|   120k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|   120k|        return r;
 1042|   120k|    }
 1043|   120k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|   120k|                           ranges::const_iterator_t<Range>,
 1045|   120k|                           typename detail::basic_scan_buffer<
 1046|   120k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|   120k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|   120k|            auto seg = r.begin().contiguous_segment();
 1049|   120k|            auto dist =
 1050|   120k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|   120k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|   120k|        }
 1053|   120k|        else {
 1054|   120k|            return r.begin().contiguous_segment();
 1055|   120k|        }
 1056|   120k|    }
 1057|   120k|    else {
 1058|   120k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|   120k|    }
 1060|   120k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   109k|{
 2061|   109k|    auto it = range.begin();
 2062|   215k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 215k, False: 115]
  ------------------
 2063|   215k|        const auto val =
 2064|   215k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   215k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   215k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 215k, False: 66]
  |  |  ------------------
  ------------------
 2066|   215k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   215k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   215k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 109k, False: 106k]
  ------------------
 2069|   109k|                return it;
 2070|   109k|            }
 2071|   215k|        }
 2072|   106k|        it = val.iterator;
 2073|   106k|    }
 2074|       |
 2075|    115|    return it;
 2076|   109k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   215k|{
 1899|   215k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   215k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   215k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   215k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   215k|    auto it = range.begin();
 1903|   215k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   215k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66, False: 215k]
  |  |  ------------------
  ------------------
 1906|     66|        ++it;
 1907|     66|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|     66|        return {it, {}};
 1909|     66|    }
 1910|       |
 1911|   215k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 212k, False: 3.09k]
  ------------------
 1912|   212k|        ++it;
 1913|   212k|        return {it, string_type(1, *range.begin())};
 1914|   212k|    }
 1915|       |
 1916|  3.09k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  3.09k|    return {it, string_type{range.begin(), it}};
 1918|   215k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|     66|{
 1155|     66|    auto it = input.begin();
 1156|     66|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 66, False: 0]
  ------------------
 1157|     66|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 66, False: 0]
  ------------------
 1158|     66|            break;
 1159|     66|        }
 1160|     66|    }
 1161|     66|    return it;
 1162|     66|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  3.09k|    {
  283|  3.09k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  3.09k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  3.09k|    {
  252|  3.09k|        constexpr iter_difference_t<I> zero{0};
  253|  3.09k|        iter_difference_t<I> counter{0};
  254|       |
  255|  9.28k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 6.18k, False: 3.09k]
  |  Branch (255:30): [True: 6.18k, False: 0]
  ------------------
  256|  6.18k|            ++i;
  257|  6.18k|            ++counter;
  258|  6.18k|        }
  259|       |
  260|  3.09k|        return counter;
  261|  3.09k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|   215k|    {
 1890|   215k|        return !codepoint.empty();
 1891|   215k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   109k|{
 2082|   109k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   109k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   120k|{
 2951|   120k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 120k, False: 0]
  ------------------
 2952|   120k|        auto it = read_while_classic_space(range);
 2953|   120k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   120k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 115, False: 119k]
  |  |  ------------------
  ------------------
 2955|    115|            return unexpected(e);
 2956|    115|        }
 2957|       |
 2958|   119k|        return it;
 2959|   120k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   120k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   120k|{
 2117|   120k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   120k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   120k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   120k|        auto buf = make_contiguous_buffer(range);
 2121|   120k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   120k|        return ranges::next(range.begin(),
 2123|   120k|                            ranges::distance(buf.view().begin(), it));
 2124|   120k|    }
 2125|   120k|    else {
 2126|   120k|        auto it = range.begin();
 2127|       |
 2128|   120k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   120k|            auto seg = get_contiguous_beginning(range);
 2130|   120k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   120k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 10.8k, False: 109k]
  ------------------
 2132|  10.8k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  10.8k|            }
 2134|   109k|            ranges::advance(it, seg.size());
 2135|   109k|        }
 2136|       |
 2137|   109k|        return read_while_code_point(
 2138|   109k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   120k|    }
 2140|   120k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   109k|    {
  754|   109k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   215k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   215k|              cvref<T> obj = *get<T>(fn);
  745|   215k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   215k|                  obj(static_cast<decltype(args)>(args)...);
  747|   215k|              }
  748|   215k|              else {
  749|   215k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   215k|              }
  751|   215k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   215k|    {
  684|   215k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   215k|            return static_cast<T*>(s.m_cp);
  686|   215k|        }
  687|   215k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   215k|            return static_cast<T*>(s.m_p);
  689|   215k|        }
  690|   215k|        else {
  691|   215k|            return reinterpret_cast<T*>(s.m_fp);
  692|   215k|        }
  693|   215k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   215k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   109k|        {
  662|   109k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  2.49k|{
  981|  2.49k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  2.49k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  2.49k|        return true;
  984|  2.49k|    }
  985|  2.49k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  2.49k|                           ranges::const_iterator_t<Range>,
  987|  2.49k|                           typename detail::basic_scan_buffer<
  988|  2.49k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  2.49k|        auto beg = r.begin();
  990|  2.49k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 2.49k, False: 0]
  ------------------
  991|  2.49k|            return false;
  992|  2.49k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  2.49k|    else {
 1006|  2.49k|        return false;
 1007|  2.49k|    }
 1008|  2.49k|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6038|  1.92k|    {
 6039|  1.92k|        const bool need_skipped_width =
 6040|  1.92k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6040:13): [True: 0, False: 1.92k]
  |  Branch (6040:33): [True: 0, False: 1.92k]
  ------------------
 6041|  1.92k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6042|       |
 6043|       |        // Read prefix
 6044|  1.92k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6044:13): [True: 0, False: 1.92k]
  ------------------
 6045|  1.92k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6045:13): [True: 0, False: 1.92k]
  ------------------
 6046|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6047|      0|                             need_skipped_width);
 6048|      0|        }
 6049|  1.92k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6049:13): [True: 1.92k, False: 0]
  |  Branch (6049:56): [True: 1.92k, False: 0]
  ------------------
 6050|       |            // Default alignment:
 6051|       |            // Skip preceding whitespace, if required by the reader
 6052|  1.92k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6052:17): [True: 0, False: 1.92k]
  ------------------
 6053|      0|                auto max_width_view = take_width(rng, specs.precision);
 6054|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6055|      0|                                  .transform_error(make_eof_scan_error));
 6056|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6057|      0|            }
 6058|  3.84k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  1.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6059|  3.84k|                            make_eof_scan_error));
 6060|       |
 6061|  3.84k|            if (need_skipped_width) {
  ------------------
  |  Branch (6061:17): [True: 0, False: 1.92k]
  ------------------
 6062|      0|                return result_type{
 6063|      0|                    it,
 6064|      0|                    calculate_text_width(make_contiguous_buffer(
 6065|      0|                                             ranges::subrange{rng.begin(), it})
 6066|      0|                                             .view())};
 6067|      0|            }
 6068|  1.92k|            return result_type{it, 0};
 6069|  3.84k|        }
 6070|       |
 6071|      0|        return result_type{rng.begin(), 0};
 6072|  1.92k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.49k|{
 1976|  2.49k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.49k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.49k|{
 1957|  2.49k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.49k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.49k|    }
 1960|  2.49k|    else {
 1961|  2.49k|        auto first = range.begin();
 1962|  2.49k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 2.49k, False: 0]
  ------------------
 1963|  2.49k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.49k, False: 0]
  ------------------
 1964|  2.49k|                return first;
 1965|  2.49k|            }
 1966|  2.49k|        }
 1967|      0|        return first;
 1968|  2.49k|    }
 1969|  2.49k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  7.29k|    {
  763|  7.29k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  7.29k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  7.29k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  3.64k|    {
  754|  3.64k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  3.64k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.64k|              cvref<T> obj = *get<T>(fn);
  745|  3.64k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.64k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.64k|              }
  748|  3.64k|              else {
  749|  3.64k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.64k|              }
  751|  3.64k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  3.64k|    {
  684|  3.64k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.64k|            return static_cast<T*>(s.m_cp);
  686|  3.64k|        }
  687|  3.64k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  3.64k|            return static_cast<T*>(s.m_p);
  689|  3.64k|        }
  690|  3.64k|        else {
  691|  3.64k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.64k|        }
  693|  3.64k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  3.64k|        {
  662|  3.64k|        }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  6.33k|{
 1857|  6.33k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  6.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  6.33k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  6.33k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  6.33k|        if (sz < count) {
 1862|  6.33k|            return unexpected(eof_error::eof);
 1863|  6.33k|        }
 1864|       |
 1865|  6.33k|        return ranges::next(range.begin(), count);
 1866|  6.33k|    }
 1867|  6.33k|    else {
 1868|  6.33k|        auto it = range.begin();
 1869|  6.33k|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 3.84k, False: 2.49k]
  ------------------
 1870|  3.84k|            return ranges::next(it, count);
 1871|  3.84k|        }
 1872|       |
 1873|  9.98k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 7.48k, False: 2.49k]
  ------------------
 1874|  7.48k|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 0, False: 7.48k]
  ------------------
 1875|      0|                return unexpected(eof_error::eof);
 1876|      0|            }
 1877|  7.48k|        }
 1878|       |
 1879|  2.49k|        return it;
 1880|  2.49k|    }
 1881|  6.33k|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  6.33k|{
 1095|  6.33k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1095:19): [Folded - Ignored]
  ------------------
 1096|  6.33k|        return r.size();
 1097|  6.33k|    }
 1098|  6.33k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1098:24): [Folded - Ignored]
  ------------------
 1099|  6.33k|                           ranges::const_iterator_t<Range>,
 1100|  6.33k|                           typename detail::basic_scan_buffer<
 1101|  6.33k|                               detail::char_t<Range>>::forward_iterator>) {
 1102|  6.33k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1102:23): [Folded - Ignored]
  ------------------
 1103|  6.33k|            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|  6.33k|        }
 1105|  6.33k|        else {
 1106|  6.33k|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 6.33k, False: 0]
  ------------------
 1107|  6.33k|                return static_cast<size_t>(
 1108|  6.33k|                    r.begin().parent()->chars_available() -
 1109|  6.33k|                    r.begin().position());
 1110|  6.33k|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  6.33k|        }
 1113|  6.33k|    }
 1114|  6.33k|    else {
 1115|  6.33k|        return 0;
 1116|  6.33k|    }
 1117|  6.33k|}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|    768|    {
 1780|    768|        auto stdloc = loc.get<std::locale>();
 1781|    768|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|    768|        grouping = numpunct.grouping();
 1783|    768|        thousands_sep =
 1784|    768|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 768]
  ------------------
 1785|    768|        decimal_point = numpunct.decimal_point();
 1786|    768|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|    768|{
 1717|    768|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 768, False: 0]
  ------------------
 1718|    768|        return std::use_facet<Facet>(stdloc);
 1719|    768|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|    768|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  2.49k|{
 1846|  2.49k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  2.49k|    return ranges::next(range.begin());
 1851|  2.49k|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  5.56k|{
  950|  5.56k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  5.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.56k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  5.56k|    return eof_error::good;
  954|  5.56k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  8.06k|{
  944|  8.06k|    return is_range_eof(r.begin(), r.end());
  945|  8.06k|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  8.06k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  8.06k|    {
  937|  8.06k|        return begin == end;
  938|  8.06k|    }
  939|  8.06k|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  2.49k|    {
  296|  2.49k|        ++x;
  297|  2.49k|        return x;
  298|  2.49k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  2.49k|{
 3141|  2.49k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.49k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 2.49k, False: 0]
  ------------------
 3143|  2.49k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 2.49k, False: 0]
  ------------------
 3144|  2.49k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  2.49k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  2.49k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  2.49k|{
 2272|  2.49k|    auto it = read_code_unit(range);
 2273|  2.49k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  4.99k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 4.99k, False: 2.49k]
  ------------------
 2278|  4.99k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 4.99k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  4.99k|    }
 2282|       |
 2283|  2.49k|    return unexpected(parse_error::error);
 2284|  2.49k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  6.33k|{
 2231|  6.33k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  6.33k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  6.33k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  6.33k|        if (range.size() < str.size()) {
 2236|  6.33k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  6.33k|        }
 2238|  6.33k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  6.33k|            return unexpected(parse_error::error);
 2240|  6.33k|        }
 2241|  6.33k|        return ranges::next(range.begin(), str.size());
 2242|  6.33k|    }
 2243|  6.33k|    else {
 2244|  6.33k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.33k|            if (ch < 'A' || ch > 'Z') {
 2246|  6.33k|                return ch;
 2247|  6.33k|            }
 2248|  6.33k|            return static_cast<char_type>(ch +
 2249|  6.33k|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.33k|        };
 2251|       |
 2252|  6.33k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  6.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  6.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  6.33k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  6.33k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  6.33k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  6.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.33k, False: 0]
  |  |  ------------------
  ------------------
 2257|  6.33k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  6.33k|                    return ascii_tolower(a) ==
 2259|  6.33k|                           static_cast<detail::char_t<Range>>(b);
 2260|  6.33k|                }))) {
 2261|  6.33k|            return unexpected(parse_error::error);
 2262|  6.33k|        }
 2263|       |
 2264|      0|        return it;
 2265|  6.33k|    }
 2266|  6.33k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  6.33k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.33k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 3.16k, False: 3.16k]
  |  Branch (2245:29): [True: 3.16k, False: 0]
  ------------------
 2246|  6.33k|                return ch;
 2247|  6.33k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.33k|        };
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  2.49k|{
 1996|  2.49k|    auto it = read_while_code_unit(range, pred);
 1997|  2.49k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 2.49k, False: 0]
  ------------------
 1998|  2.49k|        return unexpected(parse_error::error);
 1999|  2.49k|    }
 2000|      0|    return it;
 2001|  2.49k|}
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  2.68k|    {
 1582|  2.68k|        return m_view;
 1583|  2.68k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  9.98k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  6.33k|{
 1857|  6.33k|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  6.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  6.33k|    if constexpr (ranges::sized_range<Range>) {
  ------------------
  |  Branch (1859:19): [Folded - Ignored]
  ------------------
 1860|  6.33k|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  6.33k|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 0, False: 6.33k]
  ------------------
 1862|      0|            return unexpected(eof_error::eof);
 1863|      0|        }
 1864|       |
 1865|  6.33k|        return ranges::next(range.begin(), count);
 1866|  6.33k|    }
 1867|  6.33k|    else {
 1868|  6.33k|        auto it = range.begin();
 1869|  6.33k|        if (guaranteed_minimum_size(range) >= count) {
 1870|  6.33k|            return ranges::next(it, count);
 1871|  6.33k|        }
 1872|       |
 1873|  6.33k|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|  6.33k|            if (it == range.end()) {
 1875|  6.33k|                return unexpected(eof_error::eof);
 1876|  6.33k|            }
 1877|  6.33k|        }
 1878|       |
 1879|  6.33k|        return it;
 1880|  6.33k|    }
 1881|  6.33k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  2.49k|{
 1899|  2.49k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  2.49k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  2.49k|    auto it = range.begin();
 1903|  2.49k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  2.49k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  2.49k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 2.49k, False: 0]
  ------------------
 1912|  2.49k|        ++it;
 1913|  2.49k|        return {it, string_type(1, *range.begin())};
 1914|  2.49k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  2.49k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  8.06k|{
  944|  8.06k|    return is_range_eof(r.begin(), r.end());
  945|  8.06k|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  8.06k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  8.06k|    {
  937|  8.06k|        return begin == end;
  938|  8.06k|    }
  939|  8.06k|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|  1.34k|    {
  190|  1.34k|        i = std::move(bound);
  191|  1.34k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  2.49k|    {
 1890|  2.49k|        return !codepoint.empty();
 1891|  2.49k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  5.56k|{
  950|  5.56k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  5.56k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.56k]
  |  |  ------------------
  ------------------
  951|      0|        return eof_error::eof;
  952|      0|    }
  953|  5.56k|    return eof_error::good;
  954|  5.56k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  2.49k|{
 1846|  2.49k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49k]
  |  |  ------------------
  ------------------
 1847|      0|        return unexpected(e);
 1848|      0|    }
 1849|       |
 1850|  2.49k|    return ranges::next(range.begin());
 1851|  2.49k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  2.49k|    {
  296|  2.49k|        ++x;
  297|  2.49k|        return x;
  298|  2.49k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  2.49k|{
 3141|  2.49k|    auto r = read_one_of_code_unit(range, "+-");
 3142|  2.49k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 2.49k, False: 0]
  ------------------
 3143|  2.49k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 2.49k, False: 0]
  ------------------
 3144|  2.49k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  2.49k|        }
 3146|      0|        return unexpected(eof_error::eof);
 3147|  2.49k|    }
 3148|       |
 3149|      0|    auto& it = *r;
 3150|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 0, False: 0]
  ------------------
 3151|      0|        return std::pair{it, sign_type::minus_sign};
 3152|      0|    }
 3153|      0|    return std::pair{it, sign_type::plus_sign};
 3154|      0|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  2.49k|{
 2272|  2.49k|    auto it = read_code_unit(range);
 2273|  2.49k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49k]
  |  |  ------------------
  ------------------
 2274|      0|        return unexpected(make_eof_parse_error(it.error()));
 2275|      0|    }
 2276|       |
 2277|  4.99k|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 4.99k, False: 2.49k]
  ------------------
 2278|  4.99k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 0, False: 4.99k]
  ------------------
 2279|      0|            return *it;
 2280|      0|        }
 2281|  4.99k|    }
 2282|       |
 2283|  2.49k|    return unexpected(parse_error::error);
 2284|  2.49k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  6.33k|{
 2231|  6.33k|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|  6.33k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2233:19): [Folded - Ignored]
  |  Branch (2233:19): [Folded - Ignored]
  ------------------
 2234|  6.33k|                  std::is_same_v<char_type, char>) {
  ------------------
  |  Branch (2234:19): [Folded - Ignored]
  ------------------
 2235|  6.33k|        if (range.size() < str.size()) {
 2236|  6.33k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  6.33k|        }
 2238|  6.33k|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|  6.33k|            return unexpected(parse_error::error);
 2240|  6.33k|        }
 2241|  6.33k|        return ranges::next(range.begin(), str.size());
 2242|  6.33k|    }
 2243|  6.33k|    else {
 2244|  6.33k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.33k|            if (ch < 'A' || ch > 'Z') {
 2246|  6.33k|                return ch;
 2247|  6.33k|            }
 2248|  6.33k|            return static_cast<char_type>(ch +
 2249|  6.33k|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.33k|        };
 2251|       |
 2252|  6.33k|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3643|  6.33k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  6.33k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  6.33k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  6.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 6.33k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  6.33k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  6.33k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  6.33k|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  6.33k|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  6.33k|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  6.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.33k, False: 0]
  |  |  ------------------
  ------------------
 2257|  6.33k|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  6.33k|                    return ascii_tolower(a) ==
 2259|  6.33k|                           static_cast<detail::char_t<Range>>(b);
 2260|  6.33k|                }))) {
 2261|  6.33k|            return unexpected(parse_error::error);
 2262|  6.33k|        }
 2263|       |
 2264|      0|        return it;
 2265|  6.33k|    }
 2266|  6.33k|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  6.33k|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  6.33k|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 3.16k, False: 3.16k]
  |  Branch (2245:29): [True: 3.16k, False: 0]
  ------------------
 2246|  6.33k|                return ch;
 2247|  6.33k|            }
 2248|      0|            return static_cast<char_type>(ch +
 2249|      0|                                          static_cast<char_type>('a' - 'A'));
 2250|  6.33k|        };
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  1.15k|{
 1976|  1.15k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.15k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  1.15k|{
 1957|  1.15k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  1.15k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  1.15k|    }
 1960|  1.15k|    else {
 1961|  1.15k|        auto first = range.begin();
 1962|  1.15k|        for (; first != range.end(); ++first) {
 1963|  1.15k|            if (pred(*first)) {
 1964|  1.15k|                return first;
 1965|  1.15k|            }
 1966|  1.15k|        }
 1967|  1.15k|        return first;
 1968|  1.15k|    }
 1969|  1.15k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  2.49k|{
 2951|  2.49k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.49k, False: 0]
  ------------------
 2952|  2.49k|        auto it = read_while_classic_space(range);
 2953|  2.49k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.49k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  2.49k|        return it;
 2959|  2.49k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.49k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  2.49k|{
 2117|  2.49k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.49k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.49k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.49k|        auto buf = make_contiguous_buffer(range);
 2121|  2.49k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.49k|        return ranges::next(range.begin(),
 2123|  2.49k|                            ranges::distance(buf.view().begin(), it));
 2124|  2.49k|    }
 2125|  2.49k|    else {
 2126|  2.49k|        auto it = range.begin();
 2127|       |
 2128|  2.49k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.49k|            auto seg = get_contiguous_beginning(range);
 2130|  2.49k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.49k|                seg_it != seg.end()) {
 2132|  2.49k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  2.49k|            }
 2134|  2.49k|            ranges::advance(it, seg.size());
 2135|  2.49k|        }
 2136|       |
 2137|  2.49k|        return read_while_code_point(
 2138|  2.49k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.49k|    }
 2140|  2.49k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  2.49k|{
 2082|  2.49k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.49k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  2.49k|{
 2061|  2.49k|    auto it = range.begin();
 2062|  2.49k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 2.49k, False: 0]
  ------------------
 2063|  2.49k|        const auto val =
 2064|  2.49k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  2.49k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.49k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.49k, False: 0]
  |  |  ------------------
  ------------------
 2066|  2.49k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  2.49k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  2.49k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.49k, False: 0]
  ------------------
 2069|  2.49k|                return it;
 2070|  2.49k|            }
 2071|  2.49k|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|  2.49k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  2.49k|    {
  754|  2.49k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|  2.49k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.49k|              cvref<T> obj = *get<T>(fn);
  745|  2.49k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.49k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.49k|              }
  748|  2.49k|              else {
  749|  2.49k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.49k|              }
  751|  2.49k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  2.49k|    {
  684|  2.49k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.49k|            return static_cast<T*>(s.m_cp);
  686|  2.49k|        }
  687|  2.49k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.49k|            return static_cast<T*>(s.m_p);
  689|  2.49k|        }
  690|  2.49k|        else {
  691|  2.49k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.49k|        }
  693|  2.49k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  2.49k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  2.49k|        {
  662|  2.49k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.84k|    {
  304|  3.84k|        ranges::advance(x, n);
  305|  3.84k|        return x;
  306|  3.84k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  3.84k|    {
  268|  3.84k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.84k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  3.84k|    {
  181|  14.0k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 10.1k, False: 3.84k]
  ------------------
  182|  10.1k|            ++i;
  183|  10.1k|        }
  184|  3.84k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6179|    640|    {
 6180|    640|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|    640|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|      0|                          basic_contiguous_scan_context<char_type>>) {
 6184|    640|            auto rd = make_reader<T, char_type>();
 6185|    640|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6186|    640|                return unexpected(e);
 6187|    640|            }
 6188|       |
 6189|    640|            return impl(rd, range, value);
 6190|    640|        }
 6191|    640|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6191:28): [Folded - Ignored]
  ------------------
 6192|    640|            auto rd = make_reader<T, char_type>();
 6193|    640|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 640]
  |  |  ------------------
  ------------------
 6194|      0|                return unexpected(e);
 6195|      0|            }
 6196|       |
 6197|    640|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6197:17): [True: 640, False: 0]
  |  Branch (6197:50): [True: 0, False: 0]
  ------------------
 6198|    640|                specs.width != 0) {
  ------------------
  |  Branch (6198:17): [True: 0, False: 0]
  ------------------
 6199|    640|                return impl(rd, range, value);
 6200|    640|            }
 6201|       |
 6202|      0|            auto crange = get_as_contiguous(range);
 6203|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6204|      0|            return ranges::next(range.begin(),
 6205|      0|                                ranges::distance(crange.begin(), it));
 6206|      0|        }
 6207|    640|        else {
 6208|    640|            SCN_EXPECT(false);
 6209|    640|            SCN_UNREACHABLE;
 6210|    640|        }
 6211|    640|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  3.84k|    {
 3040|  3.84k|        reader_error_handler eh{};
 3041|  3.84k|        get_derived().check_specs_impl(specs, eh);
 3042|  3.84k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.84k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.84k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  3.84k|        return {};
 3046|  3.84k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|  3.84k|    {
 3051|  3.84k|        return static_cast<Derived&>(*this);
 3052|  3.84k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4146|  3.84k|    {
 4147|  3.84k|        detail::check_float_type_specs(specs, eh);
 4148|  3.84k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6121|    640|    {
 6122|    640|        const bool need_skipped_width =
 6123|    640|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 640]
  |  Branch (6123:33): [True: 0, False: 640]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|    640|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    640|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    640|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    640|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 640]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    640|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    640|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|    640|        auto [it, prefix_width] = prefix_result;
 6128|    640|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|    640|        std::ptrdiff_t value_width = 0;
 6132|    640|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 640]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|    640|        else {
 6148|    640|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    640|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    640|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 640, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    640|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    640|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    640|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    640|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    640|    }                                                  \
  |  | 3642|    640|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    640|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|      0|                                             specs, value, loc));
 6150|       |
 6151|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 0]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|      0|        }
 6157|       |
 6158|       |        // Read postfix
 6159|      0|        std::ptrdiff_t postfix_width = 0;
 6160|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 0]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|      0|                                                 value_width, postfix_width);
 6170|      0|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 0]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|      0|        return it;
 6175|      0|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  4.99k|    {
 3035|  4.99k|        return true;
 3036|  4.99k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4218|  3.84k|    {
 4219|  3.84k|        unsigned options{};
 4220|  3.84k|        if (specs.localized) {
  ------------------
  |  Branch (4220:13): [True: 768, False: 3.07k]
  ------------------
 4221|    768|            options |= float_reader_base::allow_thsep;
 4222|    768|        }
 4223|       |
 4224|  3.84k|        SCN_GCC_COMPAT_PUSH
 4225|  3.84k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4226|       |
 4227|  3.84k|        switch (specs.type) {
 4228|    768|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4228:13): [True: 768, False: 3.07k]
  ------------------
 4229|    768|                return options | float_reader_base::allow_fixed;
 4230|       |
 4231|    768|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4231:13): [True: 768, False: 3.07k]
  ------------------
 4232|    768|                return options | float_reader_base::allow_scientific;
 4233|       |
 4234|    768|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4234:13): [True: 768, False: 3.07k]
  ------------------
 4235|    768|                return options | float_reader_base::allow_hex;
 4236|       |
 4237|    768|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4237:13): [True: 768, False: 3.07k]
  ------------------
 4238|    768|                return options | float_reader_base::allow_scientific |
 4239|    768|                       float_reader_base::allow_fixed;
 4240|       |
 4241|    768|            case detail::presentation_type::none:
  ------------------
  |  Branch (4241:13): [True: 768, False: 3.07k]
  ------------------
 4242|    768|                return options | float_reader_base::allow_scientific |
 4243|    768|                       float_reader_base::allow_fixed |
 4244|    768|                       float_reader_base::allow_hex;
 4245|       |
 4246|      0|            default:
  ------------------
  |  Branch (4246:13): [True: 0, False: 3.84k]
  ------------------
 4247|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4248|  3.84k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4249|  3.84k|        }
 4250|       |
 4251|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4252|  3.84k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3660|  3.84k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  4.99k|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  9.98k|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3691|    448|    {
 3692|    448|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    448|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    448|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|    448|        const std::ptrdiff_t sign_len =
 3695|    448|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 0, False: 448]
  ------------------
 3696|       |
 3697|    448|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 448, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    448|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    448|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    448|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    448|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    448|    }                                                  \
  |  |  |  | 3642|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|    448|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4057|  1.34k|    {
 4058|  1.34k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4058:13): [True: 1.34k, False: 0]
  ------------------
 4059|  1.34k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4059:13): [True: 1.34k, False: 0]
  ------------------
 4060|  1.34k|            return;
 4061|  1.34k|        }
 4062|       |
 4063|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4064|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4064:13): [True: 0, False: 0]
  ------------------
 4065|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4065:27): [True: 0, False: 0]
  ------------------
 4066|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4066:21): [True: 0, False: 0]
  ------------------
 4067|      0|                    ch = CharT{'.'};
 4068|      0|                }
 4069|      0|            }
 4070|      0|        }
 4071|       |
 4072|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4072:13): [True: 0, False: 0]
  ------------------
 4073|      0|            return;
 4074|      0|        }
 4075|       |
 4076|      0|        auto first =
 4077|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4078|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4078:13): [True: 0, False: 0]
  ------------------
 4079|      0|            return;
 4080|      0|        }
 4081|       |
 4082|      0|        m_thsep_indices.push_back(
 4083|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4084|       |
 4085|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4085:31): [True: 0, False: 0]
  ------------------
 4086|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4086:17): [True: 0, False: 0]
  ------------------
 4087|      0|                *first++ = std::move(*it);
 4088|      0|            }
 4089|      0|            else {
 4090|      0|                m_thsep_indices.push_back(
 4091|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4092|      0|            }
 4093|      0|        }
 4094|       |
 4095|      0|        str.erase(first, str.end());
 4096|      0|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4171|    640|    {
 4172|    640|        float_reader<CharT> rd{get_options(specs)};
 4173|       |
 4174|    640|#if !SCN_DISABLE_LOCALE
 4175|    640|        if (specs.localized) {
  ------------------
  |  Branch (4175:13): [True: 128, False: 512]
  ------------------
 4176|    128|            return read_impl<Range>(
 4177|    128|                range, rd,
 4178|    128|                [](float_reader<CharT>& r, auto&&... args) {
 4179|    128|                    return r.read_source_localized(SCN_FWD(args)...);
 4180|    128|                },
 4181|    128|                value, loc);
 4182|    128|        }
 4183|    512|#endif
 4184|       |
 4185|    512|        return read_impl<Range>(
 4186|    512|            range, rd,
 4187|    512|            [](float_reader<CharT>& r, auto&&... args) {
 4188|    512|                return r.read_source(SCN_FWD(args)...);
 4189|    512|            },
 4190|    512|            value);
 4191|    640|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4207|    832|    {
 4208|    832|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4209|    832|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    832|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 832, False: 0]
  |  |  ------------------
  ------------------
 4210|    832|            return unexpected(r.error());
 4211|    832|        }
 4212|       |
 4213|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4214|      0|        return ranges::next(range.begin(), n);
 4215|      0|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  2.49k|    {
  763|  2.49k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.49k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|    128|    {
  754|    128|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|    128|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    128|              cvref<T> obj = *get<T>(fn);
  745|    128|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    128|                  obj(static_cast<decltype(args)>(args)...);
  747|    128|              }
  748|    128|              else {
  749|    128|                  return obj(static_cast<decltype(args)>(args)...);
  750|    128|              }
  751|    128|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    128|    {
  684|    128|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    128|            return static_cast<T*>(s.m_cp);
  686|    128|        }
  687|    128|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    128|            return static_cast<T*>(s.m_p);
  689|    128|        }
  690|    128|        else {
  691|    128|            return reinterpret_cast<T*>(s.m_fp);
  692|    128|        }
  693|    128|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4178|    128|                [](float_reader<CharT>& r, auto&&... args) {
 4179|    128|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4180|    128|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3679|    384|    {
 3680|    384|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|    384|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|    384|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 384]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|    384|        return read_source_impl(range);
 3686|    384|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3705|  2.49k|    {
 3706|  2.49k|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|  2.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|  2.49k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|  2.49k|        auto it = sign_result.first;
 3709|  2.49k|        m_sign = sign_result.second;
 3710|       |
 3711|  2.49k|        auto digits_begin = it;
 3712|  2.49k|        auto r = ranges::subrange{it, range.end()};
 3713|  2.49k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.49k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|  2.49k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3716|  2.49k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|  2.49k|                SCN_TRY_ASSIGN(
 3718|  2.49k|                    it,
 3719|  2.49k|                    do_read_source_impl(
 3720|  2.49k|                        r,
 3721|  2.49k|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|  2.49k|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|  2.49k|            }
 3724|  2.49k|            else {
 3725|  2.49k|                auto cb = [&](const auto& rr)
 3726|  2.49k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  2.49k|                    auto res = read_all(rr);
 3728|  2.49k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|  2.49k|                        return unexpected_scan_error(
 3730|  2.49k|                            scan_error::invalid_scanned_value,
 3731|  2.49k|                            "Invalid float value");
 3732|  2.49k|                    }
 3733|  2.49k|                    return res;
 3734|  2.49k|                };
 3735|  2.49k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3736|  2.49k|            }
 3737|  2.49k|        }
 3738|  2.49k|        else {
 3739|  2.49k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|  2.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  2.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.49k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  2.49k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  2.49k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  2.49k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  2.49k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  2.49k|    }                                                  \
  |  | 3642|  2.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3740|      0|                it,
 3741|      0|                do_read_source_impl(
 3742|      0|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|      0|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|      0|        }
 3745|       |
 3746|      0|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|      0|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 0, False: 0]
  |  Branch (3748:48): [True: 0, False: 0]
  ------------------
 3749|      0|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 0, False: 0]
  ------------------
 3750|      0|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 0, False: 0]
  ------------------
 3751|      0|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|      0|        }
 3753|       |
 3754|      0|        handle_separators();
 3755|       |
 3756|      0|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 0]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|      0|        return it;
 3769|      0|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4000|  2.49k|    {
 4001|  2.49k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|  2.49k|        const bool allowed_nonhex =
 4003|  2.49k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|  2.49k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|  2.49k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 2.49k, False: 0]
  |  Branch (4006:45): [True: 0, False: 2.49k]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|  2.49k|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 2.49k]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|  2.49k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 2.49k, False: 0]
  |  Branch (4015:45): [True: 0, False: 2.49k]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|  2.49k|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 2.49k]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|  2.49k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 1.34k, False: 1.15k]
  |  Branch (4022:28): [True: 384, False: 960]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|    384|            auto it = range.begin();
 4026|       |
 4027|    384|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 0, False: 384]
  ------------------
 4028|      0|                m_kind = float_kind::hex_with_prefix;
 4029|      0|                it = *r;
 4030|      0|            }
 4031|    384|            else {
 4032|    384|                m_kind = float_kind::hex_without_prefix;
 4033|    384|            }
 4034|       |
 4035|    384|            return read_hex(ranges::subrange{it, range.end()});
 4036|    384|        }
 4037|  2.11k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 1.15k, False: 960]
  |  Branch (4037:29): [True: 1.15k, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|  1.15k|            m_kind = float_kind::generic;
 4041|  1.15k|            return read_regular_float(range);
 4042|  1.15k|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|    960|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    960|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 960]
  |  |  ------------------
  ------------------
 4048|      0|            m_kind = float_kind::hex_with_prefix;
 4049|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4050|      0|        }
 4051|       |
 4052|    960|        m_kind = float_kind::generic;
 4053|    960|        return read_regular(range);
 4054|    960|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3811|  2.49k|    {
 3812|  2.49k|        auto it = range.begin();
 3813|  2.49k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 2.49k, False: 0]
  ------------------
 3814|  2.49k|            return unexpected(r.error());
 3815|  2.49k|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3834|  2.49k|    {
 3835|  2.49k|        auto it = range.begin();
 3836|  2.49k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 2.49k, False: 0]
  ------------------
 3837|  2.49k|            return r.transform_error(map_parse_error_to_scan_error(
 3838|  2.49k|                scan_error::invalid_scanned_value,
 3839|  2.49k|                "Invalid floating-point NaN value"));
 3840|  2.49k|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3804|  1.34k|    {
 3805|  1.34k|        return read_matching_string_classic_nocase(range, "0x");
 3806|  1.34k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3904|    384|    {
 3905|    384|        auto it = range.begin();
 3906|       |
 3907|    384|        std::ptrdiff_t digits_count = 0;
 3908|    384|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3909|    384|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 0]
  |  |  ------------------
  ------------------
 3910|    384|            return r.transform_error(map_parse_error_to_scan_error(
 3911|    384|                scan_error::invalid_scanned_value,
 3912|    384|                "Invalid hexadecimal floating-point value"));
 3913|    384|        }
 3914|      0|        else {
 3915|      0|            digits_count += ranges::distance(it, *r);
 3916|      0|            it = *r;
 3917|      0|        }
 3918|       |
 3919|      0|        m_integral_part_length = digits_count;
 3920|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3920:18): [True: 0, False: 0]
  ------------------
 3921|      0|                                             m_locale_options.decimal_point)) {
 3922|      0|            it = *r;
 3923|      0|        }
 3924|       |
 3925|      0|        if (auto r =
  ------------------
  |  Branch (3925:18): [True: 0, False: 0]
  ------------------
 3926|      0|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3927|      0|            digits_count += ranges::distance(it, *r);
 3928|      0|            it = *r;
 3929|      0|        }
 3930|       |
 3931|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3932|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3933|      0|                                         "No significand digits in hexfloat");
 3934|      0|        }
 3935|       |
 3936|      0|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3937|       |
 3938|      0|        return it;
 3939|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3789|    384|    {
 3790|    384|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|    384|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 384]
  |  |  |  Branch (859:45): [True: 0, False: 384]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3791|    384|                         thsep_allowed)) {
 3792|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3793|      0|                return char_to_int(ch) < 16 ||
 3794|      0|                       ch == m_locale_options.thousands_sep;
 3795|      0|            });
 3796|      0|        }
 3797|       |
 3798|    384|        return read_while1_code_unit(
 3799|    384|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3800|    384|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|    384|    {
  754|    384|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|    384|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    384|              cvref<T> obj = *get<T>(fn);
  745|    384|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    384|                  obj(static_cast<decltype(args)>(args)...);
  747|    384|              }
  748|    384|              else {
  749|    384|                  return obj(static_cast<decltype(args)>(args)...);
  750|    384|              }
  751|    384|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|    384|    {
  684|    384|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    384|            return static_cast<T*>(s.m_cp);
  686|    384|        }
  687|    384|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    384|            return static_cast<T*>(s.m_p);
  689|    384|        }
  690|    384|        else {
  691|    384|            return reinterpret_cast<T*>(s.m_fp);
  692|    384|        }
  693|    384|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3799|    384|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|    384|        {
  662|    384|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3944|  2.11k|    {
 3945|  2.11k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|  2.11k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 1.72k, False: 384]
  |  Branch (3946:50): [True: 384, False: 1.34k]
  ------------------
 3947|       |
 3948|  2.11k|        auto it = ranges::begin(range);
 3949|  2.11k|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|  2.11k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|  2.11k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.11k, False: 0]
  |  |  ------------------
  ------------------
 3953|  2.11k|            return r.transform_error(
 3954|  2.11k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|  2.11k|                                              "Invalid floating-point value"));
 3956|  2.11k|        }
 3957|      0|        else {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        m_integral_part_length = digits_count;
 3963|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 0]
  ------------------
 3964|      0|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|      0|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|      0|        auto beg_exp_it = it;
 3980|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 0, False: 0]
  ------------------
 3981|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|      0|        }
 3983|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 0, False: 0]
  |  Branch (3983:29): [True: 0, False: 0]
  ------------------
 3984|      0|            return unexpected_scan_error(
 3985|      0|                scan_error::invalid_scanned_value,
 3986|      0|                "No exponent given to scientific float");
 3987|      0|        }
 3988|       |
 3989|      0|        m_kind =
 3990|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 0, False: 0]
  ------------------
 3991|       |
 3992|      0|        return it;
 3993|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3774|  2.11k|    {
 3775|  2.11k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  2.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.11k]
  |  |  |  Branch (859:45): [True: 0, False: 2.11k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|  2.11k|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|  2.11k|        return read_while1_code_unit(
 3784|  2.11k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|  2.11k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_:
  753|  2.11k|    {
  754|  2.11k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  2.11k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.11k|              cvref<T> obj = *get<T>(fn);
  745|  2.11k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.11k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.11k|              }
  748|  2.11k|              else {
  749|  2.11k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.11k|              }
  751|  2.11k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  2.11k|    {
  684|  2.11k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.11k|            return static_cast<T*>(s.m_cp);
  686|  2.11k|        }
  687|  2.11k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.11k|            return static_cast<T*>(s.m_p);
  689|  2.11k|        }
  690|  2.11k|        else {
  691|  2.11k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.11k|        }
  693|  2.11k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3784|  2.11k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_LPv0EEEPSM_:
  661|  2.11k|        {
  662|  2.11k|        }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|    128|        {
  662|    128|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|    512|    {
  754|    512|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|    512|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    512|              cvref<T> obj = *get<T>(fn);
  745|    512|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    512|                  obj(static_cast<decltype(args)>(args)...);
  747|    512|              }
  748|    512|              else {
  749|    512|                  return obj(static_cast<decltype(args)>(args)...);
  750|    512|              }
  751|    512|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    512|    {
  684|    512|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    512|            return static_cast<T*>(s.m_cp);
  686|    512|        }
  687|    512|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    512|            return static_cast<T*>(s.m_p);
  689|    512|        }
  690|    512|        else {
  691|    512|            return reinterpret_cast<T*>(s.m_fp);
  692|    512|        }
  693|    512|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4187|    512|            [](float_reader<CharT>& r, auto&&... args) {
 4188|    512|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    512|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4189|    512|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3665|  2.11k|    {
 3666|  2.11k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  2.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.11k]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|  2.11k|        return read_source_impl(range);
 3672|  2.11k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|    512|        {
  662|    512|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4171|    640|    {
 4172|    640|        float_reader<CharT> rd{get_options(specs)};
 4173|       |
 4174|    640|#if !SCN_DISABLE_LOCALE
 4175|    640|        if (specs.localized) {
  ------------------
  |  Branch (4175:13): [True: 128, False: 512]
  ------------------
 4176|    128|            return read_impl<Range>(
 4177|    128|                range, rd,
 4178|    128|                [](float_reader<CharT>& r, auto&&... args) {
 4179|    128|                    return r.read_source_localized(SCN_FWD(args)...);
 4180|    128|                },
 4181|    128|                value, loc);
 4182|    128|        }
 4183|    512|#endif
 4184|       |
 4185|    512|        return read_impl<Range>(
 4186|    512|            range, rd,
 4187|    512|            [](float_reader<CharT>& r, auto&&... args) {
 4188|    512|                return r.read_source(SCN_FWD(args)...);
 4189|    512|            },
 4190|    512|            value);
 4191|    640|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4207|    832|    {
 4208|    832|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4209|    832|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    832|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 448]
  |  |  ------------------
  ------------------
 4210|    384|            return unexpected(r.error());
 4211|    384|        }
 4212|       |
 4213|    448|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 448, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    448|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    448|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    448|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    448|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    448|    }                                                  \
  |  |  |  | 3642|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4214|      0|        return ranges::next(range.begin(), n);
 4215|    448|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  2.49k|    {
  763|  2.49k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  2.49k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|    128|    {
  754|    128|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    128|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    128|              cvref<T> obj = *get<T>(fn);
  745|    128|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    128|                  obj(static_cast<decltype(args)>(args)...);
  747|    128|              }
  748|    128|              else {
  749|    128|                  return obj(static_cast<decltype(args)>(args)...);
  750|    128|              }
  751|    128|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    128|    {
  684|    128|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    128|            return static_cast<T*>(s.m_cp);
  686|    128|        }
  687|    128|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    128|            return static_cast<T*>(s.m_p);
  689|    128|        }
  690|    128|        else {
  691|    128|            return reinterpret_cast<T*>(s.m_fp);
  692|    128|        }
  693|    128|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4178|    128|                [](float_reader<CharT>& r, auto&&... args) {
 4179|    128|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4180|    128|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3679|    384|    {
 3680|    384|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3681|    384|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|    384|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 384]
  |  |  ------------------
  ------------------
 3682|      0|            m_locale_options.thousands_sep = CharT{0};
 3683|      0|        }
 3684|       |
 3685|    384|        return read_source_impl(range);
 3686|    384|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3705|  2.49k|    {
 3706|  2.49k|        SCN_TRY(sign_result,
  ------------------
  |  | 3643|  2.49k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  2.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  2.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 2.49k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  2.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3707|  2.49k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3708|  2.49k|        auto it = sign_result.first;
 3709|  2.49k|        m_sign = sign_result.second;
 3710|       |
 3711|  2.49k|        auto digits_begin = it;
 3712|  2.49k|        auto r = ranges::subrange{it, range.end()};
 3713|  2.49k|        if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (3713:23): [Folded - Ignored]
  |  Branch (3713:23): [Folded - Ignored]
  ------------------
 3714|  2.49k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (3714:23): [Folded - Ignored]
  ------------------
 3715|  2.49k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  4.99k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49k]
  |  |  |  Branch (859:45): [True: 0, False: 2.49k]
  |  |  |  Branch (859:45): [True: 0, False: 2.49k]
  |  |  ------------------
  ------------------
 3716|  2.49k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3717|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|      0|    }                                                  \
  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3718|      0|                    it,
 3719|      0|                    do_read_source_impl(
 3720|      0|                        r,
 3721|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3722|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3723|      0|            }
 3724|  2.49k|            else {
 3725|  2.49k|                auto cb = [&](const auto& rr)
 3726|  2.49k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  2.49k|                    auto res = read_all(rr);
 3728|  2.49k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3729|  2.49k|                        return unexpected_scan_error(
 3730|  2.49k|                            scan_error::invalid_scanned_value,
 3731|  2.49k|                            "Invalid float value");
 3732|  2.49k|                    }
 3733|  2.49k|                    return res;
 3734|  2.49k|                };
 3735|  2.49k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3638|  2.49k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  2.49k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 1.15k, False: 1.34k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|  1.15k|    }                                                  \
  |  | 3642|  2.49k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  2.49k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3736|  1.34k|            }
 3737|  2.49k|        }
 3738|  1.34k|        else {
 3739|  1.34k|            SCN_TRY_ASSIGN(
 3740|  1.34k|                it,
 3741|  1.34k|                do_read_source_impl(
 3742|  1.34k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3743|  1.34k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3744|  1.34k|        }
 3745|       |
 3746|  1.34k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3747|       |
 3748|  1.34k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3748:13): [True: 1.34k, False: 0]
  |  Branch (3748:48): [True: 1.34k, False: 0]
  ------------------
 3749|  1.34k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3749:13): [True: 1.34k, False: 0]
  ------------------
 3750|  1.34k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3750:13): [True: 1.34k, False: 0]
  ------------------
 3751|  1.34k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3752|  1.34k|        }
 3753|       |
 3754|  1.34k|        handle_separators();
 3755|       |
 3756|  1.34k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3756:13): [True: 0, False: 1.34k]
  ------------------
 3757|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3758|      0|            if (auto e = check_thsep_grouping(
 3759|      0|                    ranges::subrange{
 3760|      0|                        digits_begin,
 3761|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3762|      0|                    m_thsep_indices, m_locale_options.grouping);
 3763|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|      0|                return unexpected(e);
 3765|      0|            }
 3766|      0|        }
 3767|       |
 3768|  1.34k|        return it;
 3769|  1.34k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3811|  2.49k|    {
 3812|  2.49k|        auto it = range.begin();
 3813|  2.49k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3813:73): [True: 2.49k, False: 0]
  ------------------
 3814|  2.49k|            return unexpected(r.error());
 3815|  2.49k|        }
 3816|      0|        else {
 3817|      0|            it = *r;
 3818|      0|        }
 3819|       |
 3820|      0|        if (auto r = read_matching_string_classic_nocase(
 3821|      0|                ranges::subrange{it, range.end()}, "inity");
 3822|      0|            !r) {
  ------------------
  |  Branch (3822:13): [True: 0, False: 0]
  ------------------
 3823|      0|            m_kind = float_kind::inf_short;
 3824|      0|            return it;
 3825|      0|        }
 3826|      0|        else {
 3827|      0|            m_kind = float_kind::inf_long;
 3828|      0|            return *r;
 3829|      0|        }
 3830|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3834|  2.49k|    {
 3835|  2.49k|        auto it = range.begin();
 3836|  2.49k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3836:73): [True: 2.49k, False: 0]
  ------------------
 3837|  2.49k|            return r.transform_error(map_parse_error_to_scan_error(
 3838|  2.49k|                scan_error::invalid_scanned_value,
 3839|  2.49k|                "Invalid floating-point NaN value"));
 3840|  2.49k|        }
 3841|      0|        else {
 3842|      0|            it = *r;
 3843|      0|        }
 3844|       |
 3845|      0|        if (auto r =
 3846|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3847|      0|            !r) {
  ------------------
  |  Branch (3847:13): [True: 0, False: 0]
  ------------------
 3848|      0|            m_kind = float_kind::nan_simple;
 3849|      0|            return it;
 3850|      0|        }
 3851|      0|        else {
 3852|      0|            it = *r;
 3853|      0|        }
 3854|       |
 3855|      0|        auto payload_beg_it = it;
 3856|      0|        it = read_while_code_unit(
 3857|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3858|      0|                return is_ascii_char(ch) &&
 3859|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3860|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3861|      0|            });
 3862|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3863|       |
 3864|      0|        m_kind = float_kind::nan_with_payload;
 3865|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3865:18): [True: 0, False: 0]
  ------------------
 3866|      0|                                             ')')) {
 3867|      0|            return *r;
 3868|      0|        }
 3869|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3870|      0|                                     "Invalid floating-point NaN payload");
 3871|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3804|  1.34k|    {
 3805|  1.34k|        return read_matching_string_classic_nocase(range, "0x");
 3806|  1.34k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|  1.15k|{
 1996|  1.15k|    auto it = read_while_code_unit(range, pred);
 1997|  1.15k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.15k, False: 0]
  ------------------
 1998|  1.15k|        return unexpected(parse_error::error);
 1999|  1.15k|    }
 2000|      0|    return it;
 2001|  1.15k|}
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3944|  1.15k|    {
 3945|  1.15k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3946|  1.15k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3946:35): [True: 768, False: 384]
  |  Branch (3946:50): [True: 384, False: 384]
  ------------------
 3947|       |
 3948|  1.15k|        auto it = ranges::begin(range);
 3949|  1.15k|        std::ptrdiff_t digits_count = 0;
 3950|       |
 3951|  1.15k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3952|  1.15k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.15k, False: 0]
  |  |  ------------------
  ------------------
 3953|  1.15k|            return r.transform_error(
 3954|  1.15k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3955|  1.15k|                                              "Invalid floating-point value"));
 3956|  1.15k|        }
 3957|      0|        else {
 3958|      0|            digits_count += ranges::distance(it, *r);
 3959|      0|            it = *r;
 3960|      0|        }
 3961|       |
 3962|      0|        m_integral_part_length = digits_count;
 3963|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3963:18): [True: 0, False: 0]
  ------------------
 3964|      0|                                             m_locale_options.decimal_point)) {
 3965|      0|            it = *r;
 3966|      0|        }
 3967|       |
 3968|      0|        if (auto r =
  ------------------
  |  Branch (3968:18): [True: 0, False: 0]
  ------------------
 3969|      0|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3970|      0|            digits_count += ranges::distance(it, *r);
 3971|      0|            it = *r;
 3972|      0|        }
 3973|       |
 3974|      0|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3975|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3976|      0|                                         "No significand digits in float");
 3977|      0|        }
 3978|       |
 3979|      0|        auto beg_exp_it = it;
 3980|      0|        if (allowed_exp) {
  ------------------
  |  Branch (3980:13): [True: 0, False: 0]
  ------------------
 3981|      0|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3982|      0|        }
 3983|      0|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3983:13): [True: 0, False: 0]
  |  Branch (3983:29): [True: 0, False: 0]
  ------------------
 3984|      0|            return unexpected_scan_error(
 3985|      0|                scan_error::invalid_scanned_value,
 3986|      0|                "No exponent given to scientific float");
 3987|      0|        }
 3988|       |
 3989|      0|        m_kind =
 3990|      0|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3990:13): [True: 0, False: 0]
  ------------------
 3991|       |
 3992|      0|        return it;
 3993|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3774|  1.15k|    {
 3775|  1.15k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.15k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.15k]
  |  |  |  Branch (859:45): [True: 0, False: 1.15k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3776|  1.15k|                         thsep_allowed)) {
 3777|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3778|      0|                return char_to_int(ch) < 10 ||
 3779|      0|                       ch == m_locale_options.thousands_sep;
 3780|      0|            });
 3781|      0|        }
 3782|       |
 3783|  1.15k|        return read_while1_code_unit(
 3784|  1.15k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3785|  1.15k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_:
  753|  1.15k|    {
  754|  1.15k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESU_w:
  743|  1.15k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.15k|              cvref<T> obj = *get<T>(fn);
  745|  1.15k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.15k|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.15k|              }
  748|  1.15k|              else {
  749|  1.15k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.15k|              }
  751|  1.15k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|  1.15k|    {
  684|  1.15k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.15k|            return static_cast<T*>(s.m_cp);
  686|  1.15k|        }
  687|  1.15k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.15k|            return static_cast<T*>(s.m_p);
  689|  1.15k|        }
  690|  1.15k|        else {
  691|  1.15k|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.15k|        }
  693|  1.15k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3784|  1.15k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_LPv0EEEPSJ_:
  661|  1.15k|        {
  662|  1.15k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4000|  2.49k|    {
 4001|  2.49k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4002|  2.49k|        const bool allowed_nonhex =
 4003|  2.49k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4004|  2.49k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4005|       |
 4006|  2.49k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4006:39): [True: 2.49k, False: 0]
  |  Branch (4006:45): [True: 0, False: 2.49k]
  ------------------
 4007|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4008|      0|                scan_error::invalid_scanned_value,
 4009|      0|                "Invalid infinite floating-point value"));
 4010|      0|        }
 4011|  2.49k|        else if (r) {
  ------------------
  |  Branch (4011:18): [True: 0, False: 2.49k]
  ------------------
 4012|      0|            return *r;
 4013|      0|        }
 4014|       |
 4015|  2.49k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4015:39): [True: 2.49k, False: 0]
  |  Branch (4015:45): [True: 0, False: 2.49k]
  ------------------
 4016|      0|            return unexpected(r.error());
 4017|      0|        }
 4018|  2.49k|        else if (r) {
  ------------------
  |  Branch (4018:18): [True: 0, False: 2.49k]
  ------------------
 4019|      0|            return *r;
 4020|      0|        }
 4021|       |
 4022|  2.49k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4022:13): [True: 1.34k, False: 1.15k]
  |  Branch (4022:28): [True: 384, False: 960]
  ------------------
 4023|       |            // only hex allowed:
 4024|       |            // prefix "0x" allowed, not required
 4025|    384|            auto it = range.begin();
 4026|       |
 4027|    384|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4027:22): [True: 0, False: 384]
  ------------------
 4028|      0|                m_kind = float_kind::hex_with_prefix;
 4029|      0|                it = *r;
 4030|      0|            }
 4031|    384|            else {
 4032|    384|                m_kind = float_kind::hex_without_prefix;
 4033|    384|            }
 4034|       |
 4035|    384|            return read_hex(ranges::subrange{it, range.end()});
 4036|    384|        }
 4037|  2.11k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4037:13): [True: 1.15k, False: 960]
  |  Branch (4037:29): [True: 1.15k, False: 0]
  ------------------
 4038|       |            // only nonhex allowed:
 4039|       |            // no prefix allowed
 4040|  1.15k|            m_kind = float_kind::generic;
 4041|  1.15k|            return read_regular_float(range);
 4042|  1.15k|        }
 4043|       |        // both hex and nonhex allowed:
 4044|       |        // check for "0x" prefix -> hex,
 4045|       |        // regular otherwise
 4046|       |
 4047|    960|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|    960|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 960]
  |  |  ------------------
  ------------------
 4048|      0|            m_kind = float_kind::hex_with_prefix;
 4049|      0|            return read_hex(ranges::subrange{*r, range.end()});
 4050|      0|        }
 4051|       |
 4052|    960|        m_kind = float_kind::generic;
 4053|    960|        return read_regular(range);
 4054|    960|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3726|  1.34k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3727|  1.34k|                    auto res = read_all(rr);
 3728|  1.34k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|  1.34k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.34k]
  |  |  ------------------
  ------------------
 3729|      0|                        return unexpected_scan_error(
 3730|      0|                            scan_error::invalid_scanned_value,
 3731|      0|                            "Invalid float value");
 3732|      0|                    }
 3733|  1.34k|                    return res;
 3734|  1.34k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|  1.34k|{
 1839|  1.34k|    return ranges::next(range.begin(), range.end());
 1840|  1.34k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|  1.34k|    {
  313|  1.34k|        ranges::advance(x, bound);
  314|  1.34k|        return x;
  315|  1.34k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|  1.34k|    {
  275|  1.34k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|  1.34k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEvOT_:
 1576|  1.34k|    {
 1577|  1.34k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.34k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.34k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|  1.34k|    {
 1621|  1.34k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  1.34k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  1.34k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  1.34k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  1.34k|            m_storage.reset();
 1627|  1.34k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  1.34k|        }
 1629|  1.34k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  1.34k|                                          std::basic_string<CharT>>) {
 1631|  1.34k|            m_storage.emplace(SCN_FWD(range));
 1632|  1.34k|            m_view = string_view_type{*m_storage};
 1633|  1.34k|        }
 1634|  1.34k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|  1.34k|                                          typename detail::basic_scan_buffer<
 1636|  1.34k|                                              value_t>::forward_iterator> &&
 1637|  1.34k|                           ranges::common_range<Range>) {
 1638|  1.34k|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.34k|            auto end_seg = range.end().contiguous_segment();
 1640|  1.34k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|  1.34k|                             detail::to_address(end_seg.end()))) {
 1642|  1.34k|                auto& str = m_storage.emplace();
 1643|  1.34k|                str.reserve(range.end().position() - range.begin().position());
 1644|  1.34k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  1.34k|                m_view = string_view_type{str};
 1646|  1.34k|                return;
 1647|  1.34k|            }
 1648|       |
 1649|  1.34k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.34k|                                                            end_seg.data());
 1651|  1.34k|            m_storage.reset();
 1652|  1.34k|        }
 1653|  1.34k|        else {
 1654|  1.34k|            auto& str = m_storage.emplace();
 1655|  1.34k|            if constexpr (ranges::sized_range<Range>) {
 1656|  1.34k|                str.reserve(range.size());
 1657|  1.34k|            }
 1658|  1.34k|            if constexpr (ranges::common_range<Range>) {
 1659|  1.34k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  1.34k|                          std::back_inserter(str));
 1661|  1.34k|            }
 1662|  1.34k|            else {
 1663|  1.34k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  1.34k|                     ++it) {
 1665|  1.34k|                    str.push_back(*it);
 1666|  1.34k|                }
 1667|  1.34k|            }
 1668|  1.34k|            m_view = string_view_type{str};
 1669|  1.34k|        }
 1670|  1.34k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    128|        {
  662|    128|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    512|    {
  754|    512|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    512|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    512|              cvref<T> obj = *get<T>(fn);
  745|    512|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    512|                  obj(static_cast<decltype(args)>(args)...);
  747|    512|              }
  748|    512|              else {
  749|    512|                  return obj(static_cast<decltype(args)>(args)...);
  750|    512|              }
  751|    512|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    512|    {
  684|    512|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    512|            return static_cast<T*>(s.m_cp);
  686|    512|        }
  687|    512|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    512|            return static_cast<T*>(s.m_p);
  689|    512|        }
  690|    512|        else {
  691|    512|            return reinterpret_cast<T*>(s.m_fp);
  692|    512|        }
  693|    512|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4187|    512|            [](float_reader<CharT>& r, auto&&... args) {
 4188|    512|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    512|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4189|    512|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3665|  2.11k|    {
 3666|  2.11k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  2.11k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.11k]
  |  |  ------------------
  ------------------
 3667|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3668|      0|                classic_with_thsep_tag{}};
 3669|      0|        }
 3670|       |
 3671|  2.11k|        return read_source_impl(range);
 3672|  2.11k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    512|        {
  662|    512|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6179|    640|    {
 6180|    640|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|    640|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|      0|                          basic_contiguous_scan_context<char_type>>) {
 6184|    640|            auto rd = make_reader<T, char_type>();
 6185|    640|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6186|    640|                return unexpected(e);
 6187|    640|            }
 6188|       |
 6189|    640|            return impl(rd, range, value);
 6190|    640|        }
 6191|    640|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6191:28): [Folded - Ignored]
  ------------------
 6192|    640|            auto rd = make_reader<T, char_type>();
 6193|    640|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 640]
  |  |  ------------------
  ------------------
 6194|      0|                return unexpected(e);
 6195|      0|            }
 6196|       |
 6197|    640|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6197:17): [True: 640, False: 0]
  |  Branch (6197:50): [True: 0, False: 0]
  ------------------
 6198|    640|                specs.width != 0) {
  ------------------
  |  Branch (6198:17): [True: 0, False: 0]
  ------------------
 6199|    640|                return impl(rd, range, value);
 6200|    640|            }
 6201|       |
 6202|      0|            auto crange = get_as_contiguous(range);
 6203|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6204|      0|            return ranges::next(range.begin(),
 6205|      0|                                ranges::distance(crange.begin(), it));
 6206|      0|        }
 6207|    640|        else {
 6208|    640|            SCN_EXPECT(false);
 6209|    640|            SCN_UNREACHABLE;
 6210|    640|        }
 6211|    640|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6121|    640|    {
 6122|    640|        const bool need_skipped_width =
 6123|    640|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 640]
  |  Branch (6123:33): [True: 0, False: 640]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|    640|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    640|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    640|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    640|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 640]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    640|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    640|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|    640|        auto [it, prefix_width] = prefix_result;
 6128|    640|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|    640|        std::ptrdiff_t value_width = 0;
 6132|    640|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 640]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|    640|        else {
 6148|    640|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    640|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    640|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 640, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    640|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    640|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    640|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    640|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    640|    }                                                  \
  |  | 3642|    640|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    640|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|      0|                                             specs, value, loc));
 6150|       |
 6151|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 0]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|      0|        }
 6157|       |
 6158|       |        // Read postfix
 6159|      0|        std::ptrdiff_t postfix_width = 0;
 6160|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 0]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|      0|                                                 value_width, postfix_width);
 6170|      0|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 0]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|      0|        return it;
 6175|      0|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3691|    448|    {
 3692|    448|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    448|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    448|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|    448|        const std::ptrdiff_t sign_len =
 3695|    448|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 0, False: 448]
  ------------------
 3696|       |
 3697|    448|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 448, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    448|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    448|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    448|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    448|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    448|    }                                                  \
  |  |  |  | 3642|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|    448|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4171|    640|    {
 4172|    640|        float_reader<CharT> rd{get_options(specs)};
 4173|       |
 4174|    640|#if !SCN_DISABLE_LOCALE
 4175|    640|        if (specs.localized) {
  ------------------
  |  Branch (4175:13): [True: 128, False: 512]
  ------------------
 4176|    128|            return read_impl<Range>(
 4177|    128|                range, rd,
 4178|    128|                [](float_reader<CharT>& r, auto&&... args) {
 4179|    128|                    return r.read_source_localized(SCN_FWD(args)...);
 4180|    128|                },
 4181|    128|                value, loc);
 4182|    128|        }
 4183|    512|#endif
 4184|       |
 4185|    512|        return read_impl<Range>(
 4186|    512|            range, rd,
 4187|    512|            [](float_reader<CharT>& r, auto&&... args) {
 4188|    512|                return r.read_source(SCN_FWD(args)...);
 4189|    512|            },
 4190|    512|            value);
 4191|    640|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4207|    832|    {
 4208|    832|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4209|    832|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    832|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 832, False: 0]
  |  |  ------------------
  ------------------
 4210|    832|            return unexpected(r.error());
 4211|    832|        }
 4212|       |
 4213|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4214|      0|        return ranges::next(range.begin(), n);
 4215|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|    128|    {
  754|    128|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|    128|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    128|              cvref<T> obj = *get<T>(fn);
  745|    128|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    128|                  obj(static_cast<decltype(args)>(args)...);
  747|    128|              }
  748|    128|              else {
  749|    128|                  return obj(static_cast<decltype(args)>(args)...);
  750|    128|              }
  751|    128|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    128|    {
  684|    128|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    128|            return static_cast<T*>(s.m_cp);
  686|    128|        }
  687|    128|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    128|            return static_cast<T*>(s.m_p);
  689|    128|        }
  690|    128|        else {
  691|    128|            return reinterpret_cast<T*>(s.m_fp);
  692|    128|        }
  693|    128|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4178|    128|                [](float_reader<CharT>& r, auto&&... args) {
 4179|    128|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4180|    128|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|    128|        {
  662|    128|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|    512|    {
  754|    512|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|    512|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    512|              cvref<T> obj = *get<T>(fn);
  745|    512|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    512|                  obj(static_cast<decltype(args)>(args)...);
  747|    512|              }
  748|    512|              else {
  749|    512|                  return obj(static_cast<decltype(args)>(args)...);
  750|    512|              }
  751|    512|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    512|    {
  684|    512|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    512|            return static_cast<T*>(s.m_cp);
  686|    512|        }
  687|    512|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    512|            return static_cast<T*>(s.m_p);
  689|    512|        }
  690|    512|        else {
  691|    512|            return reinterpret_cast<T*>(s.m_fp);
  692|    512|        }
  693|    512|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4187|    512|            [](float_reader<CharT>& r, auto&&... args) {
 4188|    512|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    512|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4189|    512|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|    512|        {
  662|    512|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4171|    640|    {
 4172|    640|        float_reader<CharT> rd{get_options(specs)};
 4173|       |
 4174|    640|#if !SCN_DISABLE_LOCALE
 4175|    640|        if (specs.localized) {
  ------------------
  |  Branch (4175:13): [True: 128, False: 512]
  ------------------
 4176|    128|            return read_impl<Range>(
 4177|    128|                range, rd,
 4178|    128|                [](float_reader<CharT>& r, auto&&... args) {
 4179|    128|                    return r.read_source_localized(SCN_FWD(args)...);
 4180|    128|                },
 4181|    128|                value, loc);
 4182|    128|        }
 4183|    512|#endif
 4184|       |
 4185|    512|        return read_impl<Range>(
 4186|    512|            range, rd,
 4187|    512|            [](float_reader<CharT>& r, auto&&... args) {
 4188|    512|                return r.read_source(SCN_FWD(args)...);
 4189|    512|            },
 4190|    512|            value);
 4191|    640|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4207|    832|    {
 4208|    832|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4209|    832|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    832|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 448]
  |  |  ------------------
  ------------------
 4210|    384|            return unexpected(r.error());
 4211|    384|        }
 4212|       |
 4213|    448|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 448, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    448|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    448|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    448|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    448|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    448|    }                                                  \
  |  |  |  | 3642|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4214|      0|        return ranges::next(range.begin(), n);
 4215|    448|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|    128|    {
  754|    128|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    128|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    128|              cvref<T> obj = *get<T>(fn);
  745|    128|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    128|                  obj(static_cast<decltype(args)>(args)...);
  747|    128|              }
  748|    128|              else {
  749|    128|                  return obj(static_cast<decltype(args)>(args)...);
  750|    128|              }
  751|    128|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    128|    {
  684|    128|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    128|            return static_cast<T*>(s.m_cp);
  686|    128|        }
  687|    128|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    128|            return static_cast<T*>(s.m_p);
  689|    128|        }
  690|    128|        else {
  691|    128|            return reinterpret_cast<T*>(s.m_fp);
  692|    128|        }
  693|    128|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4178|    128|                [](float_reader<CharT>& r, auto&&... args) {
 4179|    128|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4180|    128|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    128|        {
  662|    128|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    512|    {
  754|    512|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    512|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    512|              cvref<T> obj = *get<T>(fn);
  745|    512|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    512|                  obj(static_cast<decltype(args)>(args)...);
  747|    512|              }
  748|    512|              else {
  749|    512|                  return obj(static_cast<decltype(args)>(args)...);
  750|    512|              }
  751|    512|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    512|    {
  684|    512|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    512|            return static_cast<T*>(s.m_cp);
  686|    512|        }
  687|    512|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    512|            return static_cast<T*>(s.m_p);
  689|    512|        }
  690|    512|        else {
  691|    512|            return reinterpret_cast<T*>(s.m_fp);
  692|    512|        }
  693|    512|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4187|    512|            [](float_reader<CharT>& r, auto&&... args) {
 4188|    512|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    512|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4189|    512|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    512|        {
  662|    512|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6179|    640|    {
 6180|    640|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|    640|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|      0|                          basic_contiguous_scan_context<char_type>>) {
 6184|    640|            auto rd = make_reader<T, char_type>();
 6185|    640|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6186|    640|                return unexpected(e);
 6187|    640|            }
 6188|       |
 6189|    640|            return impl(rd, range, value);
 6190|    640|        }
 6191|    640|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6191:28): [Folded - Ignored]
  ------------------
 6192|    640|            auto rd = make_reader<T, char_type>();
 6193|    640|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 640]
  |  |  ------------------
  ------------------
 6194|      0|                return unexpected(e);
 6195|      0|            }
 6196|       |
 6197|    640|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6197:17): [True: 640, False: 0]
  |  Branch (6197:50): [True: 0, False: 0]
  ------------------
 6198|    640|                specs.width != 0) {
  ------------------
  |  Branch (6198:17): [True: 0, False: 0]
  ------------------
 6199|    640|                return impl(rd, range, value);
 6200|    640|            }
 6201|       |
 6202|      0|            auto crange = get_as_contiguous(range);
 6203|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6204|      0|            return ranges::next(range.begin(),
 6205|      0|                                ranges::distance(crange.begin(), it));
 6206|      0|        }
 6207|    640|        else {
 6208|    640|            SCN_EXPECT(false);
 6209|    640|            SCN_UNREACHABLE;
 6210|    640|        }
 6211|    640|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6121|    640|    {
 6122|    640|        const bool need_skipped_width =
 6123|    640|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 640]
  |  Branch (6123:33): [True: 0, False: 640]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|    640|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    640|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    640|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    640|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 640]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    640|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    640|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|    640|        auto [it, prefix_width] = prefix_result;
 6128|    640|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|    640|        std::ptrdiff_t value_width = 0;
 6132|    640|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 640]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|    640|        else {
 6148|    640|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    640|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    640|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 640, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    640|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    640|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    640|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    640|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    640|    }                                                  \
  |  | 3642|    640|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    640|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|      0|                                             specs, value, loc));
 6150|       |
 6151|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 0]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|      0|        }
 6157|       |
 6158|       |        // Read postfix
 6159|      0|        std::ptrdiff_t postfix_width = 0;
 6160|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 0]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|      0|                                                 value_width, postfix_width);
 6170|      0|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 0]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|      0|        return it;
 6175|      0|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3691|    448|    {
 3692|    448|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|    448|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    448|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3693|       |
 3694|    448|        const std::ptrdiff_t sign_len =
 3695|    448|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3695:13): [True: 0, False: 448]
  ------------------
 3696|       |
 3697|    448|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3643|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 448, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    448|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    448|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    448|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    448|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    448|    }                                                  \
  |  |  |  | 3642|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3698|      0|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3699|    448|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4171|    640|    {
 4172|    640|        float_reader<CharT> rd{get_options(specs)};
 4173|       |
 4174|    640|#if !SCN_DISABLE_LOCALE
 4175|    640|        if (specs.localized) {
  ------------------
  |  Branch (4175:13): [True: 128, False: 512]
  ------------------
 4176|    128|            return read_impl<Range>(
 4177|    128|                range, rd,
 4178|    128|                [](float_reader<CharT>& r, auto&&... args) {
 4179|    128|                    return r.read_source_localized(SCN_FWD(args)...);
 4180|    128|                },
 4181|    128|                value, loc);
 4182|    128|        }
 4183|    512|#endif
 4184|       |
 4185|    512|        return read_impl<Range>(
 4186|    512|            range, rd,
 4187|    512|            [](float_reader<CharT>& r, auto&&... args) {
 4188|    512|                return r.read_source(SCN_FWD(args)...);
 4189|    512|            },
 4190|    512|            value);
 4191|    640|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4207|    832|    {
 4208|    832|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4209|    832|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    832|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 832, False: 0]
  |  |  ------------------
  ------------------
 4210|    832|            return unexpected(r.error());
 4211|    832|        }
 4212|       |
 4213|      0|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4214|      0|        return ranges::next(range.begin(), n);
 4215|      0|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_:
  753|    128|    {
  754|    128|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|    128|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    128|              cvref<T> obj = *get<T>(fn);
  745|    128|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    128|                  obj(static_cast<decltype(args)>(args)...);
  747|    128|              }
  748|    128|              else {
  749|    128|                  return obj(static_cast<decltype(args)>(args)...);
  750|    128|              }
  751|    128|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    128|    {
  684|    128|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    128|            return static_cast<T*>(s.m_cp);
  686|    128|        }
  687|    128|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    128|            return static_cast<T*>(s.m_p);
  689|    128|        }
  690|    128|        else {
  691|    128|            return reinterpret_cast<T*>(s.m_fp);
  692|    128|        }
  693|    128|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4178|    128|                [](float_reader<CharT>& r, auto&&... args) {
 4179|    128|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4180|    128|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|    128|        {
  662|    128|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_:
  753|    512|    {
  754|    512|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1A_SB_SH_SI_:
  743|    512|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    512|              cvref<T> obj = *get<T>(fn);
  745|    512|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    512|                  obj(static_cast<decltype(args)>(args)...);
  747|    512|              }
  748|    512|              else {
  749|    512|                  return obj(static_cast<decltype(args)>(args)...);
  750|    512|              }
  751|    512|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    512|    {
  684|    512|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    512|            return static_cast<T*>(s.m_cp);
  686|    512|        }
  687|    512|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    512|            return static_cast<T*>(s.m_p);
  689|    512|        }
  690|    512|        else {
  691|    512|            return reinterpret_cast<T*>(s.m_fp);
  692|    512|        }
  693|    512|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4187|    512|            [](float_reader<CharT>& r, auto&&... args) {
 4188|    512|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    512|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4189|    512|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSM_:
  661|    512|        {
  662|    512|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4171|    640|    {
 4172|    640|        float_reader<CharT> rd{get_options(specs)};
 4173|       |
 4174|    640|#if !SCN_DISABLE_LOCALE
 4175|    640|        if (specs.localized) {
  ------------------
  |  Branch (4175:13): [True: 128, False: 512]
  ------------------
 4176|    128|            return read_impl<Range>(
 4177|    128|                range, rd,
 4178|    128|                [](float_reader<CharT>& r, auto&&... args) {
 4179|    128|                    return r.read_source_localized(SCN_FWD(args)...);
 4180|    128|                },
 4181|    128|                value, loc);
 4182|    128|        }
 4183|    512|#endif
 4184|       |
 4185|    512|        return read_impl<Range>(
 4186|    512|            range, rd,
 4187|    512|            [](float_reader<CharT>& r, auto&&... args) {
 4188|    512|                return r.read_source(SCN_FWD(args)...);
 4189|    512|            },
 4190|    512|            value);
 4191|    640|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4207|    832|    {
 4208|    832|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4209|    832|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|    832|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 384, False: 448]
  |  |  ------------------
  ------------------
 4210|    384|            return unexpected(r.error());
 4211|    384|        }
 4212|       |
 4213|    448|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3643|    448|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    448|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    448|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    448|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 448, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|    448|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|    448|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|    448|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|    448|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|    448|    }                                                  \
  |  |  |  | 3642|    448|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4214|      0|        return ranges::next(range.begin(), n);
 4215|    448|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_:
  753|    128|    {
  754|    128|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    128|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    128|              cvref<T> obj = *get<T>(fn);
  745|    128|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    128|                  obj(static_cast<decltype(args)>(args)...);
  747|    128|              }
  748|    128|              else {
  749|    128|                  return obj(static_cast<decltype(args)>(args)...);
  750|    128|              }
  751|    128|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    128|    {
  684|    128|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    128|            return static_cast<T*>(s.m_cp);
  686|    128|        }
  687|    128|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    128|            return static_cast<T*>(s.m_p);
  689|    128|        }
  690|    128|        else {
  691|    128|            return reinterpret_cast<T*>(s.m_fp);
  692|    128|        }
  693|    128|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4178|    128|                [](float_reader<CharT>& r, auto&&... args) {
 4179|    128|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|    128|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4180|    128|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    128|        {
  662|    128|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_:
  753|    512|    {
  754|    512|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES18_S9_SE_SG_:
  743|    512|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    512|              cvref<T> obj = *get<T>(fn);
  745|    512|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    512|                  obj(static_cast<decltype(args)>(args)...);
  747|    512|              }
  748|    512|              else {
  749|    512|                  return obj(static_cast<decltype(args)>(args)...);
  750|    512|              }
  751|    512|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|    512|    {
  684|    512|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    512|            return static_cast<T*>(s.m_cp);
  686|    512|        }
  687|    512|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    512|            return static_cast<T*>(s.m_p);
  689|    512|        }
  690|    512|        else {
  691|    512|            return reinterpret_cast<T*>(s.m_fp);
  692|    512|        }
  693|    512|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4187|    512|            [](float_reader<CharT>& r, auto&&... args) {
 4188|    512|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    512|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4189|    512|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_LPv0EEEPSJ_:
  661|    512|        {
  662|    512|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.49k|{
 2061|  2.49k|    auto it = range.begin();
 2062|  2.49k|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 2.49k, False: 0]
  ------------------
 2063|  2.49k|        const auto val =
 2064|  2.49k|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  2.49k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.49k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.49k, False: 0]
  |  |  ------------------
  ------------------
 2066|  2.49k|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  2.49k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  2.49k|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.49k, False: 0]
  ------------------
 2069|  2.49k|                return it;
 2070|  2.49k|            }
 2071|  2.49k|        }
 2072|      0|        it = val.iterator;
 2073|      0|    }
 2074|       |
 2075|      0|    return it;
 2076|  2.49k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  2.49k|{
 1899|  2.49k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  2.49k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  2.49k|    auto it = range.begin();
 1903|  2.49k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  2.49k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49k]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  2.49k|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 2.49k, False: 0]
  ------------------
 1912|  2.49k|        ++it;
 1913|  2.49k|        return {it, string_type(1, *range.begin())};
 1914|  2.49k|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  2.49k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|  2.49k|    {
 1890|  2.49k|        return !codepoint.empty();
 1891|  2.49k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  2.49k|{
 2082|  2.49k|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.49k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  2.49k|{
 2951|  2.49k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.49k, False: 0]
  ------------------
 2952|  2.49k|        auto it = read_while_classic_space(range);
 2953|  2.49k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.49k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.49k]
  |  |  ------------------
  ------------------
 2955|      0|            return unexpected(e);
 2956|      0|        }
 2957|       |
 2958|  2.49k|        return it;
 2959|  2.49k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.49k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  2.49k|{
 2117|  2.49k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  2.49k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  2.49k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  2.49k|        auto buf = make_contiguous_buffer(range);
 2121|  2.49k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  2.49k|        return ranges::next(range.begin(),
 2123|  2.49k|                            ranges::distance(buf.view().begin(), it));
 2124|  2.49k|    }
 2125|  2.49k|    else {
 2126|  2.49k|        auto it = range.begin();
 2127|       |
 2128|  2.49k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  2.49k|            auto seg = get_contiguous_beginning(range);
 2130|  2.49k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  2.49k|                seg_it != seg.end()) {
 2132|  2.49k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  2.49k|            }
 2134|  2.49k|            ranges::advance(it, seg.size());
 2135|  2.49k|        }
 2136|       |
 2137|  2.49k|        return read_while_code_point(
 2138|  2.49k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.49k|    }
 2140|  2.49k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  2.49k|    {
  754|  2.49k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  2.49k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.49k|              cvref<T> obj = *get<T>(fn);
  745|  2.49k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  2.49k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.49k|              }
  748|  2.49k|              else {
  749|  2.49k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.49k|              }
  751|  2.49k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.49k|    {
  684|  2.49k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  2.49k|            return static_cast<T*>(s.m_cp);
  686|  2.49k|        }
  687|  2.49k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  2.49k|            return static_cast<T*>(s.m_p);
  689|  2.49k|        }
  690|  2.49k|        else {
  691|  2.49k|            return reinterpret_cast<T*>(s.m_fp);
  692|  2.49k|        }
  693|  2.49k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  2.49k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  2.49k|        {
  662|  2.49k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   130k|{
 2088|   130k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   130k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   130k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   130k|        auto buf = make_contiguous_buffer(range);
 2092|   130k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   130k|        return ranges::next(range.begin(),
 2094|   130k|                            ranges::distance(buf.view().begin(), it));
 2095|   130k|    }
 2096|   130k|    else {
 2097|   130k|        auto it = range.begin();
 2098|       |
 2099|   130k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|   130k|            auto seg = get_contiguous_beginning(range);
 2101|   130k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   130k|                seg_it != seg.end()) {
 2103|   130k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   130k|            }
 2105|   130k|            ranges::advance(it, seg.size());
 2106|   130k|        }
 2107|       |
 2108|   130k|        return read_until_code_point(
 2109|   130k|            ranges::subrange{it, range.end()},
 2110|   130k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   130k|    }
 2112|   130k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|   130k|{
 1683|   130k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   130k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   130k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   130k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   130k|    }
 1688|   130k|    else {
 1689|   130k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   130k|    }
 1691|   130k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEELPv0EEEOT_:
 1489|   130k|    {
 1490|   130k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEELPv0EEEvOT_:
 1576|   130k|    {
 1577|   130k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   130k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|   130k|    {
 1621|   130k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   130k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   130k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   130k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   130k|            m_storage.reset();
 1627|   130k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   130k|        }
 1629|   130k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   130k|                                          std::basic_string<CharT>>) {
 1631|   130k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   130k|            m_view = string_view_type{*m_storage};
 1633|   130k|        }
 1634|   130k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|   130k|                                          typename detail::basic_scan_buffer<
 1636|   130k|                                              value_t>::forward_iterator> &&
 1637|   130k|                           ranges::common_range<Range>) {
 1638|   130k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   130k|            auto end_seg = range.end().contiguous_segment();
 1640|   130k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|   130k|                             detail::to_address(end_seg.end()))) {
 1642|   130k|                auto& str = m_storage.emplace();
 1643|   130k|                str.reserve(range.end().position() - range.begin().position());
 1644|   130k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   130k|                m_view = string_view_type{str};
 1646|   130k|                return;
 1647|   130k|            }
 1648|       |
 1649|   130k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   130k|                                                            end_seg.data());
 1651|   130k|            m_storage.reset();
 1652|   130k|        }
 1653|   130k|        else {
 1654|   130k|            auto& str = m_storage.emplace();
 1655|   130k|            if constexpr (ranges::sized_range<Range>) {
 1656|   130k|                str.reserve(range.size());
 1657|   130k|            }
 1658|   130k|            if constexpr (ranges::common_range<Range>) {
 1659|   130k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   130k|                          std::back_inserter(str));
 1661|   130k|            }
 1662|   130k|            else {
 1663|   130k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   130k|                     ++it) {
 1665|   130k|                    str.push_back(*it);
 1666|   130k|                }
 1667|   130k|            }
 1668|   130k|            m_view = string_view_type{str};
 1669|   130k|        }
 1670|   130k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4100|  67.1k|    {
 4101|  67.1k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  924|  67.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  67.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4102|  67.1k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4102:13): [True: 9.09k, False: 58.0k]
  ------------------
 4103|  9.09k|            return -value;
 4104|  9.09k|        }
 4105|  58.0k|        return value;
 4106|  67.1k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4100|    448|    {
 4101|    448|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  924|    448|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    448|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4102|    448|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4102:13): [True: 0, False: 448]
  ------------------
 4103|      0|            return -value;
 4104|      0|        }
 4105|    448|        return value;
 4106|    448|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4100|  89.8k|    {
 4101|  89.8k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  924|  89.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  89.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4102|  89.8k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4102:13): [True: 9.49k, False: 80.3k]
  ------------------
 4103|  9.49k|            return -value;
 4104|  9.49k|        }
 4105|  80.3k|        return value;
 4106|  89.8k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4100|    448|    {
 4101|    448|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  924|    448|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    448|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4102|    448|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4102:13): [True: 0, False: 448]
  ------------------
 4103|      0|            return -value;
 4104|      0|        }
 4105|    448|        return value;
 4106|    448|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4100|  89.8k|    {
 4101|  89.8k|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  924|  89.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  89.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4102|  89.8k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4102:13): [True: 9.49k, False: 80.3k]
  ------------------
 4103|  9.49k|            return -value;
 4104|  9.49k|        }
 4105|  80.3k|        return value;
 4106|  89.8k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4100|    448|    {
 4101|    448|        SCN_EXPECT(std::isnan(value) || value >= static_cast<T>(0.0));
  ------------------
  |  |  924|    448|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    448|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4102|    448|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4102:13): [True: 0, False: 448]
  ------------------
 4103|      0|            return -value;
 4104|      0|        }
 4105|    448|        return value;
 4106|    448|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5796|  42.0k|{
 5797|  42.0k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27, False: 42.0k]
  |  |  ------------------
  ------------------
 5798|     27|        return unexpected(e);
 5799|     27|    }
 5800|       |
 5801|  42.0k|    if (!is_required) {
  ------------------
  |  Branch (5801:9): [True: 0, False: 42.0k]
  ------------------
 5802|      0|        return range.begin();
 5803|      0|    }
 5804|       |
 5805|  42.0k|    return skip_classic_whitespace(range);
 5806|  42.0k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5872|  10.8k|    {
 5873|  10.8k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  10.8k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|  10.8k|                          basic_contiguous_scan_context<char_type>>) {
 5877|  10.8k|            auto rd = make_reader<T, char_type>();
 5878|  10.8k|            return impl(rd, range, value);
 5879|  10.8k|        }
 5880|  10.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|  10.8k|            auto rd = make_reader<T, char_type>();
 5882|  10.8k|            if (!is_segment_contiguous(range)) {
 5883|  10.8k|                return impl(rd, range, value);
 5884|  10.8k|            }
 5885|  10.8k|            auto crange = get_as_contiguous(range);
 5886|  10.8k|            SCN_TRY(it, impl(rd, crange, value));
 5887|  10.8k|            return ranges::next(range.begin(),
 5888|  10.8k|                                ranges::distance(crange.begin(), it));
 5889|  10.8k|        }
 5890|  10.8k|        else {
 5891|  10.8k|            SCN_EXPECT(false);
 5892|  10.8k|            SCN_UNREACHABLE;
 5893|  10.8k|        }
 5894|  10.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5864|  10.8k|    {
 5865|  10.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  10.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  10.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  10.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  10.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 9, False: 10.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      9|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      9|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      9|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      9|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      9|    }                                                  \
  |  |  |  | 3642|  10.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  10.8k|                        .transform_error(make_eof_scan_error));
 5867|  10.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  10.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4153|  10.8k|    {
 4154|  10.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  10.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4155|       |
 4156|  10.8k|        float_reader<CharT> rd{};
 4157|  10.8k|        return read_impl<Range>(
 4158|  10.8k|            range, rd,
 4159|  10.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4160|  10.8k|                return r.read_source(SCN_FWD(args)...);
 4161|  10.8k|            },
 4162|  10.8k|            value);
 4163|  10.8k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3658|  75.3k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3644|  76.4k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  10.8k|    {
  754|  10.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  10.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.8k|              cvref<T> obj = *get<T>(fn);
  745|  10.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  10.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  10.8k|              }
  748|  10.8k|              else {
  749|  10.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.8k|              }
  751|  10.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  10.8k|    {
  684|  10.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  10.8k|            return static_cast<T*>(s.m_cp);
  686|  10.8k|        }
  687|  10.8k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  10.8k|            return static_cast<T*>(s.m_p);
  689|  10.8k|        }
  690|  10.8k|        else {
  691|  10.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  10.8k|        }
  693|  10.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4159|  10.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4160|  10.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4161|  10.8k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  10.8k|        {
  662|  10.8k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5872|  15.6k|    {
 5873|  15.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  15.6k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|  15.6k|                          basic_contiguous_scan_context<char_type>>) {
 5877|  15.6k|            auto rd = make_reader<T, char_type>();
 5878|  15.6k|            return impl(rd, range, value);
 5879|  15.6k|        }
 5880|  15.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|  15.6k|            auto rd = make_reader<T, char_type>();
 5882|  15.6k|            if (!is_segment_contiguous(range)) {
 5883|  15.6k|                return impl(rd, range, value);
 5884|  15.6k|            }
 5885|  15.6k|            auto crange = get_as_contiguous(range);
 5886|  15.6k|            SCN_TRY(it, impl(rd, crange, value));
 5887|  15.6k|            return ranges::next(range.begin(),
 5888|  15.6k|                                ranges::distance(crange.begin(), it));
 5889|  15.6k|        }
 5890|  15.6k|        else {
 5891|  15.6k|            SCN_EXPECT(false);
 5892|  15.6k|            SCN_UNREACHABLE;
 5893|  15.6k|        }
 5894|  15.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5864|  15.6k|    {
 5865|  15.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 15.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     18|    }                                                  \
  |  |  |  | 3642|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  15.5k|                        .transform_error(make_eof_scan_error));
 5867|  15.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  15.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4153|  15.5k|    {
 4154|  15.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  15.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4155|       |
 4156|  15.5k|        float_reader<CharT> rd{};
 4157|  15.5k|        return read_impl<Range>(
 4158|  15.5k|            range, rd,
 4159|  15.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4160|  15.5k|                return r.read_source(SCN_FWD(args)...);
 4161|  15.5k|            },
 4162|  15.5k|            value);
 4163|  15.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  15.5k|    {
  754|  15.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  15.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.5k|              cvref<T> obj = *get<T>(fn);
  745|  15.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  15.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.5k|              }
  748|  15.5k|              else {
  749|  15.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.5k|              }
  751|  15.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  15.5k|    {
  684|  15.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  15.5k|            return static_cast<T*>(s.m_cp);
  686|  15.5k|        }
  687|  15.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  15.5k|            return static_cast<T*>(s.m_p);
  689|  15.5k|        }
  690|  15.5k|        else {
  691|  15.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  15.5k|        }
  693|  15.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4159|  15.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4160|  15.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4161|  15.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  15.5k|        {
  662|  15.5k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5872|  15.6k|    {
 5873|  15.6k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  15.6k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|  15.6k|                          basic_contiguous_scan_context<char_type>>) {
 5877|  15.6k|            auto rd = make_reader<T, char_type>();
 5878|  15.6k|            return impl(rd, range, value);
 5879|  15.6k|        }
 5880|  15.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|  15.6k|            auto rd = make_reader<T, char_type>();
 5882|  15.6k|            if (!is_segment_contiguous(range)) {
 5883|  15.6k|                return impl(rd, range, value);
 5884|  15.6k|            }
 5885|  15.6k|            auto crange = get_as_contiguous(range);
 5886|  15.6k|            SCN_TRY(it, impl(rd, crange, value));
 5887|  15.6k|            return ranges::next(range.begin(),
 5888|  15.6k|                                ranges::distance(crange.begin(), it));
 5889|  15.6k|        }
 5890|  15.6k|        else {
 5891|  15.6k|            SCN_EXPECT(false);
 5892|  15.6k|            SCN_UNREACHABLE;
 5893|  15.6k|        }
 5894|  15.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5864|  15.6k|    {
 5865|  15.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  15.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  15.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  15.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 18, False: 15.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     18|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     18|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     18|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     18|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     18|    }                                                  \
  |  |  |  | 3642|  15.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  15.5k|                        .transform_error(make_eof_scan_error));
 5867|  15.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  15.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4153|  15.5k|    {
 4154|  15.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  15.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4155|       |
 4156|  15.5k|        float_reader<CharT> rd{};
 4157|  15.5k|        return read_impl<Range>(
 4158|  15.5k|            range, rd,
 4159|  15.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4160|  15.5k|                return r.read_source(SCN_FWD(args)...);
 4161|  15.5k|            },
 4162|  15.5k|            value);
 4163|  15.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|  15.5k|    {
  754|  15.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|  15.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.5k|              cvref<T> obj = *get<T>(fn);
  745|  15.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  15.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  15.5k|              }
  748|  15.5k|              else {
  749|  15.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.5k|              }
  751|  15.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  15.5k|    {
  684|  15.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  15.5k|            return static_cast<T*>(s.m_cp);
  686|  15.5k|        }
  687|  15.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  15.5k|            return static_cast<T*>(s.m_p);
  689|  15.5k|        }
  690|  15.5k|        else {
  691|  15.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  15.5k|        }
  693|  15.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4159|  15.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4160|  15.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  15.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4161|  15.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSJ_:
  661|  15.5k|        {
  662|  15.5k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5796|  33.3k|{
 5797|  33.3k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27, False: 33.3k]
  |  |  ------------------
  ------------------
 5798|     27|        return unexpected(e);
 5799|     27|    }
 5800|       |
 5801|  33.3k|    if (!is_required) {
  ------------------
  |  Branch (5801:9): [True: 0, False: 33.3k]
  ------------------
 5802|      0|        return range.begin();
 5803|      0|    }
 5804|       |
 5805|  33.3k|    return skip_classic_whitespace(range);
 5806|  33.3k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5872|  7.95k|    {
 5873|  7.95k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  7.95k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|      0|                          basic_contiguous_scan_context<char_type>>) {
 5877|  7.95k|            auto rd = make_reader<T, char_type>();
 5878|  7.95k|            return impl(rd, range, value);
 5879|  7.95k|        }
 5880|  7.95k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5880:28): [Folded - Ignored]
  ------------------
 5881|  7.95k|            auto rd = make_reader<T, char_type>();
 5882|  7.95k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5882:17): [True: 7.95k, False: 0]
  ------------------
 5883|  7.95k|                return impl(rd, range, value);
 5884|  7.95k|            }
 5885|      0|            auto crange = get_as_contiguous(range);
 5886|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5887|      0|            return ranges::next(range.begin(),
 5888|      0|                                ranges::distance(crange.begin(), it));
 5889|      0|        }
 5890|  7.95k|        else {
 5891|  7.95k|            SCN_EXPECT(false);
 5892|  7.95k|            SCN_UNREACHABLE;
 5893|  7.95k|        }
 5894|  7.95k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5864|  7.95k|    {
 5865|  7.95k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  7.95k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  7.95k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  7.95k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  7.95k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6, False: 7.94k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      6|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      6|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      6|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      6|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      6|    }                                                  \
  |  |  |  | 3642|  7.95k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  7.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  7.94k|                        .transform_error(make_eof_scan_error));
 5867|  7.94k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  7.95k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4153|  7.94k|    {
 4154|  7.94k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  7.94k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4155|       |
 4156|  7.94k|        float_reader<CharT> rd{};
 4157|  7.94k|        return read_impl<Range>(
 4158|  7.94k|            range, rd,
 4159|  7.94k|            [](float_reader<CharT>& r, auto&&... args) {
 4160|  7.94k|                return r.read_source(SCN_FWD(args)...);
 4161|  7.94k|            },
 4162|  7.94k|            value);
 4163|  7.94k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  7.94k|    {
  754|  7.94k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  7.94k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.94k|              cvref<T> obj = *get<T>(fn);
  745|  7.94k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.94k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.94k|              }
  748|  7.94k|              else {
  749|  7.94k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.94k|              }
  751|  7.94k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  7.94k|    {
  684|  7.94k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.94k|            return static_cast<T*>(s.m_cp);
  686|  7.94k|        }
  687|  7.94k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  7.94k|            return static_cast<T*>(s.m_p);
  689|  7.94k|        }
  690|  7.94k|        else {
  691|  7.94k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.94k|        }
  693|  7.94k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4159|  7.94k|            [](float_reader<CharT>& r, auto&&... args) {
 4160|  7.94k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  7.94k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4161|  7.94k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  7.94k|        {
  662|  7.94k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5872|  12.7k|    {
 5873|  12.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  12.7k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|      0|                          basic_contiguous_scan_context<char_type>>) {
 5877|  12.7k|            auto rd = make_reader<T, char_type>();
 5878|  12.7k|            return impl(rd, range, value);
 5879|  12.7k|        }
 5880|  12.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5880:28): [Folded - Ignored]
  ------------------
 5881|  12.7k|            auto rd = make_reader<T, char_type>();
 5882|  12.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5882:17): [True: 12.7k, False: 0]
  ------------------
 5883|  12.7k|                return impl(rd, range, value);
 5884|  12.7k|            }
 5885|      0|            auto crange = get_as_contiguous(range);
 5886|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5887|      0|            return ranges::next(range.begin(),
 5888|      0|                                ranges::distance(crange.begin(), it));
 5889|      0|        }
 5890|  12.7k|        else {
 5891|  12.7k|            SCN_EXPECT(false);
 5892|  12.7k|            SCN_UNREACHABLE;
 5893|  12.7k|        }
 5894|  12.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5864|  12.7k|    {
 5865|  12.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  12.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  12.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  12.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15, False: 12.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     15|    }                                                  \
  |  |  |  | 3642|  12.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  12.7k|                        .transform_error(make_eof_scan_error));
 5867|  12.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  12.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4153|  12.7k|    {
 4154|  12.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4155|       |
 4156|  12.7k|        float_reader<CharT> rd{};
 4157|  12.7k|        return read_impl<Range>(
 4158|  12.7k|            range, rd,
 4159|  12.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4160|  12.7k|                return r.read_source(SCN_FWD(args)...);
 4161|  12.7k|            },
 4162|  12.7k|            value);
 4163|  12.7k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  12.7k|    {
  754|  12.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  12.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.7k|              cvref<T> obj = *get<T>(fn);
  745|  12.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  12.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.7k|              }
  748|  12.7k|              else {
  749|  12.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.7k|              }
  751|  12.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  12.7k|    {
  684|  12.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  12.7k|            return static_cast<T*>(s.m_cp);
  686|  12.7k|        }
  687|  12.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  12.7k|            return static_cast<T*>(s.m_p);
  689|  12.7k|        }
  690|  12.7k|        else {
  691|  12.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  12.7k|        }
  693|  12.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4159|  12.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4160|  12.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4161|  12.7k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  12.7k|        {
  662|  12.7k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5872|  12.7k|    {
 5873|  12.7k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|  12.7k|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|      0|                          basic_contiguous_scan_context<char_type>>) {
 5877|  12.7k|            auto rd = make_reader<T, char_type>();
 5878|  12.7k|            return impl(rd, range, value);
 5879|  12.7k|        }
 5880|  12.7k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5880:28): [Folded - Ignored]
  ------------------
 5881|  12.7k|            auto rd = make_reader<T, char_type>();
 5882|  12.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5882:17): [True: 12.7k, False: 0]
  ------------------
 5883|  12.7k|                return impl(rd, range, value);
 5884|  12.7k|            }
 5885|      0|            auto crange = get_as_contiguous(range);
 5886|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5887|      0|            return ranges::next(range.begin(),
 5888|      0|                                ranges::distance(crange.begin(), it));
 5889|      0|        }
 5890|  12.7k|        else {
 5891|  12.7k|            SCN_EXPECT(false);
 5892|  12.7k|            SCN_UNREACHABLE;
 5893|  12.7k|        }
 5894|  12.7k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5864|  12.7k|    {
 5865|  12.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|  12.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  12.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  12.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15, False: 12.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     15|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     15|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     15|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     15|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     15|    }                                                  \
  |  |  |  | 3642|  12.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|  12.7k|                        .transform_error(make_eof_scan_error));
 5867|  12.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|  12.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4153|  12.7k|    {
 4154|  12.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  12.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4155|       |
 4156|  12.7k|        float_reader<CharT> rd{};
 4157|  12.7k|        return read_impl<Range>(
 4158|  12.7k|            range, rd,
 4159|  12.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4160|  12.7k|                return r.read_source(SCN_FWD(args)...);
 4161|  12.7k|            },
 4162|  12.7k|            value);
 4163|  12.7k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|  12.7k|    {
  754|  12.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|  12.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.7k|              cvref<T> obj = *get<T>(fn);
  745|  12.7k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  12.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.7k|              }
  748|  12.7k|              else {
  749|  12.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.7k|              }
  751|  12.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  12.7k|    {
  684|  12.7k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  12.7k|            return static_cast<T*>(s.m_cp);
  686|  12.7k|        }
  687|  12.7k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  12.7k|            return static_cast<T*>(s.m_p);
  689|  12.7k|        }
  690|  12.7k|        else {
  691|  12.7k|            return reinterpret_cast<T*>(s.m_fp);
  692|  12.7k|        }
  693|  12.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4159|  12.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4160|  12.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4161|  12.7k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_LPv0EEEPSM_:
  661|  12.7k|        {
  662|  12.7k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|  86.4k|    {
 2879|  86.4k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   258k|    {
 2883|   258k|        return m_current;
 2884|   258k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   171k|    {
 2888|   171k|        return m_range.end();
 2889|   171k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|  85.5k|    {
 2903|  85.5k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  85.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  85.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  85.5k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  85.5k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 85.5k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  85.5k|        }
 2909|  85.5k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  85.5k|    static_cast<    \
  |  |  929|  85.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  85.5k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|  86.4k|    {
 2893|  86.4k|        return ranges::subrange{begin(), end()};
 2894|  86.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6038|  86.4k|    {
 6039|  86.4k|        const bool need_skipped_width =
 6040|  86.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6040:13): [True: 0, False: 86.4k]
  |  Branch (6040:33): [True: 0, False: 86.4k]
  ------------------
 6041|  86.4k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6042|       |
 6043|       |        // Read prefix
 6044|  86.4k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6044:13): [True: 0, False: 86.4k]
  ------------------
 6045|  86.4k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6045:13): [True: 0, False: 86.4k]
  ------------------
 6046|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6047|      0|                             need_skipped_width);
 6048|      0|        }
 6049|  86.4k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6049:13): [True: 86.4k, False: 0]
  |  Branch (6049:56): [True: 86.4k, False: 0]
  ------------------
 6050|       |            // Default alignment:
 6051|       |            // Skip preceding whitespace, if required by the reader
 6052|  86.4k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6052:17): [True: 0, False: 86.4k]
  ------------------
 6053|      0|                auto max_width_view = take_width(rng, specs.precision);
 6054|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6055|      0|                                  .transform_error(make_eof_scan_error));
 6056|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6057|      0|            }
 6058|   172k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  86.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  86.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  86.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  86.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 76, False: 86.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     76|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     76|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     76|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     76|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     76|    }                                                  \
  |  |  |  | 3642|  86.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  86.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6059|   172k|                            make_eof_scan_error));
 6060|       |
 6061|   172k|            if (need_skipped_width) {
  ------------------
  |  Branch (6061:17): [True: 0, False: 86.4k]
  ------------------
 6062|      0|                return result_type{
 6063|      0|                    it,
 6064|      0|                    calculate_text_width(make_contiguous_buffer(
 6065|      0|                                             ranges::subrange{rng.begin(), it})
 6066|      0|                                             .view())};
 6067|      0|            }
 6068|  86.4k|            return result_type{it, 0};
 6069|   172k|        }
 6070|       |
 6071|      0|        return result_type{rng.begin(), 0};
 6072|  86.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6080|  85.4k|    {
 6081|  85.4k|        const bool need_skipped_width =
 6082|  85.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6082:13): [True: 0, False: 85.4k]
  |  Branch (6082:33): [True: 0, False: 85.4k]
  ------------------
 6083|  85.4k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6084|       |
 6085|  85.4k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6085:13): [True: 0, False: 85.4k]
  ------------------
 6086|  85.4k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6086:13): [True: 0, False: 85.4k]
  ------------------
 6087|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6088|      0|                             specs.fill, need_skipped_width);
 6089|      0|        }
 6090|  85.4k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6090:13): [True: 85.4k, False: 0]
  ------------------
 6091|  85.4k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6091:13): [True: 0, False: 85.4k]
  ------------------
 6092|  85.4k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6092:15): [True: 0, False: 0]
  |  Branch (6092:35): [True: 0, False: 0]
  ------------------
 6093|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6093:15): [True: 0, False: 0]
  ------------------
 6094|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  ------------------
 6095|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6095:17): [True: 0, False: 0]
  ------------------
 6096|      0|                const auto initial_width =
 6097|      0|                    specs.precision - prefix_width - value_width;
 6098|      0|                auto max_width_view = take_width(rng, initial_width);
 6099|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6100|      0|                                  .transform_error(make_eof_scan_error));
 6101|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6102|      0|            }
 6103|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6104|      0|                            make_eof_scan_error));
 6105|       |
 6106|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6106:17): [True: 0, False: 0]
  ------------------
 6107|      0|                return result_type{
 6108|      0|                    it,
 6109|      0|                    calculate_text_width(make_contiguous_buffer(
 6110|      0|                                             ranges::subrange{rng.begin(), it})
 6111|      0|                                             .view())};
 6112|      0|            }
 6113|      0|            return result_type{it, 0};
 6114|      0|        }
 6115|  85.4k|        return result_type{rng.begin(), 0};
 6116|  85.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6179|  24.3k|    {
 6180|  24.3k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  24.3k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|  24.3k|                          basic_contiguous_scan_context<char_type>>) {
 6184|  24.3k|            auto rd = make_reader<T, char_type>();
 6185|  24.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.3k]
  |  |  ------------------
  ------------------
 6186|      0|                return unexpected(e);
 6187|      0|            }
 6188|       |
 6189|  24.3k|            return impl(rd, range, value);
 6190|  24.3k|        }
 6191|  24.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|  24.3k|            auto rd = make_reader<T, char_type>();
 6193|  24.3k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|  24.3k|                return unexpected(e);
 6195|  24.3k|            }
 6196|       |
 6197|  24.3k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|  24.3k|                specs.width != 0) {
 6199|  24.3k|                return impl(rd, range, value);
 6200|  24.3k|            }
 6201|       |
 6202|  24.3k|            auto crange = get_as_contiguous(range);
 6203|  24.3k|            SCN_TRY(it, impl(rd, crange, value));
 6204|  24.3k|            return ranges::next(range.begin(),
 6205|  24.3k|                                ranges::distance(crange.begin(), it));
 6206|  24.3k|        }
 6207|  24.3k|        else {
 6208|  24.3k|            SCN_EXPECT(false);
 6209|  24.3k|            SCN_UNREACHABLE;
 6210|  24.3k|        }
 6211|  24.3k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6121|  24.3k|    {
 6122|  24.3k|        const bool need_skipped_width =
 6123|  24.3k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 24.3k]
  |  Branch (6123:33): [True: 0, False: 24.3k]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|  24.3k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  24.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  24.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  24.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16, False: 24.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     16|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     16|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     16|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     16|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     16|    }                                                  \
  |  |  |  | 3642|  24.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|  24.3k|        auto [it, prefix_width] = prefix_result;
 6128|  24.3k|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|  24.3k|        std::ptrdiff_t value_width = 0;
 6132|  24.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 24.3k]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|  24.3k|        else {
 6148|  24.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  24.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  24.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 304, False: 24.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    304|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    304|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    304|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    304|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    304|    }                                                  \
  |  | 3642|  24.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|  24.0k|                                             specs, value, loc));
 6150|       |
 6151|  24.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 24.0k]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|  24.0k|        }
 6157|       |
 6158|       |        // Read postfix
 6159|  24.0k|        std::ptrdiff_t postfix_width = 0;
 6160|  24.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 24.0k, False: 6]
  ------------------
 6161|  24.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  24.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  24.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  24.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  24.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 24.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  24.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  24.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|  24.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|  24.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6164|  24.0k|                                 value_width));
 6165|  24.0k|            std::tie(it, postfix_width) = postfix_result;
 6166|  24.0k|        }
 6167|       |
 6168|  24.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|  24.0k|                                                 value_width, postfix_width);
 6170|  24.0k|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 24.0k]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|  24.0k|        return it;
 6175|  24.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6179|  31.0k|    {
 6180|  31.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  31.0k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|  31.0k|                          basic_contiguous_scan_context<char_type>>) {
 6184|  31.0k|            auto rd = make_reader<T, char_type>();
 6185|  31.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 31.0k]
  |  |  ------------------
  ------------------
 6186|      0|                return unexpected(e);
 6187|      0|            }
 6188|       |
 6189|  31.0k|            return impl(rd, range, value);
 6190|  31.0k|        }
 6191|  31.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|  31.0k|            auto rd = make_reader<T, char_type>();
 6193|  31.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|  31.0k|                return unexpected(e);
 6195|  31.0k|            }
 6196|       |
 6197|  31.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|  31.0k|                specs.width != 0) {
 6199|  31.0k|                return impl(rd, range, value);
 6200|  31.0k|            }
 6201|       |
 6202|  31.0k|            auto crange = get_as_contiguous(range);
 6203|  31.0k|            SCN_TRY(it, impl(rd, crange, value));
 6204|  31.0k|            return ranges::next(range.begin(),
 6205|  31.0k|                                ranges::distance(crange.begin(), it));
 6206|  31.0k|        }
 6207|  31.0k|        else {
 6208|  31.0k|            SCN_EXPECT(false);
 6209|  31.0k|            SCN_UNREACHABLE;
 6210|  31.0k|        }
 6211|  31.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6121|  31.0k|    {
 6122|  31.0k|        const bool need_skipped_width =
 6123|  31.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 31.0k]
  |  Branch (6123:33): [True: 0, False: 31.0k]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|  31.0k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  31.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  31.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  31.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 31.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     30|    }                                                  \
  |  |  |  | 3642|  31.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|  31.0k|        auto [it, prefix_width] = prefix_result;
 6128|  31.0k|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|  31.0k|        std::ptrdiff_t value_width = 0;
 6132|  31.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 31.0k]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|  31.0k|        else {
 6148|  31.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  31.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  31.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 290, False: 30.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    290|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    290|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    290|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    290|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    290|    }                                                  \
  |  | 3642|  31.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  31.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|  30.7k|                                             specs, value, loc));
 6150|       |
 6151|  30.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 30.7k]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|  30.7k|        }
 6157|       |
 6158|       |        // Read postfix
 6159|  30.7k|        std::ptrdiff_t postfix_width = 0;
 6160|  30.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 30.7k, False: 20]
  ------------------
 6161|  30.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  30.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  30.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  30.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  30.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|  30.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|  30.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6164|  30.7k|                                 value_width));
 6165|  30.7k|            std::tie(it, postfix_width) = postfix_result;
 6166|  30.7k|        }
 6167|       |
 6168|  30.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|  30.7k|                                                 value_width, postfix_width);
 6170|  30.7k|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 30.7k]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|  30.7k|        return it;
 6175|  30.7k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6179|  31.0k|    {
 6180|  31.0k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|  31.0k|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|  31.0k|                          basic_contiguous_scan_context<char_type>>) {
 6184|  31.0k|            auto rd = make_reader<T, char_type>();
 6185|  31.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 31.0k]
  |  |  ------------------
  ------------------
 6186|      0|                return unexpected(e);
 6187|      0|            }
 6188|       |
 6189|  31.0k|            return impl(rd, range, value);
 6190|  31.0k|        }
 6191|  31.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|  31.0k|            auto rd = make_reader<T, char_type>();
 6193|  31.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|  31.0k|                return unexpected(e);
 6195|  31.0k|            }
 6196|       |
 6197|  31.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|  31.0k|                specs.width != 0) {
 6199|  31.0k|                return impl(rd, range, value);
 6200|  31.0k|            }
 6201|       |
 6202|  31.0k|            auto crange = get_as_contiguous(range);
 6203|  31.0k|            SCN_TRY(it, impl(rd, crange, value));
 6204|  31.0k|            return ranges::next(range.begin(),
 6205|  31.0k|                                ranges::distance(crange.begin(), it));
 6206|  31.0k|        }
 6207|  31.0k|        else {
 6208|  31.0k|            SCN_EXPECT(false);
 6209|  31.0k|            SCN_UNREACHABLE;
 6210|  31.0k|        }
 6211|  31.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6121|  31.0k|    {
 6122|  31.0k|        const bool need_skipped_width =
 6123|  31.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 31.0k]
  |  Branch (6123:33): [True: 0, False: 31.0k]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|  31.0k|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|  31.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  31.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  31.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30, False: 31.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|     30|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|     30|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|     30|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|     30|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|     30|    }                                                  \
  |  |  |  | 3642|  31.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|  31.0k|        auto [it, prefix_width] = prefix_result;
 6128|  31.0k|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|  31.0k|        std::ptrdiff_t value_width = 0;
 6132|  31.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 31.0k]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|  31.0k|        else {
 6148|  31.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|  31.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|  31.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 290, False: 30.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    290|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    290|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    290|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    290|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    290|    }                                                  \
  |  | 3642|  31.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  31.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|  30.7k|                                             specs, value, loc));
 6150|       |
 6151|  30.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 30.7k]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|  30.7k|        }
 6157|       |
 6158|       |        // Read postfix
 6159|  30.7k|        std::ptrdiff_t postfix_width = 0;
 6160|  30.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 30.7k, False: 20]
  ------------------
 6161|  30.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|  30.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  30.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  30.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 30.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  30.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  30.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|  30.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|  30.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6164|  30.7k|                                 value_width));
 6165|  30.7k|            std::tie(it, postfix_width) = postfix_result;
 6166|  30.7k|        }
 6167|       |
 6168|  30.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|  30.7k|                                                 value_width, postfix_width);
 6170|  30.7k|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 30.7k]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|  30.7k|        return it;
 6175|  30.7k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5796|    576|{
 5797|    576|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    576|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 576]
  |  |  ------------------
  ------------------
 5798|      0|        return unexpected(e);
 5799|      0|    }
 5800|       |
 5801|    576|    if (!is_required) {
  ------------------
  |  Branch (5801:9): [True: 0, False: 576]
  ------------------
 5802|      0|        return range.begin();
 5803|      0|    }
 5804|       |
 5805|    576|    return skip_classic_whitespace(range);
 5806|    576|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5872|    192|    {
 5873|    192|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|    192|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|    192|                          basic_contiguous_scan_context<char_type>>) {
 5877|    192|            auto rd = make_reader<T, char_type>();
 5878|    192|            return impl(rd, range, value);
 5879|    192|        }
 5880|    192|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|    192|            auto rd = make_reader<T, char_type>();
 5882|    192|            if (!is_segment_contiguous(range)) {
 5883|    192|                return impl(rd, range, value);
 5884|    192|            }
 5885|    192|            auto crange = get_as_contiguous(range);
 5886|    192|            SCN_TRY(it, impl(rd, crange, value));
 5887|    192|            return ranges::next(range.begin(),
 5888|    192|                                ranges::distance(crange.begin(), it));
 5889|    192|        }
 5890|    192|        else {
 5891|    192|            SCN_EXPECT(false);
 5892|    192|            SCN_UNREACHABLE;
 5893|    192|        }
 5894|    192|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5864|    192|    {
 5865|    192|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|    192|                        .transform_error(make_eof_scan_error));
 5867|    192|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|    192|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4153|    192|    {
 4154|    192|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    192|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4155|       |
 4156|    192|        float_reader<CharT> rd{};
 4157|    192|        return read_impl<Range>(
 4158|    192|            range, rd,
 4159|    192|            [](float_reader<CharT>& r, auto&&... args) {
 4160|    192|                return r.read_source(SCN_FWD(args)...);
 4161|    192|            },
 4162|    192|            value);
 4163|    192|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3658|  1.15k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    192|    {
  754|    192|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    192|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    192|              cvref<T> obj = *get<T>(fn);
  745|    192|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    192|                  obj(static_cast<decltype(args)>(args)...);
  747|    192|              }
  748|    192|              else {
  749|    192|                  return obj(static_cast<decltype(args)>(args)...);
  750|    192|              }
  751|    192|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    192|    {
  684|    192|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    192|            return static_cast<T*>(s.m_cp);
  686|    192|        }
  687|    192|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    192|            return static_cast<T*>(s.m_p);
  689|    192|        }
  690|    192|        else {
  691|    192|            return reinterpret_cast<T*>(s.m_fp);
  692|    192|        }
  693|    192|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4159|    192|            [](float_reader<CharT>& r, auto&&... args) {
 4160|    192|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4161|    192|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    192|        {
  662|    192|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5872|    192|    {
 5873|    192|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|    192|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|    192|                          basic_contiguous_scan_context<char_type>>) {
 5877|    192|            auto rd = make_reader<T, char_type>();
 5878|    192|            return impl(rd, range, value);
 5879|    192|        }
 5880|    192|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|    192|            auto rd = make_reader<T, char_type>();
 5882|    192|            if (!is_segment_contiguous(range)) {
 5883|    192|                return impl(rd, range, value);
 5884|    192|            }
 5885|    192|            auto crange = get_as_contiguous(range);
 5886|    192|            SCN_TRY(it, impl(rd, crange, value));
 5887|    192|            return ranges::next(range.begin(),
 5888|    192|                                ranges::distance(crange.begin(), it));
 5889|    192|        }
 5890|    192|        else {
 5891|    192|            SCN_EXPECT(false);
 5892|    192|            SCN_UNREACHABLE;
 5893|    192|        }
 5894|    192|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5864|    192|    {
 5865|    192|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|    192|                        .transform_error(make_eof_scan_error));
 5867|    192|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|    192|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4153|    192|    {
 4154|    192|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    192|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4155|       |
 4156|    192|        float_reader<CharT> rd{};
 4157|    192|        return read_impl<Range>(
 4158|    192|            range, rd,
 4159|    192|            [](float_reader<CharT>& r, auto&&... args) {
 4160|    192|                return r.read_source(SCN_FWD(args)...);
 4161|    192|            },
 4162|    192|            value);
 4163|    192|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    192|    {
  754|    192|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    192|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    192|              cvref<T> obj = *get<T>(fn);
  745|    192|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    192|                  obj(static_cast<decltype(args)>(args)...);
  747|    192|              }
  748|    192|              else {
  749|    192|                  return obj(static_cast<decltype(args)>(args)...);
  750|    192|              }
  751|    192|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    192|    {
  684|    192|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    192|            return static_cast<T*>(s.m_cp);
  686|    192|        }
  687|    192|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    192|            return static_cast<T*>(s.m_p);
  689|    192|        }
  690|    192|        else {
  691|    192|            return reinterpret_cast<T*>(s.m_fp);
  692|    192|        }
  693|    192|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4159|    192|            [](float_reader<CharT>& r, auto&&... args) {
 4160|    192|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4161|    192|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    192|        {
  662|    192|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5872|    192|    {
 5873|    192|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|    192|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|    192|                          basic_contiguous_scan_context<char_type>>) {
 5877|    192|            auto rd = make_reader<T, char_type>();
 5878|    192|            return impl(rd, range, value);
 5879|    192|        }
 5880|    192|        else if constexpr (!detail::is_type_disabled<T>) {
 5881|    192|            auto rd = make_reader<T, char_type>();
 5882|    192|            if (!is_segment_contiguous(range)) {
 5883|    192|                return impl(rd, range, value);
 5884|    192|            }
 5885|    192|            auto crange = get_as_contiguous(range);
 5886|    192|            SCN_TRY(it, impl(rd, crange, value));
 5887|    192|            return ranges::next(range.begin(),
 5888|    192|                                ranges::distance(crange.begin(), it));
 5889|    192|        }
 5890|    192|        else {
 5891|    192|            SCN_EXPECT(false);
 5892|    192|            SCN_UNREACHABLE;
 5893|    192|        }
 5894|    192|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5864|    192|    {
 5865|    192|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|    192|                        .transform_error(make_eof_scan_error));
 5867|    192|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|    192|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4153|    192|    {
 4154|    192|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    192|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4155|       |
 4156|    192|        float_reader<CharT> rd{};
 4157|    192|        return read_impl<Range>(
 4158|    192|            range, rd,
 4159|    192|            [](float_reader<CharT>& r, auto&&... args) {
 4160|    192|                return r.read_source(SCN_FWD(args)...);
 4161|    192|            },
 4162|    192|            value);
 4163|    192|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_:
  753|    192|    {
  754|    192|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_LPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES15_S9_SE_SG_:
  743|    192|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    192|              cvref<T> obj = *get<T>(fn);
  745|    192|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    192|                  obj(static_cast<decltype(args)>(args)...);
  747|    192|              }
  748|    192|              else {
  749|    192|                  return obj(static_cast<decltype(args)>(args)...);
  750|    192|              }
  751|    192|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    192|    {
  684|    192|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    192|            return static_cast<T*>(s.m_cp);
  686|    192|        }
  687|    192|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    192|            return static_cast<T*>(s.m_p);
  689|    192|        }
  690|    192|        else {
  691|    192|            return reinterpret_cast<T*>(s.m_fp);
  692|    192|        }
  693|    192|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4159|    192|            [](float_reader<CharT>& r, auto&&... args) {
 4160|    192|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4161|    192|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSJ_:
  661|    192|        {
  662|    192|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|  1.92k|    {
 2879|  1.92k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  3.84k|    {
 2883|  3.84k|        return m_current;
 2884|  3.84k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|  1.92k|    {
 2888|  1.92k|        return m_range.end();
 2889|  1.92k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  1.92k|    {
 2893|  1.92k|        return ranges::subrange{begin(), end()};
 2894|  1.92k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6038|  1.92k|    {
 6039|  1.92k|        const bool need_skipped_width =
 6040|  1.92k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6040:13): [True: 0, False: 1.92k]
  |  Branch (6040:33): [True: 0, False: 1.92k]
  ------------------
 6041|  1.92k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6042|       |
 6043|       |        // Read prefix
 6044|  1.92k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6044:13): [True: 0, False: 1.92k]
  ------------------
 6045|  1.92k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6045:13): [True: 0, False: 1.92k]
  ------------------
 6046|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6047|      0|                             need_skipped_width);
 6048|      0|        }
 6049|  1.92k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6049:13): [True: 1.92k, False: 0]
  |  Branch (6049:56): [True: 1.92k, False: 0]
  ------------------
 6050|       |            // Default alignment:
 6051|       |            // Skip preceding whitespace, if required by the reader
 6052|  1.92k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6052:17): [True: 0, False: 1.92k]
  ------------------
 6053|      0|                auto max_width_view = take_width(rng, specs.precision);
 6054|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6055|      0|                                  .transform_error(make_eof_scan_error));
 6056|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6057|      0|            }
 6058|  3.84k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3643|  1.92k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|  1.92k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|  1.92k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.92k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|  1.92k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.92k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6059|  3.84k|                            make_eof_scan_error));
 6060|       |
 6061|  3.84k|            if (need_skipped_width) {
  ------------------
  |  Branch (6061:17): [True: 0, False: 1.92k]
  ------------------
 6062|      0|                return result_type{
 6063|      0|                    it,
 6064|      0|                    calculate_text_width(make_contiguous_buffer(
 6065|      0|                                             ranges::subrange{rng.begin(), it})
 6066|      0|                                             .view())};
 6067|      0|            }
 6068|  1.92k|            return result_type{it, 0};
 6069|  3.84k|        }
 6070|       |
 6071|      0|        return result_type{rng.begin(), 0};
 6072|  1.92k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6179|    640|    {
 6180|    640|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|    640|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|    640|                          basic_contiguous_scan_context<char_type>>) {
 6184|    640|            auto rd = make_reader<T, char_type>();
 6185|    640|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 640]
  |  |  ------------------
  ------------------
 6186|      0|                return unexpected(e);
 6187|      0|            }
 6188|       |
 6189|    640|            return impl(rd, range, value);
 6190|    640|        }
 6191|    640|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|    640|            auto rd = make_reader<T, char_type>();
 6193|    640|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|    640|                return unexpected(e);
 6195|    640|            }
 6196|       |
 6197|    640|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|    640|                specs.width != 0) {
 6199|    640|                return impl(rd, range, value);
 6200|    640|            }
 6201|       |
 6202|    640|            auto crange = get_as_contiguous(range);
 6203|    640|            SCN_TRY(it, impl(rd, crange, value));
 6204|    640|            return ranges::next(range.begin(),
 6205|    640|                                ranges::distance(crange.begin(), it));
 6206|    640|        }
 6207|    640|        else {
 6208|    640|            SCN_EXPECT(false);
 6209|    640|            SCN_UNREACHABLE;
 6210|    640|        }
 6211|    640|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6121|    640|    {
 6122|    640|        const bool need_skipped_width =
 6123|    640|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 640]
  |  Branch (6123:33): [True: 0, False: 640]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|    640|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    640|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    640|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    640|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 640]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    640|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    640|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|    640|        auto [it, prefix_width] = prefix_result;
 6128|    640|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|    640|        std::ptrdiff_t value_width = 0;
 6132|    640|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 640]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|    640|        else {
 6148|    640|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    640|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    640|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 640, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    640|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    640|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    640|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    640|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    640|    }                                                  \
  |  | 3642|    640|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    640|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|      0|                                             specs, value, loc));
 6150|       |
 6151|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 0]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|      0|        }
 6157|       |
 6158|       |        // Read postfix
 6159|      0|        std::ptrdiff_t postfix_width = 0;
 6160|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 0]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|      0|                                                 value_width, postfix_width);
 6170|      0|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 0]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|      0|        return it;
 6175|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6179|    640|    {
 6180|    640|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|    640|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|    640|                          basic_contiguous_scan_context<char_type>>) {
 6184|    640|            auto rd = make_reader<T, char_type>();
 6185|    640|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 640]
  |  |  ------------------
  ------------------
 6186|      0|                return unexpected(e);
 6187|      0|            }
 6188|       |
 6189|    640|            return impl(rd, range, value);
 6190|    640|        }
 6191|    640|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|    640|            auto rd = make_reader<T, char_type>();
 6193|    640|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|    640|                return unexpected(e);
 6195|    640|            }
 6196|       |
 6197|    640|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|    640|                specs.width != 0) {
 6199|    640|                return impl(rd, range, value);
 6200|    640|            }
 6201|       |
 6202|    640|            auto crange = get_as_contiguous(range);
 6203|    640|            SCN_TRY(it, impl(rd, crange, value));
 6204|    640|            return ranges::next(range.begin(),
 6205|    640|                                ranges::distance(crange.begin(), it));
 6206|    640|        }
 6207|    640|        else {
 6208|    640|            SCN_EXPECT(false);
 6209|    640|            SCN_UNREACHABLE;
 6210|    640|        }
 6211|    640|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6121|    640|    {
 6122|    640|        const bool need_skipped_width =
 6123|    640|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 640]
  |  Branch (6123:33): [True: 0, False: 640]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|    640|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    640|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    640|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    640|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 640]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    640|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    640|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|    640|        auto [it, prefix_width] = prefix_result;
 6128|    640|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|    640|        std::ptrdiff_t value_width = 0;
 6132|    640|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 640]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|    640|        else {
 6148|    640|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    640|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    640|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 640, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    640|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    640|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    640|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    640|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    640|    }                                                  \
  |  | 3642|    640|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    640|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|      0|                                             specs, value, loc));
 6150|       |
 6151|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 0]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|      0|        }
 6157|       |
 6158|       |        // Read postfix
 6159|      0|        std::ptrdiff_t postfix_width = 0;
 6160|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 0]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|      0|                                                 value_width, postfix_width);
 6170|      0|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 0]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|      0|        return it;
 6175|      0|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6179|    640|    {
 6180|    640|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6180:23): [Folded - Ignored]
  |  Branch (6180:23): [Folded - Ignored]
  ------------------
 6181|    640|                      std::is_same_v<
  ------------------
  |  Branch (6181:23): [Folded - Ignored]
  ------------------
 6182|      0|                          context_type,
 6183|    640|                          basic_contiguous_scan_context<char_type>>) {
 6184|    640|            auto rd = make_reader<T, char_type>();
 6185|    640|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 640]
  |  |  ------------------
  ------------------
 6186|      0|                return unexpected(e);
 6187|      0|            }
 6188|       |
 6189|    640|            return impl(rd, range, value);
 6190|    640|        }
 6191|    640|        else if constexpr (!detail::is_type_disabled<T>) {
 6192|    640|            auto rd = make_reader<T, char_type>();
 6193|    640|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6194|    640|                return unexpected(e);
 6195|    640|            }
 6196|       |
 6197|    640|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6198|    640|                specs.width != 0) {
 6199|    640|                return impl(rd, range, value);
 6200|    640|            }
 6201|       |
 6202|    640|            auto crange = get_as_contiguous(range);
 6203|    640|            SCN_TRY(it, impl(rd, crange, value));
 6204|    640|            return ranges::next(range.begin(),
 6205|    640|                                ranges::distance(crange.begin(), it));
 6206|    640|        }
 6207|    640|        else {
 6208|    640|            SCN_EXPECT(false);
 6209|    640|            SCN_UNREACHABLE;
 6210|    640|        }
 6211|    640|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6121|    640|    {
 6122|    640|        const bool need_skipped_width =
 6123|    640|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6123:13): [True: 0, False: 640]
  |  Branch (6123:33): [True: 0, False: 640]
  ------------------
 6124|       |
 6125|       |        // Read prefix
 6126|    640|        SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3643|    640|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    640|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    640|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 640]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    640|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    640|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6127|    640|        auto [it, prefix_width] = prefix_result;
 6128|    640|        auto prefix_end_it = it;
 6129|       |
 6130|       |        // Read value
 6131|    640|        std::ptrdiff_t value_width = 0;
 6132|    640|        if (specs.precision != 0) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 640]
  ------------------
 6133|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6133:17): [True: 0, False: 0]
  ------------------
 6134|      0|                return unexpected_scan_error(
 6135|      0|                    scan_error::invalid_scanned_value,
 6136|      0|                    "Too many spaces before value, precision exceeded before "
 6137|      0|                    "reading value");
 6138|      0|            }
 6139|       |
 6140|      0|            const auto initial_width = specs.precision - prefix_width;
 6141|      0|            auto max_width_view =
 6142|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6143|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|            it = w_it.base();
 6145|      0|            value_width = initial_width - w_it.count();
 6146|      0|        }
 6147|    640|        else {
 6148|    640|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3638|    640|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3639|    640|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|    640|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 640, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3640|    640|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3635|    640|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3634|    640|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3633|    640|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3641|    640|    }                                                  \
  |  | 3642|    640|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|    640|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6149|      0|                                             specs, value, loc));
 6150|       |
 6151|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6151:17): [True: 0, False: 0]
  ------------------
 6152|      0|                value_width = calculate_text_width(
 6153|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6154|      0|                        .view());
 6155|      0|            }
 6156|      0|        }
 6157|       |
 6158|       |        // Read postfix
 6159|      0|        std::ptrdiff_t postfix_width = 0;
 6160|      0|        if (it != rng.end()) {
  ------------------
  |  Branch (6160:13): [True: 0, False: 0]
  ------------------
 6161|      0|            SCN_TRY(postfix_result,
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6162|      0|                    impl_postfix(ranges::subrange{it, rng.end()},
 6163|      0|                                 rd.skip_ws_before_read(), prefix_width,
 6164|      0|                                 value_width));
 6165|      0|            std::tie(it, postfix_width) = postfix_result;
 6166|      0|        }
 6167|       |
 6168|      0|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6169|      0|                                                 value_width, postfix_width);
 6170|      0|            !e) {
  ------------------
  |  Branch (6170:13): [True: 0, False: 0]
  ------------------
 6171|      0|            return unexpected(e);
 6172|      0|        }
 6173|       |
 6174|      0|        return it;
 6175|      0|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5796|    576|{
 5797|    576|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    576|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 576]
  |  |  ------------------
  ------------------
 5798|      0|        return unexpected(e);
 5799|      0|    }
 5800|       |
 5801|    576|    if (!is_required) {
  ------------------
  |  Branch (5801:9): [True: 0, False: 576]
  ------------------
 5802|      0|        return range.begin();
 5803|      0|    }
 5804|       |
 5805|    576|    return skip_classic_whitespace(range);
 5806|    576|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5872|    192|    {
 5873|    192|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|    192|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|      0|                          basic_contiguous_scan_context<char_type>>) {
 5877|    192|            auto rd = make_reader<T, char_type>();
 5878|    192|            return impl(rd, range, value);
 5879|    192|        }
 5880|    192|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5880:28): [Folded - Ignored]
  ------------------
 5881|    192|            auto rd = make_reader<T, char_type>();
 5882|    192|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5882:17): [True: 192, False: 0]
  ------------------
 5883|    192|                return impl(rd, range, value);
 5884|    192|            }
 5885|      0|            auto crange = get_as_contiguous(range);
 5886|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5887|      0|            return ranges::next(range.begin(),
 5888|      0|                                ranges::distance(crange.begin(), it));
 5889|      0|        }
 5890|    192|        else {
 5891|    192|            SCN_EXPECT(false);
 5892|    192|            SCN_UNREACHABLE;
 5893|    192|        }
 5894|    192|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5864|    192|    {
 5865|    192|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|    192|                        .transform_error(make_eof_scan_error));
 5867|    192|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|    192|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4153|    192|    {
 4154|    192|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    192|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4155|       |
 4156|    192|        float_reader<CharT> rd{};
 4157|    192|        return read_impl<Range>(
 4158|    192|            range, rd,
 4159|    192|            [](float_reader<CharT>& r, auto&&... args) {
 4160|    192|                return r.read_source(SCN_FWD(args)...);
 4161|    192|            },
 4162|    192|            value);
 4163|    192|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|    192|    {
  754|    192|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|    192|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    192|              cvref<T> obj = *get<T>(fn);
  745|    192|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    192|                  obj(static_cast<decltype(args)>(args)...);
  747|    192|              }
  748|    192|              else {
  749|    192|                  return obj(static_cast<decltype(args)>(args)...);
  750|    192|              }
  751|    192|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    192|    {
  684|    192|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    192|            return static_cast<T*>(s.m_cp);
  686|    192|        }
  687|    192|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    192|            return static_cast<T*>(s.m_p);
  689|    192|        }
  690|    192|        else {
  691|    192|            return reinterpret_cast<T*>(s.m_fp);
  692|    192|        }
  693|    192|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4159|    192|            [](float_reader<CharT>& r, auto&&... args) {
 4160|    192|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4161|    192|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|    192|        {
  662|    192|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5872|    192|    {
 5873|    192|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|    192|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|      0|                          basic_contiguous_scan_context<char_type>>) {
 5877|    192|            auto rd = make_reader<T, char_type>();
 5878|    192|            return impl(rd, range, value);
 5879|    192|        }
 5880|    192|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5880:28): [Folded - Ignored]
  ------------------
 5881|    192|            auto rd = make_reader<T, char_type>();
 5882|    192|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5882:17): [True: 192, False: 0]
  ------------------
 5883|    192|                return impl(rd, range, value);
 5884|    192|            }
 5885|      0|            auto crange = get_as_contiguous(range);
 5886|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5887|      0|            return ranges::next(range.begin(),
 5888|      0|                                ranges::distance(crange.begin(), it));
 5889|      0|        }
 5890|    192|        else {
 5891|    192|            SCN_EXPECT(false);
 5892|    192|            SCN_UNREACHABLE;
 5893|    192|        }
 5894|    192|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5864|    192|    {
 5865|    192|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|    192|                        .transform_error(make_eof_scan_error));
 5867|    192|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|    192|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4153|    192|    {
 4154|    192|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    192|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4155|       |
 4156|    192|        float_reader<CharT> rd{};
 4157|    192|        return read_impl<Range>(
 4158|    192|            range, rd,
 4159|    192|            [](float_reader<CharT>& r, auto&&... args) {
 4160|    192|                return r.read_source(SCN_FWD(args)...);
 4161|    192|            },
 4162|    192|            value);
 4163|    192|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|    192|    {
  754|    192|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|    192|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    192|              cvref<T> obj = *get<T>(fn);
  745|    192|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    192|                  obj(static_cast<decltype(args)>(args)...);
  747|    192|              }
  748|    192|              else {
  749|    192|                  return obj(static_cast<decltype(args)>(args)...);
  750|    192|              }
  751|    192|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    192|    {
  684|    192|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    192|            return static_cast<T*>(s.m_cp);
  686|    192|        }
  687|    192|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    192|            return static_cast<T*>(s.m_p);
  689|    192|        }
  690|    192|        else {
  691|    192|            return reinterpret_cast<T*>(s.m_fp);
  692|    192|        }
  693|    192|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4159|    192|            [](float_reader<CharT>& r, auto&&... args) {
 4160|    192|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4161|    192|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|    192|        {
  662|    192|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5872|    192|    {
 5873|    192|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5873:23): [Folded - Ignored]
  |  Branch (5873:23): [Folded - Ignored]
  ------------------
 5874|    192|                      std::is_same_v<
  ------------------
  |  Branch (5874:23): [Folded - Ignored]
  ------------------
 5875|      0|                          context_type,
 5876|      0|                          basic_contiguous_scan_context<char_type>>) {
 5877|    192|            auto rd = make_reader<T, char_type>();
 5878|    192|            return impl(rd, range, value);
 5879|    192|        }
 5880|    192|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5880:28): [Folded - Ignored]
  ------------------
 5881|    192|            auto rd = make_reader<T, char_type>();
 5882|    192|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5882:17): [True: 192, False: 0]
  ------------------
 5883|    192|                return impl(rd, range, value);
 5884|    192|            }
 5885|      0|            auto crange = get_as_contiguous(range);
 5886|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3643|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5887|      0|            return ranges::next(range.begin(),
 5888|      0|                                ranges::distance(crange.begin(), it));
 5889|      0|        }
 5890|    192|        else {
 5891|    192|            SCN_EXPECT(false);
 5892|    192|            SCN_UNREACHABLE;
 5893|    192|        }
 5894|    192|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5864|    192|    {
 5865|    192|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3643|    192|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3638|    192|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3639|    192|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|    192|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 192]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3640|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3635|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3634|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3633|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3641|      0|    }                                                  \
  |  |  |  | 3642|    192|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5866|    192|                        .transform_error(make_eof_scan_error));
 5867|    192|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5868|    192|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4153|    192|    {
 4154|    192|        SCN_UNUSED(loc);
  ------------------
  |  |  909|    192|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4155|       |
 4156|    192|        float_reader<CharT> rd{};
 4157|    192|        return read_impl<Range>(
 4158|    192|            range, rd,
 4159|    192|            [](float_reader<CharT>& r, auto&&... args) {
 4160|    192|                return r.read_source(SCN_FWD(args)...);
 4161|    192|            },
 4162|    192|            value);
 4163|    192|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_:
  753|    192|    {
  754|    192|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_LPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES17_SB_SH_SI_:
  743|    192|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|    192|              cvref<T> obj = *get<T>(fn);
  745|    192|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|    192|                  obj(static_cast<decltype(args)>(args)...);
  747|    192|              }
  748|    192|              else {
  749|    192|                  return obj(static_cast<decltype(args)>(args)...);
  750|    192|              }
  751|    192|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|    192|    {
  684|    192|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|    192|            return static_cast<T*>(s.m_cp);
  686|    192|        }
  687|    192|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|    192|            return static_cast<T*>(s.m_p);
  689|    192|        }
  690|    192|        else {
  691|    192|            return reinterpret_cast<T*>(s.m_fp);
  692|    192|        }
  693|    192|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4159|    192|            [](float_reader<CharT>& r, auto&&... args) {
 4160|    192|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|    192|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4161|    192|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_LPv0EEEPSM_:
  661|    192|        {
  662|    192|        }

LLVMFuzzerTestOneInput:
   54|     32|{
   55|     32|    scn::fuzz::run(data, size);
   56|     32|    return 0;
   57|     32|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|     32|{
   33|     32|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 32]
  |  Branch (33:35): [True: 0, False: 32]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|     32|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|     32|    const auto& f =
   40|     32|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|     32|    do_basic_run(sv, f);
   42|       |
   43|     32|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|     32|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|     32|    do_basic_run(wsv_reinterpret, wf);
   46|     32|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 32, False: 0]
  ------------------
   47|     32|        do_basic_run(wsv_transcode, wf);
   48|     32|    }
   49|     32|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|     32|{
   25|     32|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|     32|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|     32|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|     32|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|     32|{
   25|     32|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|     32|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|     32|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|     32|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|     64|{
   25|     64|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|     64|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|     64|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|     64|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|     64|{
   25|     64|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|     64|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|     64|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|     64|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|     32|{
   52|     32|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|     32|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|     32|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|     32|    string_buffer.resize(size);
   56|     32|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|     32|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|     32|    const auto wsv_reinterpret_size =
   61|     32|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 0, False: 32]
  ------------------
   62|     32|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|     32|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|     32|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|     32|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|     32|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|     32|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|     32|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|     32|{
  122|     32|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|     32|    auto& buf = get_format_string_view_buffer<CharT>();
  124|     32|    buf.resize(sizeof...(Args));
  125|     32|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|     32|    return buf;
  127|     32|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|     32|{
  108|     32|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|     32|        return format_string_view_buffer;
  110|     32|    }
  111|     32|    else {
  112|     32|        return wformat_string_view_buffer;
  113|     32|    }
  114|     32|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  181|     32|{
  182|     32|    do_basic_run_for_source<CharT>(data, format_strings);
  183|     32|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  184|     32|                                   format_strings);
  185|     32|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|     32|{
  133|       |    // Regular scan
  134|    192|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 192, False: 32]
  ------------------
  135|    192|        auto it = scn::ranges::begin(source);
  136|  15.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  15.7k|            auto result = scn::scan<T>(
  138|  15.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  15.7k|                scn::runtime_format(f));
  140|  15.7k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 192, False: 15.6k]
  ------------------
  141|    192|                break;
  142|    192|            }
  143|  15.6k|            it = result->begin();
  144|  15.6k|        }
  145|    192|    }
  146|       |
  147|       |    // scan localized
  148|    192|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 192, False: 32]
  ------------------
  149|    192|        auto it = scn::ranges::begin(source);
  150|  15.7k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  15.7k|            auto result = scn::scan<T>(
  152|  15.7k|                global_locale,
  153|  15.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  15.7k|                scn::runtime_format(f));
  155|  15.7k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 192, False: 15.6k]
  ------------------
  156|    192|                break;
  157|    192|            }
  158|  15.6k|            it = result->begin();
  159|  15.6k|        }
  160|    192|    }
  161|       |
  162|       |    // scan_value
  163|     32|    {
  164|     32|        auto it = scn::ranges::begin(source);
  165|  3.61k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  3.61k|            auto result = scn::scan_value<T>(
  167|  3.61k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  3.61k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 32, False: 3.58k]
  ------------------
  169|     32|                break;
  170|     32|            }
  171|  3.58k|            it = result->begin();
  172|  3.58k|        }
  173|     32|    }
  174|     32|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|     32|{
  133|       |    // Regular scan
  134|    192|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 192, False: 32]
  ------------------
  135|    192|        auto it = scn::ranges::begin(source);
  136|  20.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  20.7k|            auto result = scn::scan<T>(
  138|  20.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  20.7k|                scn::runtime_format(f));
  140|  20.7k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 192, False: 20.5k]
  ------------------
  141|    192|                break;
  142|    192|            }
  143|  20.5k|            it = result->begin();
  144|  20.5k|        }
  145|    192|    }
  146|       |
  147|       |    // scan localized
  148|    192|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 192, False: 32]
  ------------------
  149|    192|        auto it = scn::ranges::begin(source);
  150|  20.7k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  20.7k|            auto result = scn::scan<T>(
  152|  20.7k|                global_locale,
  153|  20.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  20.7k|                scn::runtime_format(f));
  155|  20.7k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 192, False: 20.5k]
  ------------------
  156|    192|                break;
  157|    192|            }
  158|  20.5k|            it = result->begin();
  159|  20.5k|        }
  160|    192|    }
  161|       |
  162|       |    // scan_value
  163|     32|    {
  164|     32|        auto it = scn::ranges::begin(source);
  165|  5.20k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  5.20k|            auto result = scn::scan_value<T>(
  167|  5.20k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  5.20k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 32, False: 5.16k]
  ------------------
  169|     32|                break;
  170|     32|            }
  171|  5.16k|            it = result->begin();
  172|  5.16k|        }
  173|     32|    }
  174|     32|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|     32|{
  133|       |    // Regular scan
  134|    192|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 192, False: 32]
  ------------------
  135|    192|        auto it = scn::ranges::begin(source);
  136|  20.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  20.7k|            auto result = scn::scan<T>(
  138|  20.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  20.7k|                scn::runtime_format(f));
  140|  20.7k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 192, False: 20.5k]
  ------------------
  141|    192|                break;
  142|    192|            }
  143|  20.5k|            it = result->begin();
  144|  20.5k|        }
  145|    192|    }
  146|       |
  147|       |    // scan localized
  148|    192|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 192, False: 32]
  ------------------
  149|    192|        auto it = scn::ranges::begin(source);
  150|  20.7k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  20.7k|            auto result = scn::scan<T>(
  152|  20.7k|                global_locale,
  153|  20.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  20.7k|                scn::runtime_format(f));
  155|  20.7k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 192, False: 20.5k]
  ------------------
  156|    192|                break;
  157|    192|            }
  158|  20.5k|            it = result->begin();
  159|  20.5k|        }
  160|    192|    }
  161|       |
  162|       |    // scan_value
  163|     32|    {
  164|     32|        auto it = scn::ranges::begin(source);
  165|  5.20k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  5.20k|            auto result = scn::scan_value<T>(
  167|  5.20k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  5.20k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 32, False: 5.16k]
  ------------------
  169|     32|                break;
  170|     32|            }
  171|  5.16k|            it = result->begin();
  172|  5.16k|        }
  173|     32|    }
  174|     32|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|     32|{
  133|       |    // Regular scan
  134|    192|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 192, False: 32]
  ------------------
  135|    192|        auto it = scn::ranges::begin(source);
  136|  14.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  14.8k|            auto result = scn::scan<T>(
  138|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  14.8k|                scn::runtime_format(f));
  140|  14.8k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 192, False: 14.6k]
  ------------------
  141|    192|                break;
  142|    192|            }
  143|  14.6k|            it = result->begin();
  144|  14.6k|        }
  145|    192|    }
  146|       |
  147|       |    // scan localized
  148|    192|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 192, False: 32]
  ------------------
  149|    192|        auto it = scn::ranges::begin(source);
  150|  14.8k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  14.8k|            auto result = scn::scan<T>(
  152|  14.8k|                global_locale,
  153|  14.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  14.8k|                scn::runtime_format(f));
  155|  14.8k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 192, False: 14.6k]
  ------------------
  156|    192|                break;
  157|    192|            }
  158|  14.6k|            it = result->begin();
  159|  14.6k|        }
  160|    192|    }
  161|       |
  162|       |    // scan_value
  163|     32|    {
  164|     32|        auto it = scn::ranges::begin(source);
  165|  2.65k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  2.65k|            auto result = scn::scan_value<T>(
  167|  2.65k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  2.65k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 32, False: 2.61k]
  ------------------
  169|     32|                break;
  170|     32|            }
  171|  2.61k|            it = result->begin();
  172|  2.61k|        }
  173|     32|    }
  174|     32|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|     32|{
  133|       |    // Regular scan
  134|    192|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 192, False: 32]
  ------------------
  135|    192|        auto it = scn::ranges::begin(source);
  136|  19.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  19.8k|            auto result = scn::scan<T>(
  138|  19.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  19.8k|                scn::runtime_format(f));
  140|  19.8k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 192, False: 19.6k]
  ------------------
  141|    192|                break;
  142|    192|            }
  143|  19.6k|            it = result->begin();
  144|  19.6k|        }
  145|    192|    }
  146|       |
  147|       |    // scan localized
  148|    192|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 192, False: 32]
  ------------------
  149|    192|        auto it = scn::ranges::begin(source);
  150|  19.8k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  19.8k|            auto result = scn::scan<T>(
  152|  19.8k|                global_locale,
  153|  19.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  19.8k|                scn::runtime_format(f));
  155|  19.8k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 192, False: 19.6k]
  ------------------
  156|    192|                break;
  157|    192|            }
  158|  19.6k|            it = result->begin();
  159|  19.6k|        }
  160|    192|    }
  161|       |
  162|       |    // scan_value
  163|     32|    {
  164|     32|        auto it = scn::ranges::begin(source);
  165|  4.23k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  4.23k|            auto result = scn::scan_value<T>(
  167|  4.23k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  4.23k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 32, False: 4.20k]
  ------------------
  169|     32|                break;
  170|     32|            }
  171|  4.20k|            it = result->begin();
  172|  4.20k|        }
  173|     32|    }
  174|     32|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|     32|{
  133|       |    // Regular scan
  134|    192|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 192, False: 32]
  ------------------
  135|    192|        auto it = scn::ranges::begin(source);
  136|  19.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  19.8k|            auto result = scn::scan<T>(
  138|  19.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|  19.8k|                scn::runtime_format(f));
  140|  19.8k|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 192, False: 19.6k]
  ------------------
  141|    192|                break;
  142|    192|            }
  143|  19.6k|            it = result->begin();
  144|  19.6k|        }
  145|    192|    }
  146|       |
  147|       |    // scan localized
  148|    192|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 192, False: 32]
  ------------------
  149|    192|        auto it = scn::ranges::begin(source);
  150|  19.8k|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|  19.8k|            auto result = scn::scan<T>(
  152|  19.8k|                global_locale,
  153|  19.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|  19.8k|                scn::runtime_format(f));
  155|  19.8k|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 192, False: 19.6k]
  ------------------
  156|    192|                break;
  157|    192|            }
  158|  19.6k|            it = result->begin();
  159|  19.6k|        }
  160|    192|    }
  161|       |
  162|       |    // scan_value
  163|     32|    {
  164|     32|        auto it = scn::ranges::begin(source);
  165|  4.23k|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|  4.23k|            auto result = scn::scan_value<T>(
  167|  4.23k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|  4.23k|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 32, False: 4.20k]
  ------------------
  169|     32|                break;
  170|     32|            }
  171|  4.20k|            it = result->begin();
  172|  4.20k|        }
  173|     32|    }
  174|     32|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|     32|{
   90|     32|    using char_type = ranges::range_value_t<Source>;
   91|     32|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|     32|    deque.clear();
   93|     32|    std::copy(ranges::begin(source), ranges::end(source),
   94|     32|              std::back_inserter(deque));
   95|     32|    return deque;
   96|     32|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|     32|{
   79|     32|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|     32|        return noncontiguous_buffer;
   81|     32|    }
   82|     32|    else {
   83|     32|        return wnoncontiguous_buffer;
   84|     32|    }
   85|     32|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|     32|{
  122|     32|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|     32|    auto& buf = get_format_string_view_buffer<CharT>();
  124|     32|    buf.resize(sizeof...(Args));
  125|     32|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|     32|    return buf;
  127|     32|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|     32|{
  108|     32|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|     32|        return format_string_view_buffer;
  110|     32|    }
  111|     32|    else {
  112|     32|        return wformat_string_view_buffer;
  113|     32|    }
  114|     32|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  181|     64|{
  182|     64|    do_basic_run_for_source<CharT>(data, format_strings);
  183|     64|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  184|     64|                                   format_strings);
  185|     64|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|     64|{
  133|       |    // Regular scan
  134|    384|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 384, False: 64]
  ------------------
  135|    384|        auto it = scn::ranges::begin(source);
  136|    384|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|    384|            auto result = scn::scan<T>(
  138|    384|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|    384|                scn::runtime_format(f));
  140|    384|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 384, False: 0]
  ------------------
  141|    384|                break;
  142|    384|            }
  143|      0|            it = result->begin();
  144|      0|        }
  145|    384|    }
  146|       |
  147|       |    // scan localized
  148|    384|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 384, False: 64]
  ------------------
  149|    384|        auto it = scn::ranges::begin(source);
  150|    384|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|    384|            auto result = scn::scan<T>(
  152|    384|                global_locale,
  153|    384|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|    384|                scn::runtime_format(f));
  155|    384|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 384, False: 0]
  ------------------
  156|    384|                break;
  157|    384|            }
  158|      0|            it = result->begin();
  159|      0|        }
  160|    384|    }
  161|       |
  162|       |    // scan_value
  163|     64|    {
  164|     64|        auto it = scn::ranges::begin(source);
  165|     64|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|     64|            auto result = scn::scan_value<T>(
  167|     64|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|     64|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 64, False: 0]
  ------------------
  169|     64|                break;
  170|     64|            }
  171|      0|            it = result->begin();
  172|      0|        }
  173|     64|    }
  174|     64|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|     64|{
  133|       |    // Regular scan
  134|    384|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 384, False: 64]
  ------------------
  135|    384|        auto it = scn::ranges::begin(source);
  136|    384|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|    384|            auto result = scn::scan<T>(
  138|    384|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|    384|                scn::runtime_format(f));
  140|    384|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 384, False: 0]
  ------------------
  141|    384|                break;
  142|    384|            }
  143|      0|            it = result->begin();
  144|      0|        }
  145|    384|    }
  146|       |
  147|       |    // scan localized
  148|    384|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 384, False: 64]
  ------------------
  149|    384|        auto it = scn::ranges::begin(source);
  150|    384|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|    384|            auto result = scn::scan<T>(
  152|    384|                global_locale,
  153|    384|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|    384|                scn::runtime_format(f));
  155|    384|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 384, False: 0]
  ------------------
  156|    384|                break;
  157|    384|            }
  158|      0|            it = result->begin();
  159|      0|        }
  160|    384|    }
  161|       |
  162|       |    // scan_value
  163|     64|    {
  164|     64|        auto it = scn::ranges::begin(source);
  165|     64|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|     64|            auto result = scn::scan_value<T>(
  167|     64|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|     64|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 64, False: 0]
  ------------------
  169|     64|                break;
  170|     64|            }
  171|      0|            it = result->begin();
  172|      0|        }
  173|     64|    }
  174|     64|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|     64|{
  133|       |    // Regular scan
  134|    384|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 384, False: 64]
  ------------------
  135|    384|        auto it = scn::ranges::begin(source);
  136|    384|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|    384|            auto result = scn::scan<T>(
  138|    384|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|    384|                scn::runtime_format(f));
  140|    384|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 384, False: 0]
  ------------------
  141|    384|                break;
  142|    384|            }
  143|      0|            it = result->begin();
  144|      0|        }
  145|    384|    }
  146|       |
  147|       |    // scan localized
  148|    384|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 384, False: 64]
  ------------------
  149|    384|        auto it = scn::ranges::begin(source);
  150|    384|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|    384|            auto result = scn::scan<T>(
  152|    384|                global_locale,
  153|    384|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|    384|                scn::runtime_format(f));
  155|    384|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 384, False: 0]
  ------------------
  156|    384|                break;
  157|    384|            }
  158|      0|            it = result->begin();
  159|      0|        }
  160|    384|    }
  161|       |
  162|       |    // scan_value
  163|     64|    {
  164|     64|        auto it = scn::ranges::begin(source);
  165|     64|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|     64|            auto result = scn::scan_value<T>(
  167|     64|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|     64|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 64, False: 0]
  ------------------
  169|     64|                break;
  170|     64|            }
  171|      0|            it = result->begin();
  172|      0|        }
  173|     64|    }
  174|     64|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|     64|{
  133|       |    // Regular scan
  134|    384|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 384, False: 64]
  ------------------
  135|    384|        auto it = scn::ranges::begin(source);
  136|    384|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|    384|            auto result = scn::scan<T>(
  138|    384|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|    384|                scn::runtime_format(f));
  140|    384|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 384, False: 0]
  ------------------
  141|    384|                break;
  142|    384|            }
  143|      0|            it = result->begin();
  144|      0|        }
  145|    384|    }
  146|       |
  147|       |    // scan localized
  148|    384|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 384, False: 64]
  ------------------
  149|    384|        auto it = scn::ranges::begin(source);
  150|    384|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|    384|            auto result = scn::scan<T>(
  152|    384|                global_locale,
  153|    384|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|    384|                scn::runtime_format(f));
  155|    384|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 384, False: 0]
  ------------------
  156|    384|                break;
  157|    384|            }
  158|      0|            it = result->begin();
  159|      0|        }
  160|    384|    }
  161|       |
  162|       |    // scan_value
  163|     64|    {
  164|     64|        auto it = scn::ranges::begin(source);
  165|     64|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|     64|            auto result = scn::scan_value<T>(
  167|     64|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|     64|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 64, False: 0]
  ------------------
  169|     64|                break;
  170|     64|            }
  171|      0|            it = result->begin();
  172|      0|        }
  173|     64|    }
  174|     64|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|     64|{
  133|       |    // Regular scan
  134|    384|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 384, False: 64]
  ------------------
  135|    384|        auto it = scn::ranges::begin(source);
  136|    384|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|    384|            auto result = scn::scan<T>(
  138|    384|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|    384|                scn::runtime_format(f));
  140|    384|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 384, False: 0]
  ------------------
  141|    384|                break;
  142|    384|            }
  143|      0|            it = result->begin();
  144|      0|        }
  145|    384|    }
  146|       |
  147|       |    // scan localized
  148|    384|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 384, False: 64]
  ------------------
  149|    384|        auto it = scn::ranges::begin(source);
  150|    384|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|    384|            auto result = scn::scan<T>(
  152|    384|                global_locale,
  153|    384|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|    384|                scn::runtime_format(f));
  155|    384|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 384, False: 0]
  ------------------
  156|    384|                break;
  157|    384|            }
  158|      0|            it = result->begin();
  159|      0|        }
  160|    384|    }
  161|       |
  162|       |    // scan_value
  163|     64|    {
  164|     64|        auto it = scn::ranges::begin(source);
  165|     64|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|     64|            auto result = scn::scan_value<T>(
  167|     64|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|     64|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 64, False: 0]
  ------------------
  169|     64|                break;
  170|     64|            }
  171|      0|            it = result->begin();
  172|      0|        }
  173|     64|    }
  174|     64|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|     64|{
  133|       |    // Regular scan
  134|    384|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 384, False: 64]
  ------------------
  135|    384|        auto it = scn::ranges::begin(source);
  136|    384|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|    384|            auto result = scn::scan<T>(
  138|    384|                scn::ranges::subrange{it, scn::ranges::end(source)},
  139|    384|                scn::runtime_format(f));
  140|    384|            if (!result) {
  ------------------
  |  Branch (140:17): [True: 384, False: 0]
  ------------------
  141|    384|                break;
  142|    384|            }
  143|      0|            it = result->begin();
  144|      0|        }
  145|    384|    }
  146|       |
  147|       |    // scan localized
  148|    384|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (148:24): [True: 384, False: 64]
  ------------------
  149|    384|        auto it = scn::ranges::begin(source);
  150|    384|        while (true) {
  ------------------
  |  Branch (150:16): [Folded - Ignored]
  ------------------
  151|    384|            auto result = scn::scan<T>(
  152|    384|                global_locale,
  153|    384|                scn::ranges::subrange{it, scn::ranges::end(source)},
  154|    384|                scn::runtime_format(f));
  155|    384|            if (!result) {
  ------------------
  |  Branch (155:17): [True: 384, False: 0]
  ------------------
  156|    384|                break;
  157|    384|            }
  158|      0|            it = result->begin();
  159|      0|        }
  160|    384|    }
  161|       |
  162|       |    // scan_value
  163|     64|    {
  164|     64|        auto it = scn::ranges::begin(source);
  165|     64|        while (true) {
  ------------------
  |  Branch (165:16): [Folded - Ignored]
  ------------------
  166|     64|            auto result = scn::scan_value<T>(
  167|     64|                scn::ranges::subrange{it, scn::ranges::end(source)});
  168|     64|            if (!result) {
  ------------------
  |  Branch (168:17): [True: 64, False: 0]
  ------------------
  169|     64|                break;
  170|     64|            }
  171|      0|            it = result->begin();
  172|      0|        }
  173|     64|    }
  174|     64|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|     64|{
   90|     64|    using char_type = ranges::range_value_t<Source>;
   91|     64|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|     64|    deque.clear();
   93|     64|    std::copy(ranges::begin(source), ranges::end(source),
   94|     64|              std::back_inserter(deque));
   95|     64|    return deque;
   96|     64|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|     64|{
   79|     64|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|     64|        return noncontiguous_buffer;
   81|     64|    }
   82|     64|    else {
   83|     64|        return wnoncontiguous_buffer;
   84|     64|    }
   85|     64|}

