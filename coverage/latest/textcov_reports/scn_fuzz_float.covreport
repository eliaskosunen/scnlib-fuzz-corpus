_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|  1.28M|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|  1.28M|  chars_format const fmt = options.format;
  277|  1.28M|  UC const decimal_point = options.decimal_point;
  278|       |
  279|  1.28M|  parsed_number_string_t<UC> answer;
  280|  1.28M|  answer.valid = false;
  281|  1.28M|  answer.too_many_digits = false;
  282|  1.28M|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|  1.28M|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 1.28M]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|  1.28M|  UC const * const start_digits = p;
  303|       |
  304|  1.28M|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  7.26M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 6.61M, False: 655k]
  |  Branch (306:25): [True: 5.98M, False: 630k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  5.98M|    i = 10 * i +
  310|  5.98M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  5.98M|    ++p;
  312|  5.98M|  }
  313|  1.28M|  UC const * const end_of_integer_part = p;
  314|  1.28M|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|  1.28M|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|  1.28M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.28M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 1.28M]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|  1.28M|  int64_t exponent = 0;
  324|  1.28M|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 630k, False: 655k]
  |  Branch (324:49): [True: 239k, False: 391k]
  ------------------
  325|  1.28M|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 239k, False: 1.04M]
  ------------------
  326|   239k|    ++p;
  327|   239k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   239k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|   979k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 827k, False: 151k]
  |  Branch (332:27): [True: 739k, False: 87.6k]
  ------------------
  333|   739k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   739k|      ++p;
  335|   739k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   739k|    }
  337|   239k|    exponent = before - p;
  338|   239k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   239k|    digit_count -= exponent;
  340|   239k|  }
  341|  1.28M|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|  1.28M|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 1.28M]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|  1.28M|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 1.28M]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|  1.28M|  int64_t exp_number = 0;            // explicit exponential part
  351|  1.28M|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 1.10M, False: 183k]
  ------------------
  352|  1.28M|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 479k, False: 623k]
  ------------------
  353|  1.28M|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 95.1k, False: 383k]
  |  Branch (353:29): [True: 60.4k, False: 323k]
  ------------------
  354|  1.28M|       ||
  355|  1.28M|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|  1.13M|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 1.13M]
  ------------------
  356|  1.13M|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|  1.13M|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   155k|    UC const * location_of_e = p;
  359|   155k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 95.1k, False: 60.4k]
  |  Branch (359:28): [True: 60.4k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   155k|      ++p;
  361|   155k|    }
  362|   155k|    bool neg_exp = false;
  363|   155k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 155k, False: 125]
  |  Branch (363:24): [True: 8.98k, False: 146k]
  ------------------
  364|  8.98k|      neg_exp = true;
  365|  8.98k|      ++p;
  366|   146k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 146k, False: 125]
  |  Branch (366:31): [True: 36.8k, False: 109k]
  ------------------
  367|  36.8k|      ++p;
  368|  36.8k|    }
  369|   155k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 175, False: 155k]
  |  Branch (369:24): [True: 615, False: 154k]
  ------------------
  370|    790|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 790]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    790|      p = location_of_e;
  376|   154k|    } else {
  377|   496k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 382k, False: 113k]
  |  Branch (377:29): [True: 341k, False: 40.7k]
  ------------------
  378|   341k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   341k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 311k, False: 30.2k]
  ------------------
  380|   311k|          exp_number = 10 * exp_number + digit;
  381|   311k|        }
  382|   341k|        ++p;
  383|   341k|      }
  384|   154k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 8.94k, False: 145k]
  ------------------
  385|   154k|      exponent += exp_number;
  386|   154k|    }
  387|  1.13M|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|  1.13M|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 946k, False: 183k]
  |  Branch (389:44): [True: 0, False: 946k]
  ------------------
  390|  1.13M|  }
  391|  1.28M|  answer.lastmatch = p;
  392|  1.28M|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|  1.28M|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 227k, False: 1.05M]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   227k|    UC const * start = start_digits;
  405|   914k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 912k, False: 1.96k]
  |  Branch (405:32): [True: 679k, False: 233k]
  |  Branch (405:53): [True: 8.01k, False: 225k]
  ------------------
  406|   687k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 679k, False: 8.01k]
  ------------------
  407|   687k|      start++;
  408|   687k|    }
  409|       |
  410|   227k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 214k, False: 12.9k]
  ------------------
  411|   214k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   214k|      i = 0;
  416|   214k|      p = answer.integer.ptr;
  417|   214k|      UC const* int_end = p + answer.integer.len();
  418|   214k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  2.41M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 2.34M, False: 67.0k]
  |  Branch (419:54): [True: 2.20M, False: 147k]
  ------------------
  420|  2.20M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  2.20M|        ++p;
  422|  2.20M|      }
  423|   214k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 67.0k, False: 147k]
  ------------------
  424|  67.0k|        exponent = end_of_integer_part - p + exp_number;
  425|  67.0k|      }
  426|   147k|      else { // We have a value with a fractional component.
  427|   147k|        p = answer.fraction.ptr;
  428|   147k|        UC const* frac_end = p + answer.fraction.len();
  429|  2.49M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 2.35M, False: 147k]
  |  Branch (429:56): [True: 2.35M, False: 0]
  ------------------
  430|  2.35M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  2.35M|          ++p;
  432|  2.35M|        }
  433|   147k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   147k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   214k|    }
  437|   227k|  }
  438|  1.28M|  answer.exponent = exponent;
  439|  1.28M|  answer.mantissa = i;
  440|  1.28M|  return answer;
  441|  1.28M|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  7.97M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  7.97M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 178k, False: 7.79M]
  |  Branch (36:27): [True: 580k, False: 7.21M]
  ------------------
   37|  7.97M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   239k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   844k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 676k, False: 168k]
  |  Branch (249:43): [True: 605k, False: 71.2k]
  ------------------
  250|   605k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   605k|    p += 8;
  252|   605k|  }
  253|   239k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   676k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   676k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   676k|     0x8080808080808080));
  172|   676k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.53M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.53M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.53M|  uint64_t val;
   63|  1.53M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.53M|  return val;
   69|  1.53M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|   859k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|   859k|  const uint64_t mask = 0x000000FF000000FF;
  148|   859k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|   859k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|   859k|  val -= 0x3030303030303030;
  151|   859k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|   859k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|   859k|  return uint32_t(val);
  154|   859k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   254k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   254k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   254k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   254k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   254k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   473k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   473k|  chars_format const fmt = options.format;
  277|   473k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   473k|  parsed_number_string_t<UC> answer;
  280|   473k|  answer.valid = false;
  281|   473k|  answer.too_many_digits = false;
  282|   473k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   473k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 473k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   473k|  UC const * const start_digits = p;
  303|       |
  304|   473k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  1.01M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 688k, False: 323k]
  |  Branch (306:25): [True: 537k, False: 150k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   537k|    i = 10 * i +
  310|   537k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   537k|    ++p;
  312|   537k|  }
  313|   473k|  UC const * const end_of_integer_part = p;
  314|   473k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   473k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   473k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   473k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 473k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   473k|  int64_t exponent = 0;
  324|   473k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 150k, False: 323k]
  |  Branch (324:49): [True: 2.11k, False: 148k]
  ------------------
  325|   473k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 2.11k, False: 471k]
  ------------------
  326|  2.11k|    ++p;
  327|  2.11k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|  2.11k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  13.0k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 11.5k, False: 1.46k]
  |  Branch (332:27): [True: 10.9k, False: 647]
  ------------------
  333|  10.9k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  10.9k|      ++p;
  335|  10.9k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  10.9k|    }
  337|  2.11k|    exponent = before - p;
  338|  2.11k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|  2.11k|    digit_count -= exponent;
  340|  2.11k|  }
  341|   473k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   473k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 473k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   473k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 473k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   473k|  int64_t exp_number = 0;            // explicit exponential part
  351|   473k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 383k, False: 90.3k]
  ------------------
  352|   473k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 148k, False: 234k]
  ------------------
  353|   473k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 189, False: 148k]
  |  Branch (353:29): [True: 15.1k, False: 133k]
  ------------------
  354|   473k|       ||
  355|   473k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   458k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 458k]
  ------------------
  356|   458k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   458k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  15.3k|    UC const * location_of_e = p;
  359|  15.3k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 189, False: 15.1k]
  |  Branch (359:28): [True: 15.1k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  15.3k|      ++p;
  361|  15.3k|    }
  362|  15.3k|    bool neg_exp = false;
  363|  15.3k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 15.3k, False: 20]
  |  Branch (363:24): [True: 3.92k, False: 11.3k]
  ------------------
  364|  3.92k|      neg_exp = true;
  365|  3.92k|      ++p;
  366|  11.4k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 11.3k, False: 20]
  |  Branch (366:31): [True: 293, False: 11.1k]
  ------------------
  367|    293|      ++p;
  368|    293|    }
  369|  15.3k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 30, False: 15.3k]
  |  Branch (369:24): [True: 500, False: 14.8k]
  ------------------
  370|    530|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 530]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    530|      p = location_of_e;
  376|  14.8k|    } else {
  377|  56.1k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 45.8k, False: 10.2k]
  |  Branch (377:29): [True: 41.2k, False: 4.60k]
  ------------------
  378|  41.2k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  41.2k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 38.3k, False: 2.93k]
  ------------------
  380|  38.3k|          exp_number = 10 * exp_number + digit;
  381|  38.3k|        }
  382|  41.2k|        ++p;
  383|  41.2k|      }
  384|  14.8k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 3.88k, False: 10.9k]
  ------------------
  385|  14.8k|      exponent += exp_number;
  386|  14.8k|    }
  387|   458k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   458k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 367k, False: 90.3k]
  |  Branch (389:44): [True: 0, False: 367k]
  ------------------
  390|   458k|  }
  391|   473k|  answer.lastmatch = p;
  392|   473k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   473k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 924, False: 472k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|    924|    UC const * start = start_digits;
  405|  1.28k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 1.28k, False: 0]
  |  Branch (405:32): [True: 356, False: 924]
  |  Branch (405:53): [True: 0, False: 924]
  ------------------
  406|    356|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 356, False: 0]
  ------------------
  407|    356|      start++;
  408|    356|    }
  409|       |
  410|    924|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 724, False: 200]
  ------------------
  411|    724|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|    724|      i = 0;
  416|    724|      p = answer.integer.ptr;
  417|    724|      UC const* int_end = p + answer.integer.len();
  418|    724|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  11.3k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 10.9k, False: 436]
  |  Branch (419:54): [True: 10.6k, False: 288]
  ------------------
  420|  10.6k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  10.6k|        ++p;
  422|  10.6k|      }
  423|    724|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 436, False: 288]
  ------------------
  424|    436|        exponent = end_of_integer_part - p + exp_number;
  425|    436|      }
  426|    288|      else { // We have a value with a fractional component.
  427|    288|        p = answer.fraction.ptr;
  428|    288|        UC const* frac_end = p + answer.fraction.len();
  429|  3.49k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 3.20k, False: 288]
  |  Branch (429:56): [True: 3.20k, False: 0]
  ------------------
  430|  3.20k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  3.20k|          ++p;
  432|  3.20k|        }
  433|    288|        exponent = answer.fraction.ptr - p + exp_number;
  434|    288|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|    724|    }
  437|    924|  }
  438|   473k|  answer.exponent = exponent;
  439|   473k|  answer.mantissa = i;
  440|   473k|  return answer;
  441|   473k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   760k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   760k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 152k, False: 608k]
  |  Branch (36:27): [True: 3.19k, False: 604k]
  ------------------
   37|   760k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiTnNSt3__19enable_ifIXntsr3std7is_sameIT_cEE5valueEiE4typeELi0EEEvRPKS3_S7_Rm:
  237|  2.11k|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|  2.11k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|  2.11k|    return;
  240|  2.11k|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}

_ZN10fast_float6bigintC2Ev:
  412|  68.9k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   146k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   228k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   228k|    return small_mul(vec, y);
  565|   228k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   334k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   334k|  limb carry = 0;
  284|  1.27M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 941k, False: 334k]
  ------------------
  285|   941k|    vec[index] = scalar_mul(vec[index], y, carry);
  286|   941k|  }
  287|   334k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 190k, False: 143k]
  ------------------
  288|   190k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   190k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 190k]
  |  |  ------------------
  ------------------
  289|   190k|  }
  290|   334k|  return true;
  291|   334k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  2.50M|  constexpr size_t len() const noexcept {
   77|  2.50M|    return length;
   78|  2.50M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|   941k|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|   941k|#ifdef FASTFLOAT_64BIT_LIMB
  231|   941k|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|   941k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|   941k|  carry = limb(z >> limb_bits);
  235|   941k|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|   941k|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  2.61M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  2.61M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  2.61M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  2.61M|    return data[index];
   60|  2.61M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   275k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   275k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 275k, False: 0]
  ------------------
   93|   275k|      push_unchecked(value);
   94|   275k|      return true;
   95|   275k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   275k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   314k|  constexpr size_t capacity() const noexcept {
   83|   314k|    return size;
   84|   314k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   338k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   338k|    data[length] = value;
   88|   338k|    length++;
   89|   338k|  }
_ZN10fast_float6bigint3addEm:
  567|   228k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   228k|    return small_add(vec, y);
  569|   228k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   228k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   228k|  return small_add_from(vec, y, 0);
  277|   228k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   228k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   228k|  size_t index = start;
  259|   228k|  limb carry = y;
  260|   228k|  bool overflow;
  261|   348k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 189k, False: 159k]
  |  Branch (261:24): [True: 120k, False: 68.9k]
  ------------------
  262|   120k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|   120k|    carry = limb(overflow);
  264|   120k|    index += 1;
  265|   120k|  }
  266|   228k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 68.9k, False: 159k]
  ------------------
  267|  68.9k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  68.9k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 68.9k]
  |  |  ------------------
  ------------------
  268|  68.9k|  }
  269|   228k|  return true;
  270|   228k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   265k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   265k|  limb z;
  211|       |// gcc and clang
  212|   265k|#if defined(__has_builtin)
  213|   265k|  #if __has_builtin(__builtin_add_overflow)
  214|   265k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   265k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   265k|      return z;
  217|   265k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   265k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  5.76k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  5.76k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  5.76k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 5.76k]
  |  |  ------------------
  ------------------
  611|  5.76k|    return pow2(exp);
  612|  5.76k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  68.9k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  68.9k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  68.9k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  72.5k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 3.60k, False: 68.9k]
  ------------------
  582|  3.60k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.60k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.60k]
  |  |  ------------------
  ------------------
  583|  3.60k|      exp -= large_step;
  584|  3.60k|    }
  585|  68.9k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  68.9k|    uint32_t small_step = 27;
  587|  68.9k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|  97.5k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 28.6k, False: 68.9k]
  ------------------
  593|  28.6k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  28.6k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 28.6k]
  |  |  ------------------
  ------------------
  594|  28.6k|      exp -= small_step;
  595|  28.6k|    }
  596|  68.9k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 59.2k, False: 9.68k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  59.2k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  59.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 59.2k]
  |  |  ------------------
  ------------------
  601|  59.2k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  59.2k|      );
  603|  59.2k|    }
  604|       |
  605|  68.9k|    return true;
  606|  68.9k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  3.60k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  3.60k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 3.60k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  3.60k|  } else {
  368|  3.60k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.60k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.60k]
  |  |  ------------------
  ------------------
  369|  3.60k|  }
  370|  3.60k|  return true;
  371|  3.60k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  3.60k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  3.60k|  limb_span xs = limb_span(x.data, x.len());
  337|  3.60k|  stackvec<size> z(xs);
  338|  3.60k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  3.60k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 3.60k, False: 0]
  ------------------
  341|  3.60k|    limb y0 = y[0];
  342|  3.60k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.60k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.60k]
  |  |  ------------------
  ------------------
  343|  18.0k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 14.4k, False: 3.60k]
  ------------------
  344|  14.4k|      limb yi = y[index];
  345|  14.4k|      stackvec<size> zi;
  346|  14.4k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 14.4k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  14.4k|        zi.set_len(0);
  349|  14.4k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  14.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
  350|  14.4k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  14.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
  351|  14.4k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  14.4k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  14.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
  353|  14.4k|      }
  354|  14.4k|    }
  355|  3.60k|  }
  356|       |
  357|  3.60k|  x.normalize();
  358|  3.60k|  return true;
  359|  3.60k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  3.60k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  3.60k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  3.60k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  3.60k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  53.8k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  53.8k|    length = uint16_t(len);
   75|  53.8k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  18.0k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  18.0k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 18.0k, False: 0]
  ------------------
  108|  18.0k|      extend_unchecked(s);
  109|  18.0k|      return true;
  110|  18.0k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  18.0k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  18.0k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  18.0k|    limb* ptr = data + length;
  102|  18.0k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  18.0k|    set_len(len() + s.len());
  104|  18.0k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  14.4k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  14.4k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 14.4k]
  |  Branch (300:26): [True: 14.1k, False: 214]
  ------------------
  301|  14.1k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  14.1k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 14.1k]
  |  |  ------------------
  ------------------
  302|  14.1k|  }
  303|       |
  304|  14.4k|  bool carry = false;
  305|   120k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 105k, False: 14.4k]
  ------------------
  306|   105k|    limb xi = x[index + start];
  307|   105k|    limb yi = y[index];
  308|   105k|    bool c1 = false;
  309|   105k|    bool c2 = false;
  310|   105k|    xi = scalar_add(xi, yi, c1);
  311|   105k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 39.8k, False: 65.8k]
  ------------------
  312|  39.8k|      xi = scalar_add(xi, 1, c2);
  313|  39.8k|    }
  314|   105k|    x[index + start] = xi;
  315|   105k|    carry = c1 | c2;
  316|   105k|  }
  317|       |
  318|       |  // handle overflow
  319|  14.4k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 14.4k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  14.4k|  return true;
  323|  14.4k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  14.1k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  14.1k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 14.1k]
  ------------------
  132|      0|      return false;
  133|  14.1k|    } else {
  134|  14.1k|      resize_unchecked(new_len, value);
  135|  14.1k|      return true;
  136|  14.1k|    }
  137|  14.1k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  14.1k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  14.1k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 14.1k, False: 0]
  ------------------
  120|  14.1k|      size_t count = new_len - len();
  121|  14.1k|      limb* first = data + len();
  122|  14.1k|      limb* last = first + count;
  123|  14.1k|      ::std::fill(first, last, value);
  124|  14.1k|      set_len(new_len);
  125|  14.1k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  14.1k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  66.7k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  66.7k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 66.7k, False: 0]
  |  Branch (152:25): [True: 0, False: 66.7k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  66.7k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|  83.5k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|  83.5k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  83.5k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|  83.5k|    size_t rindex = length - index - 1;
   69|  83.5k|    return data[rindex];
   70|  83.5k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  68.8k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  68.8k|    return shl(exp);
  574|  68.8k|  }
_ZN10fast_float6bigint3shlEm:
  530|  68.8k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  68.8k|    size_t rem = n % limb_bits;
  532|  68.8k|    size_t div = n / limb_bits;
  533|  68.8k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 63.2k, False: 5.60k]
  ------------------
  534|  63.2k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  63.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 63.2k]
  |  |  ------------------
  ------------------
  535|  63.2k|    }
  536|  68.8k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 7.31k, False: 61.5k]
  ------------------
  537|  7.31k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  7.31k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 7.31k]
  |  |  ------------------
  ------------------
  538|  7.31k|    }
  539|  68.8k|    return true;
  540|  68.8k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  63.2k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  63.2k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  63.2k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  63.2k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  63.2k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  63.2k|    size_t shl = n;
  493|  63.2k|    size_t shr = limb_bits - shl;
  494|  63.2k|    limb prev = 0;
  495|   204k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 140k, False: 63.2k]
  ------------------
  496|   140k|      limb xi = vec[index];
  497|   140k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   140k|      prev = xi;
  499|   140k|    }
  500|       |
  501|  63.2k|    limb carry = prev >> shr;
  502|  63.2k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 15.9k, False: 47.2k]
  ------------------
  503|  15.9k|      return vec.try_push(carry);
  504|  15.9k|    }
  505|  47.2k|    return true;
  506|  63.2k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  7.31k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  7.31k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  7.31k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  7.31k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 7.31k]
  ------------------
  512|      0|      return false;
  513|  7.31k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 7.31k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  7.31k|      limb* dst = vec.data + n;
  516|  7.31k|      const limb* src = vec.data;
  517|  7.31k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  7.31k|      limb* first = vec.data;
  520|  7.31k|      limb* last = first + n;
  521|  7.31k|      ::std::fill(first, last, 0);
  522|  7.31k|      vec.set_len(n + vec.len());
  523|  7.31k|      return true;
  524|  7.31k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  7.31k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  13.0k|  constexpr bool is_empty() const noexcept {
   80|  13.0k|    return length == 0;
   81|  13.0k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  5.76k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  5.76k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  5.76k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 5.76k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  5.76k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 966, False: 4.79k]
  ------------------
  435|    966|      return uint64_hi64(vec.rindex(0), truncated);
  436|  4.79k|    } else {
  437|  4.79k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  4.79k|      truncated |= vec.nonzero(2);
  439|  4.79k|      return result;
  440|  4.79k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  5.76k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|    966|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|    966|  truncated = false;
  167|    966|  int shl = leading_zeroes(r0);
  168|    966|  return r0 << shl;
  169|    966|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  4.79k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  4.79k|  int shl = leading_zeroes(r0);
  174|  4.79k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 4.76k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  4.76k|  } else {
  178|  4.76k|    int shr = 64 - shl;
  179|  4.76k|    truncated = (r1 << shl) != 0;
  180|  4.76k|    return (r0 << shl) | (r1 >> shr);
  181|  4.76k|  }
  182|  4.79k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  4.79k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  4.83k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 499, False: 4.34k]
  ------------------
  143|    499|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 459, False: 40]
  ------------------
  144|    459|        return true;
  145|    459|      }
  146|     40|      index++;
  147|     40|    }
  148|  4.34k|    return false;
  149|  4.79k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  5.76k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  5.76k|    int lz = ctlz();
  560|  5.76k|    return int(limb_bits * vec.len()) - lz;
  561|  5.76k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  5.76k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  5.76k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 5.76k]
  ------------------
  545|      0|      return 0;
  546|  5.76k|    } else {
  547|  5.76k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  5.76k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  5.76k|    }
  555|  5.76k|  }
_ZN10fast_float6bigintC2Em:
  418|  63.1k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  63.1k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  63.1k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  63.1k|    vec.normalize();
  426|  63.1k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  63.1k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  63.1k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 63.1k]
  ------------------
  464|      0|      return 1;
  465|  63.1k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 63.1k]
  ------------------
  466|      0|      return -1;
  467|  63.1k|    } else {
  468|   123k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 119k, False: 4.06k]
  ------------------
  469|   119k|        limb xi = vec[index - 1];
  470|   119k|        limb yi = other.vec[index - 1];
  471|   119k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 13.6k, False: 105k]
  ------------------
  472|  13.6k|          return 1;
  473|   105k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 45.4k, False: 60.3k]
  ------------------
  474|  45.4k|          return -1;
  475|  45.4k|        }
  476|   119k|      }
  477|  4.06k|      return 0;
  478|  63.1k|    }
  479|  63.1k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   238k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   238k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   238k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   238k|    return data[index];
   64|   238k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   295k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   295k|  adjusted_mantissa answer;
   96|   295k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 4.86k, False: 290k]
  |  Branch (96:19): [True: 1.46k, False: 289k]
  ------------------
   97|  6.32k|    answer.power2 = 0;
   98|  6.32k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  6.32k|    return answer;
  101|  6.32k|  }
  102|   289k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 8.59k, False: 280k]
  ------------------
  103|       |    // we want to get infinity:
  104|  8.59k|    answer.power2 = binary::infinite_power();
  105|  8.59k|    answer.mantissa = 0;
  106|  8.59k|    return answer;
  107|  8.59k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   280k|  int lz = leading_zeroes(w);
  112|   280k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   280k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   280k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   280k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   280k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   280k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 1.25k, False: 279k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  1.25k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 88, False: 1.16k]
  ------------------
  137|     88|      answer.power2 = 0;
  138|     88|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     88|      return answer;
  141|     88|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  1.16k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  1.16k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  1.16k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  1.16k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 1.16k, False: 0]
  ------------------
  156|  1.16k|    return answer;
  157|  1.25k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   279k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 104k, False: 174k]
  |  Branch (162:30): [True: 102k, False: 2.56k]
  |  Branch (162:77): [True: 94.9k, False: 7.34k]
  ------------------
  163|   279k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 10.4k, False: 84.4k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  10.4k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 4.25k, False: 6.24k]
  ------------------
  168|  4.25k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  4.25k|    }
  170|  10.4k|  }
  171|       |
  172|   279k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   279k|  answer.mantissa >>= 1;
  174|   279k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 23.2k, False: 256k]
  ------------------
  175|  23.2k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  23.2k|    answer.power2++; // undo previous addition
  177|  23.2k|  }
  178|       |
  179|   279k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   279k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 1.23k, False: 278k]
  ------------------
  181|  1.23k|    answer.power2 = binary::infinite_power();
  182|  1.23k|    answer.mantissa = 0;
  183|  1.23k|  }
  184|   279k|  return answer;
  185|   280k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   312k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   312k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   312k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   312k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   312k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   312k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   312k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 59.4k, False: 252k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  59.4k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  59.4k|    firstproduct.low += secondproduct.high;
   35|  59.4k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 42.7k, False: 16.6k]
  ------------------
   36|  42.7k|      firstproduct.high++;
   37|  42.7k|    }
   38|  59.4k|  }
   39|   312k|  return firstproduct;
   40|   312k|}
_ZN10fast_float6detail5powerEi:
   58|   605k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   605k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   605k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  31.2k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  31.2k|  int lz = leading_zeroes(w);
   82|  31.2k|  w <<= lz;
   83|  31.2k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  31.2k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  31.2k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  31.2k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  31.2k|  int hilz = int(w >> 63) ^ 1;
   69|  31.2k|  adjusted_mantissa answer;
   70|  31.2k|  answer.mantissa = w << hilz;
   71|  31.2k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  31.2k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  31.2k|  return answer;
   74|  31.2k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   264k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   264k|  adjusted_mantissa answer;
   96|   264k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 4.58k, False: 260k]
  |  Branch (96:19): [True: 383, False: 259k]
  ------------------
   97|  4.96k|    answer.power2 = 0;
   98|  4.96k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  4.96k|    return answer;
  101|  4.96k|  }
  102|   259k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 4.26k, False: 255k]
  ------------------
  103|       |    // we want to get infinity:
  104|  4.26k|    answer.power2 = binary::infinite_power();
  105|  4.26k|    answer.mantissa = 0;
  106|  4.26k|    return answer;
  107|  4.26k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   255k|  int lz = leading_zeroes(w);
  112|   255k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   255k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   255k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   255k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   255k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   255k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 4.12k, False: 251k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  4.12k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 104, False: 4.02k]
  ------------------
  137|    104|      answer.power2 = 0;
  138|    104|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|    104|      return answer;
  141|    104|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  4.02k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  4.02k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  4.02k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  4.02k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 4.02k, False: 0]
  ------------------
  156|  4.02k|    return answer;
  157|  4.12k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   251k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 82.9k, False: 168k]
  |  Branch (162:30): [True: 47.6k, False: 35.2k]
  |  Branch (162:77): [True: 42.4k, False: 5.19k]
  ------------------
  163|   251k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 7.61k, False: 34.8k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  7.61k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 6.29k, False: 1.32k]
  ------------------
  168|  6.29k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  6.29k|    }
  170|  7.61k|  }
  171|       |
  172|   251k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   251k|  answer.mantissa >>= 1;
  174|   251k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 22.9k, False: 228k]
  ------------------
  175|  22.9k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  22.9k|    answer.power2++; // undo previous addition
  177|  22.9k|  }
  178|       |
  179|   251k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   251k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 292, False: 251k]
  ------------------
  181|    292|    answer.power2 = binary::infinite_power();
  182|    292|    answer.mantissa = 0;
  183|    292|  }
  184|   251k|  return answer;
  185|   255k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   293k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   293k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   293k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   293k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   293k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   293k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   293k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 107k, False: 185k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|   107k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|   107k|    firstproduct.low += secondproduct.high;
   35|   107k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 38.4k, False: 69.5k]
  ------------------
   36|  38.4k|      firstproduct.high++;
   37|  38.4k|    }
   38|   107k|  }
   39|   293k|  return firstproduct;
   40|   293k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  37.6k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  37.6k|  int lz = leading_zeroes(w);
   82|  37.6k|  w <<= lz;
   83|  37.6k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  37.6k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  37.6k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  37.6k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  37.6k|  int hilz = int(w >> 63) ^ 1;
   69|  37.6k|  adjusted_mantissa answer;
   70|  37.6k|  answer.mantissa = w << hilz;
   71|  37.6k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  37.6k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  37.6k|  return answer;
   74|  37.6k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  31.2k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  31.2k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  31.2k|  int32_t sci_exp = scientific_exponent(num);
  411|  31.2k|  size_t max_digits = binary_format<T>::max_digits();
  412|  31.2k|  size_t digits = 0;
  413|  31.2k|  bigint bigmant;
  414|  31.2k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  31.2k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  31.2k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 516, False: 30.7k]
  ------------------
  418|    516|    return positive_digit_comp<T>(bigmant, exponent);
  419|  30.7k|  } else {
  420|  30.7k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  30.7k|  }
  422|  31.2k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  68.9k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  68.9k|  uint64_t mantissa = num.mantissa;
   30|  68.9k|  int32_t exponent = int32_t(num.exponent);
   31|   344k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 275k, False: 68.9k]
  ------------------
   32|   275k|    mantissa /= 10000;
   33|   275k|    exponent += 4;
   34|   275k|  }
   35|   137k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 68.9k, False: 68.9k]
  ------------------
   36|  68.9k|    mantissa /= 100;
   37|  68.9k|    exponent += 2;
   38|  68.9k|  }
   39|  68.9k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 68.9k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  68.9k|  return exponent;
   44|  68.9k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  68.9k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  68.9k|  size_t counter = 0;
  245|  68.9k|  digits = 0;
  246|  68.9k|  limb value = 0;
  247|  68.9k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  68.9k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  68.9k|  UC const * p = num.integer.ptr;
  255|  68.9k|  UC const * pend = p + num.integer.len();
  256|  68.9k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   153k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 85.0k, False: 68.6k]
  ------------------
  259|   144k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 75.5k, False: 68.7k]
  |  Branch (259:45): [True: 59.5k, False: 15.9k]
  |  Branch (259:70): [True: 59.2k, False: 301]
  ------------------
  260|  59.2k|      parse_eight_digits(p, value, counter, digits);
  261|  59.2k|    }
  262|   269k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 251k, False: 18.5k]
  |  Branch (262:30): [True: 185k, False: 66.1k]
  |  Branch (262:43): [True: 184k, False: 301]
  ------------------
  263|   184k|      parse_one_digit(p, value, counter, digits);
  264|   184k|    }
  265|  85.0k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 301, False: 84.7k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    301|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    301|      bool truncated = is_truncated(p, pend);
  269|    301|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 265, False: 36]
  ------------------
  270|    265|        truncated |= is_truncated(num.fraction);
  271|    265|      }
  272|    301|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 195, False: 106]
  ------------------
  273|    195|        round_up_bigint(result, digits);
  274|    195|      }
  275|    301|      return;
  276|  84.7k|    } else {
  277|  84.7k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  84.7k|      counter = 0;
  279|  84.7k|      value = 0;
  280|  84.7k|    }
  281|  85.0k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  68.6k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 63.2k, False: 5.34k]
  ------------------
  285|  63.2k|    p = num.fraction.ptr;
  286|  63.2k|    pend = p + num.fraction.len();
  287|  63.2k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 2.44k, False: 60.8k]
  ------------------
  288|  2.44k|      skip_zeros(p, pend);
  289|  2.44k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   200k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 140k, False: 59.6k]
  ------------------
  292|   336k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 261k, False: 74.9k]
  |  Branch (292:47): [True: 197k, False: 63.9k]
  |  Branch (292:72): [True: 195k, False: 1.72k]
  ------------------
  293|   195k|        parse_eight_digits(p, value, counter, digits);
  294|   195k|      }
  295|   585k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 506k, False: 79.5k]
  |  Branch (295:32): [True: 448k, False: 58.1k]
  |  Branch (295:45): [True: 445k, False: 2.80k]
  ------------------
  296|   445k|        parse_one_digit(p, value, counter, digits);
  297|   445k|      }
  298|   140k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 3.64k, False: 136k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  3.64k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  3.64k|        bool truncated = is_truncated(p, pend);
  302|  3.64k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 2.57k, False: 1.06k]
  ------------------
  303|  2.57k|          round_up_bigint(result, digits);
  304|  2.57k|        }
  305|  3.64k|        return;
  306|   136k|      } else {
  307|   136k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   136k|        counter = 0;
  309|   136k|        value = 0;
  310|   136k|      }
  311|   140k|    }
  312|  63.2k|  }
  313|       |
  314|  64.9k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 64.9k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  64.9k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  71.3k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  71.3k|  uint64_t val;
  161|  85.9k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 43.5k, False: 42.4k]
  ------------------
  162|  43.5k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  43.5k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 28.9k, False: 14.6k]
  ------------------
  164|  28.9k|      break;
  165|  28.9k|    }
  166|  14.6k|    first += int_cmp_len<UC>();
  167|  14.6k|  }
  168|   144k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 142k, False: 2.44k]
  ------------------
  169|   142k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 68.9k, False: 73.2k]
  ------------------
  170|  68.9k|      break;
  171|  68.9k|    }
  172|  73.2k|    first++;
  173|  73.2k|  }
  174|  71.3k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   254k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   254k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   254k|  p += 8;
  210|   254k|  counter += 8;
  211|   254k|  count += 8;
  212|   254k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   630k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   630k|  value = value * 10 + limb(*p - UC('0'));
  218|   630k|  p++;
  219|   630k|  counter++;
  220|   630k|  count++;
  221|   630k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   228k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   228k|  big.mul(power);
  226|   228k|  big.add(value);
  227|   228k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  4.20k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  4.20k|  uint64_t val;
  183|  8.87k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 6.09k, False: 2.78k]
  ------------------
  184|  6.09k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  6.09k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.42k, False: 4.66k]
  ------------------
  186|  1.42k|      return true;
  187|  1.42k|    }
  188|  4.66k|    first += int_cmp_len<UC>();
  189|  4.66k|  }
  190|  4.34k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 3.00k, False: 1.34k]
  ------------------
  191|  3.00k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 1.44k, False: 1.56k]
  ------------------
  192|  1.44k|      return true;
  193|  1.44k|    }
  194|  1.56k|    ++first;
  195|  1.56k|  }
  196|  1.34k|  return false;
  197|  2.78k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    265|bool is_truncated(span<const UC> s) noexcept {
  201|    265|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    265|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  2.77k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  2.77k|  add_native(big, 10, 1);
  234|  2.77k|  count++;
  235|  2.77k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    516|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    516|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    516|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    516|  adjusted_mantissa answer;
  324|    516|  bool truncated;
  325|    516|  answer.mantissa = bigmant.hi64(truncated);
  326|    516|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    516|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    516|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    516|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    516|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    516|    });
  333|    516|  });
  334|       |
  335|    516|  return answer;
  336|    516|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    516|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    516|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    516|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 516]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    516|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    516|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 516]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    516|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    516|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 516]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    516|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    516|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    516|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    516|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    516|    });
  333|    516|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    516|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    516|  const uint64_t mask
  125|    516|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 516]
  ------------------
  126|    516|    ? UINT64_MAX
  127|    516|    : (uint64_t(1) << shift) - 1;
  128|    516|  const uint64_t halfway
  129|    516|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 516]
  ------------------
  130|    516|    ? 0
  131|    516|    : uint64_t(1) << (shift - 1);
  132|    516|  uint64_t truncated_bits = am.mantissa & mask;
  133|    516|  bool is_above = truncated_bits > halfway;
  134|    516|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    516|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 516]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    516|  } else {
  140|    516|    am.mantissa >>= shift;
  141|    516|  }
  142|    516|  am.power2 += shift;
  143|       |
  144|    516|  bool is_odd = (am.mantissa & 1) == 1;
  145|    516|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    516|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    516|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    516|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 74, False: 442]
  |  Branch (331:27): [True: 348, False: 94]
  |  Branch (331:41): [True: 58, False: 290]
  |  Branch (331:56): [True: 58, False: 326]
  |  Branch (331:66): [True: 32, False: 26]
  ------------------
  332|    516|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  30.7k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  30.7k|  bigint& real_digits = bigmant;
  347|  30.7k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  30.7k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  30.7k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  30.7k|  T b;
  354|  30.7k|  to_float(false, am_b, b);
  355|  30.7k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  30.7k|  bigint theor_digits(theor.mantissa);
  357|  30.7k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  30.7k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  30.7k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  30.7k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 30.7k, False: 0]
  ------------------
  363|  30.7k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  30.7k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  30.7k|  }
  365|  30.7k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 30.7k, False: 0]
  ------------------
  366|  30.7k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  30.7k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  30.7k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  30.7k|  int ord = real_digits.compare(theor_digits);
  373|  30.7k|  adjusted_mantissa answer = am;
  374|  30.7k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  30.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  30.7k|      (void)_;  // not needed, since we've done our comparison
  377|  30.7k|      (void)__; // not needed, since we've done our comparison
  378|  30.7k|      if (ord > 0) {
  379|  30.7k|        return true;
  380|  30.7k|      } else if (ord < 0) {
  381|  30.7k|        return false;
  382|  30.7k|      } else {
  383|  30.7k|        return is_odd;
  384|  30.7k|      }
  385|  30.7k|    });
  386|  30.7k|  });
  387|       |
  388|  30.7k|  return answer;
  389|  30.7k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  30.7k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  30.7k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  30.7k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 30.7k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  30.7k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  30.7k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 30.7k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  30.7k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  30.7k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 30.7k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  30.7k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  30.7k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  63.1k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  63.1k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 63.1k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  63.1k|  } else {
  153|  63.1k|    am.mantissa >>= shift;
  154|  63.1k|  }
  155|  63.1k|  am.power2 += shift;
  156|  63.1k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  30.7k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  30.7k|  adjusted_mantissa am = to_extended(value);
   84|  30.7k|  am.mantissa <<= 1;
   85|  30.7k|  am.mantissa += 1;
   86|  30.7k|  am.power2 -= 1;
   87|  30.7k|  return am;
   88|  30.7k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  30.7k|adjusted_mantissa to_extended(T value) noexcept {
   50|  30.7k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  30.7k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  30.7k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  30.7k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  30.7k|  adjusted_mantissa am;
   56|  30.7k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  30.7k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  30.7k|  ::memcpy(&bits, &value, sizeof(T));
   62|  30.7k|#endif
   63|  30.7k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 30.7k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  30.7k|  } else {
   68|       |    // normal
   69|  30.7k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  30.7k|    am.power2 -= bias;
   71|  30.7k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  30.7k|  }
   73|       |
   74|  30.7k|  return am;
   75|  30.7k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  30.7k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  30.7k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  30.7k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 30.7k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  30.7k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  30.7k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 30.7k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  30.7k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  30.7k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 30.7k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  30.7k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  30.7k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  30.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  30.7k|      (void)_;  // not needed, since we've done our comparison
  377|  30.7k|      (void)__; // not needed, since we've done our comparison
  378|  30.7k|      if (ord > 0) {
  379|  30.7k|        return true;
  380|  30.7k|      } else if (ord < 0) {
  381|  30.7k|        return false;
  382|  30.7k|      } else {
  383|  30.7k|        return is_odd;
  384|  30.7k|      }
  385|  30.7k|    });
  386|  30.7k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  30.7k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  30.7k|  const uint64_t mask
  125|  30.7k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 30.7k]
  ------------------
  126|  30.7k|    ? UINT64_MAX
  127|  30.7k|    : (uint64_t(1) << shift) - 1;
  128|  30.7k|  const uint64_t halfway
  129|  30.7k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 30.7k]
  ------------------
  130|  30.7k|    ? 0
  131|  30.7k|    : uint64_t(1) << (shift - 1);
  132|  30.7k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  30.7k|  bool is_above = truncated_bits > halfway;
  134|  30.7k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  30.7k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 30.7k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  30.7k|  } else {
  140|  30.7k|    am.mantissa >>= shift;
  141|  30.7k|  }
  142|  30.7k|  am.power2 += shift;
  143|       |
  144|  30.7k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  30.7k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  30.7k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  30.7k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  30.7k|      (void)_;  // not needed, since we've done our comparison
  377|  30.7k|      (void)__; // not needed, since we've done our comparison
  378|  30.7k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 210, False: 30.5k]
  ------------------
  379|    210|        return true;
  380|  30.5k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 26.9k, False: 3.55k]
  ------------------
  381|  26.9k|        return false;
  382|  26.9k|      } else {
  383|  3.55k|        return is_odd;
  384|  3.55k|      }
  385|  30.7k|    });
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  37.6k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  37.6k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  37.6k|  int32_t sci_exp = scientific_exponent(num);
  411|  37.6k|  size_t max_digits = binary_format<T>::max_digits();
  412|  37.6k|  size_t digits = 0;
  413|  37.6k|  bigint bigmant;
  414|  37.6k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  37.6k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  37.6k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 5.24k, False: 32.3k]
  ------------------
  418|  5.24k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  32.3k|  } else {
  420|  32.3k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  32.3k|  }
  422|  37.6k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  5.24k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  5.24k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  5.24k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  5.24k|  adjusted_mantissa answer;
  324|  5.24k|  bool truncated;
  325|  5.24k|  answer.mantissa = bigmant.hi64(truncated);
  326|  5.24k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  5.24k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  5.24k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  5.24k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  5.24k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  5.24k|    });
  333|  5.24k|  });
  334|       |
  335|  5.24k|  return answer;
  336|  5.24k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  5.24k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  5.24k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  5.24k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 5.24k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  5.24k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  5.24k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 444, False: 4.80k]
  ------------------
  109|    444|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    444|    am.power2++;
  111|    444|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  5.24k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  5.24k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 5.24k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  5.24k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  5.24k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  5.24k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  5.24k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  5.24k|    });
  333|  5.24k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  5.24k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  5.24k|  const uint64_t mask
  125|  5.24k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 5.24k]
  ------------------
  126|  5.24k|    ? UINT64_MAX
  127|  5.24k|    : (uint64_t(1) << shift) - 1;
  128|  5.24k|  const uint64_t halfway
  129|  5.24k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 5.24k]
  ------------------
  130|  5.24k|    ? 0
  131|  5.24k|    : uint64_t(1) << (shift - 1);
  132|  5.24k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  5.24k|  bool is_above = truncated_bits > halfway;
  134|  5.24k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  5.24k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 5.24k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  5.24k|  } else {
  140|  5.24k|    am.mantissa >>= shift;
  141|  5.24k|  }
  142|  5.24k|  am.power2 += shift;
  143|       |
  144|  5.24k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  5.24k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  5.24k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  5.24k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  5.24k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 548, False: 4.70k]
  |  Branch (331:27): [True: 3.93k, False: 771]
  |  Branch (331:41): [True: 1.01k, False: 2.92k]
  |  Branch (331:56): [True: 449, False: 3.24k]
  |  Branch (331:66): [True: 60, False: 389]
  ------------------
  332|  5.24k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  32.3k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  32.3k|  bigint& real_digits = bigmant;
  347|  32.3k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  32.3k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  32.3k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  32.3k|  T b;
  354|  32.3k|  to_float(false, am_b, b);
  355|  32.3k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  32.3k|  bigint theor_digits(theor.mantissa);
  357|  32.3k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  32.3k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  32.3k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  32.3k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 32.3k, False: 0]
  ------------------
  363|  32.3k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  32.3k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  32.3k|  }
  365|  32.3k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 2.82k, False: 29.5k]
  ------------------
  366|  2.82k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  2.82k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  29.5k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 29.4k, False: 88]
  ------------------
  368|  29.4k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  29.4k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  29.4k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  32.3k|  int ord = real_digits.compare(theor_digits);
  373|  32.3k|  adjusted_mantissa answer = am;
  374|  32.3k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  32.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  32.3k|      (void)_;  // not needed, since we've done our comparison
  377|  32.3k|      (void)__; // not needed, since we've done our comparison
  378|  32.3k|      if (ord > 0) {
  379|  32.3k|        return true;
  380|  32.3k|      } else if (ord < 0) {
  381|  32.3k|        return false;
  382|  32.3k|      } else {
  383|  32.3k|        return is_odd;
  384|  32.3k|      }
  385|  32.3k|    });
  386|  32.3k|  });
  387|       |
  388|  32.3k|  return answer;
  389|  32.3k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  32.3k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  32.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  32.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 114, False: 32.2k]
  ------------------
   96|       |    // have a denormal float
   97|    114|    int32_t shift = -am.power2 + 1;
   98|    114|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    114|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 114, False: 0]
  ------------------
  101|    114|    return;
  102|    114|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  32.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  32.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 32.2k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  32.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  32.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 32.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  32.2k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  32.3k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  32.3k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  32.3k|  adjusted_mantissa am = to_extended(value);
   84|  32.3k|  am.mantissa <<= 1;
   85|  32.3k|  am.mantissa += 1;
   86|  32.3k|  am.power2 -= 1;
   87|  32.3k|  return am;
   88|  32.3k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  32.3k|adjusted_mantissa to_extended(T value) noexcept {
   50|  32.3k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  32.3k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  32.3k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  32.3k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  32.3k|  adjusted_mantissa am;
   56|  32.3k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  32.3k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  32.3k|  ::memcpy(&bits, &value, sizeof(T));
   62|  32.3k|#endif
   63|  32.3k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 114, False: 32.2k]
  ------------------
   64|       |    // denormal
   65|    114|    am.power2 = 1 - bias;
   66|    114|    am.mantissa = bits & mantissa_mask;
   67|  32.2k|  } else {
   68|       |    // normal
   69|  32.2k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  32.2k|    am.power2 -= bias;
   71|  32.2k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  32.2k|  }
   73|       |
   74|  32.3k|  return am;
   75|  32.3k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  32.3k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  32.3k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  32.3k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 114, False: 32.2k]
  ------------------
   96|       |    // have a denormal float
   97|    114|    int32_t shift = -am.power2 + 1;
   98|    114|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    114|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 114, False: 0]
  ------------------
  101|    114|    return;
  102|    114|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  32.2k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  32.2k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 88, False: 32.1k]
  ------------------
  109|     88|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     88|    am.power2++;
  111|     88|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  32.2k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  32.2k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 32.2k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  32.2k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  32.3k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  32.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  32.3k|      (void)_;  // not needed, since we've done our comparison
  377|  32.3k|      (void)__; // not needed, since we've done our comparison
  378|  32.3k|      if (ord > 0) {
  379|  32.3k|        return true;
  380|  32.3k|      } else if (ord < 0) {
  381|  32.3k|        return false;
  382|  32.3k|      } else {
  383|  32.3k|        return is_odd;
  384|  32.3k|      }
  385|  32.3k|    });
  386|  32.3k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  32.3k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  32.3k|  const uint64_t mask
  125|  32.3k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 32.3k]
  ------------------
  126|  32.3k|    ? UINT64_MAX
  127|  32.3k|    : (uint64_t(1) << shift) - 1;
  128|  32.3k|  const uint64_t halfway
  129|  32.3k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 32.3k]
  ------------------
  130|  32.3k|    ? 0
  131|  32.3k|    : uint64_t(1) << (shift - 1);
  132|  32.3k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  32.3k|  bool is_above = truncated_bits > halfway;
  134|  32.3k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  32.3k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 32.3k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  32.3k|  } else {
  140|  32.3k|    am.mantissa >>= shift;
  141|  32.3k|  }
  142|  32.3k|  am.power2 += shift;
  143|       |
  144|  32.3k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  32.3k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  32.3k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  32.3k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  32.3k|      (void)_;  // not needed, since we've done our comparison
  377|  32.3k|      (void)__; // not needed, since we've done our comparison
  378|  32.3k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 13.4k, False: 18.9k]
  ------------------
  379|  13.4k|        return true;
  380|  18.9k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 18.4k, False: 518]
  ------------------
  381|  18.4k|        return false;
  382|  18.4k|      } else {
  383|    518|        return is_odd;
  384|    518|      }
  385|  32.3k|    });

_ZN10fast_float4spanIKcEC2Ev:
  235|  2.57M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  1.52M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   494k|  constexpr size_t len() const noexcept {
  238|   494k|    return length;
  239|   494k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|   854k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|   854k|  return -10;
  469|   854k|#endif
  470|   854k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   806k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   806k|  return 10;
  517|   806k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   706k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   706k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   706k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  2.08M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  2.08M|  return 23;
  477|  2.08M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   665k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   665k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   665k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   698k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   290k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   290k|  return -65;
  568|   290k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   289k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   289k|  return 38;
  559|   289k|}
_ZN10fast_float14leading_zeroesEm:
  268|   616k|int leading_zeroes(uint64_t input_num) {
  269|   616k|  assert(input_num > 0);
  270|   616k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   616k|  return __builtin_clzll(input_num);
  285|   616k|#endif
  286|   616k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   772k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   772k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   772k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|   772k|  answer.low = uint64_t(r);
  337|   772k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   772k|  return answer;
  342|   772k|}
_ZN10fast_float8value128C2Ev:
  251|   772k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   343k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   343k|  return -127;
  500|   343k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|   104k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|   104k|  return -17;
  493|   104k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|   102k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|   102k|  return 10;
  485|   102k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   215k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   215k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 68.9k, False: 146k]
  |  Branch (352:38): [True: 0, False: 146k]
  ------------------
  353|   215k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  31.2k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  31.2k|  return 114;
  575|  31.2k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|   114k|{
  650|   114k|    return sizeof(uint64_t) / sizeof(UC);
  651|   114k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  49.6k|{
  644|  49.6k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  49.6k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  49.6k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|  90.5k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   227k|  constexpr size_t len() const noexcept {
  238|   227k|    return length;
  239|   227k|  }
_ZNK10fast_float4spanImEixEm:
  241|   123k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   123k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   123k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   123k|    return ptr[index];
  244|   123k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   220k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   220k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   220k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   220k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   220k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   220k|  ::memcpy(&value, &word, sizeof(T));
  615|   220k|#endif
  616|   220k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   220k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   538k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   538k|  return 0xFF;
  507|   538k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|  1.28M|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   947k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   475k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  237|  1.01k|  constexpr size_t len() const noexcept {
  238|  1.01k|    return length;
  239|  1.01k|  }
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   473k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|   905k|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|   905k|  return -22;
  461|   905k|#endif
  462|   905k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|   895k|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|   895k|  return 22;
  514|   895k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   758k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   758k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   758k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  2.05M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  2.05M|  return 52;
  474|  2.05M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   749k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   749k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   749k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   260k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   260k|  return -342;
  564|   260k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   259k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   259k|  return 308;
  555|   259k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   330k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   330k|  return -1023;
  497|   330k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|  82.9k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|  82.9k|  return -4;
  489|  82.9k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  47.6k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  47.6k|  return 23;
  481|  47.6k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  37.6k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  37.6k|  return 769;
  572|  37.6k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   188k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   188k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   188k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   188k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   188k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   188k|  ::memcpy(&value, &word, sizeof(T));
  615|   188k|#endif
  616|   188k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   188k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   481k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   481k|  return 0x7FF;
  504|   481k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   631k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   631k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   631k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   631k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   631k|    return from_chars_advanced(first, last, value, options);
  143|   631k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   631k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   631k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   631k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   631k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   631k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 631k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   631k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   631k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 631k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   631k|  answer.ec = std::errc(); // be optimistic
  221|   631k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   631k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 584k, False: 47.0k]
  |  Branch (227:69): [True: 553k, False: 30.8k]
  |  Branch (227:131): [True: 488k, False: 64.7k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   488k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 488k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   488k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 447k, False: 40.7k]
  ------------------
  239|   447k|        value = T(pns.mantissa);
  240|   447k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 10.2k, False: 437k]
  ------------------
  241|   437k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   447k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 447k]
  ------------------
  243|   447k|        return answer;
  244|   447k|      }
  245|   488k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   488k|  }
  262|   183k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   183k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 105k, False: 77.8k]
  |  Branch (263:29): [True: 105k, False: 0]
  ------------------
  264|   105k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 31.2k, False: 74.4k]
  ------------------
  265|  31.2k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  31.2k|    }
  267|   105k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   183k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 31.2k, False: 152k]
  ------------------
  271|   183k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   183k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 179k, False: 4.30k]
  |  Branch (273:29): [True: 21.4k, False: 157k]
  |  Branch (273:49): [True: 955, False: 20.5k]
  |  Branch (273:68): [True: 4.86k, False: 177k]
  ------------------
  274|  5.81k|    answer.ec = std::errc::result_out_of_range;
  275|  5.81k|  }
  276|   183k|  return answer;
  277|   631k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.46M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.46M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.46M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.46M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.46M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.46M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   223k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   223k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   223k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   223k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   223k|    return from_chars_advanced(first, last, value, options);
  143|   223k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   223k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   223k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   223k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   223k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   223k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 223k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   223k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   223k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 223k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   223k|  answer.ec = std::errc(); // be optimistic
  221|   223k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   223k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 222k, False: 1.71k]
  |  Branch (227:69): [True: 218k, False: 3.74k]
  |  Branch (227:131): [True: 218k, False: 168]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   218k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 218k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   218k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 217k, False: 524]
  ------------------
  239|   217k|        value = T(pns.mantissa);
  240|   217k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 588, False: 217k]
  ------------------
  241|   217k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   217k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 217k]
  ------------------
  243|   217k|        return answer;
  244|   217k|      }
  245|   218k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   218k|  }
  262|  6.15k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  6.15k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 348, False: 5.80k]
  |  Branch (263:29): [True: 348, False: 0]
  ------------------
  264|    348|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 348]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    348|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  6.15k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 6.15k]
  ------------------
  271|  6.15k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  6.15k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 5.59k, False: 562]
  |  Branch (273:29): [True: 4.16k, False: 1.42k]
  |  Branch (273:49): [True: 1.16k, False: 3.00k]
  |  Branch (273:68): [True: 3.00k, False: 1.98k]
  ------------------
  274|  4.16k|    answer.ec = std::errc::result_out_of_range;
  275|  4.16k|  }
  276|  6.15k|  return answer;
  277|   223k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   655k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   655k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   655k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   655k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   655k|    return from_chars_advanced(first, last, value, options);
  143|   655k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   655k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   655k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   655k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   655k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   655k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 655k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   655k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   655k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 655k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   655k|  answer.ec = std::errc(); // be optimistic
  221|   655k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   655k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 647k, False: 7.43k]
  |  Branch (227:69): [True: 618k, False: 29.4k]
  |  Branch (227:131): [True: 515k, False: 102k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   515k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 515k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   515k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 506k, False: 9.17k]
  ------------------
  239|   506k|        value = T(pns.mantissa);
  240|   506k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 29.8k, False: 476k]
  ------------------
  241|   476k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   506k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 506k]
  ------------------
  243|   506k|        return answer;
  244|   506k|      }
  245|   515k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   515k|  }
  262|   149k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   149k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 108k, False: 40.2k]
  |  Branch (263:29): [True: 108k, False: 0]
  ------------------
  264|   108k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 37.6k, False: 71.1k]
  ------------------
  265|  37.6k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  37.6k|    }
  267|   108k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   149k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 37.6k, False: 111k]
  ------------------
  271|   149k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   149k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 145k, False: 3.94k]
  |  Branch (273:29): [True: 14.4k, False: 130k]
  |  Branch (273:49): [True: 209, False: 14.2k]
  |  Branch (273:68): [True: 2.46k, False: 146k]
  ------------------
  274|  2.67k|    answer.ec = std::errc::result_out_of_range;
  275|  2.67k|  }
  276|   149k|  return answer;
  277|   655k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   249k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   249k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   249k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   249k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   249k|    return from_chars_advanced(first, last, value, options);
  143|   249k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   249k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   249k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   249k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   249k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   249k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 249k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   249k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   249k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 249k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   249k|  answer.ec = std::errc(); // be optimistic
  221|   249k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   249k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 247k, False: 1.95k]
  |  Branch (227:69): [True: 243k, False: 4.09k]
  |  Branch (227:131): [True: 243k, False: 376]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   243k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 243k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   243k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 243k, False: 204]
  ------------------
  239|   243k|        value = T(pns.mantissa);
  240|   243k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 802, False: 242k]
  ------------------
  241|   242k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   243k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 243k]
  ------------------
  243|   243k|        return answer;
  244|   243k|      }
  245|   243k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   243k|  }
  262|  6.63k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  6.63k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 376, False: 6.25k]
  |  Branch (263:29): [True: 376, False: 0]
  ------------------
  264|    376|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 376]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    376|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  6.63k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 6.63k]
  ------------------
  271|  6.63k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  6.63k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 5.98k, False: 646]
  |  Branch (273:29): [True: 1.92k, False: 4.05k]
  |  Branch (273:49): [True: 240, False: 1.68k]
  |  Branch (273:68): [True: 1.68k, False: 4.70k]
  ------------------
  274|  1.92k|    answer.ec = std::errc::result_out_of_range;
  275|  1.92k|  }
  276|  6.63k|  return answer;
  277|   249k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  4.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  4.29M|{
 3807|  4.29M|    if constexpr (sizeof(U) == 1) {
 3808|  4.29M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|       |    }
 3810|       |    else if constexpr (sizeof(U) == 2) {
 3811|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|       |    }
 3813|       |    else {
 3814|       |        // utf-32
 3815|       |        static_assert(sizeof(U) == 4);
 3816|       |        SCN_UNUSED(ch);
 3817|       |        return 1;
 3818|       |    }
 3819|  4.29M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  4.29M|{
 3771|  4.29M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  4.29M|    SCN_GCC_COMPAT_PUSH
 3774|  4.29M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  4.29M|    constexpr char lengths[] =
 3776|  4.29M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  4.29M|        "\1\1\1\1\1\1\1\1"
 3778|  4.29M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  4.29M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  4.29M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  4.29M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  4.29M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  4.29M|    SCN_GCC_COMPAT_POP
 3785|  4.29M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  3.81M|{
 4013|  3.81M|    if constexpr (sizeof(CharT) == 1) {
 4014|  3.81M|        return decode_utf8_code_point_exhaustive(input);
 4015|       |    }
 4016|       |    else if constexpr (sizeof(CharT) == 2) {
 4017|       |        return decode_utf16_code_point_exhaustive(input);
 4018|       |    }
 4019|       |    else {
 4020|       |        SCN_EXPECT(input.size() == 1);
 4021|       |        auto cp = static_cast<char32_t>(input.front());
 4022|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|       |            return invalid_code_point;
 4024|       |        }
 4025|       |        return cp;
 4026|       |    }
 4027|  3.81M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  3.81M|{
 3826|  3.81M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  3.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  3.81M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  3.81M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  3.81M|    };
 3831|       |
 3832|  3.81M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 3.74M, False: 75.1k]
  ------------------
 3833|  3.74M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 716, False: 3.74M]
  ------------------
 3834|    716|            SCN_UNLIKELY_ATTR
 3835|    716|            return invalid_code_point;
 3836|    716|        }
 3837|  3.74M|        return static_cast<char32_t>(input[0]);
 3838|  3.74M|    }
 3839|       |
 3840|  75.1k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 69.0k, False: 6.11k]
  ------------------
 3841|  69.0k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 152, False: 68.8k]
  ------------------
 3842|    152|            SCN_UNLIKELY_ATTR
 3843|    152|            return invalid_code_point;
 3844|    152|        }
 3845|  68.8k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 7.29k, False: 61.5k]
  ------------------
 3846|  7.29k|            SCN_UNLIKELY_ATTR
 3847|  7.29k|            return invalid_code_point;
 3848|  7.29k|        }
 3849|       |
 3850|  61.5k|        char32_t cp{};
 3851|  61.5k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|  61.5k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|  61.5k|        return cp;
 3854|  68.8k|    }
 3855|       |
 3856|  6.11k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 3.54k, False: 2.57k]
  ------------------
 3857|  3.54k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 113, False: 3.42k]
  ------------------
 3858|    113|            SCN_UNLIKELY_ATTR
 3859|    113|            return invalid_code_point;
 3860|    113|        }
 3861|  3.42k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 1.37k, False: 2.05k]
  ------------------
 3862|  3.42k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 618, False: 1.44k]
  ------------------
 3863|  1.98k|            SCN_UNLIKELY_ATTR
 3864|  1.98k|            return invalid_code_point;
 3865|  1.98k|        }
 3866|       |
 3867|  1.44k|        char32_t cp{};
 3868|  1.44k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|  1.44k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|  1.44k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|  1.44k|        return cp;
 3872|  3.42k|    }
 3873|       |
 3874|  2.57k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 2.57k, False: 0]
  ------------------
 3875|  2.57k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 2.57k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  2.57k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 525, False: 2.05k]
  ------------------
 3880|    525|            SCN_UNLIKELY_ATTR
 3881|    525|            return invalid_code_point;
 3882|    525|        }
 3883|  2.05k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 621, False: 1.43k]
  ------------------
 3884|  2.05k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 571, False: 859]
  ------------------
 3885|  2.05k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 542, False: 317]
  ------------------
 3886|  1.73k|            SCN_UNLIKELY_ATTR
 3887|  1.73k|            return invalid_code_point;
 3888|  1.73k|        }
 3889|       |
 3890|    317|        char32_t cp{};
 3891|    317|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|    317|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|    317|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|    317|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|    317|        return cp;
 3896|  2.05k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|  78.7k|    const auto is_trailing_code_unit = [](char ch) {
 3829|  78.7k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  78.7k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  6.18M|{
 3699|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3700|       |                                          decltype(first), decltype(last)> &&
 3701|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3702|       |        return {first, last};
 3703|       |    }
 3704|  6.18M|    else {
 3705|  6.18M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  6.18M|                                       to_address(first), to_address(last)))};
 3707|  6.18M|    }
 3708|  6.18M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  18.8M|{
  326|  18.8M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  18.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  18.8M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  21.6M|{
  304|  21.6M|    return p;
  305|  21.6M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  9.92M|{
 3730|       |    if constexpr (std::is_constructible_v<
 3731|       |                      typename std::basic_string_view<CharT>::iterator,
 3732|       |                      decltype(it)> &&
 3733|  9.92M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3734|  9.92M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  9.92M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  9.92M|        return it;
 3736|       |    }
 3737|       |    else {
 3738|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|       |    }
 3740|  9.92M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   109k|    {
 2724|   109k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   109k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   109k|    {
 2705|   109k|        return decay_copy(t.begin());
 2706|   109k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  14.4M|{
 1949|  14.4M|    return SCN_FWD(t);
  ------------------
  |  |  930|  14.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  14.4M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.72M|    {
 2781|  2.72M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.72M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.72M|    {
 2763|  2.72M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.72M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.72M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   199k|{
 8867|   199k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   199k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   199k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   199k|    static_cast<    \
  |  |  929|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   199k|    static_cast<    \
  |  |  929|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   199k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5395|   857k|{
 5396|   857k|    detail::check_scan_arg_types<Args...>();
 5397|   857k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   857k|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5134|  1.37M|{
 5135|  1.37M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.37M|                  "Scan argument types must be default constructible");
 5137|  1.37M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.37M|                  "Scan argument types must be Destructible");
 5139|  1.37M|    static_assert(
 5140|  1.37M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.37M|        "Scan argument types must not be references");
 5142|  1.37M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5347|   857k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   857k|    {
 5349|   857k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   857k|    {
 5360|   857k|        return {detail::make_arg<
 5361|   857k|            kind, Context,
 5362|   857k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   857k|                                 typename Context::char_type>::value>(args)...};
 5364|   857k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   857k|{
 5170|   857k|    return make_value<Context>(value).ref_value;
 5171|   857k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5119|   946k|{
 5120|   946k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   946k|                                  needs_context_tag>) {
 5124|   946k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   946k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   946k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4958|   946k|    {                                                                        \
 4959|   946k|        return val;                                                          \
 4960|   946k|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5088|  1.37M|{
 5089|  1.37M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.37M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.37M|    constexpr bool scannable_char =
 5093|  1.37M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.37M|    static_assert(scannable_char,
 5095|  1.37M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.37M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.37M|    constexpr bool scannable_const =
 5099|  1.37M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.37M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.37M|    constexpr bool scannable_disabled =
 5103|  1.37M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.37M|    static_assert(scannable_disabled,
 5105|  1.37M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.37M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.37M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.37M|    static_assert(
 5110|  1.37M|        scannable,
 5111|  1.37M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.37M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.37M|    return arg_value{arg};
 5115|  1.37M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4900|  1.37M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  1.37M|    {
 4902|  1.37M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   613k|{
 8654|   613k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   613k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   613k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   613k|{
 8591|   613k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   613k|    auto result = vscan_impl(buffer, format, args);
 8594|   613k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   613k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.2k, False: 564k]
  |  |  ------------------
  ------------------
 8595|  49.2k|        return unexpected(result.error());
 8596|  49.2k|    }
 8597|   564k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   564k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   613k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|  1.36M|{
 4720|  1.36M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.36M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.36M|                  "\n"
 4724|  1.36M|                  "Unsupported range type given as input to a scanning "
 4725|  1.36M|                  "function.\n"
 4726|  1.36M|                  "A range needs to have a character type (value type) "
 4727|  1.36M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.36M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.36M|                  "to be included.\n"
 4730|  1.36M|                  "See the scnlib documentation for more details.");
 4731|  1.36M|    static_assert(
 4732|  1.36M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.36M|        "\n"
 4734|  1.36M|        "Unsupported range type given as input to a scanning "
 4735|  1.36M|        "function.\n"
 4736|  1.36M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.36M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.36M|        "not supported.");
 4739|  1.36M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.36M|                  "\n"
 4741|  1.36M|                  "Unsupported range type given as input to a scanning "
 4742|  1.36M|                  "function.\n"
 4743|  1.36M|                  "file_marker_found cannot be used as an "
 4744|  1.36M|                  "source range type to scn::scan.\n"
 4745|  1.36M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.36M|                  "and do not provide an explicit source range, "
 4747|  1.36M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.36M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.36M|                  "\n"
 4750|  1.36M|                  "Unsupported range type given as input to a scanning "
 4751|  1.36M|                  "function.\n"
 4752|  1.36M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.36M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.36M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.36M|                  "\n"
 4756|  1.36M|                  "Unsupported range type given as input to a scanning "
 4757|  1.36M|                  "function.\n"
 4758|  1.36M|                  "A range needs to model forward_range and have a valid "
 4759|  1.36M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.36M|                  "Examples of scannable ranges are std::string, "
 4761|  1.36M|                  "std::string_view, "
 4762|  1.36M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.36M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.36M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.36M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4658|  1.36M|{
 4659|  1.36M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4660|  1.36M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|       |    }
 4662|       |    else {
 4663|       |        return invalid_char_type{};
 4664|       |    }
 4665|  1.36M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.36M|    {
 2855|  1.36M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.36M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.36M|    {
 2836|  1.36M|        return t.data();
 2837|  1.36M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|  1.36M|    {
 3231|  1.36M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 15.4k, False: 1.34M]
  ------------------
 3232|  1.36M|                   ? nullptr
 3233|  1.36M|                   : std::addressof(*ranges::begin(derived()));
 3234|  1.36M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  1.36M|    {
 3005|  1.36M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  1.36M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  1.36M|    {
 2978|  1.36M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  1.36M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  7.48M|    {
 3339|  7.48M|        return m_iterator == m_sentinel;
 3340|  7.48M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  2.70M|    {
 3185|  2.70M|        return static_cast<const D&>(*this);
 3186|  2.70M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.59M|    {
 2724|  2.59M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.59M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.59M|    {
 2705|  2.59M|        return decay_copy(t.begin());
 2706|  2.59M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  32.9M|    {
 3330|  32.9M|        return m_iterator;
 3331|  32.9M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.36M|    {
 2930|  1.36M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.36M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.36M|    {
 2896|  1.36M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.36M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.36M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  5.65M|{
 1949|  5.65M|    return SCN_FWD(t);
  ------------------
  |  |  930|  5.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  5.65M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3345|  7.52M|    {
 3346|  7.52M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  7.52M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  14.0M|    {
 1598|  14.0M|        return has_value();
 1599|  14.0M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  27.8M|    {
  485|  27.8M|        return m_has_value;
  486|  27.8M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   975k|    {
 1604|   975k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   975k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   975k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   975k|        return this->get_unexpected().error();
 1606|   975k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   975k|    {
  468|   975k|        return m_unexpected;
  469|   975k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  7.50M|    {
  361|  7.50M|        return m_unexpected;
  362|  7.50M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  3.66M|        : m_unexpected(std::forward<Err>(e))
  346|  3.66M|    {
  347|  3.66M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.66M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.66M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   106k|        : base(unexpect, std::move(e.error())),
 1474|   106k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   106k|    {
 1476|   106k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   106k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   106k|          m_has_value(false)
  446|   106k|    {
  447|   106k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  8.36M|        : m_unexpected(std::forward<Args>(args)...)
  355|  8.36M|    {
  356|  8.36M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  8.36M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  8.36M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.36M|    {
 1177|  1.36M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  1.25M|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|  1.25M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.25M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|  1.25M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  7.75M|    {
 2724|  7.75M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  7.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  7.75M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  7.75M|    {
 2705|  7.75M|        return decay_copy(t.begin());
 2706|  7.75M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|  1.25M|{
 5910|  1.25M|    return ranges::end(source);
 5911|  1.25M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.25M|    {
 2781|  1.25M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.25M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.25M|    {
 2763|  1.25M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.25M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  16.0M|    {
 3334|  16.0M|        return m_sentinel;
 3335|  16.0M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  5.54M|    {
 1653|  5.54M|        return value();
 1654|  5.54M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  12.7M|    {
 1627|  12.7M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  12.7M|        return this->get_value();
 1629|  12.7M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  12.7M|    {
  451|  12.7M|        return m_value;
  452|  12.7M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.25M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.25M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.25M|    {
 1430|  1.25M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  1.25M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.25M|    {
  437|  1.25M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   398k|    {
 7975|   398k|        return m_str;
 7976|   398k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   857k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   857k|    {
 5426|   857k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5378|   857k|    {
 5379|   857k|        return m_argptrs;
 5380|   857k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5476|  2.64M|        : m_desc(desc), m_builtin_values(data)
 5477|  2.64M|    {
 5478|  2.64M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   398k|{
 8820|   398k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.8k, False: 365k]
  |  |  ------------------
  ------------------
 8821|  32.8k|        return unexpected(result.error());
 8822|  32.8k|    }
 8823|   365k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   398k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.36M|    {
 1598|  1.36M|        return has_value();
 1599|  1.36M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.72M|    {
  485|  2.72M|        return m_has_value;
  486|  2.72M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|   106k|    {
 1604|   106k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   106k|        return this->get_unexpected().error();
 1606|   106k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   106k|    {
  468|   106k|        return m_unexpected;
  469|   106k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  35.5k|        : base(unexpect, std::move(e.error())),
 1474|  35.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  35.5k|    {
 1476|  35.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  35.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  35.5k|          m_has_value(false)
  446|  35.5k|    {
  447|  35.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   441k|    {
 1177|   441k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  1.12M|    {
 1653|  1.12M|        return value();
 1654|  1.12M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  1.25M|    {
 1627|  1.25M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.25M|        return this->get_value();
 1629|  1.25M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.25M|    {
  451|  1.25M|        return m_value;
  452|  1.25M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5828|   405k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   405k|    static_cast<    \
  |  |  929|   405k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   405k|    static_cast<    \
  |  |  929|   405k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   405k|    {
 5830|   405k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5679|  1.25M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.25M|    static_cast<    \
  |  |  929|  1.25M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|  1.25M|    {
 5681|  1.25M|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5614|  1.15M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.15M|    static_cast<    \
  |  |  929|  1.15M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|  1.15M|    {
 5616|  1.15M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   405k|        : base(std::in_place, std::forward<U>(val)),
 1428|   405k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   405k|    {
 1430|   405k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   405k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   405k|    {
  437|   405k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5373|   857k|    {
 5374|   857k|        return m_args;
 5375|   857k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3314|  12.8M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  12.8M|    static_cast<    \
  |  |  929|  12.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  12.8M|    static_cast<    \
  |  |  929|  12.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  12.8M|    {
 3316|  12.8M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|  2.64M|{
 7691|  2.64M|    return s;
 7692|  2.64M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|  2.64M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   398k|        : m_str(r.str)
 7970|   398k|    {
 7971|   398k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   441k|    {
 1598|   441k|        return has_value();
 1599|   441k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   847k|    {
  485|   847k|        return m_has_value;
  486|   847k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   405k|    {
 1673|   405k|        return &value();
 1674|   405k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   405k|    {
 1627|   405k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   405k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   405k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   405k|        return this->get_value();
 1629|   405k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   405k|    {
  451|   405k|        return m_value;
  452|   405k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|  1.25M|    {
 5698|  1.25M|        return ranges::begin(m_range);
 5699|  1.25M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   199k|{
 8934|   199k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   199k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   199k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   199k|    static_cast<    \
  |  |  929|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   199k|    static_cast<    \
  |  |  929|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   199k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   613k|{
 8672|   613k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   613k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   613k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   613k|{
 8607|   613k|#if !SCN_DISABLE_LOCALE
 8608|   613k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   613k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   613k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   613k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   613k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   613k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.2k, False: 564k]
  |  |  ------------------
  ------------------
 8615|  49.2k|        return unexpected(result.error());
 8616|  49.2k|    }
 8617|   564k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   564k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   613k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  42.9k|{
 8973|  42.9k|    T value;
 8974|  42.9k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  42.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  42.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  42.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  42.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  42.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.73k, False: 40.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.73k|    }                                                  \
  |  |  |  | 3671|  42.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  40.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  40.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  40.1k|    static_cast<    \
  |  |  929|  40.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  42.9k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  89.6k|{
 5155|  89.6k|    check_scan_arg_types<T>();
 5156|       |
 5157|  89.6k|    basic_scan_arg<Context> arg;
 5158|  89.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  89.6k|    arg.m_value = make_value<Context>(value);
 5160|  89.6k|    return arg;
 5161|  89.6k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|  2.92M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  4.26M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   133k|{
 8685|   133k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   133k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   133k|{
 8631|   133k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   133k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   133k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.20k, False: 124k]
  |  |  ------------------
  ------------------
 8635|  8.20k|        return unexpected(result.error());
 8636|  8.20k|    }
 8637|   124k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   133k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   124k|    {
 1663|   124k|        return std::move(value());
 1664|   124k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   206k|{
 8867|   206k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   206k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   206k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   206k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5395|   890k|{
 5396|   890k|    detail::check_scan_arg_types<Args...>();
 5397|   890k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   890k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5134|  1.43M|{
 5135|  1.43M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.43M|                  "Scan argument types must be default constructible");
 5137|  1.43M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.43M|                  "Scan argument types must be Destructible");
 5139|  1.43M|    static_assert(
 5140|  1.43M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.43M|        "Scan argument types must not be references");
 5142|  1.43M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5347|   890k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   890k|    {
 5349|   890k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   890k|    {
 5360|   890k|        return {detail::make_arg<
 5361|   890k|            kind, Context,
 5362|   890k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   890k|                                 typename Context::char_type>::value>(args)...};
 5364|   890k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   890k|{
 5170|   890k|    return make_value<Context>(value).ref_value;
 5171|   890k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5119|   984k|{
 5120|   984k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   984k|                                  needs_context_tag>) {
 5124|   984k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   984k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   984k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4958|   984k|    {                                                                        \
 4959|   984k|        return val;                                                          \
 4960|   984k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5088|  1.43M|{
 5089|  1.43M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.43M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.43M|    constexpr bool scannable_char =
 5093|  1.43M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.43M|    static_assert(scannable_char,
 5095|  1.43M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.43M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.43M|    constexpr bool scannable_const =
 5099|  1.43M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.43M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.43M|    constexpr bool scannable_disabled =
 5103|  1.43M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.43M|    static_assert(scannable_disabled,
 5105|  1.43M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.43M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.43M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.43M|    static_assert(
 5110|  1.43M|        scannable,
 5111|  1.43M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.43M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.43M|    return arg_value{arg};
 5115|  1.43M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4900|  1.43M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  1.43M|    {
 4902|  1.43M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   412k|    {
 7975|   412k|        return m_str;
 7976|   412k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   890k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   890k|    {
 5426|   890k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5378|   890k|    {
 5379|   890k|        return m_argptrs;
 5380|   890k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   412k|{
 8820|   412k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.8k, False: 379k]
  |  |  ------------------
  ------------------
 8821|  32.8k|        return unexpected(result.error());
 8822|  32.8k|    }
 8823|   379k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   379k|    static_cast<    \
  |  |  929|   379k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   379k|    static_cast<    \
  |  |  929|   379k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   412k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  35.5k|        : base(unexpect, std::move(e.error())),
 1474|  35.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  35.5k|    {
 1476|  35.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  35.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  35.5k|          m_has_value(false)
  446|  35.5k|    {
  447|  35.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   456k|    {
 1177|   456k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5828|   421k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   421k|    static_cast<    \
  |  |  929|   421k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   421k|    static_cast<    \
  |  |  929|   421k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   421k|    {
 5830|   421k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5614|  1.22M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|  1.22M|    {
 5616|  1.22M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   421k|        : base(std::in_place, std::forward<U>(val)),
 1428|   421k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   421k|    {
 1430|   421k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   421k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   421k|    {
  437|   421k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5373|   890k|    {
 5374|   890k|        return m_args;
 5375|   890k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   412k|        : m_str(r.str)
 7970|   412k|    {
 7971|   412k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   456k|    {
 1598|   456k|        return has_value();
 1599|   456k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   878k|    {
  485|   878k|        return m_has_value;
  486|   878k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   421k|    {
 1673|   421k|        return &value();
 1674|   421k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   421k|    {
 1627|   421k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   421k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   421k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   421k|        return this->get_value();
 1629|   421k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   421k|    {
  451|   421k|        return m_value;
  452|   421k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   206k|{
 8934|   206k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   206k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   206k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   206k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   206k|    static_cast<    \
  |  |  929|   206k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   206k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  44.7k|{
 8973|  44.7k|    T value;
 8974|  44.7k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  44.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  44.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  44.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  44.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.73k, False: 41.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.73k|    }                                                  \
  |  |  |  | 3671|  44.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  41.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  41.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  41.9k|    static_cast<    \
  |  |  929|  41.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  44.7k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  93.7k|{
 5155|  93.7k|    check_scan_arg_types<T>();
 5156|       |
 5157|  93.7k|    basic_scan_arg<Context> arg;
 5158|  93.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  93.7k|    arg.m_value = make_value<Context>(value);
 5160|  93.7k|    return arg;
 5161|  93.7k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8866|   208k|{
 8867|   208k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   208k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   208k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   208k|    static_cast<    \
  |  |  929|   208k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   208k|    static_cast<    \
  |  |  929|   208k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   208k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5395|   899k|{
 5396|   899k|    detail::check_scan_arg_types<Args...>();
 5397|   899k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   899k|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5134|  1.45M|{
 5135|  1.45M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.45M|                  "Scan argument types must be default constructible");
 5137|  1.45M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.45M|                  "Scan argument types must be Destructible");
 5139|  1.45M|    static_assert(
 5140|  1.45M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.45M|        "Scan argument types must not be references");
 5142|  1.45M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5347|   899k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   899k|    {
 5349|   899k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   899k|    {
 5360|   899k|        return {detail::make_arg<
 5361|   899k|            kind, Context,
 5362|   899k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   899k|                                 typename Context::char_type>::value>(args)...};
 5364|   899k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   899k|{
 5170|   899k|    return make_value<Context>(value).ref_value;
 5171|   899k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5119|   995k|{
 5120|   995k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   995k|                                  needs_context_tag>) {
 5124|   995k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   995k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   995k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4958|   995k|    {                                                                        \
 4959|   995k|        return val;                                                          \
 4960|   995k|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5088|  1.45M|{
 5089|  1.45M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.45M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.45M|    constexpr bool scannable_char =
 5093|  1.45M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.45M|    static_assert(scannable_char,
 5095|  1.45M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.45M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.45M|    constexpr bool scannable_const =
 5099|  1.45M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.45M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.45M|    constexpr bool scannable_disabled =
 5103|  1.45M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.45M|    static_assert(scannable_disabled,
 5105|  1.45M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.45M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.45M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.45M|    static_assert(
 5110|  1.45M|        scannable,
 5111|  1.45M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.45M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.45M|    return arg_value{arg};
 5115|  1.45M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4900|  1.45M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  1.45M|    {
 4902|  1.45M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7974|   417k|    {
 7975|   417k|        return m_str;
 7976|   417k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   899k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   899k|    {
 5426|   899k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5378|   899k|    {
 5379|   899k|        return m_argptrs;
 5380|   899k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   417k|{
 8820|   417k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   417k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.8k, False: 384k]
  |  |  ------------------
  ------------------
 8821|  32.8k|        return unexpected(result.error());
 8822|  32.8k|    }
 8823|   384k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   417k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  35.5k|        : base(unexpect, std::move(e.error())),
 1474|  35.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  35.5k|    {
 1476|  35.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  35.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  35.5k|          m_has_value(false)
  446|  35.5k|    {
  447|  35.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   462k|    {
 1177|   462k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5828|   427k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   427k|    static_cast<    \
  |  |  929|   427k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   427k|    static_cast<    \
  |  |  929|   427k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   427k|    {
 5830|   427k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5614|  1.24M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.24M|    static_cast<    \
  |  |  929|  1.24M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|  1.24M|    {
 5616|  1.24M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   427k|        : base(std::in_place, std::forward<U>(val)),
 1428|   427k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   427k|    {
 1430|   427k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   427k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   427k|    {
  437|   427k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5373|   899k|    {
 5374|   899k|        return m_args;
 5375|   899k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   417k|        : m_str(r.str)
 7970|   417k|    {
 7971|   417k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   462k|    {
 1598|   462k|        return has_value();
 1599|   462k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   889k|    {
  485|   889k|        return m_has_value;
  486|   889k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   427k|    {
 1673|   427k|        return &value();
 1674|   427k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   427k|    {
 1627|   427k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   427k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   427k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   427k|        return this->get_value();
 1629|   427k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   427k|    {
  451|   427k|        return m_value;
  452|   427k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8933|   208k|{
 8934|   208k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   208k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   208k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   208k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   208k|    static_cast<    \
  |  |  929|   208k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   208k|    static_cast<    \
  |  |  929|   208k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   208k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8972|  45.5k|{
 8973|  45.5k|    T value;
 8974|  45.5k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  45.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  45.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  45.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  45.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  45.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.73k, False: 42.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.73k|    }                                                  \
  |  |  |  | 3671|  45.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  42.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  42.7k|    static_cast<    \
  |  |  929|  42.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  42.7k|    static_cast<    \
  |  |  929|  42.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  45.5k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  95.0k|{
 5155|  95.0k|    check_scan_arg_types<T>();
 5156|       |
 5157|  95.0k|    basic_scan_arg<Context> arg;
 5158|  95.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  95.0k|    arg.m_value = make_value<Context>(value);
 5160|  95.0k|    return arg;
 5161|  95.0k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   106k|    {
 2724|   106k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   106k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   106k|    {
 2705|   106k|        return decay_copy(t.begin());
 2706|   106k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  68.0M|{
 1949|  68.0M|    return SCN_FWD(t);
  ------------------
  |  |  930|  68.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  68.0M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.12M|    {
 2781|  3.12M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.12M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.12M|    {
 2763|  3.12M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.12M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   229k|{
 8867|   229k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   229k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   229k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   229k|    static_cast<    \
  |  |  929|   229k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   229k|    static_cast<    \
  |  |  929|   229k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   229k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   709k|{
 8654|   709k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   709k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   709k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   709k|{
 8591|   709k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   709k|    auto result = vscan_impl(buffer, format, args);
 8594|   709k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.2k, False: 660k]
  |  |  ------------------
  ------------------
 8595|  49.2k|        return unexpected(result.error());
 8596|  49.2k|    }
 8597|   660k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   660k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   709k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|  1.56M|{
 4720|  1.56M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.56M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.56M|                  "\n"
 4724|  1.56M|                  "Unsupported range type given as input to a scanning "
 4725|  1.56M|                  "function.\n"
 4726|  1.56M|                  "A range needs to have a character type (value type) "
 4727|  1.56M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.56M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.56M|                  "to be included.\n"
 4730|  1.56M|                  "See the scnlib documentation for more details.");
 4731|  1.56M|    static_assert(
 4732|  1.56M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.56M|        "\n"
 4734|  1.56M|        "Unsupported range type given as input to a scanning "
 4735|  1.56M|        "function.\n"
 4736|  1.56M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.56M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.56M|        "not supported.");
 4739|  1.56M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.56M|                  "\n"
 4741|  1.56M|                  "Unsupported range type given as input to a scanning "
 4742|  1.56M|                  "function.\n"
 4743|  1.56M|                  "file_marker_found cannot be used as an "
 4744|  1.56M|                  "source range type to scn::scan.\n"
 4745|  1.56M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.56M|                  "and do not provide an explicit source range, "
 4747|  1.56M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.56M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.56M|                  "\n"
 4750|  1.56M|                  "Unsupported range type given as input to a scanning "
 4751|  1.56M|                  "function.\n"
 4752|  1.56M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.56M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.56M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.56M|                  "\n"
 4756|  1.56M|                  "Unsupported range type given as input to a scanning "
 4757|  1.56M|                  "function.\n"
 4758|  1.56M|                  "A range needs to model forward_range and have a valid "
 4759|  1.56M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.56M|                  "Examples of scannable ranges are std::string, "
 4761|  1.56M|                  "std::string_view, "
 4762|  1.56M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.56M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.56M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.56M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  1.56M|{
 4690|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4691|       |        return file_marker_found{};
 4692|       |    }
 4693|       |    else if constexpr (!ranges::forward_range<Range>) {
 4694|       |        if constexpr (ranges::range<Range>) {
 4695|       |            return insufficient_range{};
 4696|       |        }
 4697|       |        else {
 4698|       |            return invalid_input_range{};
 4699|       |        }
 4700|       |    }
 4701|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4702|       |        return invalid_char_type{};
 4703|       |    }
 4704|  1.56M|    else {
 4705|  1.56M|        return make_forward_scan_buffer(r);
 4706|  1.56M|    }
 4707|  1.56M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|  1.56M|{
 4524|  1.56M|    return basic_scan_forward_buffer_impl(range);
 4525|  1.56M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4408|  1.56M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|  1.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4409|  1.56M|          m_cursor(ranges::begin(*m_range))
 4410|  1.56M|    {
 4411|  1.56M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4380|  1.56M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4381|  1.56M|    {
 4382|  1.56M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4149|  1.56M|        : m_current_view(sv), m_is_contiguous(false)
 4150|  1.56M|    {
 4151|  1.56M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|  1.56M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.02M|    {
 2724|  3.02M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.02M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.02M|    {
 2705|  3.02M|        return decay_copy(t.begin());
 2706|  3.02M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|  4.48M|    {
 3330|  4.48M|        return m_iterator;
 3331|  4.48M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  19.8M|    {
 4415|  19.8M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 310k, False: 19.5M]
  ------------------
 4416|   310k|            return false;
 4417|   310k|        }
 4418|  19.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4419|  19.5M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  19.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  19.5M|        }
 4421|  19.5M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 17.9M, False: 1.54M]
  ------------------
 4422|  17.9M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  17.9M|                                          this->m_current_view.begin(),
 4424|  17.9M|                                          this->m_current_view.end());
 4425|  17.9M|        }
 4426|  19.5M|        m_latest = *m_cursor;
 4427|  19.5M|        ++m_cursor;
 4428|  19.5M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  19.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4430|  19.5M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  19.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  19.5M|        }
 4432|  19.5M|        return true;
 4433|  19.8M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  58.8M|    {
 2781|  58.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  58.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  58.8M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  58.8M|    {
 2763|  58.8M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  58.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  58.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  60.3M|    {
 3334|  60.3M|        return m_sentinel;
 3335|  60.3M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|  1.56M|    {
 4071|  1.56M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  1.56M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  1.56M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   106k|        : base(unexpect, std::move(e.error())),
 1474|   106k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   106k|    {
 1476|   106k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   106k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   106k|          m_has_value(false)
  446|   106k|    {
  447|   106k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.56M|    {
 1177|  1.56M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  1.45M|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|  1.45M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.45M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|  1.45M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.45M|    {
 2724|  1.45M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.45M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.45M|    {
 2705|  1.45M|        return decay_copy(t.begin());
 2706|  1.45M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|  1.45M|{
 5910|  1.45M|    return ranges::end(source);
 5911|  1.45M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.45M|    {
 2781|  1.45M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.45M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.45M|    {
 2763|  1.45M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.45M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  1.45M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.45M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.45M|    {
 1430|  1.45M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  1.45M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.45M|    {
  437|  1.45M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   458k|    {
 7975|   458k|        return m_str;
 7976|   458k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   458k|{
 8820|   458k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   458k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.8k, False: 425k]
  |  |  ------------------
  ------------------
 8821|  32.8k|        return unexpected(result.error());
 8822|  32.8k|    }
 8823|   425k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   425k|    static_cast<    \
  |  |  929|   425k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   425k|    static_cast<    \
  |  |  929|   425k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   458k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  1.56M|    {
 1598|  1.56M|        return has_value();
 1599|  1.56M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.12M|    {
  485|  3.12M|        return m_has_value;
  486|  3.12M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   106k|    {
 1604|   106k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   106k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   106k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   106k|        return this->get_unexpected().error();
 1606|   106k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   106k|    {
  468|   106k|        return m_unexpected;
  469|   106k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  35.5k|        : base(unexpect, std::move(e.error())),
 1474|  35.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  35.5k|    {
 1476|  35.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  35.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  35.5k|          m_has_value(false)
  446|  35.5k|    {
  447|  35.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   505k|    {
 1177|   505k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|  1.32M|    {
 1653|  1.32M|        return value();
 1654|  1.32M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  1.45M|    {
 1627|  1.45M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.45M|        return this->get_value();
 1629|  1.45M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.45M|    {
  451|  1.45M|        return m_value;
  452|  1.45M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5828|   469k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   469k|    static_cast<    \
  |  |  929|   469k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   469k|    static_cast<    \
  |  |  929|   469k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   469k|    {
 5830|   469k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5679|  1.45M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.45M|    static_cast<    \
  |  |  929|  1.45M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|  1.45M|    {
 5681|  1.45M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   469k|        : base(std::in_place, std::forward<U>(val)),
 1428|   469k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   469k|    {
 1430|   469k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   469k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   469k|    {
  437|   469k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3314|  3.02M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.02M|    static_cast<    \
  |  |  929|  3.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.02M|    static_cast<    \
  |  |  929|  3.02M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  3.02M|    {
 3316|  3.02M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   458k|        : m_str(r.str)
 7970|   458k|    {
 7971|   458k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   505k|    {
 1598|   505k|        return has_value();
 1599|   505k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   975k|    {
  485|   975k|        return m_has_value;
  486|   975k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   469k|    {
 1673|   469k|        return &value();
 1674|   469k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   469k|    {
 1627|   469k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   469k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   469k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   469k|        return this->get_value();
 1629|   469k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   469k|    {
  451|   469k|        return m_value;
  452|   469k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|  1.45M|    {
 5698|  1.45M|        return ranges::begin(m_range);
 5699|  1.45M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   229k|{
 8934|   229k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   229k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   229k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   229k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   229k|    static_cast<    \
  |  |  929|   229k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   229k|    static_cast<    \
  |  |  929|   229k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   229k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   709k|{
 8672|   709k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   709k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   709k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   709k|{
 8607|   709k|#if !SCN_DISABLE_LOCALE
 8608|   709k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   709k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   709k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   709k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   709k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   709k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.2k, False: 660k]
  |  |  ------------------
  ------------------
 8615|  49.2k|        return unexpected(result.error());
 8616|  49.2k|    }
 8617|   660k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   660k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   709k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  46.7k|{
 8973|  46.7k|    T value;
 8974|  46.7k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  46.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  46.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  46.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  46.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  46.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.73k, False: 44.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.73k|    }                                                  \
  |  |  |  | 3671|  46.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  44.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  44.0k|    static_cast<    \
  |  |  929|  44.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  44.0k|    static_cast<    \
  |  |  929|  44.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  46.7k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|   145k|{
 8685|   145k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|   145k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   145k|{
 8631|   145k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   145k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   145k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.20k, False: 137k]
  |  |  ------------------
  ------------------
 8635|  8.20k|        return unexpected(result.error());
 8636|  8.20k|    }
 8637|   137k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   145k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|   137k|    {
 1663|   137k|        return std::move(value());
 1664|   137k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   239k|{
 8867|   239k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   239k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   239k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   239k|    static_cast<    \
  |  |  929|   239k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   239k|    static_cast<    \
  |  |  929|   239k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   239k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   478k|    {
 7975|   478k|        return m_str;
 7976|   478k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   478k|{
 8820|   478k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   478k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.8k, False: 445k]
  |  |  ------------------
  ------------------
 8821|  32.8k|        return unexpected(result.error());
 8822|  32.8k|    }
 8823|   445k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   445k|    static_cast<    \
  |  |  929|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   445k|    static_cast<    \
  |  |  929|   445k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   478k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  35.5k|        : base(unexpect, std::move(e.error())),
 1474|  35.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  35.5k|    {
 1476|  35.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  35.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  35.5k|          m_has_value(false)
  446|  35.5k|    {
  447|  35.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   527k|    {
 1177|   527k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5828|   491k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   491k|    static_cast<    \
  |  |  929|   491k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   491k|    static_cast<    \
  |  |  929|   491k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   491k|    {
 5830|   491k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   491k|        : base(std::in_place, std::forward<U>(val)),
 1428|   491k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   491k|    {
 1430|   491k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   491k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   491k|    {
  437|   491k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   478k|        : m_str(r.str)
 7970|   478k|    {
 7971|   478k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   527k|    {
 1598|   527k|        return has_value();
 1599|   527k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.01M|    {
  485|  1.01M|        return m_has_value;
  486|  1.01M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   491k|    {
 1673|   491k|        return &value();
 1674|   491k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   491k|    {
 1627|   491k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   491k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   491k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   491k|        return this->get_value();
 1629|   491k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   491k|    {
  451|   491k|        return m_value;
  452|   491k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   239k|{
 8934|   239k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   239k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   239k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   239k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   239k|    static_cast<    \
  |  |  929|   239k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   239k|    static_cast<    \
  |  |  929|   239k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   239k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  49.0k|{
 8973|  49.0k|    T value;
 8974|  49.0k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  49.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  49.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  49.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  49.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  49.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.73k, False: 46.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.73k|    }                                                  \
  |  |  |  | 3671|  49.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  46.2k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  46.2k|    static_cast<    \
  |  |  929|  46.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  46.2k|    static_cast<    \
  |  |  929|  46.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  49.0k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8866|   241k|{
 8867|   241k|    auto args = make_scan_args<scan_context, Args...>();
 8868|   241k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|   241k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   241k|    static_cast<    \
  |  |  929|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   241k|    static_cast<    \
  |  |  929|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|   241k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7974|   482k|    {
 7975|   482k|        return m_str;
 7976|   482k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   482k|{
 8820|   482k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   482k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.8k, False: 450k]
  |  |  ------------------
  ------------------
 8821|  32.8k|        return unexpected(result.error());
 8822|  32.8k|    }
 8823|   450k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   450k|    static_cast<    \
  |  |  929|   450k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   450k|    static_cast<    \
  |  |  929|   450k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   482k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  35.5k|        : base(unexpect, std::move(e.error())),
 1474|  35.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  35.5k|    {
 1476|  35.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  35.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  35.5k|          m_has_value(false)
  446|  35.5k|    {
  447|  35.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   532k|    {
 1177|   532k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5828|   496k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   496k|    static_cast<    \
  |  |  929|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   496k|    static_cast<    \
  |  |  929|   496k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   496k|    {
 5830|   496k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   496k|        : base(std::in_place, std::forward<U>(val)),
 1428|   496k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   496k|    {
 1430|   496k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   496k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   496k|    {
  437|   496k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   482k|        : m_str(r.str)
 7970|   482k|    {
 7971|   482k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   532k|    {
 1598|   532k|        return has_value();
 1599|   532k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.02M|    {
  485|  1.02M|        return m_has_value;
  486|  1.02M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   496k|    {
 1673|   496k|        return &value();
 1674|   496k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   496k|    {
 1627|   496k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   496k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   496k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   496k|        return this->get_value();
 1629|   496k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   496k|    {
  451|   496k|        return m_value;
  452|   496k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8933|   241k|{
 8934|   241k|    auto args = make_scan_args<scan_context, Args...>();
 8935|   241k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|   241k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   241k|    static_cast<    \
  |  |  929|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   241k|    static_cast<    \
  |  |  929|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|   241k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8972|  49.5k|{
 8973|  49.5k|    T value;
 8974|  49.5k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  49.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  49.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  49.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  49.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  49.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.73k, False: 46.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.73k|    }                                                  \
  |  |  |  | 3671|  49.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  46.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  46.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  46.7k|    static_cast<    \
  |  |  929|  46.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  46.7k|    static_cast<    \
  |  |  929|  46.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  49.5k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   218k|    {
 2724|   218k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   218k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   218k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   218k|    {
 2705|   218k|        return decay_copy(t.begin());
 2706|   218k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  4.42M|{
 1949|  4.42M|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  4.42M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.34M|    {
 2781|  1.34M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.34M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.34M|    {
 2763|  1.34M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.34M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5395|   388k|{
 5396|   388k|    detail::check_scan_arg_types<Args...>();
 5397|   388k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   388k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5347|   388k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   388k|    {
 5349|   388k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   388k|    {
 5360|   388k|        return {detail::make_arg<
 5361|   388k|            kind, Context,
 5362|   388k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   388k|                                 typename Context::char_type>::value>(args)...};
 5364|   388k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5169|   388k|{
 5170|   388k|    return make_value<Context>(value).ref_value;
 5171|   388k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5119|   425k|{
 5120|   425k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   425k|                                  needs_context_tag>) {
 5124|   425k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   425k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   425k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4958|   425k|    {                                                                        \
 4959|   425k|        return val;                                                          \
 4960|   425k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   305k|{
 8591|   305k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   305k|    auto result = vscan_impl(buffer, format, args);
 8594|   305k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98.4k, False: 207k]
  |  |  ------------------
  ------------------
 8595|  98.4k|        return unexpected(result.error());
 8596|  98.4k|    }
 8597|   207k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   305k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|   671k|{
 4720|   671k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   671k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   671k|                  "\n"
 4724|   671k|                  "Unsupported range type given as input to a scanning "
 4725|   671k|                  "function.\n"
 4726|   671k|                  "A range needs to have a character type (value type) "
 4727|   671k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   671k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   671k|                  "to be included.\n"
 4730|   671k|                  "See the scnlib documentation for more details.");
 4731|   671k|    static_assert(
 4732|   671k|        !std::is_same_v<T, custom_char_traits>,
 4733|   671k|        "\n"
 4734|   671k|        "Unsupported range type given as input to a scanning "
 4735|   671k|        "function.\n"
 4736|   671k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   671k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   671k|        "not supported.");
 4739|   671k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   671k|                  "\n"
 4741|   671k|                  "Unsupported range type given as input to a scanning "
 4742|   671k|                  "function.\n"
 4743|   671k|                  "file_marker_found cannot be used as an "
 4744|   671k|                  "source range type to scn::scan.\n"
 4745|   671k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   671k|                  "and do not provide an explicit source range, "
 4747|   671k|                  "or use scn::scan with a FILE* directly.");
 4748|   671k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   671k|                  "\n"
 4750|   671k|                  "Unsupported range type given as input to a scanning "
 4751|   671k|                  "function.\n"
 4752|   671k|                  "In order to be scannable, a range needs to satisfy "
 4753|   671k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   671k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   671k|                  "\n"
 4756|   671k|                  "Unsupported range type given as input to a scanning "
 4757|   671k|                  "function.\n"
 4758|   671k|                  "A range needs to model forward_range and have a valid "
 4759|   671k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   671k|                  "Examples of scannable ranges are std::string, "
 4761|   671k|                  "std::string_view, "
 4762|   671k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   671k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   671k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   671k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4658|   671k|{
 4659|   671k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4660|   671k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|       |    }
 4662|       |    else {
 4663|       |        return invalid_char_type{};
 4664|       |    }
 4665|   671k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   671k|    {
 2855|   671k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   671k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   671k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   671k|    {
 2836|   671k|        return t.data();
 2837|   671k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|   671k|    {
 3231|   671k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 1.58k, False: 669k]
  ------------------
 3232|   671k|                   ? nullptr
 3233|   671k|                   : std::addressof(*ranges::begin(derived()));
 3234|   671k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   671k|    {
 3005|   671k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   671k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   671k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   671k|    {
 2978|   671k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   671k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   671k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  1.24M|    {
 3339|  1.24M|        return m_iterator == m_sentinel;
 3340|  1.24M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  1.34M|    {
 3185|  1.34M|        return static_cast<const D&>(*this);
 3186|  1.34M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.12M|    {
 2724|  1.12M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.12M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.12M|    {
 2705|  1.12M|        return decay_copy(t.begin());
 2706|  1.12M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  23.4M|    {
 3330|  23.4M|        return m_iterator;
 3331|  23.4M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   671k|    {
 2930|   671k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   671k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   671k|    {
 2896|   671k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   671k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   671k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3345|  2.99M|    {
 3346|  2.99M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  2.99M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   213k|        : base(unexpect, std::move(e.error())),
 1474|   213k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   213k|    {
 1476|   213k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   213k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   213k|          m_has_value(false)
  446|   213k|    {
  447|   213k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   671k|    {
 1177|   671k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   457k|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|   457k|                      ranges::iterator_t<SourceRange>>) {
 5925|   457k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|   457k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.27M|    {
 2724|  1.27M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.27M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.27M|    {
 2705|  1.27M|        return decay_copy(t.begin());
 2706|  1.27M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|   457k|{
 5910|   457k|    return ranges::end(source);
 5911|   457k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   457k|    {
 2781|   457k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   457k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   457k|    {
 2763|   457k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   457k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  13.4M|    {
 3334|  13.4M|        return m_sentinel;
 3335|  13.4M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   457k|        : base(std::in_place, std::forward<U>(val)),
 1428|   457k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   457k|    {
 1430|   457k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   457k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   457k|    {
  437|   457k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   194k|    {
 7975|   194k|        return m_str;
 7976|   194k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   388k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   388k|    {
 5426|   388k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5378|   388k|    {
 5379|   388k|        return m_argptrs;
 5380|   388k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5476|  1.22M|        : m_desc(desc), m_builtin_values(data)
 5477|  1.22M|    {
 5478|  1.22M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   194k|{
 8820|   194k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 65.6k, False: 128k]
  |  |  ------------------
  ------------------
 8821|  65.6k|        return unexpected(result.error());
 8822|  65.6k|    }
 8823|   128k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   128k|    static_cast<    \
  |  |  929|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   128k|    static_cast<    \
  |  |  929|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   194k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   671k|    {
 1598|   671k|        return has_value();
 1599|   671k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.34M|    {
  485|  1.34M|        return m_has_value;
  486|  1.34M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   213k|    {
 1604|   213k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   213k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   213k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   213k|        return this->get_unexpected().error();
 1606|   213k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   213k|    {
  468|   213k|        return m_unexpected;
  469|   213k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  71.1k|        : base(unexpect, std::move(e.error())),
 1474|  71.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  71.1k|    {
 1476|  71.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  71.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  71.1k|          m_has_value(false)
  446|  71.1k|    {
  447|  71.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   212k|    {
 1177|   212k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   415k|    {
 1653|   415k|        return value();
 1654|   415k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   457k|    {
 1627|   457k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   457k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   457k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   457k|        return this->get_value();
 1629|   457k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   457k|    {
  451|   457k|        return m_value;
  452|   457k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5828|   141k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   141k|    static_cast<    \
  |  |  929|   141k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   141k|    static_cast<    \
  |  |  929|   141k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   141k|    {
 5830|   141k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5679|   457k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   457k|    static_cast<    \
  |  |  929|   457k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|   457k|    {
 5681|   457k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   141k|        : base(std::in_place, std::forward<U>(val)),
 1428|   141k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   141k|    {
 1430|   141k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   141k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   141k|    {
  437|   141k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5373|   388k|    {
 5374|   388k|        return m_args;
 5375|   388k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3314|  8.38M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  8.38M|    static_cast<    \
  |  |  929|  8.38M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  8.38M|    static_cast<    \
  |  |  929|  8.38M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  8.38M|    {
 3316|  8.38M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|  1.22M|{
 7696|  1.22M|    return s;
 7697|  1.22M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|  1.22M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   194k|        : m_str(r.str)
 7970|   194k|    {
 7971|   194k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   212k|    {
 1598|   212k|        return has_value();
 1599|   212k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   354k|    {
  485|   354k|        return m_has_value;
  486|   354k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   141k|    {
 1673|   141k|        return &value();
 1674|   141k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   141k|    {
 1627|   141k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   141k|        return this->get_value();
 1629|   141k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   141k|    {
  451|   141k|        return m_value;
  452|   141k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|   457k|    {
 5698|   457k|        return ranges::begin(m_range);
 5699|   457k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   305k|{
 8607|   305k|#if !SCN_DISABLE_LOCALE
 8608|   305k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   305k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   305k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   305k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   305k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98.4k, False: 207k]
  |  |  ------------------
  ------------------
 8615|  98.4k|        return unexpected(result.error());
 8616|  98.4k|    }
 8617|   207k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   305k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5154|  36.4k|{
 5155|  36.4k|    check_scan_arg_types<T>();
 5156|       |
 5157|  36.4k|    basic_scan_arg<Context> arg;
 5158|  36.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  36.4k|    arg.m_value = make_value<Context>(value);
 5160|  36.4k|    return arg;
 5161|  36.4k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  1.34M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  59.3k|{
 8631|  59.3k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  59.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  59.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  59.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.4k, False: 42.9k]
  |  |  ------------------
  ------------------
 8635|  16.4k|        return unexpected(result.error());
 8636|  16.4k|    }
 8637|  42.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  42.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  59.3k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  42.9k|    {
 1663|  42.9k|        return std::move(value());
 1664|  42.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5395|   413k|{
 5396|   413k|    detail::check_scan_arg_types<Args...>();
 5397|   413k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   413k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5347|   413k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   413k|    {
 5349|   413k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   413k|    {
 5360|   413k|        return {detail::make_arg<
 5361|   413k|            kind, Context,
 5362|   413k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   413k|                                 typename Context::char_type>::value>(args)...};
 5364|   413k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5169|   413k|{
 5170|   413k|    return make_value<Context>(value).ref_value;
 5171|   413k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5119|   453k|{
 5120|   453k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   453k|                                  needs_context_tag>) {
 5124|   453k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   453k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4958|   453k|    {                                                                        \
 4959|   453k|        return val;                                                          \
 4960|   453k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   206k|    {
 7975|   206k|        return m_str;
 7976|   206k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   413k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   413k|    {
 5426|   413k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5378|   413k|    {
 5379|   413k|        return m_argptrs;
 5380|   413k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   206k|{
 8820|   206k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 65.6k, False: 140k]
  |  |  ------------------
  ------------------
 8821|  65.6k|        return unexpected(result.error());
 8822|  65.6k|    }
 8823|   140k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   206k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  71.1k|        : base(unexpect, std::move(e.error())),
 1474|  71.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  71.1k|    {
 1476|  71.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  71.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  71.1k|          m_has_value(false)
  446|  71.1k|    {
  447|  71.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   226k|    {
 1177|   226k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5828|   155k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   155k|    {
 5830|   155k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   155k|        : base(std::in_place, std::forward<U>(val)),
 1428|   155k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   155k|    {
 1430|   155k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   155k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   155k|    {
  437|   155k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5373|   413k|    {
 5374|   413k|        return m_args;
 5375|   413k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   206k|        : m_str(r.str)
 7970|   206k|    {
 7971|   206k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   226k|    {
 1598|   226k|        return has_value();
 1599|   226k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   382k|    {
  485|   382k|        return m_has_value;
  486|   382k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   155k|    {
 1673|   155k|        return &value();
 1674|   155k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   155k|    {
 1627|   155k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   155k|        return this->get_value();
 1629|   155k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   155k|    {
  451|   155k|        return m_value;
  452|   155k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5154|  40.4k|{
 5155|  40.4k|    check_scan_arg_types<T>();
 5156|       |
 5157|  40.4k|    basic_scan_arg<Context> arg;
 5158|  40.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  40.4k|    arg.m_value = make_value<Context>(value);
 5160|  40.4k|    return arg;
 5161|  40.4k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5395|   421k|{
 5396|   421k|    detail::check_scan_arg_types<Args...>();
 5397|   421k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   421k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5347|   421k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   421k|    {
 5349|   421k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5359|   421k|    {
 5360|   421k|        return {detail::make_arg<
 5361|   421k|            kind, Context,
 5362|   421k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   421k|                                 typename Context::char_type>::value>(args)...};
 5364|   421k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5169|   421k|{
 5170|   421k|    return make_value<Context>(value).ref_value;
 5171|   421k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5119|   463k|{
 5120|   463k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   463k|                                  needs_context_tag>) {
 5124|   463k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   463k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   463k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4958|   463k|    {                                                                        \
 4959|   463k|        return val;                                                          \
 4960|   463k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7974|   210k|    {
 7975|   210k|        return m_str;
 7976|   210k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   421k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   421k|    {
 5426|   421k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5378|   421k|    {
 5379|   421k|        return m_argptrs;
 5380|   421k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8819|   210k|{
 8820|   210k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 65.6k, False: 145k]
  |  |  ------------------
  ------------------
 8821|  65.6k|        return unexpected(result.error());
 8822|  65.6k|    }
 8823|   145k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   210k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  71.1k|        : base(unexpect, std::move(e.error())),
 1474|  71.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  71.1k|    {
 1476|  71.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  71.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  71.1k|          m_has_value(false)
  446|  71.1k|    {
  447|  71.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   231k|    {
 1177|   231k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5828|   160k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   160k|    {
 5830|   160k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   160k|        : base(std::in_place, std::forward<U>(val)),
 1428|   160k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   160k|    {
 1430|   160k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   160k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   160k|    {
  437|   160k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5373|   421k|    {
 5374|   421k|        return m_args;
 5375|   421k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   210k|        : m_str(r.str)
 7970|   210k|    {
 7971|   210k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   231k|    {
 1598|   231k|        return has_value();
 1599|   231k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   392k|    {
  485|   392k|        return m_has_value;
  486|   392k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   160k|    {
 1673|   160k|        return &value();
 1674|   160k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   160k|    {
 1627|   160k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   160k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   160k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   160k|        return this->get_value();
 1629|   160k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   160k|    {
  451|   160k|        return m_value;
  452|   160k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5154|  41.7k|{
 5155|  41.7k|    check_scan_arg_types<T>();
 5156|       |
 5157|  41.7k|    basic_scan_arg<Context> arg;
 5158|  41.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  41.7k|    arg.m_value = make_value<Context>(value);
 5160|  41.7k|    return arg;
 5161|  41.7k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   213k|    {
 2724|   213k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   213k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   213k|    {
 2705|   213k|        return decay_copy(t.begin());
 2706|   213k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  13.2M|{
 1949|  13.2M|    return SCN_FWD(t);
  ------------------
  |  |  930|  13.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  13.2M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.34M|    {
 2781|  1.34M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.34M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.34M|    {
 2763|  1.34M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.34M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   305k|{
 8591|   305k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   305k|    auto result = vscan_impl(buffer, format, args);
 8594|   305k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98.4k, False: 207k]
  |  |  ------------------
  ------------------
 8595|  98.4k|        return unexpected(result.error());
 8596|  98.4k|    }
 8597|   207k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   305k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|   670k|{
 4720|   670k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   670k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   670k|                  "\n"
 4724|   670k|                  "Unsupported range type given as input to a scanning "
 4725|   670k|                  "function.\n"
 4726|   670k|                  "A range needs to have a character type (value type) "
 4727|   670k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   670k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   670k|                  "to be included.\n"
 4730|   670k|                  "See the scnlib documentation for more details.");
 4731|   670k|    static_assert(
 4732|   670k|        !std::is_same_v<T, custom_char_traits>,
 4733|   670k|        "\n"
 4734|   670k|        "Unsupported range type given as input to a scanning "
 4735|   670k|        "function.\n"
 4736|   670k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   670k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   670k|        "not supported.");
 4739|   670k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   670k|                  "\n"
 4741|   670k|                  "Unsupported range type given as input to a scanning "
 4742|   670k|                  "function.\n"
 4743|   670k|                  "file_marker_found cannot be used as an "
 4744|   670k|                  "source range type to scn::scan.\n"
 4745|   670k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   670k|                  "and do not provide an explicit source range, "
 4747|   670k|                  "or use scn::scan with a FILE* directly.");
 4748|   670k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   670k|                  "\n"
 4750|   670k|                  "Unsupported range type given as input to a scanning "
 4751|   670k|                  "function.\n"
 4752|   670k|                  "In order to be scannable, a range needs to satisfy "
 4753|   670k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   670k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   670k|                  "\n"
 4756|   670k|                  "Unsupported range type given as input to a scanning "
 4757|   670k|                  "function.\n"
 4758|   670k|                  "A range needs to model forward_range and have a valid "
 4759|   670k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   670k|                  "Examples of scannable ranges are std::string, "
 4761|   670k|                  "std::string_view, "
 4762|   670k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   670k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   670k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   670k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   670k|{
 4690|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4691|       |        return file_marker_found{};
 4692|       |    }
 4693|       |    else if constexpr (!ranges::forward_range<Range>) {
 4694|       |        if constexpr (ranges::range<Range>) {
 4695|       |            return insufficient_range{};
 4696|       |        }
 4697|       |        else {
 4698|       |            return invalid_input_range{};
 4699|       |        }
 4700|       |    }
 4701|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4702|       |        return invalid_char_type{};
 4703|       |    }
 4704|   670k|    else {
 4705|   670k|        return make_forward_scan_buffer(r);
 4706|   670k|    }
 4707|   670k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|   670k|{
 4524|   670k|    return basic_scan_forward_buffer_impl(range);
 4525|   670k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4408|   670k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   670k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4409|   670k|          m_cursor(ranges::begin(*m_range))
 4410|   670k|    {
 4411|   670k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4380|   670k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4381|   670k|    {
 4382|   670k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4149|   670k|        : m_current_view(sv), m_is_contiguous(false)
 4150|   670k|    {
 4151|   670k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|   670k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.12M|    {
 2724|  1.12M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.12M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.12M|    {
 2705|  1.12M|        return decay_copy(t.begin());
 2706|  1.12M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|  1.58M|    {
 3330|  1.58M|        return m_iterator;
 3331|  1.58M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  3.33M|    {
 4415|  3.33M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 184k, False: 3.15M]
  ------------------
 4416|   184k|            return false;
 4417|   184k|        }
 4418|  3.15M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4419|  3.15M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  3.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  3.15M|        }
 4421|  3.15M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 2.48M, False: 669k]
  ------------------
 4422|  2.48M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  2.48M|                                          this->m_current_view.begin(),
 4424|  2.48M|                                          this->m_current_view.end());
 4425|  2.48M|        }
 4426|  3.15M|        m_latest = *m_cursor;
 4427|  3.15M|        ++m_cursor;
 4428|  3.15M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  3.15M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4430|  3.15M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  3.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  3.15M|        }
 4432|  3.15M|        return true;
 4433|  3.33M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  9.63M|    {
 2781|  9.63M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  9.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  9.63M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  9.63M|    {
 2763|  9.63M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  9.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  9.63M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|  10.0M|    {
 3334|  10.0M|        return m_sentinel;
 3335|  10.0M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|   670k|    {
 4071|   670k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   670k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   670k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   213k|        : base(unexpect, std::move(e.error())),
 1474|   213k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   213k|    {
 1476|   213k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   213k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   213k|          m_has_value(false)
  446|   213k|    {
  447|   213k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   670k|    {
 1177|   670k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   457k|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|   457k|                      ranges::iterator_t<SourceRange>>) {
 5925|   457k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|   457k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   457k|    {
 2724|   457k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   457k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   457k|    {
 2705|   457k|        return decay_copy(t.begin());
 2706|   457k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|   457k|{
 5910|   457k|    return ranges::end(source);
 5911|   457k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   457k|    {
 2781|   457k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   457k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   457k|    {
 2763|   457k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   457k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   457k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   457k|        : base(std::in_place, std::forward<U>(val)),
 1428|   457k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   457k|    {
 1430|   457k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   457k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   457k|    {
  437|   457k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   194k|    {
 7975|   194k|        return m_str;
 7976|   194k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   194k|{
 8820|   194k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 65.6k, False: 128k]
  |  |  ------------------
  ------------------
 8821|  65.6k|        return unexpected(result.error());
 8822|  65.6k|    }
 8823|   128k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   128k|    static_cast<    \
  |  |  929|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   128k|    static_cast<    \
  |  |  929|   128k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   194k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   670k|    {
 1598|   670k|        return has_value();
 1599|   670k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.34M|    {
  485|  1.34M|        return m_has_value;
  486|  1.34M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   213k|    {
 1604|   213k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   213k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   213k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   213k|        return this->get_unexpected().error();
 1606|   213k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   213k|    {
  468|   213k|        return m_unexpected;
  469|   213k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  71.1k|        : base(unexpect, std::move(e.error())),
 1474|  71.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  71.1k|    {
 1476|  71.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  71.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  71.1k|          m_has_value(false)
  446|  71.1k|    {
  447|  71.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   212k|    {
 1177|   212k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   414k|    {
 1653|   414k|        return value();
 1654|   414k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   457k|    {
 1627|   457k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   457k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   457k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   457k|        return this->get_value();
 1629|   457k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   457k|    {
  451|   457k|        return m_value;
  452|   457k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5828|   141k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   141k|    static_cast<    \
  |  |  929|   141k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   141k|    static_cast<    \
  |  |  929|   141k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   141k|    {
 5830|   141k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5679|   457k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   457k|    static_cast<    \
  |  |  929|   457k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|   457k|    {
 5681|   457k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   141k|        : base(std::in_place, std::forward<U>(val)),
 1428|   141k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   141k|    {
 1430|   141k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   141k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   141k|    {
  437|   141k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3314|  1.12M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.12M|    static_cast<    \
  |  |  929|  1.12M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.12M|    static_cast<    \
  |  |  929|  1.12M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  1.12M|    {
 3316|  1.12M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   194k|        : m_str(r.str)
 7970|   194k|    {
 7971|   194k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   212k|    {
 1598|   212k|        return has_value();
 1599|   212k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   354k|    {
  485|   354k|        return m_has_value;
  486|   354k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   141k|    {
 1673|   141k|        return &value();
 1674|   141k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   141k|    {
 1627|   141k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   141k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   141k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   141k|        return this->get_value();
 1629|   141k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   141k|    {
  451|   141k|        return m_value;
  452|   141k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|   457k|    {
 5698|   457k|        return ranges::begin(m_range);
 5699|   457k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   305k|{
 8607|   305k|#if !SCN_DISABLE_LOCALE
 8608|   305k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   305k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   305k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   305k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   305k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 98.4k, False: 207k]
  |  |  ------------------
  ------------------
 8615|  98.4k|        return unexpected(result.error());
 8616|  98.4k|    }
 8617|   207k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   207k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   305k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  59.2k|{
 8631|  59.2k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  59.2k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  59.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.4k, False: 42.8k]
  |  |  ------------------
  ------------------
 8635|  16.4k|        return unexpected(result.error());
 8636|  16.4k|    }
 8637|  42.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  42.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  59.2k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  42.8k|    {
 1663|  42.8k|        return std::move(value());
 1664|  42.8k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   206k|    {
 7975|   206k|        return m_str;
 7976|   206k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   206k|{
 8820|   206k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   206k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 65.6k, False: 140k]
  |  |  ------------------
  ------------------
 8821|  65.6k|        return unexpected(result.error());
 8822|  65.6k|    }
 8823|   140k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   206k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  71.1k|        : base(unexpect, std::move(e.error())),
 1474|  71.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  71.1k|    {
 1476|  71.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  71.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  71.1k|          m_has_value(false)
  446|  71.1k|    {
  447|  71.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   226k|    {
 1177|   226k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5828|   155k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   155k|    static_cast<    \
  |  |  929|   155k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   155k|    {
 5830|   155k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   155k|        : base(std::in_place, std::forward<U>(val)),
 1428|   155k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   155k|    {
 1430|   155k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   155k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   155k|    {
  437|   155k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   206k|        : m_str(r.str)
 7970|   206k|    {
 7971|   206k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   226k|    {
 1598|   226k|        return has_value();
 1599|   226k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   382k|    {
  485|   382k|        return m_has_value;
  486|   382k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   155k|    {
 1673|   155k|        return &value();
 1674|   155k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   155k|    {
 1627|   155k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   155k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   155k|        return this->get_value();
 1629|   155k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   155k|    {
  451|   155k|        return m_value;
  452|   155k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7974|   210k|    {
 7975|   210k|        return m_str;
 7976|   210k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8819|   210k|{
 8820|   210k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 65.6k, False: 144k]
  |  |  ------------------
  ------------------
 8821|  65.6k|        return unexpected(result.error());
 8822|  65.6k|    }
 8823|   144k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   144k|    static_cast<    \
  |  |  929|   144k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   144k|    static_cast<    \
  |  |  929|   144k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   210k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  71.1k|        : base(unexpect, std::move(e.error())),
 1474|  71.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  71.1k|    {
 1476|  71.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  71.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  71.1k|          m_has_value(false)
  446|  71.1k|    {
  447|  71.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   231k|    {
 1177|   231k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5828|   160k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   160k|    static_cast<    \
  |  |  929|   160k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   160k|    {
 5830|   160k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   160k|        : base(std::in_place, std::forward<U>(val)),
 1428|   160k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   160k|    {
 1430|   160k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   160k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   160k|    {
  437|   160k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|   210k|        : m_str(r.str)
 7970|   210k|    {
 7971|   210k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   231k|    {
 1598|   231k|        return has_value();
 1599|   231k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   391k|    {
  485|   391k|        return m_has_value;
  486|   391k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   160k|    {
 1673|   160k|        return &value();
 1674|   160k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   160k|    {
 1627|   160k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   160k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   160k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   160k|        return this->get_value();
 1629|   160k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   160k|    {
  451|   160k|        return m_value;
  452|   160k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3566|  4.71M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3567|  4.71M|    {
 3568|  4.71M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  4.71M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|  4.71M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  19.7M|    {
 3574|  19.7M|        return m_code == good;
 3575|  19.7M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|   492k|    {
 3585|   492k|        return m_code;
 3586|   492k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  71.0M|    {
 3330|  71.0M|        return m_iterator;
 3331|  71.0M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  27.9M|    {
 3330|  27.9M|        return m_iterator;
 3331|  27.9M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  3.07M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter12on_localizedEv:
 6271|   823k|    {
 6272|   823k|        if constexpr (!SCN_DISABLE_LOCALE) {
 6273|   823k|            m_specs.localized = true;
 6274|       |        }
 6275|       |        else {
 6276|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6277|       |        }
 6278|   823k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  2.25M|    {
 6303|  2.25M|        m_specs.type = type;
 6304|  2.25M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  3.07M|    {
 6376|  3.07M|        return static_cast<bool>(m_error);
 6377|  3.07M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|   492k|{
 3609|   492k|    return a.code() == b;
 3610|   492k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|   492k|{
 3613|   492k|    return !(a == b);
 3614|   492k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|   823k|{
 7063|   823k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 823k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 823k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 823k]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 823k]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 823k]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 823k]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 823k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 823k]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 823k]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 823k]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 823k]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 823k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 823k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 823k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 823k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 823k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|   260k|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 260k, False: 562k]
  ------------------
 7091|   539k|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 278k, False: 545k]
  ------------------
 7092|   823k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 284k, False: 539k]
  ------------------
 7093|   823k|            return arg_type_category::floating;
 7094|       |
 7095|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 823k]
  ------------------
 7096|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 823k]
  ------------------
 7097|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 823k]
  ------------------
 7098|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 823k]
  ------------------
 7099|      0|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 823k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 823k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|   823k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|   823k|            SCN_CLANG_POP
 7110|   823k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|   823k|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  3.62M|    {
 2896|  3.62M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  3.62M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  3.62M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  3.62M|    {
 2930|  3.62M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  3.62M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  3.62M|    {
 2953|  3.62M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  3.62M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  3.62M|    {
 2962|  3.62M|        return fn::impl(std::forward<T>(t));
 2963|  3.62M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3653|  1.00k|{
 3654|  1.00k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  1.00k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  1.00k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  2.62k|{
 3654|  2.62k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.62k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  2.62k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3653|  36.3k|{
 3654|  36.3k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  36.3k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7192|  3.07M|{
 7193|  3.07M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7193:9): [True: 2.25M, False: 823k]
  ------------------
 7194|  3.07M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7194:10): [True: 0, False: 2.25M]
  ------------------
 7195|  2.25M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7195:10): [True: 0, False: 2.25M]
  ------------------
 7196|      0|        SCN_UNLIKELY_ATTR
 7197|      0|        return handler.on_error("Invalid type specifier for float type");
 7198|      0|    }
 7199|  3.07M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|   449M|    {
 4195|   449M|        return m_end == nullptr;
 4196|   449M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  1.20M|{
 3715|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3716|       |                                          const CharT*, const CharT*>) {
 3717|       |        return {first, last};
 3718|       |    }
 3719|  1.20M|    else {
 3720|  1.20M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  1.20M|    }
 3722|  1.20M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  5.91M|    {
 4211|  5.91M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 5.91M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  5.91M|        return parent()->get_segment_starting_at(position());
 4217|  5.91M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|   250M|    {
 4205|   250M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   250M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   250M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   250M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   250M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  5.91M|    {
 4101|  5.91M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  5.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.59M, False: 3.31M]
  |  |  ------------------
  ------------------
 4102|  5.91M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  2.59M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  2.59M|        }
 4105|  3.31M|        const auto start = pos - m_putback_buffer.size();
 4106|  3.31M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  3.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  3.31M|        return m_current_view.substr(start);
 4108|  3.31M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4199|  4.11M|    {
 4200|  4.11M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  4.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  4.11M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  4.11M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  10.8M|    {
 4190|  10.8M|        return m_position;
 4191|  10.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|  4.69M|    {
 4123|  4.69M|        return m_is_contiguous;
 4124|  4.69M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|  89.4M|    {
 4195|  89.4M|        return m_end == nullptr;
 4196|  89.4M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   445k|{
 3715|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3716|       |                                          const CharT*, const CharT*>) {
 3717|       |        return {first, last};
 3718|       |    }
 3719|   445k|    else {
 3720|   445k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   445k|    }
 3722|   445k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|  1.59M|    {
 4211|  1.59M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 1.59M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  1.59M|        return parent()->get_segment_starting_at(position());
 4217|  1.59M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  47.8M|    {
 4205|  47.8M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  47.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  47.8M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  47.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|  1.59M|    {
 4101|  1.59M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 905k, False: 686k]
  |  |  ------------------
  ------------------
 4102|  1.59M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   905k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   905k|        }
 4105|   686k|        const auto start = pos - m_putback_buffer.size();
 4106|   686k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   686k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   686k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   686k|        return m_current_view.substr(start);
 4108|   686k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4199|  1.75M|    {
 4200|  1.75M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4201|  1.75M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4202|  1.75M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  3.50M|    {
 4190|  3.50M|        return m_position;
 4191|  3.50M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  2.01M|    {
 4123|  2.01M|        return m_is_contiguous;
 4124|  2.01M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  12.2M|    {
 3180|  12.2M|        return static_cast<D&>(*this);
 3181|  12.2M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  6.12M|    {
 2978|  6.12M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  6.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  6.12M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  6.12M|    {
 3005|  6.12M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  6.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  6.12M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  6.12M|    {
 3221|  6.12M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 12.1k, False: 6.11M]
  ------------------
 3222|  6.12M|                   ? nullptr
 3223|  6.12M|                   : std::addressof(*ranges::begin(derived()));
 3224|  6.12M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  1.14M|    {
 3180|  1.14M|        return static_cast<D&>(*this);
 3181|  1.14M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   571k|    {
 2978|   571k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   571k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   571k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   571k|    {
 3005|   571k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   571k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   571k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   571k|    {
 3221|   571k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 571k]
  ------------------
 3222|   571k|                   ? nullptr
 3223|   571k|                   : std::addressof(*ranges::begin(derived()));
 3224|   571k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|  1.12M|    {
 8169|  1.12M|        return ranges::subrange{begin(), end()};
 8170|  1.12M|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|  3.30M|    {
 8153|  3.30M|        return m_current;
 8154|  3.30M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|  1.12M|    {
 8161|  1.12M|        return ranges::default_sentinel;
 8162|  1.12M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3314|  17.3M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  17.3M|    static_cast<    \
  |  |  929|  17.3M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  17.3M|    static_cast<    \
  |  |  929|  17.3M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  17.3M|    {
 3316|  17.3M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  6.53M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.56M|    {
 1837|  1.56M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.56M|                                            std::forward<F>(f));
 1839|  1.56M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.56M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.56M|    else {
 1333|  1.56M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.56M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.56M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.54M, False: 21.0k]
  |  |  ------------------
  ------------------
 1335|  1.56M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.56M|                   : result(unexpect,
 1337|  21.0k|                            trivial_invoke(std::forward<F>(f),
 1338|  21.0k|                                           std::forward<Exp>(exp).error()));
 1339|  1.56M|    }
 1340|  1.56M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  16.5M|    {
  485|  16.5M|        return m_has_value;
  486|  16.5M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  5.62M|    {
 1663|  5.62M|        return std::move(value());
 1664|  5.62M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  6.41M|    {
 1627|  6.41M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.41M|        return this->get_value();
 1629|  6.41M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  6.41M|    {
  451|  6.41M|        return m_value;
  452|  6.41M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  6.95M|        : base(std::in_place, std::forward<U>(val)),
 1428|  6.95M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  6.95M|    {
 1430|  6.95M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  6.95M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  6.95M|    {
  437|  6.95M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  8.85M|    {
 1177|  8.85M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  45.7k|{
 1211|  45.7k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  45.7k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  58.6k|    {
 1614|  58.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  58.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  58.6k|        return std::move(this->get_unexpected().error());
 1616|  58.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  80.1k|    {
  468|  80.1k|        return m_unexpected;
  469|  80.1k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   447k|    {
  361|   447k|        return m_unexpected;
  362|   447k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.55M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.55M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.55M|    {
 1486|  1.55M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.82M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.82M|          m_has_value(false)
  446|  1.82M|    {
  447|  1.82M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   492k|    {
 8169|   492k|        return ranges::subrange{begin(), end()};
 8170|   492k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|  1.31M|    {
 8153|  1.31M|        return m_current;
 8154|  1.31M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   492k|    {
 8161|   492k|        return ranges::default_sentinel;
 8162|   492k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3314|  6.78M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  6.78M|    static_cast<    \
  |  |  929|  6.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  6.78M|    static_cast<    \
  |  |  929|  6.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  6.78M|    {
 3316|  6.78M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   670k|    {
 1837|   670k|        return detail::transform_error_impl(std::move(*this),
 1838|   670k|                                            std::forward<F>(f));
 1839|   670k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   670k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   670k|    else {
 1333|   670k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   670k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   670k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 667k, False: 3.66k]
  |  |  ------------------
  ------------------
 1335|   670k|                   ? result(*std::forward<Exp>(exp))
 1336|   670k|                   : result(unexpect,
 1337|  3.66k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.66k|                                           std::forward<Exp>(exp).error()));
 1339|   670k|    }
 1340|   670k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  6.41M|    {
  485|  6.41M|        return m_has_value;
  486|  6.41M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.36M|    {
 1663|  2.36M|        return std::move(value());
 1664|  2.36M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.38M|    {
 1627|  2.38M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.38M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.38M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.38M|        return this->get_value();
 1629|  2.38M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  2.38M|    {
  451|  2.38M|        return m_value;
  452|  2.38M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  2.37M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.37M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.37M|    {
 1430|  2.37M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.37M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.37M|    {
  437|  2.37M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.83M|    {
 1177|  3.83M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  59.0k|    {
 1614|  59.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  59.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  59.0k|        return std::move(this->get_unexpected().error());
 1616|  59.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  61.0k|    {
  468|  61.0k|        return m_unexpected;
  469|  61.0k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|   872k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   872k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   872k|    {
 1486|   872k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.45M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.45M|          m_has_value(false)
  446|  1.45M|    {
  447|  1.45M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|   190k|        : m_unexpected(std::forward<Err>(e))
  346|   190k|    {
  347|   190k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   190k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   190k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   237k|        : base(unexpect, std::move(e.error())),
 1474|   237k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   237k|    {
 1476|   237k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.55M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.55M|          m_has_value(false)
  446|  1.55M|    {
  447|  1.55M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.68M|    {
 1177|  7.68M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  6.05M|        : base(std::in_place, std::forward<U>(val)),
 1428|  6.05M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  6.05M|    {
 1430|  6.05M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  6.05M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  6.05M|    {
  437|  6.05M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  9.01M|    {
 1598|  9.01M|        return has_value();
 1599|  9.01M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  14.1M|    {
  485|  14.1M|        return m_has_value;
  486|  14.1M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   283k|    {
 1604|   283k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   283k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   283k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   283k|        return this->get_unexpected().error();
 1606|   283k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   283k|    {
  468|   283k|        return m_unexpected;
  469|   283k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  3.89M|    {
 1663|  3.89M|        return std::move(value());
 1664|  3.89M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  4.83M|    {
 1627|  4.83M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.83M|        return this->get_value();
 1629|  4.83M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  4.83M|    {
  451|  4.83M|        return m_value;
  452|  4.83M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   475k|        : base(unexpect, std::move(e.error())),
 1474|   475k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   475k|    {
 1476|   475k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.23M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.23M|          m_has_value(false)
  446|  1.23M|    {
  447|  1.23M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.83M|    {
 1177|  3.83M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  2.59M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.59M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.59M|    {
 1430|  2.59M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.59M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.59M|    {
  437|  2.59M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  4.50M|    {
 1598|  4.50M|        return has_value();
 1599|  4.50M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  7.10M|    {
  485|  7.10M|        return m_has_value;
  486|  7.10M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   571k|    {
 1604|   571k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   571k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   571k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   571k|        return this->get_unexpected().error();
 1606|   571k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   571k|    {
  468|   571k|        return m_unexpected;
  469|   571k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  1.69M|    {
 1663|  1.69M|        return std::move(value());
 1664|  1.69M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  2.02M|    {
 1627|  2.02M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.02M|        return this->get_value();
 1629|  2.02M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  2.02M|    {
  451|  2.02M|        return m_value;
  452|  2.02M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.36M|    {
 1837|  1.36M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.36M|                                            std::forward<F>(f));
 1839|  1.36M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.36M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.36M|    else {
 1333|  1.36M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.36M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.36M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.34M, False: 17.3k]
  |  |  ------------------
  ------------------
 1335|  1.36M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.36M|                   : result(unexpect,
 1337|  17.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  17.3k|                                           std::forward<Exp>(exp).error()));
 1339|  1.36M|    }
 1340|  1.36M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  5.15M|    {
  485|  5.15M|        return m_has_value;
  486|  5.15M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.34M|    {
 1663|  1.34M|        return std::move(value());
 1664|  1.34M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.75M|    {
 1627|  1.75M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.75M|        return this->get_value();
 1629|  1.75M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.75M|    {
  451|  1.75M|        return m_value;
  452|  1.75M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  17.3k|    {
 1614|  17.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  17.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  17.3k|        return std::move(this->get_unexpected().error());
 1616|  17.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  22.5k|    {
  468|  22.5k|        return m_unexpected;
  469|  22.5k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.31M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.31M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.31M|    {
 1486|  1.31M|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  13.5M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   269k|        : base(unexpect, std::move(e.error())),
 1474|   269k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   269k|    {
 1476|   269k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  13.8M|    {
 4280|  13.8M|        return x.is_at_end();
 4281|  13.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  34.1M|    {
 4324|  34.1M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 34.1M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  34.1M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 34.1M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  34.1M|        return !read_at_position();
 4331|  34.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|   146M|    {
 4304|   146M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   146M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   146M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 146M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   146M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   146M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 127M, False: 19.8M]
  |  |  ------------------
  ------------------
 4311|   127M|            return true;
 4312|   127M|        }
 4313|       |
 4314|  39.3M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 19.8M, False: 19.5M]
  ------------------
 4315|  19.8M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 310k, False: 19.5M]
  ------------------
 4316|   310k|                return false;
 4317|   310k|            }
 4318|  19.8M|        }
 4319|  19.5M|        return true;
 4320|  19.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|   190M|    {
 4081|   190M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   190M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  38.0M|    {
 4239|  38.0M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  38.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  38.0M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 38.0M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  38.0M|        auto res = read_at_position();
 4248|  38.0M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  38.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  38.0M|        return parent()->get_character_at(m_position);
 4250|  38.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  38.0M|    {
 4112|  38.0M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  38.0M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.8M, False: 14.1M]
  |  |  ------------------
  ------------------
 4113|  38.0M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  23.8M|            return m_putback_buffer[pos];
 4115|  23.8M|        }
 4116|  14.1M|        const auto start = pos - m_putback_buffer.size();
 4117|  14.1M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  14.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  14.1M|        return m_current_view[start];
 4119|  14.1M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  10.0M|        : base(std::in_place, std::forward<U>(val)),
 1428|  10.0M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  10.0M|    {
 1430|  10.0M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  10.0M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  10.0M|    {
  437|  10.0M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  10.0M|    {
 1177|  10.0M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|   149k|        : m_unexpected(std::forward<Err>(e))
  346|   149k|    {
  347|   149k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   149k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   149k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  80.1k|        : base(unexpect, std::move(e.error())),
 1474|  80.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  80.1k|    {
 1476|  80.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  80.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  80.1k|          m_has_value(false)
  446|  80.1k|    {
  447|  80.1k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|   223k|        : m_unexpected(std::forward<Args>(args)...)
  355|   223k|    {
  356|   223k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   223k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   223k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  4.41M|    {
 1598|  4.41M|        return has_value();
 1599|  4.41M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   790k|    {
 1653|   790k|        return value();
 1654|   790k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  35.8M|    {
 4274|  35.8M|        return !(lhs == rhs);
 4275|  35.8M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  39.9M|    {
 4269|  39.9M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 39.9M, False: 0]
  |  Branch (4269:46): [True: 5.20M, False: 34.7M]
  ------------------
 4270|  39.9M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  74.7M|    {
 4225|  74.7M|        ++m_position;
 4226|  74.7M|        (void)read_at_position();
 4227|  74.7M|        return *this;
 4228|  74.7M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  74.9k|        : m_unexpected(std::forward<Err>(e))
  346|  74.9k|    {
  347|  74.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  74.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  74.9k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  15.9k|        : base(unexpect, std::move(e.error())),
 1474|  15.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  15.9k|    {
 1476|  15.9k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  15.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  15.9k|          m_has_value(false)
  446|  15.9k|    {
  447|  15.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.16M|    {
 1177|  2.16M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  2.14M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.14M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.14M|    {
 1430|  2.14M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|  2.14M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.14M|    {
  437|  2.14M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  2.16M|    {
 1598|  2.16M|        return has_value();
 1599|  2.16M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.32M|    {
  485|  4.32M|        return m_has_value;
  486|  4.32M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  15.9k|    {
 1604|  15.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  15.9k|        return this->get_unexpected().error();
 1606|  15.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  15.9k|    {
  468|  15.9k|        return m_unexpected;
  469|  15.9k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  2.14M|    {
 1663|  2.14M|        return std::move(value());
 1664|  2.14M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  2.14M|    {
 1627|  2.14M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.14M|        return this->get_value();
 1629|  2.14M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.14M|    {
  451|  2.14M|        return m_value;
  452|  2.14M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  48.7M|    {
 3334|  48.7M|        return m_sentinel;
 3335|  48.7M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|  66.0k|        : m_unexpected(std::forward<Err>(e))
  346|  66.0k|    {
  347|  66.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  66.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  66.0k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  16.9M|    {
  361|  16.9M|        return m_unexpected;
  362|  16.9M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  4.55M|        : m_unexpected(std::forward<Args>(args)...)
  355|  4.55M|    {
  356|  4.55M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.55M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  4.55M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  20.8M|        : m_unexpected(std::forward<Err>(e))
  346|  20.8M|    {
  347|  20.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  20.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  20.8M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  20.8M|    {
  361|  20.8M|        return m_unexpected;
  362|  20.8M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  20.8M|        : m_unexpected(std::forward<Args>(args)...)
  355|  20.8M|    {
  356|  20.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  20.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  20.8M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   148k|{
 1211|   148k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   148k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  4.33M|        : m_unexpected(std::forward<Err>(e))
  346|  4.33M|    {
  347|  4.33M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  4.33M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  4.33M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  21.5k|    {
 1604|  21.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  21.5k|        return this->get_unexpected().error();
 1606|  21.5k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  1.58M|        : base(unexpect, std::move(e.error())),
 1474|  1.58M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.58M|    {
 1476|  1.58M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  1.62M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.62M|          m_has_value(false)
  446|  1.62M|    {
  447|  1.62M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  17.2M|    {
 1177|  17.2M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|   798k|        : base(std::in_place, std::forward<U>(val)),
 1428|   798k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   798k|    {
 1430|   798k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|   798k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   798k|    {
  437|   798k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  8.78M|        : base(unexpect, std::move(e.error())),
 1474|  8.78M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  8.78M|    {
 1476|  8.78M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  8.78M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  8.78M|          m_has_value(false)
  446|  8.78M|    {
  447|  8.78M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  18.7M|    {
 1598|  18.7M|        return has_value();
 1599|  18.7M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  33.1M|    {
  485|  33.1M|        return m_has_value;
  486|  33.1M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  4.40M|    {
 1604|  4.40M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.40M|        return this->get_unexpected().error();
 1606|  4.40M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  4.40M|    {
  468|  4.40M|        return m_unexpected;
  469|  4.40M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|  1.68M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.68M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.68M|    {
 1430|  1.68M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  1.68M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.68M|    {
  437|  1.68M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.68M|    {
 1177|  1.68M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|    309|        : base(unexpect, std::move(e.error())),
 1474|    309|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    309|    {
 1476|    309|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|    309|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    309|          m_has_value(false)
  446|    309|    {
  447|    309|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  4.37M|    {
 1653|  4.37M|        return value();
 1654|  4.37M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  8.45M|    {
 1627|  8.45M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  8.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  8.45M|        return this->get_value();
 1629|  8.45M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  8.45M|    {
  451|  8.45M|        return m_value;
  452|  8.45M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   141k|    {
 1598|   141k|        return has_value();
 1599|   141k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  3.37M|    {
  485|  3.37M|        return m_has_value;
  486|  3.37M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.54M|    {
 1663|  1.54M|        return std::move(value());
 1664|  1.54M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.68M|    {
 1627|  1.68M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.68M|        return this->get_value();
 1629|  1.68M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  1.68M|    {
  451|  1.68M|        return m_value;
  452|  1.68M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  4.11M|    {
 1837|  4.11M|        return detail::transform_error_impl(std::move(*this),
 1838|  4.11M|                                            std::forward<F>(f));
 1839|  4.11M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  4.11M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  4.11M|    else {
 1333|  4.11M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  4.11M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  4.11M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.08M, False: 37.5k]
  |  |  ------------------
  ------------------
 1335|  4.11M|                   ? result(*std::forward<Exp>(exp))
 1336|  4.11M|                   : result(unexpect,
 1337|  37.5k|                            trivial_invoke(std::forward<F>(f),
 1338|  37.5k|                                           std::forward<Exp>(exp).error()));
 1339|  4.11M|    }
 1340|  4.11M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  6.00M|        : base(std::in_place, std::forward<U>(val)),
 1428|  6.00M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  6.00M|    {
 1430|  6.00M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  6.00M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  6.00M|    {
  437|  6.00M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  37.5k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  37.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  37.5k|    {
 1486|  37.5k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  4.08M|    {
 1663|  4.08M|        return std::move(value());
 1664|  4.08M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|  1.76M|    {
 3330|  1.76M|        return m_iterator;
 3331|  1.76M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|  1.76M|    {
 3334|  1.76M|        return m_sentinel;
 3335|  1.76M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  10.3M|    {
 1598|  10.3M|        return has_value();
 1599|  10.3M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  16.3M|    {
  485|  16.3M|        return m_has_value;
  486|  16.3M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   354k|    {
 1604|   354k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   354k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   354k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   354k|        return this->get_unexpected().error();
 1606|   354k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   354k|    {
  468|   354k|        return m_unexpected;
  469|   354k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  4.46M|    {
 1663|  4.46M|        return std::move(value());
 1664|  4.46M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  5.56M|    {
 1627|  5.56M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.56M|        return this->get_value();
 1629|  5.56M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  5.56M|    {
  451|  5.56M|        return m_value;
  452|  5.56M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.79M|{
  326|  2.79M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.79M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3314|  1.39M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.39M|    static_cast<    \
  |  |  929|  1.39M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.39M|    static_cast<    \
  |  |  929|  1.39M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  1.39M|    {
 3316|  1.39M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  20.3M|    {
 4291|  20.3M|        return !x.is_at_end();
 4292|  20.3M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  22.5k|        : base(unexpect, std::move(e.error())),
 1474|  22.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  22.5k|    {
 1476|  22.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  22.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  22.5k|          m_has_value(false)
  446|  22.5k|    {
  447|  22.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.37M|    {
 1177|  3.37M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  3.35M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.35M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.35M|    {
 1430|  3.35M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  3.35M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.35M|    {
  437|  3.35M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  2.01M|    {
 1598|  2.01M|        return has_value();
 1599|  2.01M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   416k|    {
 1653|   416k|        return value();
 1654|   416k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  12.4k|        : base(unexpect, std::move(e.error())),
 1474|  12.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.4k|    {
 1476|  12.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  12.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  12.4k|          m_has_value(false)
  446|  12.4k|    {
  447|  12.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.82M|    {
 1177|  1.82M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  1.81M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.81M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.81M|    {
 1430|  1.81M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  1.81M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.81M|    {
  437|  1.81M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  1.82M|    {
 1598|  1.82M|        return has_value();
 1599|  1.82M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.65M|    {
  485|  3.65M|        return m_has_value;
  486|  3.65M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  12.4k|    {
 1604|  12.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  12.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  12.4k|        return this->get_unexpected().error();
 1606|  12.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  12.4k|    {
  468|  12.4k|        return m_unexpected;
  469|  12.4k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.81M|    {
 1663|  1.81M|        return std::move(value());
 1664|  1.81M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.81M|    {
 1627|  1.81M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.81M|        return this->get_value();
 1629|  1.81M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.81M|    {
  451|  1.81M|        return m_value;
  452|  1.81M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  5.21k|    {
 1604|  5.21k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  5.21k|        return this->get_unexpected().error();
 1606|  5.21k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  1.36M|        : base(unexpect, std::move(e.error())),
 1474|  1.36M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.36M|    {
 1476|  1.36M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.36M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.36M|          m_has_value(false)
  446|  1.36M|    {
  447|  1.36M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.70M|    {
 1177|  7.70M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|   424k|        : base(std::in_place, std::forward<U>(val)),
 1428|   424k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   424k|    {
 1430|   424k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|   424k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   424k|    {
  437|   424k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  5.33M|        : base(unexpect, std::move(e.error())),
 1474|  5.33M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  5.33M|    {
 1476|  5.33M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  5.33M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  5.33M|          m_has_value(false)
  446|  5.33M|    {
  447|  5.33M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  9.04M|    {
 1598|  9.04M|        return has_value();
 1599|  9.04M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  15.4M|    {
  485|  15.4M|        return m_has_value;
  486|  15.4M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  3.68M|    {
 1604|  3.68M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.68M|        return this->get_unexpected().error();
 1606|  3.68M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  3.68M|    {
  468|  3.68M|        return m_unexpected;
  469|  3.68M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  1.37M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.37M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.37M|    {
 1430|  1.37M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  1.37M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.37M|    {
  437|  1.37M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.37M|    {
 1177|  1.37M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    102|        : base(unexpect, std::move(e.error())),
 1474|    102|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    102|    {
 1476|    102|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|    102|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    102|          m_has_value(false)
  446|    102|    {
  447|    102|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  1.41M|    {
 1653|  1.41M|        return value();
 1654|  1.41M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.41M|    {
 1627|  1.41M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.41M|        return this->get_value();
 1629|  1.41M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.41M|    {
  451|  1.41M|        return m_value;
  452|  1.41M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  32.8k|    {
 1598|  32.8k|        return has_value();
 1599|  32.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  2.75M|    {
  485|  2.75M|        return m_has_value;
  486|  2.75M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.34M|    {
 1663|  1.34M|        return std::move(value());
 1664|  1.34M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.37M|    {
 1627|  1.37M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.37M|        return this->get_value();
 1629|  1.37M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  1.37M|    {
  451|  1.37M|        return m_value;
  452|  1.37M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|   576k|        : base(std::in_place, std::forward<U>(val)),
 1428|   576k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   576k|    {
 1430|   576k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   576k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   576k|    {
  437|   576k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.58M|    {
 2855|  2.58M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.58M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.58M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.58M|    {
 2836|  2.58M|        return t.data();
 2837|  2.58M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   975k|        : base(unexpect, std::move(e.error())),
 1474|   975k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   975k|    {
 1476|   975k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   975k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   975k|          m_has_value(false)
  446|   975k|    {
  447|   975k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  11.8M|    {
 1177|  11.8M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  10.7M|        : base(std::in_place, std::forward<U>(val)),
 1428|  10.7M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  10.7M|    {
 1430|  10.7M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  10.7M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  10.7M|    {
  437|  10.7M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1662|  7.25M|    {
 1663|  7.25M|        return std::move(value());
 1664|  7.25M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  4.46M|{
 1211|  4.46M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  4.46M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  1.54M|    {
 1837|  1.54M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.54M|                                            std::forward<F>(f));
 1839|  1.54M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|  1.54M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.54M|    else {
 1333|  1.54M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.54M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.54M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.54M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.54M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.54M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.54M|    }
 1340|  1.54M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  1.54M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.54M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.54M|    {
 1430|  1.54M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  1.54M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.54M|    {
  437|  1.54M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.54M|    {
 1177|  1.54M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.54M|    {
 1598|  1.54M|        return has_value();
 1599|  1.54M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.08M|    {
  485|  3.08M|        return m_has_value;
  486|  3.08M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.54M|    {
 1663|  1.54M|        return std::move(value());
 1664|  1.54M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.54M|    {
 1627|  1.54M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.54M|        return this->get_value();
 1629|  1.54M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.54M|    {
  451|  1.54M|        return m_value;
  452|  1.54M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.53M|    {
 1823|  1.53M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.53M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|  1.53M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.53M|    else {
 1333|  1.53M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.53M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 1335|  1.53M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.53M|                   : result(unexpect,
 1337|  1.53M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.53M|                                           std::forward<Exp>(exp).error()));
 1339|  1.53M|    }
 1340|  1.53M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1427|  75.1k|        : base(std::in_place, std::forward<U>(val)),
 1428|  75.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  75.1k|    {
 1430|  75.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  75.1k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  75.1k|    {
  437|  75.1k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  1.10M|    {
 1653|  1.10M|        return value();
 1654|  1.10M|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   354k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   141k|    {
 1673|   141k|        return &value();
 1674|   141k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|  1.11M|    {
 2724|  1.11M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.11M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|  1.11M|    {
 2705|  1.11M|        return decay_copy(t.begin());
 2706|  1.11M|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|  1.11M|{
 1949|  1.11M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.11M|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   678k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|  1.34M|    {
 1837|  1.34M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.34M|                                            std::forward<F>(f));
 1839|  1.34M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|  1.34M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.34M|    else {
 1333|  1.34M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.34M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.34M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.34M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.34M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.34M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.34M|    }
 1340|  1.34M|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.34M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.34M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.34M|    {
 1430|  1.34M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  1.34M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.34M|    {
  437|  1.34M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.34M|    {
 1177|  1.34M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.34M|    {
 1598|  1.34M|        return has_value();
 1599|  1.34M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.68M|    {
  485|  2.68M|        return m_has_value;
  486|  2.68M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.34M|    {
 1663|  1.34M|        return std::move(value());
 1664|  1.34M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.34M|    {
 1627|  1.34M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.34M|        return this->get_value();
 1629|  1.34M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.34M|    {
  451|  1.34M|        return m_value;
  452|  1.34M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|  1.29M|    {
 1823|  1.29M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.29M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.29M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.29M|    else {
 1333|  1.29M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.29M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.29M]
  |  |  ------------------
  ------------------
 1335|  1.29M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.29M|                   : result(unexpect,
 1337|  1.29M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.29M|                                           std::forward<Exp>(exp).error()));
 1339|  1.29M|    }
 1340|  1.29M|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1427|  73.0k|        : base(std::in_place, std::forward<U>(val)),
 1428|  73.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  73.0k|    {
 1430|  73.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  73.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  73.0k|    {
  437|  73.0k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3646|  1.29M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.29M|    static_cast<    \
  |  |  929|  1.29M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|  1.29M|    {
 3648|  1.29M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   933k|    {
 1653|   933k|        return value();
 1654|   933k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  32.7k|    {
 1673|  32.7k|        return &value();
 1674|  32.7k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3646|  1.53M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.53M|    static_cast<    \
  |  |  929|  1.53M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|  1.53M|    {
 3648|  1.53M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   585k|        : base(unexpect, std::move(e.error())),
 1474|   585k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   585k|    {
 1476|   585k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  5.59M|    {
 4280|  5.59M|        return x.is_at_end();
 4281|  5.59M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  8.79M|    {
 4324|  8.79M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 8.79M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  8.79M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 8.79M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  8.79M|        return !read_at_position();
 4331|  8.79M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|  27.7M|    {
 4304|  27.7M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  27.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  27.7M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 27.7M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  27.7M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  27.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 24.4M, False: 3.33M]
  |  |  ------------------
  ------------------
 4311|  24.4M|            return true;
 4312|  24.4M|        }
 4313|       |
 4314|  6.48M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 3.33M, False: 3.15M]
  ------------------
 4315|  3.33M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 184k, False: 3.15M]
  ------------------
 4316|   184k|                return false;
 4317|   184k|            }
 4318|  3.33M|        }
 4319|  3.15M|        return true;
 4320|  3.33M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|  35.9M|    {
 4081|  35.9M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  35.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  8.68M|    {
 4239|  8.68M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  8.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  8.68M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 8.68M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  8.68M|        auto res = read_at_position();
 4248|  8.68M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  8.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  8.68M|        return parent()->get_character_at(m_position);
 4250|  8.68M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  8.68M|    {
 4112|  8.68M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  8.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.39M, False: 1.29M]
  |  |  ------------------
  ------------------
 4113|  8.68M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  7.39M|            return m_putback_buffer[pos];
 4115|  7.39M|        }
 4116|  1.29M|        const auto start = pos - m_putback_buffer.size();
 4117|  1.29M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.29M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.29M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  1.29M|        return m_current_view[start];
 4119|  1.29M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  3.10M|{
 3807|       |    if constexpr (sizeof(U) == 1) {
 3808|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|       |    }
 3810|       |    else if constexpr (sizeof(U) == 2) {
 3811|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|       |    }
 3813|  3.10M|    else {
 3814|       |        // utf-32
 3815|  3.10M|        static_assert(sizeof(U) == 4);
 3816|  3.10M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  3.10M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  3.10M|        return 1;
 3818|  3.10M|    }
 3819|  3.10M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  3.90M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.90M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.90M|    {
 1430|  3.90M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  3.90M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.90M|    {
  437|  3.90M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.96M|    {
 1177|  3.96M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  61.0k|        : base(unexpect, std::move(e.error())),
 1474|  61.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  61.0k|    {
 1476|  61.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  61.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  61.0k|          m_has_value(false)
  446|  61.0k|    {
  447|  61.0k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  1.54M|    {
 1598|  1.54M|        return has_value();
 1599|  1.54M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  21.3k|    {
 1653|  21.3k|        return value();
 1654|  21.3k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  4.17M|    {
 4274|  4.17M|        return !(lhs == rhs);
 4275|  4.17M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  5.68M|    {
 4269|  5.68M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 5.68M, False: 0]
  |  Branch (4269:46): [True: 1.83M, False: 3.85M]
  ------------------
 4270|  5.68M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  10.2M|    {
 4225|  10.2M|        ++m_position;
 4226|  10.2M|        (void)read_at_position();
 4227|  10.2M|        return *this;
 4228|  10.2M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  3.10M|{
 4013|       |    if constexpr (sizeof(CharT) == 1) {
 4014|       |        return decode_utf8_code_point_exhaustive(input);
 4015|       |    }
 4016|       |    else if constexpr (sizeof(CharT) == 2) {
 4017|       |        return decode_utf16_code_point_exhaustive(input);
 4018|       |    }
 4019|  3.10M|    else {
 4020|  3.10M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  3.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|  3.10M|        auto cp = static_cast<char32_t>(input.front());
 4022|  3.10M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  3.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 227k, False: 2.88M]
  |  |  ------------------
  ------------------
 4023|   227k|            return invalid_code_point;
 4024|   227k|        }
 4025|  2.88M|        return cp;
 4026|  3.10M|    }
 4027|  3.10M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  2.73k|        : base(unexpect, std::move(e.error())),
 1474|  2.73k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.73k|    {
 1476|  2.73k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  2.73k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.73k|          m_has_value(false)
  446|  2.73k|    {
  447|  2.73k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   820k|    {
 1177|   820k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   817k|        : base(std::in_place, std::forward<U>(val)),
 1428|   817k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   817k|    {
 1430|   817k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   817k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   817k|    {
  437|   817k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   820k|    {
 1598|   820k|        return has_value();
 1599|   820k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.64M|    {
  485|  1.64M|        return m_has_value;
  486|  1.64M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.73k|    {
 1604|  2.73k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.73k|        return this->get_unexpected().error();
 1606|  2.73k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.73k|    {
  468|  2.73k|        return m_unexpected;
  469|  2.73k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   817k|    {
 1663|   817k|        return std::move(value());
 1664|   817k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   817k|    {
 1627|   817k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   817k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   817k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   817k|        return this->get_value();
 1629|   817k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   817k|    {
  451|   817k|        return m_value;
  452|   817k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  14.4M|    {
 3334|  14.4M|        return m_sentinel;
 3335|  14.4M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  1.96k|    {
 1604|  1.96k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.96k|        return this->get_unexpected().error();
 1606|  1.96k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|   724k|        : base(unexpect, std::move(e.error())),
 1474|   724k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   724k|    {
 1476|   724k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|   779k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   779k|          m_has_value(false)
  446|   779k|    {
  447|   779k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.86M|    {
 1177|  6.86M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|  21.3k|        : base(std::in_place, std::forward<U>(val)),
 1428|  21.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  21.3k|    {
 1430|  21.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  21.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  21.3k|    {
  437|  21.3k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  3.88M|        : base(unexpect, std::move(e.error())),
 1474|  3.88M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.88M|    {
 1476|  3.88M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  3.88M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.88M|          m_has_value(false)
  446|  3.88M|    {
  447|  3.88M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  7.53M|    {
 1598|  7.53M|        return has_value();
 1599|  7.53M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  13.3M|    {
  485|  13.3M|        return m_has_value;
  486|  13.3M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  2.26M|    {
 1604|  2.26M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.26M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.26M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.26M|        return this->get_unexpected().error();
 1606|  2.26M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.26M|    {
  468|  2.26M|        return m_unexpected;
  469|  2.26M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   680k|        : base(std::in_place, std::forward<U>(val)),
 1428|   680k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   680k|    {
 1430|   680k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   680k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   680k|    {
  437|   680k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   680k|    {
 1177|   680k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|     70|        : base(unexpect, std::move(e.error())),
 1474|     70|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     70|    {
 1476|     70|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|     70|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     70|          m_has_value(false)
  446|     70|    {
  447|     70|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   967k|    {
 1653|   967k|        return value();
 1654|   967k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.66M|    {
 1627|  2.66M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.66M|        return this->get_value();
 1629|  2.66M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.66M|    {
  451|  2.66M|        return m_value;
  452|  2.66M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  13.0k|    {
 1598|  13.0k|        return has_value();
 1599|  13.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  1.36M|    {
  485|  1.36M|        return m_has_value;
  486|  1.36M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   667k|    {
 1663|   667k|        return std::move(value());
 1664|   667k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   680k|    {
 1627|   680k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   680k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   680k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   680k|        return this->get_value();
 1629|   680k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   680k|    {
  451|   680k|        return m_value;
  452|   680k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.75M|    {
 1837|  1.75M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.75M|                                            std::forward<F>(f));
 1839|  1.75M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.75M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.75M|    else {
 1333|  1.75M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.75M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.75M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.70M, False: 55.4k]
  |  |  ------------------
  ------------------
 1335|  1.75M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.75M|                   : result(unexpect,
 1337|  55.4k|                            trivial_invoke(std::forward<F>(f),
 1338|  55.4k|                                           std::forward<Exp>(exp).error()));
 1339|  1.75M|    }
 1340|  1.75M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  2.17M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.17M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.17M|    {
 1430|  2.17M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.17M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.17M|    {
  437|  2.17M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  55.4k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  55.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  55.4k|    {
 1486|  55.4k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  1.70M|    {
 1663|  1.70M|        return std::move(value());
 1664|  1.70M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|   490k|    {
 3330|   490k|        return m_iterator;
 3331|   490k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|   490k|    {
 3334|   490k|        return m_sentinel;
 3335|   490k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  4.50M|    {
 1598|  4.50M|        return has_value();
 1599|  4.50M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  7.20M|    {
  485|  7.20M|        return m_has_value;
  486|  7.20M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   791k|    {
 1604|   791k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   791k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   791k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   791k|        return this->get_unexpected().error();
 1606|   791k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   791k|    {
  468|   791k|        return m_unexpected;
  469|   791k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.58M|    {
 1663|  1.58M|        return std::move(value());
 1664|  1.58M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.91M|    {
 1627|  1.91M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.91M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.91M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.91M|        return this->get_value();
 1629|  1.91M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.91M|    {
  451|  1.91M|        return m_value;
  452|  1.91M|    }
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   921k|{
  304|   921k|    return p;
  305|   921k|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   921k|{
  326|   921k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   921k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   921k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3314|   460k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   460k|    static_cast<    \
  |  |  929|   460k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   460k|    static_cast<    \
  |  |  929|   460k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|   460k|    {
 3316|   460k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  3.20M|    {
 4291|  3.20M|        return !x.is_at_end();
 4292|  3.20M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  59.6k|        : base(unexpect, std::move(e.error())),
 1474|  59.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  59.6k|    {
 1476|  59.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  59.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  59.6k|          m_has_value(false)
  446|  59.6k|    {
  447|  59.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.34M|    {
 1177|  3.34M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  3.28M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.28M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.28M|    {
 1430|  3.28M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  3.28M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.28M|    {
  437|  3.28M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   911k|    {
 1598|   911k|        return has_value();
 1599|   911k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  5.77M|    {
  485|  5.77M|        return m_has_value;
  486|  5.77M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  9.08k|    {
 1653|  9.08k|        return value();
 1654|  9.08k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  2.37M|    {
 1627|  2.37M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.37M|        return this->get_value();
 1629|  2.37M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  2.37M|    {
  451|  2.37M|        return m_value;
  452|  2.37M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.73k|        : base(unexpect, std::move(e.error())),
 1474|  2.73k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.73k|    {
 1476|  2.73k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  2.73k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.73k|          m_has_value(false)
  446|  2.73k|    {
  447|  2.73k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   821k|    {
 1177|   821k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   818k|        : base(std::in_place, std::forward<U>(val)),
 1428|   818k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   818k|    {
 1430|   818k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   818k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   818k|    {
  437|   818k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   671k|    {
 1837|   671k|        return detail::transform_error_impl(std::move(*this),
 1838|   671k|                                            std::forward<F>(f));
 1839|   671k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   671k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   671k|    else {
 1333|   671k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   671k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   671k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 667k, False: 3.66k]
  |  |  ------------------
  ------------------
 1335|   671k|                   ? result(*std::forward<Exp>(exp))
 1336|   671k|                   : result(unexpect,
 1337|  3.66k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.66k|                                           std::forward<Exp>(exp).error()));
 1339|   671k|    }
 1340|   671k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  2.36M|    {
 1663|  2.36M|        return std::move(value());
 1664|  2.36M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  59.2k|    {
 1614|  59.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  59.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  59.2k|        return std::move(this->get_unexpected().error());
 1616|  59.2k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  59.6k|    {
  468|  59.6k|        return m_unexpected;
  469|  59.6k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|   763k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   763k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   763k|    {
 1486|   763k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   821k|    {
 1598|   821k|        return has_value();
 1599|   821k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.64M|    {
  485|  1.64M|        return m_has_value;
  486|  1.64M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.73k|    {
 1604|  2.73k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.73k|        return this->get_unexpected().error();
 1606|  2.73k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.73k|    {
  468|  2.73k|        return m_unexpected;
  469|  2.73k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   818k|    {
 1663|   818k|        return std::move(value());
 1664|   818k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   818k|    {
 1627|   818k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   818k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   818k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   818k|        return this->get_value();
 1629|   818k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   818k|    {
  451|   818k|        return m_value;
  452|   818k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    486|    {
 1604|    486|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    486|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    486|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    486|        return this->get_unexpected().error();
 1606|    486|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|   723k|        : base(unexpect, std::move(e.error())),
 1474|   723k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   723k|    {
 1476|   723k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   779k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   779k|          m_has_value(false)
  446|   779k|    {
  447|   779k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.49M|    {
 1177|  5.49M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|  9.08k|        : base(std::in_place, std::forward<U>(val)),
 1428|  9.08k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  9.08k|    {
 1430|  9.08k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  9.08k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  9.08k|    {
  437|  9.08k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.84M|        : base(unexpect, std::move(e.error())),
 1474|  2.84M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.84M|    {
 1476|  2.84M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  2.84M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.84M|          m_has_value(false)
  446|  2.84M|    {
  447|  2.84M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  6.16M|    {
 1598|  6.16M|        return has_value();
 1599|  6.16M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  11.1M|    {
  485|  11.1M|        return m_has_value;
  486|  11.1M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  2.15M|    {
 1604|  2.15M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.15M|        return this->get_unexpected().error();
 1606|  2.15M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.15M|    {
  468|  2.15M|        return m_unexpected;
  469|  2.15M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   672k|        : base(std::in_place, std::forward<U>(val)),
 1428|   672k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   672k|    {
 1430|   672k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   672k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   672k|    {
  437|   672k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   672k|    {
 1177|   672k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|     24|        : base(unexpect, std::move(e.error())),
 1474|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     24|    {
 1476|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|     24|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     24|          m_has_value(false)
  446|     24|    {
  447|     24|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   322k|    {
 1653|   322k|        return value();
 1654|   322k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  2.02M|    {
 1627|  2.02M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.02M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.02M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.02M|        return this->get_value();
 1629|  2.02M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.02M|    {
  451|  2.02M|        return m_value;
  452|  2.02M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  4.50k|    {
 1598|  4.50k|        return has_value();
 1599|  4.50k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  1.34M|    {
  485|  1.34M|        return m_has_value;
  486|  1.34M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   667k|    {
 1663|   667k|        return std::move(value());
 1664|   667k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   672k|    {
 1627|   672k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   672k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   672k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   672k|        return this->get_value();
 1629|   672k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   672k|    {
  451|   672k|        return m_value;
  452|   672k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.75M|    {
 1837|  1.75M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.75M|                                            std::forward<F>(f));
 1839|  1.75M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.75M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.75M|    else {
 1333|  1.75M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.75M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.75M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.70M, False: 55.5k]
  |  |  ------------------
  ------------------
 1335|  1.75M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.75M|                   : result(unexpect,
 1337|  55.5k|                            trivial_invoke(std::forward<F>(f),
 1338|  55.5k|                                           std::forward<Exp>(exp).error()));
 1339|  1.75M|    }
 1340|  1.75M|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  1.86M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.86M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.86M|    {
 1430|  1.86M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.86M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.86M|    {
  437|  1.86M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|  55.5k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  55.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  55.5k|    {
 1486|  55.5k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.70M|    {
 1663|  1.70M|        return std::move(value());
 1664|  1.70M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   571k|    {
 2855|   571k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   571k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   571k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   571k|    {
 2836|   571k|        return t.data();
 2837|   571k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   667k|    {
 1837|   667k|        return detail::transform_error_impl(std::move(*this),
 1838|   667k|                                            std::forward<F>(f));
 1839|   667k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|   667k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   667k|    else {
 1333|   667k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   667k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   667k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 667k, False: 0]
  |  |  ------------------
  ------------------
 1335|   667k|                   ? result(*std::forward<Exp>(exp))
 1336|   667k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   667k|    }
 1340|   667k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   667k|        : base(std::in_place, std::forward<U>(val)),
 1428|   667k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   667k|    {
 1430|   667k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   667k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   667k|    {
  437|   667k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   667k|    {
 1177|   667k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   667k|    {
 1598|   667k|        return has_value();
 1599|   667k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.33M|    {
  485|  1.33M|        return m_has_value;
  486|  1.33M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   667k|    {
 1663|   667k|        return std::move(value());
 1664|   667k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   667k|    {
 1627|   667k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   667k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   667k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   667k|        return this->get_value();
 1629|   667k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   667k|    {
  451|   667k|        return m_value;
  452|   667k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|   869k|    {
 1823|   869k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   869k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|   869k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   869k|    else {
 1333|   869k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   869k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   869k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 869k]
  |  |  ------------------
  ------------------
 1335|   869k|                   ? result(*std::forward<Exp>(exp))
 1336|   869k|                   : result(unexpect,
 1337|   869k|                            trivial_invoke(std::forward<F>(f),
 1338|   869k|                                           std::forward<Exp>(exp).error()));
 1339|   869k|    }
 1340|   869k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   328k|    {
 1653|   328k|        return value();
 1654|   328k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3667|   127k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  12.9k|    {
 1673|  12.9k|        return &value();
 1674|  12.9k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   539k|    {
 2724|   539k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   539k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   539k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   539k|    {
 2705|   539k|        return decay_copy(t.begin());
 2706|   539k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   539k|{
 1949|   539k|    return SCN_FWD(t);
  ------------------
  |  |  930|   539k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   539k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3667|   294k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   667k|    {
 1837|   667k|        return detail::transform_error_impl(std::move(*this),
 1838|   667k|                                            std::forward<F>(f));
 1839|   667k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|   667k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   667k|    else {
 1333|   667k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   667k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   667k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 667k, False: 0]
  |  |  ------------------
  ------------------
 1335|   667k|                   ? result(*std::forward<Exp>(exp))
 1336|   667k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   667k|    }
 1340|   667k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   667k|        : base(std::in_place, std::forward<U>(val)),
 1428|   667k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   667k|    {
 1430|   667k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   667k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   667k|    {
  437|   667k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   667k|    {
 1177|   667k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   667k|    {
 1598|   667k|        return has_value();
 1599|   667k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.33M|    {
  485|  1.33M|        return m_has_value;
  486|  1.33M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   667k|    {
 1663|   667k|        return std::move(value());
 1664|   667k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   667k|    {
 1627|   667k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   667k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   667k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   667k|        return this->get_value();
 1629|   667k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   667k|    {
  451|   667k|        return m_value;
  452|   667k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   759k|    {
 1823|   759k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   759k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|   759k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   759k|    else {
 1333|   759k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   759k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   759k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 759k]
  |  |  ------------------
  ------------------
 1335|   759k|                   ? result(*std::forward<Exp>(exp))
 1336|   759k|                   : result(unexpect,
 1337|   759k|                            trivial_invoke(std::forward<F>(f),
 1338|   759k|                                           std::forward<Exp>(exp).error()));
 1339|   759k|    }
 1340|   759k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3646|   759k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   759k|    static_cast<    \
  |  |  929|   759k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|   759k|    {
 3648|   759k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   329k|    {
 1653|   329k|        return value();
 1654|   329k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  4.47k|    {
 1673|  4.47k|        return &value();
 1674|  4.47k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3646|   869k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   869k|    static_cast<    \
  |  |  929|   869k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3647|   869k|    {
 3648|   869k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1427|   139k|        : base(std::in_place, std::forward<U>(val)),
 1428|   139k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   139k|    {
 1430|   139k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  435|   139k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   139k|    {
  437|   139k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3653|   150k|{
 3654|   150k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|   150k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.23M|    {
 2855|  1.23M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.23M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.23M|    {
 2836|  1.23M|        return t.data();
 2837|  1.23M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|  2.64M|    {
 5466|  2.64M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.64M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  2.64M|        return static_cast<std::size_t>(m_desc &
 5471|  2.64M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  2.64M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  5.29M|    {
 5491|  5.29M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  5.29M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|  2.64M|    {
 5434|  2.64M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.64M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  2.64M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  2.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.64M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  2.64M|        const auto t = type(id);
 5446|  2.64M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  2.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.64M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  2.64M|        basic_scan_arg<Context> arg;
 5451|  2.64M|        arg.m_type = t;
 5452|  2.64M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 2.64M, False: 0]
  ------------------
 5453|  2.64M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  2.64M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  2.64M|        return arg;
 5459|  2.64M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|  2.64M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  2.64M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  2.64M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  2.64M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  2.64M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|  2.64M|    {
 5495|  2.64M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  2.64M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|  5.01M|    {
 5247|  5.01M|        return m_type != detail::arg_type::none_type;
 5248|  5.01M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   399k|{
 8417|   399k|#define SCN_VISIT(Type)                                         \
 8418|   399k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   399k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   399k|    }                                                           \
 8421|   399k|    else {                                                      \
 8422|   399k|        return vis(monostate_val);                              \
 8423|   399k|    }
 8424|       |
 8425|   399k|    monostate monostate_val{};
 8426|       |
 8427|   399k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 399k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 399k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 399k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 399k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 399k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 399k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 399k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 399k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 399k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 399k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 399k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 399k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 399k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 399k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 399k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   128k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 128k, False: 270k]
  ------------------
 8459|   128k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   128k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   128k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   128k|    }                                                           \
  |  | 8421|   128k|    else {                                                      \
  |  | 8422|   128k|        return vis(monostate_val);                              \
  |  | 8423|   128k|    }
  ------------------
 8460|   262k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 134k, False: 265k]
  ------------------
 8461|   262k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   262k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   262k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   262k|    }                                                           \
  |  | 8421|   262k|    else {                                                      \
  |  | 8422|   262k|        return vis(monostate_val);                              \
  |  | 8423|   262k|    }
  ------------------
 8462|   399k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 136k, False: 262k]
  ------------------
 8463|   399k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   399k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   399k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   399k|    }                                                           \
  |  | 8421|   399k|    else {                                                      \
  |  | 8422|   399k|        return vis(monostate_val);                              \
  |  | 8423|   399k|    }
  ------------------
 8464|   399k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 399k]
  ------------------
 8465|   399k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   399k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   399k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   399k|    }                                                           \
  |  | 8421|   399k|    else {                                                      \
  |  | 8422|   399k|        return vis(monostate_val);                              \
  |  | 8423|   399k|    }
  ------------------
 8466|   399k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 399k]
  ------------------
 8467|   399k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   399k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   399k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   399k|    }                                                           \
  |  | 8421|   399k|    else {                                                      \
  |  | 8422|   399k|        return vis(monostate_val);                              \
  |  | 8423|   399k|    }
  ------------------
 8468|   399k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 399k]
  ------------------
 8469|   399k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   399k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   399k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   399k|    }                                                           \
  |  | 8421|   399k|    else {                                                      \
  |  | 8422|   399k|        return vis(monostate_val);                              \
  |  | 8423|   399k|    }
  ------------------
 8470|   399k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 399k]
  ------------------
 8471|   399k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   399k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   399k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   399k|    }                                                           \
  |  | 8421|   399k|    else {                                                      \
  |  | 8422|   399k|        return vis(monostate_val);                              \
  |  | 8423|   399k|    }
  ------------------
 8472|   399k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 399k]
  ------------------
 8473|   399k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   399k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   399k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   399k|    }                                                           \
  |  | 8421|   399k|    else {                                                      \
  |  | 8422|   399k|        return vis(monostate_val);                              \
  |  | 8423|   399k|    }
  ------------------
 8474|   399k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 399k]
  ------------------
 8475|   399k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   399k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   399k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   399k|    }                                                           \
  |  | 8421|   399k|    else {                                                      \
  |  | 8422|   399k|        return vis(monostate_val);                              \
  |  | 8423|   399k|    }
  ------------------
 8476|       |
 8477|   399k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 399k]
  ------------------
 8478|   399k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   399k|            return vis(
 8480|   399k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 399k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 399k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   399k|            SCN_CLANG_POP
 8495|   399k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5543|  2.09M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5544|  2.09M|    {
 5545|  2.09M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8136|  1.12M|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|  1.12M|    static_cast<    \
  |  |  929|  1.12M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|  1.12M|    {
 8138|  1.12M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8054|  2.09M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  2.09M|    static_cast<    \
  |  |  929|  2.09M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  2.09M|    static_cast<    \
  |  |  929|  2.09M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8055|  2.09M|    {
 8056|  2.09M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|  1.56M|{
 4344|  1.56M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 1.56M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  1.56M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  1.56M|                            ranges::default_sentinel};
 4350|  1.56M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4175|  1.56M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4176|  1.56M|    {
 4177|  1.56M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  1.56M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  1.56M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   435k|{
 8417|   435k|#define SCN_VISIT(Type)                                         \
 8418|   435k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   435k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   435k|    }                                                           \
 8421|   435k|    else {                                                      \
 8422|   435k|        return vis(monostate_val);                              \
 8423|   435k|    }
 8424|       |
 8425|   435k|    monostate monostate_val{};
 8426|       |
 8427|   435k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 435k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 435k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 435k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 435k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 435k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 435k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 435k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 435k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 435k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 435k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 435k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 435k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 435k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 435k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 435k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   140k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 140k, False: 295k]
  ------------------
 8459|   140k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   140k|    }                                                           \
  |  | 8421|   140k|    else {                                                      \
  |  | 8422|   140k|        return vis(monostate_val);                              \
  |  | 8423|   140k|    }
  ------------------
 8460|   287k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 147k, False: 288k]
  ------------------
 8461|   287k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   287k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   287k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   287k|    }                                                           \
  |  | 8421|   287k|    else {                                                      \
  |  | 8422|   287k|        return vis(monostate_val);                              \
  |  | 8423|   287k|    }
  ------------------
 8462|   435k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 148k, False: 287k]
  ------------------
 8463|   435k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   435k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   435k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   435k|    }                                                           \
  |  | 8421|   435k|    else {                                                      \
  |  | 8422|   435k|        return vis(monostate_val);                              \
  |  | 8423|   435k|    }
  ------------------
 8464|   435k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 435k]
  ------------------
 8465|   435k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   435k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   435k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   435k|    }                                                           \
  |  | 8421|   435k|    else {                                                      \
  |  | 8422|   435k|        return vis(monostate_val);                              \
  |  | 8423|   435k|    }
  ------------------
 8466|   435k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 435k]
  ------------------
 8467|   435k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   435k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   435k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   435k|    }                                                           \
  |  | 8421|   435k|    else {                                                      \
  |  | 8422|   435k|        return vis(monostate_val);                              \
  |  | 8423|   435k|    }
  ------------------
 8468|   435k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 435k]
  ------------------
 8469|   435k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   435k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   435k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   435k|    }                                                           \
  |  | 8421|   435k|    else {                                                      \
  |  | 8422|   435k|        return vis(monostate_val);                              \
  |  | 8423|   435k|    }
  ------------------
 8470|   435k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 435k]
  ------------------
 8471|   435k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   435k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   435k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   435k|    }                                                           \
  |  | 8421|   435k|    else {                                                      \
  |  | 8422|   435k|        return vis(monostate_val);                              \
  |  | 8423|   435k|    }
  ------------------
 8472|   435k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 435k]
  ------------------
 8473|   435k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   435k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   435k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   435k|    }                                                           \
  |  | 8421|   435k|    else {                                                      \
  |  | 8422|   435k|        return vis(monostate_val);                              \
  |  | 8423|   435k|    }
  ------------------
 8474|   435k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 435k]
  ------------------
 8475|   435k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   435k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   435k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   435k|    }                                                           \
  |  | 8421|   435k|    else {                                                      \
  |  | 8422|   435k|        return vis(monostate_val);                              \
  |  | 8423|   435k|    }
  ------------------
 8476|       |
 8477|   435k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 435k]
  ------------------
 8478|   435k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   435k|            return vis(
 8480|   435k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 435k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 435k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   435k|            SCN_CLANG_POP
 8495|   435k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   961k|{
 7044|   961k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   961k|    handler.check_args_exhausted();
 7046|   961k|    return handler.get_error();
 7047|   961k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   961k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   961k|    auto begin = format.data();
 7013|   961k|    auto it = begin;
 7014|   961k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.84M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 961k, False: 879k]
  ------------------
 7017|   961k|        const auto ch = *it++;
 7018|   961k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 961k, False: 0]
  ------------------
 7019|   961k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   961k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   961k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 82.0k, False: 879k]
  ------------------
 7023|  82.0k|                return;
 7024|  82.0k|            }
 7025|   961k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   961k|    }
 7036|       |
 7037|   879k|    handler.on_literal_text(begin, end);
 7038|   879k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   961k|{
 6942|   961k|    struct id_adapter {
 6943|   961k|        constexpr void operator()()
 6944|   961k|        {
 6945|   961k|            arg_id = handler.on_arg_id();
 6946|   961k|        }
 6947|   961k|        constexpr void operator()(std::size_t id)
 6948|   961k|        {
 6949|   961k|            arg_id = handler.on_arg_id(id);
 6950|   961k|        }
 6951|       |
 6952|   961k|        constexpr void on_error(const char* msg)
 6953|   961k|        {
 6954|   961k|            SCN_UNLIKELY_ATTR
 6955|   961k|            handler.on_error(msg);
 6956|   961k|        }
 6957|       |
 6958|   961k|        Handler& handler;
 6959|   961k|        std::size_t arg_id;
 6960|   961k|    };
 6961|       |
 6962|   961k|    ++begin;
 6963|   961k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   961k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 961k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   961k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 961k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   961k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 961k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   961k|    else {
 6975|   961k|        auto adapter = id_adapter{handler, 0};
 6976|   961k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   961k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   961k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 961k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   961k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 961k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   961k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 961k, False: 0]
  ------------------
 6987|   961k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   961k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 961k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   961k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   961k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 961k]
  |  |  |  Branch (859:45): [True: 0, False: 961k]
  |  |  |  Branch (859:45): [True: 0, False: 961k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   961k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   961k|    }
 7003|   961k|    return begin + 1;
 7004|   961k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|  2.09M|    {
 8039|  2.09M|        return m_args.get(id);
 8040|  2.09M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|  2.09M|    {
 8049|  2.09M|        return m_locale;
 8050|  2.09M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|  2.09M|    {
 5566|  2.09M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  2.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.09M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  2.09M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  2.09M|        do_check_arg_id(id);
 5574|  2.09M|        return id;
 5575|  2.09M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|  2.09M|{
 6054|  2.09M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  2.09M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  2.09M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   961k|{
 6443|   961k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   961k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   961k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   961k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 961k, False: 0]
  |  Branch (6444:26): [True: 0, False: 961k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   961k|    handler();
 6449|   961k|    return begin;
 6450|   961k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   961k|        {
 6945|   961k|            arg_id = handler.on_arg_id();
 6946|   961k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|  4.18M|    {
 5252|  4.18M|        return m_type;
 5253|  4.18M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|  2.09M|    {
 5561|  2.09M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  2.09M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|  4.18M|    {
 5550|  4.18M|        return m_format.data();
 5551|  4.18M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7120|   961k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   961k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|   961k|    {
 7122|   961k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   961k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   961k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   961k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|   961k|{
 6858|   961k|    auto do_presentation = [&]() -> const CharT* {
 6859|   961k|        if (*begin == CharT{'['}) {
 6860|   961k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   961k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   961k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   961k|                return begin;
 6866|   961k|            }
 6867|   961k|            handler.on_character_set_string(set);
 6868|   961k|            return begin;
 6869|   961k|        }
 6870|   961k|        if (*begin == CharT{'/'}) {
 6871|   961k|            return parse_presentation_regex(begin, end, handler);
 6872|   961k|        }
 6873|   961k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   961k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   961k|            handler.on_error("Invalid type specifier in format string");
 6876|   961k|            return begin;
 6877|   961k|        }
 6878|   961k|        handler.on_type(type);
 6879|   961k|        return begin;
 6880|   961k|    };
 6881|       |
 6882|   961k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 961k, False: 0]
  |  Branch (6882:28): [True: 961k, False: 0]
  ------------------
 6883|   961k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 961k, False: 0]
  |  Branch (6883:36): [True: 694k, False: 266k]
  ------------------
 6884|   694k|        return do_presentation();
 6885|   694k|    }
 6886|       |
 6887|   266k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 266k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   266k|    begin = parse_align(begin, end, handler);
 6893|   266k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 266k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   266k|    begin = parse_width(begin, end, handler);
 6899|   266k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 266k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   266k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 266k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   266k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 266k, False: 0]
  ------------------
 6918|   266k|        handler.on_localized();
 6919|   266k|        ++begin;
 6920|   266k|    }
 6921|   266k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 266k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   266k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 266k, False: 0]
  |  Branch (6926:25): [True: 0, False: 266k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   266k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 266k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   266k|    return begin;
 6935|   266k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|  2.09M|{
 6507|  2.09M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 1.50M, False: 585k]
  |  Branch (6507:33): [True: 1.50M, False: 0]
  ------------------
 6508|  2.09M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 585k, False: 0]
  |  Branch (6508:33): [True: 585k, False: 0]
  ------------------
 6509|  2.09M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   694k|    auto do_presentation = [&]() -> const CharT* {
 6859|   694k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 694k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   694k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 694k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   694k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   694k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   694k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 694k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   694k|        handler.on_type(type);
 6879|   694k|        return begin;
 6880|   694k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|  1.50M|{
 6455|  1.50M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 1.50M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 1.50M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 1.50M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 1.50M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 1.50M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 1.50M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.50M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 1.50M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 1.50M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 1.50M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   633k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 633k, False: 870k]
  ------------------
 6474|   633k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 1.50M]
  ------------------
 6475|   633k|            return presentation_type::float_hex;
 6476|  50.2k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 50.2k, False: 1.45M]
  ------------------
 6477|  50.2k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 1.50M]
  ------------------
 6478|  50.2k|            return presentation_type::float_scientific;
 6479|   316k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 316k, False: 1.18M]
  ------------------
 6480|   316k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 1.50M]
  ------------------
 6481|   316k|            return presentation_type::float_fixed;
 6482|   503k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 503k, False: 1.00M]
  ------------------
 6483|   503k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 1.50M]
  ------------------
 6484|   503k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 1.50M]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 1.50M]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 1.50M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 1.50M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 1.50M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 1.50M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 1.50M]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|  1.50M|    }
 6502|  1.50M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|   266k|{
 6532|   266k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   266k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   266k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   266k|    auto check_align = [](wchar_t ch) {
 6535|   266k|        switch (ch) {
 6536|   266k|            case L'<':
 6537|   266k|                return align_type::left;
 6538|   266k|            case L'>':
 6539|   266k|                return align_type::right;
 6540|   266k|            case L'^':
 6541|   266k|                return align_type::center;
 6542|   266k|            default:
 6543|   266k|                return align_type::none;
 6544|   266k|        }
 6545|   266k|    };
 6546|       |
 6547|   266k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   266k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   532k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 266k]
  |  |  |  Branch (859:45): [True: 0, False: 266k]
  |  |  |  Branch (859:45): [True: 0, False: 266k]
  |  |  ------------------
  ------------------
 6549|   266k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   266k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   266k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   266k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   266k|    const auto begin_before_fill = begin;
 6559|   266k|    begin += potential_fill_len;
 6560|       |
 6561|   266k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 266k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   266k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   266k|    const auto begin_after_fill = begin;
 6567|   266k|    ++begin;
 6568|       |
 6569|   266k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 266k, False: 0]
  ------------------
 6570|   266k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 266k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   266k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 266k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   266k|    }
 6578|       |
 6579|   266k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 266k, False: 0]
  ------------------
 6580|   266k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 266k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   266k|        return begin_before_fill;
 6585|   266k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   266k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|   585k|{
 6514|   585k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   585k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   585k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|       |    if constexpr (sizeof(CharT) != 1) {
 6516|       |        return 1;
 6517|       |    }
 6518|   585k|    else {
 6519|   585k|        const auto lengths =
 6520|   585k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|   585k|            "\3\4";
 6522|   585k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|   585k|        return len;
 6524|   585k|    }
 6525|   585k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   532k|    auto check_align = [](wchar_t ch) {
 6535|   532k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 532k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 532k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 532k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   532k|            default:
  ------------------
  |  Branch (6542:13): [True: 532k, False: 0]
  ------------------
 6543|   532k|                return align_type::none;
 6544|   532k|        }
 6545|   532k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|   266k|{
 6597|   266k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   266k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   266k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   266k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 266k, False: 0]
  |  Branch (6599:33): [True: 0, False: 266k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   266k|    return begin;
 6610|   266k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|   266k|    {
 7127|   266k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   266k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 266k, False: 0]
  ------------------
 7129|   266k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 266k, False: 0]
  ------------------
 7130|   266k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 266k]
  ------------------
 7131|   266k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   266k|        Handler::on_localized();
 7139|   266k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   961k|{
 8417|   961k|#define SCN_VISIT(Type)                                         \
 8418|   961k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   961k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   961k|    }                                                           \
 8421|   961k|    else {                                                      \
 8422|   961k|        return vis(monostate_val);                              \
 8423|   961k|    }
 8424|       |
 8425|   961k|    monostate monostate_val{};
 8426|       |
 8427|   961k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 961k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 961k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 961k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 961k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 961k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 961k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 961k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 961k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 961k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 961k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 961k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 961k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 961k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 961k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 961k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   312k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 312k, False: 648k]
  ------------------
 8459|   312k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   312k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   312k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   312k|    }                                                           \
  |  | 8421|   312k|    else {                                                      \
  |  | 8422|   312k|        return vis(monostate_val);                              \
  |  | 8423|   312k|    }
  ------------------
 8460|   635k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 322k, False: 638k]
  ------------------
 8461|   635k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   635k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   635k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   635k|    }                                                           \
  |  | 8421|   635k|    else {                                                      \
  |  | 8422|   635k|        return vis(monostate_val);                              \
  |  | 8423|   635k|    }
  ------------------
 8462|   961k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 326k, False: 635k]
  ------------------
 8463|   961k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   961k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   961k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   961k|    }                                                           \
  |  | 8421|   961k|    else {                                                      \
  |  | 8422|   961k|        return vis(monostate_val);                              \
  |  | 8423|   961k|    }
  ------------------
 8464|   961k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 961k]
  ------------------
 8465|   961k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   961k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   961k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   961k|    }                                                           \
  |  | 8421|   961k|    else {                                                      \
  |  | 8422|   961k|        return vis(monostate_val);                              \
  |  | 8423|   961k|    }
  ------------------
 8466|   961k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 961k]
  ------------------
 8467|   961k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   961k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   961k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   961k|    }                                                           \
  |  | 8421|   961k|    else {                                                      \
  |  | 8422|   961k|        return vis(monostate_val);                              \
  |  | 8423|   961k|    }
  ------------------
 8468|   961k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 961k]
  ------------------
 8469|   961k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   961k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   961k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   961k|    }                                                           \
  |  | 8421|   961k|    else {                                                      \
  |  | 8422|   961k|        return vis(monostate_val);                              \
  |  | 8423|   961k|    }
  ------------------
 8470|   961k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 961k]
  ------------------
 8471|   961k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   961k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   961k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   961k|    }                                                           \
  |  | 8421|   961k|    else {                                                      \
  |  | 8422|   961k|        return vis(monostate_val);                              \
  |  | 8423|   961k|    }
  ------------------
 8472|   961k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 961k]
  ------------------
 8473|   961k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   961k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   961k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   961k|    }                                                           \
  |  | 8421|   961k|    else {                                                      \
  |  | 8422|   961k|        return vis(monostate_val);                              \
  |  | 8423|   961k|    }
  ------------------
 8474|   961k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 961k]
  ------------------
 8475|   961k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   961k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   961k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   961k|    }                                                           \
  |  | 8421|   961k|    else {                                                      \
  |  | 8422|   961k|        return vis(monostate_val);                              \
  |  | 8423|   961k|    }
  ------------------
 8476|       |
 8477|   961k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 961k]
  ------------------
 8478|   961k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   961k|            return vis(
 8480|   961k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 961k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 961k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   961k|            SCN_CLANG_POP
 8495|   961k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  1.12M|{
 7044|  1.12M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  1.12M|    handler.check_args_exhausted();
 7046|  1.12M|    return handler.get_error();
 7047|  1.12M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  1.12M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  1.12M|    auto begin = format.data();
 7013|  1.12M|    auto it = begin;
 7014|  1.12M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  2.17M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 1.12M, False: 1.04M]
  ------------------
 7017|  1.12M|        const auto ch = *it++;
 7018|  1.12M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 1.12M, False: 0]
  ------------------
 7019|  1.12M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  1.12M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  1.12M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 82.0k, False: 1.04M]
  ------------------
 7023|  82.0k|                return;
 7024|  82.0k|            }
 7025|  1.12M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  1.12M|    }
 7036|       |
 7037|  1.04M|    handler.on_literal_text(begin, end);
 7038|  1.04M|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|  1.04M|    {
 8175|  1.04M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.04M|    static_cast<    \
  |  |  929|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  1.04M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|  1.12M|{
 6942|  1.12M|    struct id_adapter {
 6943|  1.12M|        constexpr void operator()()
 6944|  1.12M|        {
 6945|  1.12M|            arg_id = handler.on_arg_id();
 6946|  1.12M|        }
 6947|  1.12M|        constexpr void operator()(std::size_t id)
 6948|  1.12M|        {
 6949|  1.12M|            arg_id = handler.on_arg_id(id);
 6950|  1.12M|        }
 6951|       |
 6952|  1.12M|        constexpr void on_error(const char* msg)
 6953|  1.12M|        {
 6954|  1.12M|            SCN_UNLIKELY_ATTR
 6955|  1.12M|            handler.on_error(msg);
 6956|  1.12M|        }
 6957|       |
 6958|  1.12M|        Handler& handler;
 6959|  1.12M|        std::size_t arg_id;
 6960|  1.12M|    };
 6961|       |
 6962|  1.12M|    ++begin;
 6963|  1.12M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  1.12M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 1.12M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  1.12M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 1.12M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  1.12M|    else {
 6975|  1.12M|        auto adapter = id_adapter{handler, 0};
 6976|  1.12M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  1.12M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  1.12M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 1.12M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  1.12M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 1.12M, False: 0]
  ------------------
 6987|  1.12M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  1.12M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  1.12M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  2.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12M]
  |  |  |  Branch (859:45): [True: 0, False: 1.12M]
  |  |  |  Branch (859:45): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|  1.12M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  1.12M|    }
 7003|  1.12M|    return begin + 1;
 7004|  1.12M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  1.12M|{
 6443|  1.12M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  1.12M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 1.12M, False: 0]
  |  Branch (6444:26): [True: 0, False: 1.12M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  1.12M|    handler();
 6449|  1.12M|    return begin;
 6450|  1.12M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  1.12M|        {
 6945|  1.12M|            arg_id = handler.on_arg_id();
 6946|  1.12M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7120|  1.12M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|  1.12M|    {
 7122|  1.12M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.12M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.12M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  1.12M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|  1.12M|{
 6858|  1.12M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.12M|        if (*begin == CharT{'['}) {
 6860|  1.12M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  1.12M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  1.12M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  1.12M|                return begin;
 6866|  1.12M|            }
 6867|  1.12M|            handler.on_character_set_string(set);
 6868|  1.12M|            return begin;
 6869|  1.12M|        }
 6870|  1.12M|        if (*begin == CharT{'/'}) {
 6871|  1.12M|            return parse_presentation_regex(begin, end, handler);
 6872|  1.12M|        }
 6873|  1.12M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.12M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  1.12M|            handler.on_error("Invalid type specifier in format string");
 6876|  1.12M|            return begin;
 6877|  1.12M|        }
 6878|  1.12M|        handler.on_type(type);
 6879|  1.12M|        return begin;
 6880|  1.12M|    };
 6881|       |
 6882|  1.12M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 1.12M, False: 0]
  |  Branch (6882:28): [True: 1.12M, False: 0]
  ------------------
 6883|  1.12M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 1.12M, False: 0]
  |  Branch (6883:36): [True: 809k, False: 319k]
  ------------------
 6884|   809k|        return do_presentation();
 6885|   809k|    }
 6886|       |
 6887|   319k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 319k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   319k|    begin = parse_align(begin, end, handler);
 6893|   319k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 319k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   319k|    begin = parse_width(begin, end, handler);
 6899|   319k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 319k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   319k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 319k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   319k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 319k, False: 0]
  ------------------
 6918|   319k|        handler.on_localized();
 6919|   319k|        ++begin;
 6920|   319k|    }
 6921|   319k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 319k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   319k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 319k, False: 0]
  |  Branch (6926:25): [True: 0, False: 319k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   319k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 319k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   319k|    return begin;
 6935|   319k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   809k|    auto do_presentation = [&]() -> const CharT* {
 6859|   809k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 809k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   809k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 809k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   809k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   809k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   809k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 809k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   809k|        handler.on_type(type);
 6879|   809k|        return begin;
 6880|   809k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|   319k|{
 6532|   319k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   319k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   319k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   319k|    auto check_align = [](wchar_t ch) {
 6535|   319k|        switch (ch) {
 6536|   319k|            case L'<':
 6537|   319k|                return align_type::left;
 6538|   319k|            case L'>':
 6539|   319k|                return align_type::right;
 6540|   319k|            case L'^':
 6541|   319k|                return align_type::center;
 6542|   319k|            default:
 6543|   319k|                return align_type::none;
 6544|   319k|        }
 6545|   319k|    };
 6546|       |
 6547|   319k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   319k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   639k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 319k]
  |  |  |  Branch (859:45): [True: 0, False: 319k]
  |  |  |  Branch (859:45): [True: 0, False: 319k]
  |  |  ------------------
  ------------------
 6549|   319k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   319k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   319k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   319k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   319k|    const auto begin_before_fill = begin;
 6559|   319k|    begin += potential_fill_len;
 6560|       |
 6561|   319k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 319k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   319k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   319k|    const auto begin_after_fill = begin;
 6567|   319k|    ++begin;
 6568|       |
 6569|   319k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 319k, False: 0]
  ------------------
 6570|   319k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   319k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 319k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   319k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 319k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   319k|    }
 6578|       |
 6579|   319k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 319k, False: 0]
  ------------------
 6580|   319k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 319k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   319k|        return begin_before_fill;
 6585|   319k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   319k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   639k|    auto check_align = [](wchar_t ch) {
 6535|   639k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 639k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 639k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 639k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   639k|            default:
  ------------------
  |  Branch (6542:13): [True: 639k, False: 0]
  ------------------
 6543|   639k|                return align_type::none;
 6544|   639k|        }
 6545|   639k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|   319k|{
 6597|   319k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   319k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   319k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   319k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 319k, False: 0]
  |  Branch (6599:33): [True: 0, False: 319k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   319k|    return begin;
 6610|   319k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|   319k|    {
 7127|   319k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   319k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 319k, False: 0]
  ------------------
 7129|   319k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 319k, False: 0]
  ------------------
 7130|   319k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 319k]
  ------------------
 7131|   319k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   319k|        Handler::on_localized();
 7139|   319k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  1.12M|{
 8417|  1.12M|#define SCN_VISIT(Type)                                         \
 8418|  1.12M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  1.12M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  1.12M|    }                                                           \
 8421|  1.12M|    else {                                                      \
 8422|  1.12M|        return vis(monostate_val);                              \
 8423|  1.12M|    }
 8424|       |
 8425|  1.12M|    monostate monostate_val{};
 8426|       |
 8427|  1.12M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.12M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.12M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.12M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.12M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.12M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.12M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.12M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.12M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.12M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.12M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.12M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.12M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.12M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.12M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.12M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   365k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 365k, False: 764k]
  ------------------
 8459|   365k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   365k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   365k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   365k|    }                                                           \
  |  | 8421|   365k|    else {                                                      \
  |  | 8422|   365k|        return vis(monostate_val);                              \
  |  | 8423|   365k|    }
  ------------------
 8460|   745k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 380k, False: 748k]
  ------------------
 8461|   745k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   745k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   745k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   745k|    }                                                           \
  |  | 8421|   745k|    else {                                                      \
  |  | 8422|   745k|        return vis(monostate_val);                              \
  |  | 8423|   745k|    }
  ------------------
 8462|  1.12M|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 383k, False: 745k]
  ------------------
 8463|  1.12M|            SCN_VISIT(long double);
  ------------------
  |  | 8418|  1.12M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.12M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.12M|    }                                                           \
  |  | 8421|  1.12M|    else {                                                      \
  |  | 8422|  1.12M|        return vis(monostate_val);                              \
  |  | 8423|  1.12M|    }
  ------------------
 8464|  1.12M|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.12M]
  ------------------
 8465|  1.12M|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  1.12M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.12M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.12M|    }                                                           \
  |  | 8421|  1.12M|    else {                                                      \
  |  | 8422|  1.12M|        return vis(monostate_val);                              \
  |  | 8423|  1.12M|    }
  ------------------
 8466|  1.12M|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.12M]
  ------------------
 8467|  1.12M|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  1.12M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.12M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.12M|    }                                                           \
  |  | 8421|  1.12M|    else {                                                      \
  |  | 8422|  1.12M|        return vis(monostate_val);                              \
  |  | 8423|  1.12M|    }
  ------------------
 8468|  1.12M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.12M]
  ------------------
 8469|  1.12M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  1.12M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.12M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.12M|    }                                                           \
  |  | 8421|  1.12M|    else {                                                      \
  |  | 8422|  1.12M|        return vis(monostate_val);                              \
  |  | 8423|  1.12M|    }
  ------------------
 8470|  1.12M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.12M]
  ------------------
 8471|  1.12M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  1.12M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.12M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.12M|    }                                                           \
  |  | 8421|  1.12M|    else {                                                      \
  |  | 8422|  1.12M|        return vis(monostate_val);                              \
  |  | 8423|  1.12M|    }
  ------------------
 8472|  1.12M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.12M]
  ------------------
 8473|  1.12M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|  1.12M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.12M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.12M|    }                                                           \
  |  | 8421|  1.12M|    else {                                                      \
  |  | 8422|  1.12M|        return vis(monostate_val);                              \
  |  | 8423|  1.12M|    }
  ------------------
 8474|  1.12M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.12M]
  ------------------
 8475|  1.12M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|  1.12M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.12M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.12M|    }                                                           \
  |  | 8421|  1.12M|    else {                                                      \
  |  | 8422|  1.12M|        return vis(monostate_val);                              \
  |  | 8423|  1.12M|    }
  ------------------
 8476|       |
 8477|  1.12M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 1.12M]
  ------------------
 8478|  1.12M|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|  1.12M|            return vis(
 8480|  1.12M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 1.12M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 1.12M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  1.12M|            SCN_CLANG_POP
 8495|  1.12M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|   106k|    {
 4076|   106k|        sync(0);
 4077|   106k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|  1.22M|    {
 5466|  1.22M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  1.22M|        return static_cast<std::size_t>(m_desc &
 5471|  1.22M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  1.22M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  2.44M|    {
 5491|  2.44M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  2.44M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  1.22M|    {
 5434|  1.22M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  1.22M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  1.22M|        const auto t = type(id);
 5446|  1.22M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  1.22M|        basic_scan_arg<Context> arg;
 5451|  1.22M|        arg.m_type = t;
 5452|  1.22M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 1.22M, False: 0]
  ------------------
 5453|  1.22M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  1.22M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  1.22M|        return arg;
 5459|  1.22M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  1.22M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  1.22M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  1.22M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  1.22M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  1.22M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  1.22M|    {
 5495|  1.22M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  1.22M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  2.32M|    {
 5247|  2.32M|        return m_type != detail::arg_type::none_type;
 5248|  2.32M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   178k|{
 8417|   178k|#define SCN_VISIT(Type)                                         \
 8418|   178k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   178k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   178k|    }                                                           \
 8421|   178k|    else {                                                      \
 8422|   178k|        return vis(monostate_val);                              \
 8423|   178k|    }
 8424|       |
 8425|   178k|    monostate monostate_val{};
 8426|       |
 8427|   178k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 178k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 178k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 178k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 178k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 178k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 178k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 178k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 178k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 178k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 178k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 178k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 178k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 178k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 178k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 178k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  54.6k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 54.6k, False: 123k]
  ------------------
 8459|  54.6k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  54.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  54.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  54.6k|    }                                                           \
  |  | 8421|  54.6k|    else {                                                      \
  |  | 8422|  54.6k|        return vis(monostate_val);                              \
  |  | 8423|  54.6k|    }
  ------------------
 8460|   115k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 60.6k, False: 117k]
  ------------------
 8461|   115k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   115k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   115k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   115k|    }                                                           \
  |  | 8421|   115k|    else {                                                      \
  |  | 8422|   115k|        return vis(monostate_val);                              \
  |  | 8423|   115k|    }
  ------------------
 8462|   178k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 62.7k, False: 115k]
  ------------------
 8463|   178k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   178k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   178k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   178k|    }                                                           \
  |  | 8421|   178k|    else {                                                      \
  |  | 8422|   178k|        return vis(monostate_val);                              \
  |  | 8423|   178k|    }
  ------------------
 8464|   178k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 178k]
  ------------------
 8465|   178k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   178k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   178k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   178k|    }                                                           \
  |  | 8421|   178k|    else {                                                      \
  |  | 8422|   178k|        return vis(monostate_val);                              \
  |  | 8423|   178k|    }
  ------------------
 8466|   178k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 178k]
  ------------------
 8467|   178k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   178k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   178k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   178k|    }                                                           \
  |  | 8421|   178k|    else {                                                      \
  |  | 8422|   178k|        return vis(monostate_val);                              \
  |  | 8423|   178k|    }
  ------------------
 8468|   178k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 178k]
  ------------------
 8469|   178k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   178k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   178k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   178k|    }                                                           \
  |  | 8421|   178k|    else {                                                      \
  |  | 8422|   178k|        return vis(monostate_val);                              \
  |  | 8423|   178k|    }
  ------------------
 8470|   178k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 178k]
  ------------------
 8471|   178k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   178k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   178k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   178k|    }                                                           \
  |  | 8421|   178k|    else {                                                      \
  |  | 8422|   178k|        return vis(monostate_val);                              \
  |  | 8423|   178k|    }
  ------------------
 8472|   178k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 178k]
  ------------------
 8473|   178k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   178k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   178k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   178k|    }                                                           \
  |  | 8421|   178k|    else {                                                      \
  |  | 8422|   178k|        return vis(monostate_val);                              \
  |  | 8423|   178k|    }
  ------------------
 8474|   178k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 178k]
  ------------------
 8475|   178k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   178k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   178k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   178k|    }                                                           \
  |  | 8421|   178k|    else {                                                      \
  |  | 8422|   178k|        return vis(monostate_val);                              \
  |  | 8423|   178k|    }
  ------------------
 8476|       |
 8477|   178k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 178k]
  ------------------
 8478|   178k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   178k|            return vis(
 8480|   178k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 178k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 178k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   178k|            SCN_CLANG_POP
 8495|   178k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5543|   986k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5544|   986k|    {
 5545|   986k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8136|   492k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   492k|    static_cast<    \
  |  |  929|   492k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|   492k|    {
 8138|   492k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8054|   986k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   986k|    static_cast<    \
  |  |  929|   986k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   986k|    static_cast<    \
  |  |  929|   986k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8055|   986k|    {
 8056|   986k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   493k|{
 7044|   493k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   493k|    handler.check_args_exhausted();
 7046|   493k|    return handler.get_error();
 7047|   493k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   493k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   493k|    auto begin = format.data();
 7013|   493k|    auto it = begin;
 7014|   493k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   822k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 493k, False: 329k]
  ------------------
 7017|   493k|        const auto ch = *it++;
 7018|   493k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 493k, False: 0]
  ------------------
 7019|   493k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   493k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   493k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 164k, False: 329k]
  ------------------
 7023|   164k|                return;
 7024|   164k|            }
 7025|   493k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   493k|    }
 7036|       |
 7037|   329k|    handler.on_literal_text(begin, end);
 7038|   329k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|   493k|{
 6942|   493k|    struct id_adapter {
 6943|   493k|        constexpr void operator()()
 6944|   493k|        {
 6945|   493k|            arg_id = handler.on_arg_id();
 6946|   493k|        }
 6947|   493k|        constexpr void operator()(std::size_t id)
 6948|   493k|        {
 6949|   493k|            arg_id = handler.on_arg_id(id);
 6950|   493k|        }
 6951|       |
 6952|   493k|        constexpr void on_error(const char* msg)
 6953|   493k|        {
 6954|   493k|            SCN_UNLIKELY_ATTR
 6955|   493k|            handler.on_error(msg);
 6956|   493k|        }
 6957|       |
 6958|   493k|        Handler& handler;
 6959|   493k|        std::size_t arg_id;
 6960|   493k|    };
 6961|       |
 6962|   493k|    ++begin;
 6963|   493k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   493k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 493k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   493k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 493k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   493k|    else {
 6975|   493k|        auto adapter = id_adapter{handler, 0};
 6976|   493k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   493k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   493k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 493k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   493k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 493k, False: 0]
  ------------------
 6987|   493k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   493k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   493k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   986k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 493k]
  |  |  |  Branch (859:45): [True: 0, False: 493k]
  |  |  |  Branch (859:45): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   493k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   493k|    }
 7003|   493k|    return begin + 1;
 7004|   493k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|   986k|    {
 8039|   986k|        return m_args.get(id);
 8040|   986k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|   986k|    {
 8049|   986k|        return m_locale;
 8050|   986k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|   986k|    {
 5566|   986k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   986k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 986k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   986k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   986k|        do_check_arg_id(id);
 5574|   986k|        return id;
 5575|   986k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|   986k|{
 6054|   986k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   986k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   986k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   493k|{
 6443|   493k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   493k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 493k, False: 0]
  |  Branch (6444:26): [True: 0, False: 493k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   493k|    handler();
 6449|   493k|    return begin;
 6450|   493k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   493k|        {
 6945|   493k|            arg_id = handler.on_arg_id();
 6946|   493k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  1.97M|    {
 5252|  1.97M|        return m_type;
 5253|  1.97M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|   986k|    {
 5561|   986k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   986k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|   670k|{
 4344|   670k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 670k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   670k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   670k|                            ranges::default_sentinel};
 4350|   670k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4175|   670k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4176|   670k|    {
 4177|   670k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   670k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   670k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   670k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   670k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   670k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   670k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  1.97M|    {
 5550|  1.97M|        return m_format.data();
 5551|  1.97M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7120|   493k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   493k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|   493k|    {
 7122|   493k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   493k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   493k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   493k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|   493k|{
 6858|   493k|    auto do_presentation = [&]() -> const CharT* {
 6859|   493k|        if (*begin == CharT{'['}) {
 6860|   493k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   493k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   493k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   493k|                return begin;
 6866|   493k|            }
 6867|   493k|            handler.on_character_set_string(set);
 6868|   493k|            return begin;
 6869|   493k|        }
 6870|   493k|        if (*begin == CharT{'/'}) {
 6871|   493k|            return parse_presentation_regex(begin, end, handler);
 6872|   493k|        }
 6873|   493k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   493k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   493k|            handler.on_error("Invalid type specifier in format string");
 6876|   493k|            return begin;
 6877|   493k|        }
 6878|   493k|        handler.on_type(type);
 6879|   493k|        return begin;
 6880|   493k|    };
 6881|       |
 6882|   493k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 493k, False: 0]
  |  Branch (6882:28): [True: 493k, False: 0]
  ------------------
 6883|   493k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 493k, False: 0]
  |  Branch (6883:36): [True: 374k, False: 118k]
  ------------------
 6884|   374k|        return do_presentation();
 6885|   374k|    }
 6886|       |
 6887|   118k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   118k|    begin = parse_align(begin, end, handler);
 6893|   118k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   118k|    begin = parse_width(begin, end, handler);
 6899|   118k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   118k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 118k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   118k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 118k, False: 0]
  ------------------
 6918|   118k|        handler.on_localized();
 6919|   118k|        ++begin;
 6920|   118k|    }
 6921|   118k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   118k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 118k, False: 0]
  |  Branch (6926:25): [True: 0, False: 118k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   118k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   118k|    return begin;
 6935|   118k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|   986k|{
 6507|   986k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 748k, False: 237k]
  |  Branch (6507:33): [True: 748k, False: 0]
  ------------------
 6508|   986k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 237k, False: 0]
  |  Branch (6508:33): [True: 237k, False: 0]
  ------------------
 6509|   986k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   374k|    auto do_presentation = [&]() -> const CharT* {
 6859|   374k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 374k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   374k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 374k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   374k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   374k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   374k|        handler.on_type(type);
 6879|   374k|        return begin;
 6880|   374k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|   748k|{
 6455|   748k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 748k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 748k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 748k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 748k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 748k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 748k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 748k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 748k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 748k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 748k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|   254k|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 254k, False: 493k]
  ------------------
 6474|   254k|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 748k]
  ------------------
 6475|   254k|            return presentation_type::float_hex;
 6476|  67.1k|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 67.1k, False: 681k]
  ------------------
 6477|  67.1k|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 748k]
  ------------------
 6478|  67.1k|            return presentation_type::float_scientific;
 6479|   201k|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 201k, False: 547k]
  ------------------
 6480|   201k|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 748k]
  ------------------
 6481|   201k|            return presentation_type::float_fixed;
 6482|   225k|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 225k, False: 523k]
  ------------------
 6483|   225k|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 748k]
  ------------------
 6484|   225k|            return presentation_type::float_general;
 6485|      0|        case 's':
  ------------------
  |  Branch (6485:9): [True: 0, False: 748k]
  ------------------
 6486|      0|            return presentation_type::string;
 6487|      0|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 0, False: 748k]
  ------------------
 6488|      0|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 748k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 748k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 748k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 748k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|      0|        default:
  ------------------
  |  Branch (6499:9): [True: 0, False: 748k]
  ------------------
 6500|      0|            return presentation_type::none;
 6501|   748k|    }
 6502|   748k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|   118k|{
 6532|   118k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   118k|    auto check_align = [](wchar_t ch) {
 6535|   118k|        switch (ch) {
 6536|   118k|            case L'<':
 6537|   118k|                return align_type::left;
 6538|   118k|            case L'>':
 6539|   118k|                return align_type::right;
 6540|   118k|            case L'^':
 6541|   118k|                return align_type::center;
 6542|   118k|            default:
 6543|   118k|                return align_type::none;
 6544|   118k|        }
 6545|   118k|    };
 6546|       |
 6547|   118k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   118k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 118k]
  |  |  |  Branch (859:45): [True: 0, False: 118k]
  |  |  |  Branch (859:45): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 6549|   118k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   118k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   118k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   118k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   118k|    const auto begin_before_fill = begin;
 6559|   118k|    begin += potential_fill_len;
 6560|       |
 6561|   118k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 118k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   118k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   118k|    const auto begin_after_fill = begin;
 6567|   118k|    ++begin;
 6568|       |
 6569|   118k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 118k, False: 0]
  ------------------
 6570|   118k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   118k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 118k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   118k|    }
 6578|       |
 6579|   118k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 118k, False: 0]
  ------------------
 6580|   118k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 118k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   118k|        return begin_before_fill;
 6585|   118k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   118k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|   237k|{
 6514|   237k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   237k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   237k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|   237k|    if constexpr (sizeof(CharT) != 1) {
 6516|   237k|        return 1;
 6517|       |    }
 6518|       |    else {
 6519|       |        const auto lengths =
 6520|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|       |            "\3\4";
 6522|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|       |        return len;
 6524|       |    }
 6525|   237k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|   237k|    auto check_align = [](wchar_t ch) {
 6535|   237k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 237k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 237k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 237k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   237k|            default:
  ------------------
  |  Branch (6542:13): [True: 237k, False: 0]
  ------------------
 6543|   237k|                return align_type::none;
 6544|   237k|        }
 6545|   237k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|   118k|{
 6597|   118k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   118k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 118k, False: 0]
  |  Branch (6599:33): [True: 0, False: 118k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   118k|    return begin;
 6610|   118k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|   118k|    {
 7127|   118k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   118k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 118k, False: 0]
  ------------------
 7129|   118k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 118k, False: 0]
  ------------------
 7130|   118k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 118k]
  ------------------
 7131|   118k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   118k|        Handler::on_localized();
 7139|   118k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   493k|{
 8417|   493k|#define SCN_VISIT(Type)                                         \
 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   493k|    }                                                           \
 8421|   493k|    else {                                                      \
 8422|   493k|        return vis(monostate_val);                              \
 8423|   493k|    }
 8424|       |
 8425|   493k|    monostate monostate_val{};
 8426|       |
 8427|   493k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 493k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 493k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 493k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 493k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 493k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 493k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 493k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 493k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 493k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 493k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 493k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 493k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 493k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 493k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 493k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   158k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 158k, False: 335k]
  ------------------
 8459|   158k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   158k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   158k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   158k|    }                                                           \
  |  | 8421|   158k|    else {                                                      \
  |  | 8422|   158k|        return vis(monostate_val);                              \
  |  | 8423|   158k|    }
  ------------------
 8460|   324k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 166k, False: 327k]
  ------------------
 8461|   324k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   324k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   324k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   324k|    }                                                           \
  |  | 8421|   324k|    else {                                                      \
  |  | 8422|   324k|        return vis(monostate_val);                              \
  |  | 8423|   324k|    }
  ------------------
 8462|   493k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 168k, False: 324k]
  ------------------
 8463|   493k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8464|   493k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 493k]
  ------------------
 8465|   493k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8466|   493k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 493k]
  ------------------
 8467|   493k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8468|   493k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 493k]
  ------------------
 8469|   493k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8470|   493k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 493k]
  ------------------
 8471|   493k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8472|   493k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 493k]
  ------------------
 8473|   493k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8474|   493k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 493k]
  ------------------
 8475|   493k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   493k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   493k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   493k|    }                                                           \
  |  | 8421|   493k|    else {                                                      \
  |  | 8422|   493k|        return vis(monostate_val);                              \
  |  | 8423|   493k|    }
  ------------------
 8476|       |
 8477|   493k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 493k]
  ------------------
 8478|   493k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   493k|            return vis(
 8480|   493k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 493k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 493k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   493k|            SCN_CLANG_POP
 8495|   493k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   177k|{
 8417|   177k|#define SCN_VISIT(Type)                                         \
 8418|   177k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   177k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   177k|    }                                                           \
 8421|   177k|    else {                                                      \
 8422|   177k|        return vis(monostate_val);                              \
 8423|   177k|    }
 8424|       |
 8425|   177k|    monostate monostate_val{};
 8426|       |
 8427|   177k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 177k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 177k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 177k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 177k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 177k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 177k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 177k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 177k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 177k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 177k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 177k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 177k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 177k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 177k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 177k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|  54.6k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 54.6k, False: 123k]
  ------------------
 8459|  54.6k|            SCN_VISIT(float);
  ------------------
  |  | 8418|  54.6k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  54.6k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  54.6k|    }                                                           \
  |  | 8421|  54.6k|    else {                                                      \
  |  | 8422|  54.6k|        return vis(monostate_val);                              \
  |  | 8423|  54.6k|    }
  ------------------
 8460|   115k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 60.6k, False: 117k]
  ------------------
 8461|   115k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   115k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   115k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   115k|    }                                                           \
  |  | 8421|   115k|    else {                                                      \
  |  | 8422|   115k|        return vis(monostate_val);                              \
  |  | 8423|   115k|    }
  ------------------
 8462|   177k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 62.6k, False: 115k]
  ------------------
 8463|   177k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   177k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   177k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   177k|    }                                                           \
  |  | 8421|   177k|    else {                                                      \
  |  | 8422|   177k|        return vis(monostate_val);                              \
  |  | 8423|   177k|    }
  ------------------
 8464|   177k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 177k]
  ------------------
 8465|   177k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   177k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   177k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   177k|    }                                                           \
  |  | 8421|   177k|    else {                                                      \
  |  | 8422|   177k|        return vis(monostate_val);                              \
  |  | 8423|   177k|    }
  ------------------
 8466|   177k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 177k]
  ------------------
 8467|   177k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   177k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   177k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   177k|    }                                                           \
  |  | 8421|   177k|    else {                                                      \
  |  | 8422|   177k|        return vis(monostate_val);                              \
  |  | 8423|   177k|    }
  ------------------
 8468|   177k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 177k]
  ------------------
 8469|   177k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   177k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   177k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   177k|    }                                                           \
  |  | 8421|   177k|    else {                                                      \
  |  | 8422|   177k|        return vis(monostate_val);                              \
  |  | 8423|   177k|    }
  ------------------
 8470|   177k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 177k]
  ------------------
 8471|   177k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   177k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   177k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   177k|    }                                                           \
  |  | 8421|   177k|    else {                                                      \
  |  | 8422|   177k|        return vis(monostate_val);                              \
  |  | 8423|   177k|    }
  ------------------
 8472|   177k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 177k]
  ------------------
 8473|   177k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   177k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   177k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   177k|    }                                                           \
  |  | 8421|   177k|    else {                                                      \
  |  | 8422|   177k|        return vis(monostate_val);                              \
  |  | 8423|   177k|    }
  ------------------
 8474|   177k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 177k]
  ------------------
 8475|   177k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   177k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   177k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   177k|    }                                                           \
  |  | 8421|   177k|    else {                                                      \
  |  | 8422|   177k|        return vis(monostate_val);                              \
  |  | 8423|   177k|    }
  ------------------
 8476|       |
 8477|   177k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 177k]
  ------------------
 8478|   177k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   177k|            return vis(
 8480|   177k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 177k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 177k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   177k|            SCN_CLANG_POP
 8495|   177k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   492k|{
 7044|   492k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   492k|    handler.check_args_exhausted();
 7046|   492k|    return handler.get_error();
 7047|   492k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   492k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   492k|    auto begin = format.data();
 7013|   492k|    auto it = begin;
 7014|   492k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   821k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 492k, False: 328k]
  ------------------
 7017|   492k|        const auto ch = *it++;
 7018|   492k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 492k, False: 0]
  ------------------
 7019|   492k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   492k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   492k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 164k, False: 328k]
  ------------------
 7023|   164k|                return;
 7024|   164k|            }
 7025|   492k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   492k|    }
 7036|       |
 7037|   328k|    handler.on_literal_text(begin, end);
 7038|   328k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|   328k|    {
 8175|   328k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   328k|    static_cast<    \
  |  |  929|   328k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   328k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   492k|{
 6942|   492k|    struct id_adapter {
 6943|   492k|        constexpr void operator()()
 6944|   492k|        {
 6945|   492k|            arg_id = handler.on_arg_id();
 6946|   492k|        }
 6947|   492k|        constexpr void operator()(std::size_t id)
 6948|   492k|        {
 6949|   492k|            arg_id = handler.on_arg_id(id);
 6950|   492k|        }
 6951|       |
 6952|   492k|        constexpr void on_error(const char* msg)
 6953|   492k|        {
 6954|   492k|            SCN_UNLIKELY_ATTR
 6955|   492k|            handler.on_error(msg);
 6956|   492k|        }
 6957|       |
 6958|   492k|        Handler& handler;
 6959|   492k|        std::size_t arg_id;
 6960|   492k|    };
 6961|       |
 6962|   492k|    ++begin;
 6963|   492k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 492k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   492k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 492k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   492k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 492k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   492k|    else {
 6975|   492k|        auto adapter = id_adapter{handler, 0};
 6976|   492k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   492k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 492k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   492k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 492k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   492k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 492k, False: 0]
  ------------------
 6987|   492k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 492k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   492k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   492k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   985k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 492k]
  |  |  |  Branch (859:45): [True: 0, False: 492k]
  |  |  |  Branch (859:45): [True: 0, False: 492k]
  |  |  ------------------
  ------------------
 6993|      0|                handler.on_error("Unknown format specifier");
 6994|      0|                return begin;
 6995|      0|            }
 6996|   492k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   492k|    }
 7003|   492k|    return begin + 1;
 7004|   492k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   492k|{
 6443|   492k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   492k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   492k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   492k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 492k, False: 0]
  |  Branch (6444:26): [True: 0, False: 492k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   492k|    handler();
 6449|   492k|    return begin;
 6450|   492k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   492k|        {
 6945|   492k|            arg_id = handler.on_arg_id();
 6946|   492k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7120|   492k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|   492k|    {
 7122|   492k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   492k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   492k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   492k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   492k|{
 6858|   492k|    auto do_presentation = [&]() -> const CharT* {
 6859|   492k|        if (*begin == CharT{'['}) {
 6860|   492k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   492k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   492k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   492k|                return begin;
 6866|   492k|            }
 6867|   492k|            handler.on_character_set_string(set);
 6868|   492k|            return begin;
 6869|   492k|        }
 6870|   492k|        if (*begin == CharT{'/'}) {
 6871|   492k|            return parse_presentation_regex(begin, end, handler);
 6872|   492k|        }
 6873|   492k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   492k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   492k|            handler.on_error("Invalid type specifier in format string");
 6876|   492k|            return begin;
 6877|   492k|        }
 6878|   492k|        handler.on_type(type);
 6879|   492k|        return begin;
 6880|   492k|    };
 6881|       |
 6882|   492k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 492k, False: 0]
  |  Branch (6882:28): [True: 492k, False: 0]
  ------------------
 6883|   492k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 492k, False: 0]
  |  Branch (6883:36): [True: 374k, False: 118k]
  ------------------
 6884|   374k|        return do_presentation();
 6885|   374k|    }
 6886|       |
 6887|   118k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|   118k|    begin = parse_align(begin, end, handler);
 6893|   118k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|   118k|    begin = parse_width(begin, end, handler);
 6899|   118k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|   118k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 118k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|   118k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 118k, False: 0]
  ------------------
 6918|   118k|        handler.on_localized();
 6919|   118k|        ++begin;
 6920|   118k|    }
 6921|   118k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|   118k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 118k, False: 0]
  |  Branch (6926:25): [True: 0, False: 118k]
  ------------------
 6927|      0|        do_presentation();
 6928|      0|    }
 6929|   118k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|   118k|    return begin;
 6935|   118k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   374k|    auto do_presentation = [&]() -> const CharT* {
 6859|   374k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 0, False: 374k]
  ------------------
 6860|      0|            auto set = parse_presentation_set(begin, end, handler);
 6861|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|      0|            handler.on_character_set_string(set);
 6868|      0|            return begin;
 6869|      0|        }
 6870|   374k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 374k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   374k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   374k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 374k]
  |  |  ------------------
  ------------------
 6875|      0|            handler.on_error("Invalid type specifier in format string");
 6876|      0|            return begin;
 6877|      0|        }
 6878|   374k|        handler.on_type(type);
 6879|   374k|        return begin;
 6880|   374k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|   118k|{
 6532|   118k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|   118k|    auto check_align = [](wchar_t ch) {
 6535|   118k|        switch (ch) {
 6536|   118k|            case L'<':
 6537|   118k|                return align_type::left;
 6538|   118k|            case L'>':
 6539|   118k|                return align_type::right;
 6540|   118k|            case L'^':
 6541|   118k|                return align_type::center;
 6542|   118k|            default:
 6543|   118k|                return align_type::none;
 6544|   118k|        }
 6545|   118k|    };
 6546|       |
 6547|   118k|    auto potential_fill_len = code_point_length(begin, end);
 6548|   118k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 118k]
  |  |  |  Branch (859:45): [True: 0, False: 118k]
  |  |  |  Branch (859:45): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 6549|   118k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|   118k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|   118k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|   118k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|   118k|    const auto begin_before_fill = begin;
 6559|   118k|    begin += potential_fill_len;
 6560|       |
 6561|   118k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 118k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|   118k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|   118k|    const auto begin_after_fill = begin;
 6567|   118k|    ++begin;
 6568|       |
 6569|   118k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 118k, False: 0]
  ------------------
 6570|   118k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|   118k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 0, False: 118k]
  ------------------
 6575|      0|            return begin_before_fill;
 6576|      0|        }
 6577|   118k|    }
 6578|       |
 6579|   118k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 118k, False: 0]
  ------------------
 6580|   118k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 118k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|   118k|        return begin_before_fill;
 6585|   118k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|   118k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|   237k|    auto check_align = [](wchar_t ch) {
 6535|   237k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 237k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 237k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 237k]
  ------------------
 6541|      0|                return align_type::center;
 6542|   237k|            default:
  ------------------
  |  Branch (6542:13): [True: 237k, False: 0]
  ------------------
 6543|   237k|                return align_type::none;
 6544|   237k|        }
 6545|   237k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|   118k|{
 6597|   118k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|   118k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 118k, False: 0]
  |  Branch (6599:33): [True: 0, False: 118k]
  ------------------
 6600|      0|        int width = parse_simple_int(begin, end);
 6601|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6602|      0|            handler.on_width(width);
 6603|      0|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|      0|    }
 6609|   118k|    return begin;
 6610|   118k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|   118k|    {
 7127|   118k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|   118k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 118k, False: 0]
  ------------------
 7129|   118k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 118k, False: 0]
  ------------------
 7130|   118k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 0, False: 118k]
  ------------------
 7131|   118k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 0, False: 0]
  ------------------
 7132|      0|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|      0|        }
 7137|       |
 7138|   118k|        Handler::on_localized();
 7139|   118k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   492k|{
 8417|   492k|#define SCN_VISIT(Type)                                         \
 8418|   492k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   492k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   492k|    }                                                           \
 8421|   492k|    else {                                                      \
 8422|   492k|        return vis(monostate_val);                              \
 8423|   492k|    }
 8424|       |
 8425|   492k|    monostate monostate_val{};
 8426|       |
 8427|   492k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 492k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 492k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 492k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 492k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 492k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 492k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 492k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 492k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 492k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 492k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 492k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 492k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 492k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 492k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 492k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|   157k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 157k, False: 334k]
  ------------------
 8459|   157k|            SCN_VISIT(float);
  ------------------
  |  | 8418|   157k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   157k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   157k|    }                                                           \
  |  | 8421|   157k|    else {                                                      \
  |  | 8422|   157k|        return vis(monostate_val);                              \
  |  | 8423|   157k|    }
  ------------------
 8460|   324k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 166k, False: 326k]
  ------------------
 8461|   324k|            SCN_VISIT(double);
  ------------------
  |  | 8418|   324k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   324k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   324k|    }                                                           \
  |  | 8421|   324k|    else {                                                      \
  |  | 8422|   324k|        return vis(monostate_val);                              \
  |  | 8423|   324k|    }
  ------------------
 8462|   492k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 168k, False: 324k]
  ------------------
 8463|   492k|            SCN_VISIT(long double);
  ------------------
  |  | 8418|   492k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   492k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   492k|    }                                                           \
  |  | 8421|   492k|    else {                                                      \
  |  | 8422|   492k|        return vis(monostate_val);                              \
  |  | 8423|   492k|    }
  ------------------
 8464|   492k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 492k]
  ------------------
 8465|   492k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   492k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   492k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   492k|    }                                                           \
  |  | 8421|   492k|    else {                                                      \
  |  | 8422|   492k|        return vis(monostate_val);                              \
  |  | 8423|   492k|    }
  ------------------
 8466|   492k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 492k]
  ------------------
 8467|   492k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   492k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   492k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   492k|    }                                                           \
  |  | 8421|   492k|    else {                                                      \
  |  | 8422|   492k|        return vis(monostate_val);                              \
  |  | 8423|   492k|    }
  ------------------
 8468|   492k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 492k]
  ------------------
 8469|   492k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   492k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   492k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   492k|    }                                                           \
  |  | 8421|   492k|    else {                                                      \
  |  | 8422|   492k|        return vis(monostate_val);                              \
  |  | 8423|   492k|    }
  ------------------
 8470|   492k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 492k]
  ------------------
 8471|   492k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   492k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   492k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   492k|    }                                                           \
  |  | 8421|   492k|    else {                                                      \
  |  | 8422|   492k|        return vis(monostate_val);                              \
  |  | 8423|   492k|    }
  ------------------
 8472|   492k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 492k]
  ------------------
 8473|   492k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   492k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   492k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   492k|    }                                                           \
  |  | 8421|   492k|    else {                                                      \
  |  | 8422|   492k|        return vis(monostate_val);                              \
  |  | 8423|   492k|    }
  ------------------
 8474|   492k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 492k]
  ------------------
 8475|   492k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   492k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   492k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   492k|    }                                                           \
  |  | 8421|   492k|    else {                                                      \
  |  | 8422|   492k|        return vis(monostate_val);                              \
  |  | 8423|   492k|    }
  ------------------
 8476|       |
 8477|   492k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 492k]
  ------------------
 8478|   492k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   492k|            return vis(
 8480|   492k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 492k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 492k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   492k|            SCN_CLANG_POP
 8495|   492k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|   213k|    {
 4076|   213k|        sync(0);
 4077|   213k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   278k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|   118k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  97.2k|{
   89|  97.2k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  97.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  97.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  97.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  97.2k|    static_cast<    \
  |  |  929|  97.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  97.2k|    static_cast<    \
  |  |  929|  97.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  97.2k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   305k|{
   44|   305k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   305k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  97.2k|{
  127|  97.2k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  97.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  97.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  97.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  97.2k|    static_cast<    \
  |  |  929|  97.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  97.2k|    static_cast<    \
  |  |  929|  97.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  97.2k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   305k|{
   60|   305k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   305k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  18.2k|{
  163|  18.2k|    T value;
  164|  18.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  18.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.47k, False: 12.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.47k|    }                                                  \
  |  |  |  | 3671|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  12.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.7k|    static_cast<    \
  |  |  929|  12.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.7k|    static_cast<    \
  |  |  929|  12.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  18.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  59.3k|{
   72|  59.3k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  59.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  59.3k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   103k|{
   89|   103k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   103k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   103k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   103k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|   103k|{
  127|   103k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   103k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   103k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   103k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  20.2k|{
  163|  20.2k|    T value;
  164|  20.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  20.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  20.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  20.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  20.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.47k, False: 14.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.47k|    }                                                  \
  |  |  |  | 3671|  20.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  14.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  14.7k|    static_cast<    \
  |  |  929|  14.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  14.7k|    static_cast<    \
  |  |  929|  14.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  20.2k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|   105k|{
   89|   105k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   105k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   105k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   105k|    static_cast<    \
  |  |  929|   105k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   105k|    static_cast<    \
  |  |  929|   105k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   105k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|   105k|{
  127|   105k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   105k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   105k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   105k|    static_cast<    \
  |  |  929|   105k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   105k|    static_cast<    \
  |  |  929|   105k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   105k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  20.9k|{
  163|  20.9k|    T value;
  164|  20.9k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  20.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  20.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  20.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  20.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  20.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.47k, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.47k|    }                                                  \
  |  |  |  | 3671|  20.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  15.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  15.4k|    static_cast<    \
  |  |  929|  15.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  15.4k|    static_cast<    \
  |  |  929|  15.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  20.9k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  97.1k|{
   89|  97.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  97.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  97.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  97.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  97.1k|    static_cast<    \
  |  |  929|  97.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  97.1k|    static_cast<    \
  |  |  929|  97.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  97.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   305k|{
   44|   305k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   305k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  97.1k|{
  127|  97.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  97.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  97.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  97.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  97.1k|    static_cast<    \
  |  |  929|  97.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  97.1k|    static_cast<    \
  |  |  929|  97.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  97.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   305k|{
   60|   305k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   305k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  18.2k|{
  163|  18.2k|    T value;
  164|  18.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  18.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  18.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  18.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  18.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.47k, False: 12.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.47k|    }                                                  \
  |  |  |  | 3671|  18.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  12.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.7k|    static_cast<    \
  |  |  929|  12.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.7k|    static_cast<    \
  |  |  929|  12.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  18.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  59.2k|{
   72|  59.2k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  59.2k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   103k|{
   89|   103k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   103k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   103k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   103k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|   103k|{
  127|   103k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   103k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   103k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   103k|    static_cast<    \
  |  |  929|   103k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   103k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  20.2k|{
  163|  20.2k|    T value;
  164|  20.2k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  20.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  20.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  20.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  20.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  20.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.47k, False: 14.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.47k|    }                                                  \
  |  |  |  | 3671|  20.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  14.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  14.7k|    static_cast<    \
  |  |  929|  14.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  14.7k|    static_cast<    \
  |  |  929|  14.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  20.2k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|   105k|{
   89|   105k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   105k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   105k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   105k|    static_cast<    \
  |  |  929|   105k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   105k|    static_cast<    \
  |  |  929|   105k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   105k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|   105k|{
  127|   105k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   105k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   105k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   105k|    static_cast<    \
  |  |  929|   105k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   105k|    static_cast<    \
  |  |  929|   105k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   105k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  20.8k|{
  163|  20.8k|    T value;
  164|  20.8k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  20.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  20.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  20.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  20.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  20.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.47k, False: 15.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.47k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.47k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.47k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.47k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.47k|    }                                                  \
  |  |  |  | 3671|  20.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  15.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  15.4k|    static_cast<    \
  |  |  929|  15.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  15.4k|    static_cast<    \
  |  |  929|  15.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  20.8k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|  1.93M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|  1.93M|{
  653|  1.93M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  1.93M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  658|   814k|{
  659|   814k|    static_assert(std::is_same_v<Locale, std::locale>);
  660|   814k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (660:12): [True: 407k, False: 407k]
  ------------------
  661|   814k|                    : std::locale{};
  662|   814k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   895k|{
 1221|   895k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   895k|                                  m_nan_payload_buffer, value);
 1223|   895k|    value = this->setsign(value);
 1224|   895k|    return n;
 1225|   895k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1220|   323k|{
 1221|   323k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   323k|                                  m_nan_payload_buffer, value);
 1223|   323k|    value = this->setsign(value);
 1224|   323k|    return n;
 1225|   323k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   929k|{
 1221|   929k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   929k|                                  m_nan_payload_buffer, value);
 1223|   929k|    value = this->setsign(value);
 1224|   929k|    return n;
 1225|   929k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1220|   350k|{
 1221|   350k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   350k|                                  m_nan_payload_buffer, value);
 1223|   350k|    value = this->setsign(value);
 1224|   350k|    return n;
 1225|   350k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   938k|{
 1221|   938k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   938k|                                  m_nan_payload_buffer, value);
 1223|   938k|    value = this->setsign(value);
 1224|   938k|    return n;
 1225|   938k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1220|   358k|{
 1221|   358k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1222|   358k|                                  m_nan_payload_buffer, value);
 1223|   358k|    value = this->setsign(value);
 1224|   358k|    return n;
 1225|   358k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   613k|{
 2184|   613k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   613k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   709k|{
 2192|   709k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   709k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   709k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 660k, False: 49.2k]
  |  |  ------------------
  ------------------
 2194|   660k|        source.sync(*n);
 2195|   660k|    }
 2196|  49.2k|    else {
 2197|  49.2k|        source.sync_all();
 2198|  49.2k|    }
 2199|   709k|    return n;
 2200|   709k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   305k|{
 2208|   305k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   305k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   305k|{
 2216|   305k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   305k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   305k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 207k, False: 98.4k]
  |  |  ------------------
  ------------------
 2218|   207k|        source.sync(*n);
 2219|   207k|    }
 2220|  98.4k|    else {
 2221|  98.4k|        source.sync_all();
 2222|  98.4k|    }
 2223|   305k|    return n;
 2224|   305k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|  1.23M|{
  194|  1.23M|    return find_classic_impl(
  195|  1.23M|        source, [](char ch) { return is_ascii_space(ch); },
  196|  1.23M|        [](char32_t cp) { return is_cp_space(cp); });
  197|  1.23M|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|  2.91M|{
  202|  2.91M|    return find_classic_impl(
  203|  2.91M|        source, [](char ch) { return !is_ascii_space(ch); },
  204|  2.91M|        [](char32_t cp) { return !is_cp_space(cp); });
  205|  2.91M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   613k|{
 2141|   613k|    return vscan_internal(source, format, args);
 2142|   613k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   709k|{
 2147|   709k|    auto n = vscan_internal(source, format, args);
 2148|   709k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   709k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 660k, False: 49.2k]
  |  |  ------------------
  ------------------
 2149|   660k|        source.sync(*n);
 2150|   660k|    }
 2151|  49.2k|    else {
 2152|  49.2k|        source.sync_all();
 2153|  49.2k|    }
 2154|   709k|    return n;
 2155|   709k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   305k|{
 2161|   305k|    return vscan_internal(source, format, args);
 2162|   305k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   305k|{
 2167|   305k|    auto n = vscan_internal(source, format, args);
 2168|   305k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   305k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 207k, False: 98.4k]
  |  |  ------------------
  ------------------
 2169|   207k|        source.sync(*n);
 2170|   207k|    }
 2171|  98.4k|    else {
 2172|  98.4k|        source.sync_all();
 2173|  98.4k|    }
 2174|   305k|    return n;
 2175|   305k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   133k|{
 2251|   133k|    return vscan_value_internal(source, arg);
 2252|   133k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|   145k|{
 2256|   145k|    auto n = vscan_value_internal(source, arg);
 2257|   145k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   145k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 137k, False: 8.20k]
  |  |  ------------------
  ------------------
 2258|   137k|        source.sync(*n);
 2259|   137k|    }
 2260|  8.20k|    else {
 2261|  8.20k|        source.sync_all();
 2262|  8.20k|    }
 2263|   145k|    return n;
 2264|   145k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  59.3k|{
 2270|  59.3k|    return vscan_value_internal(source, arg);
 2271|  59.3k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  59.2k|{
 2276|  59.2k|    auto n = vscan_value_internal(source, arg);
 2277|  59.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  59.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 42.8k, False: 16.4k]
  |  |  ------------------
  ------------------
 2278|  42.8k|        source.sync(*n);
 2279|  42.8k|    }
 2280|  16.4k|    else {
 2281|  16.4k|        source.sync_all();
 2282|  16.4k|    }
 2283|  59.2k|    return n;
 2284|  59.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  1.23M|{
  118|  1.23M|    auto it = source.begin();
  119|       |
  120|  3.97M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 3.18M, False: 791k]
  ------------------
  121|  3.18M|        auto sv =
  122|  3.18M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  3.18M|                .substr(0, 8);
  124|       |
  125|  3.18M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 3.11M, False: 72.4k]
  ------------------
  126|  3.11M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  3.11M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  3.11M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 410k, False: 2.70M]
  ------------------
  129|   410k|                break;
  130|   410k|            }
  131|  2.70M|            continue;
  132|  3.11M|        }
  133|       |
  134|   242k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 199k, False: 43.3k]
  ------------------
  135|   199k|            auto tmp =
  136|   199k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   199k|            auto res = get_next_code_point(tmp);
  138|   199k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 29.1k, False: 170k]
  ------------------
  139|  29.1k|                return it;
  140|  29.1k|            }
  141|   170k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   170k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   170k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   170k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   170k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   170k|        }
  145|  72.4k|    }
  146|       |
  147|  1.20M|    return detail::make_string_view_iterator(source, it);
  148|  1.23M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  4.97M|{
  105|  4.97M|    static_assert(sizeof(*source.data()) == 1);
  106|  4.97M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  4.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  4.97M|    uint64_t word{};
  108|  4.97M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  4.97M|    return has_byte_greater(word, 127) != 0;
  111|  4.97M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  18.9M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   199k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|  2.91M|{
  118|  2.91M|    auto it = source.begin();
  119|       |
  120|  3.19M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 1.78M, False: 1.40M]
  ------------------
  121|  1.78M|        auto sv =
  122|  1.78M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  1.78M|                .substr(0, 8);
  124|       |
  125|  1.78M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 1.69M, False: 97.5k]
  ------------------
  126|  1.69M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|  1.69M|            it = detail::make_string_view_iterator(source, tmp_it);
  128|  1.69M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 1.42M, False: 265k]
  ------------------
  129|  1.42M|                break;
  130|  1.42M|            }
  131|   265k|            continue;
  132|  1.69M|        }
  133|       |
  134|   184k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 175k, False: 8.94k]
  ------------------
  135|   175k|            auto tmp =
  136|   175k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   175k|            auto res = get_next_code_point(tmp);
  138|   175k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 88.6k, False: 86.8k]
  ------------------
  139|  88.6k|                return it;
  140|  88.6k|            }
  141|  86.8k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  86.8k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  86.8k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  86.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  86.8k|        }
  145|  97.5k|    }
  146|       |
  147|  2.82M|    return detail::make_string_view_iterator(source, it);
  148|  2.91M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  2.65M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   175k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   895k|{
 1138|   895k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 5.29k, False: 889k]
  ------------------
 1139|  5.29k|        value = std::numeric_limits<T>::infinity();
 1140|  5.29k|        return 3;
 1141|  5.29k|    }
 1142|   889k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 5.01k, False: 884k]
  ------------------
 1143|  5.01k|        value = std::numeric_limits<T>::infinity();
 1144|  5.01k|        return 8;
 1145|  5.01k|    }
 1146|   884k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 34.5k, False: 850k]
  ------------------
 1147|  34.5k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  34.5k|        return 3;
 1149|  34.5k|    }
 1150|   850k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.38k, False: 849k]
  ------------------
 1151|  1.38k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.38k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.38k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.38k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.38k|    }
 1182|       |
 1183|   849k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   849k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   849k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   849k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 181k, False: 667k]
  ------------------
 1185|   181k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   181k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.50k, False: 178k]
  |  |  ------------------
  ------------------
 1186|  3.50k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.50k|                                         "Invalid floating-point digit");
 1188|  3.50k|        }
 1189|   181k|    }
 1190|   845k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   845k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.32k, False: 836k]
  |  |  ------------------
  ------------------
 1191|  9.32k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  9.32k|                                     "Invalid floating-point digit");
 1193|  9.32k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   836k|    else {
 1211|       |        // Default to fast_float
 1212|   836k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   836k|    }
 1214|   836k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1076|   836k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   836k|    {
 1078|   836k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  711|  3.00M|    {
  712|  3.00M|        return {kind, options};
  713|  3.00M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1081|   836k|    {
 1082|   836k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 178k, False: 658k]
  ------------------
 1083|   836k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 26.9k, False: 631k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   205k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   205k|                                              value);
 1087|   205k|        }
 1088|       |
 1089|   631k|        const auto flags = get_flags();
 1090|   631k|        const auto view = get_view();
 1091|   631k|        const auto result = fast_float::from_chars(
 1092|   631k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   631k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   631k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 631k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   631k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   631k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.81k, False: 625k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  5.81k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  5.81k|                                              value);
 1102|  5.81k|        }
 1103|       |
 1104|   625k|        return result.ptr - view.data();
 1105|   631k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   210k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   210k|    {
 1048|   210k|#if !SCN_DISABLE_STRTOD
 1049|   210k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   210k|    }
 1056|   210k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  892|   210k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   210k|    {
  894|   210k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  725|   278k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  897|   210k|    {
  898|   210k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   210k|                           generic_strtod);
  900|   210k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|   210k|    {
  732|   210k|        CharT* end{};
  733|   210k|        errno = 0;
  734|   210k|        value = strtod_cb(src, &end);
  735|   210k|        const auto saved_errno = errno;
  736|   210k|        auto chars_read = end - src;
  737|       |
  738|   210k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   210k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   210k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.88k, False: 204k]
  |  |  ------------------
  ------------------
  740|  6.88k|            return unexpected(e);
  741|  6.88k|        }
  742|       |
  743|   204k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 177k, False: 26.7k]
  ------------------
  744|   204k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 177k, False: 0]
  ------------------
  745|   177k|            chars_read -= 2;
  746|   177k|        }
  747|       |
  748|   204k|        return chars_read;
  749|   210k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  777|   278k|    {
  778|   278k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 106k, False: 171k]
  |  Branch (778:37): [True: 0, False: 106k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   278k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 27.4k, False: 251k]
  ------------------
  785|   278k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 27.4k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   278k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 11.1k, False: 267k]
  |  Branch (791:34): [True: 2.27k, False: 8.88k]
  ------------------
  792|  2.27k|            SCN_UNLIKELY_ATTR
  793|  2.27k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|  2.27k|        }
  795|       |
  796|   276k|        SCN_GCC_COMPAT_PUSH
  797|   276k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   276k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 276k, False: 0]
  ------------------
  800|   276k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 276k, False: 0]
  ------------------
  801|   276k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 8.85k, False: 267k]
  ------------------
  802|  8.85k|            SCN_UNLIKELY_ATTR
  803|  8.85k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  8.85k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   267k|            return {};
  809|   276k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  686|   289k|{
  687|   289k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (687:12): [True: 108k, False: 180k]
  |  Branch (687:25): [True: 0, False: 180k]
  ------------------
  688|   289k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   210k|    {
  755|   210k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 206k, False: 4.68k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   206k|            auto first_space = read_until_classic_space(input.view());
  758|   206k|            input.assign(
  759|   206k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   206k|        }
  761|       |
  762|   210k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 178k, False: 32.7k]
  ------------------
  763|   178k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   178k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   178k|        }
  770|       |
  771|   210k|        return input.get_allocated_string().c_str();
  772|   210k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  904|   210k|    {
  905|   210k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   210k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   210k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  812|   210k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   210k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|   210k|        if constexpr (std::is_same_v<T, float>) {
  838|   210k|            return std::strtof(str, str_end);
  839|       |        }
  840|       |        else if constexpr (std::is_same_v<T, double>) {
  841|       |            return std::strtod(str, str_end);
  842|       |        }
  843|       |        else if constexpr (std::is_same_v<T, long double>) {
  844|       |            return std::strtold(str, str_end);
  845|       |        }
  846|   210k|#endif
  847|   210k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1060|  1.76M|    {
 1061|  1.76M|        unsigned format_flags{};
 1062|  1.76M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1062:13): [True: 1.74M, False: 11.9k]
  ------------------
 1063|  1.74M|            format_flags |= fast_float::fixed;
 1064|  1.74M|        }
 1065|  1.76M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1065:13): [True: 1.48M, False: 274k]
  ------------------
 1066|  1.48M|            format_flags |= fast_float::scientific;
 1067|  1.48M|        }
 1068|       |
 1069|  1.76M|        return static_cast<fast_float::chars_format>(format_flags);
 1070|  1.76M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1109|   631k|    {
 1110|   631k|        if constexpr (sizeof(CharT) == 1) {
 1111|   631k|            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|       |        else {
 1119|       |            return std::u32string_view{
 1120|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|       |                m_input.view().size()};
 1122|       |        }
 1123|   631k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   323k|{
 1138|   323k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 323k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   323k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 323k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   323k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 323k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   323k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 323k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   323k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   323k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 73.5k, False: 249k]
  ------------------
 1185|  73.5k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  73.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.5k, False: 63.0k]
  |  |  ------------------
  ------------------
 1186|  10.5k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  10.5k|                                         "Invalid floating-point digit");
 1188|  10.5k|        }
 1189|  73.5k|    }
 1190|   312k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.4k, False: 287k]
  |  |  ------------------
  ------------------
 1191|  25.4k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  25.4k|                                     "Invalid floating-point digit");
 1193|  25.4k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   287k|    else {
 1211|       |        // Default to fast_float
 1212|   287k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   287k|    }
 1214|   287k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1076|   287k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   287k|    {
 1078|   287k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  711|  1.05M|    {
  712|  1.05M|        return {kind, options};
  713|  1.05M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1081|   287k|    {
 1082|   287k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 62.9k, False: 224k]
  ------------------
 1083|   287k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 517, False: 223k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  63.5k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  63.5k|                                              value);
 1087|  63.5k|        }
 1088|       |
 1089|   223k|        const auto flags = get_flags();
 1090|   223k|        const auto view = get_view();
 1091|   223k|        const auto result = fast_float::from_chars(
 1092|   223k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   223k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 223k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   223k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   223k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.16k, False: 219k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  4.16k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  4.16k|                                              value);
 1102|  4.16k|        }
 1103|       |
 1104|   219k|        return result.ptr - view.data();
 1105|   223k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  67.6k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  67.6k|    {
 1048|  67.6k|#if !SCN_DISABLE_STRTOD
 1049|  67.6k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  67.6k|    }
 1056|  67.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  892|  67.6k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  67.6k|    {
  894|  67.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  897|  67.6k|    {
  898|  67.6k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  67.6k|                           generic_strtod);
  900|  67.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  731|  67.6k|    {
  732|  67.6k|        CharT* end{};
  733|  67.6k|        errno = 0;
  734|  67.6k|        value = strtod_cb(src, &end);
  735|  67.6k|        const auto saved_errno = errno;
  736|  67.6k|        auto chars_read = end - src;
  737|       |
  738|  67.6k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  67.6k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  67.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.24k, False: 63.4k]
  |  |  ------------------
  ------------------
  740|  4.24k|            return unexpected(e);
  741|  4.24k|        }
  742|       |
  743|  63.4k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 62.9k, False: 517]
  ------------------
  744|  63.4k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 62.9k, False: 0]
  ------------------
  745|  62.9k|            chars_read -= 2;
  746|  62.9k|        }
  747|       |
  748|  63.4k|        return chars_read;
  749|  67.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  67.6k|    {
  755|  67.6k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 65.1k, False: 2.48k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  65.1k|            auto first_space = read_until_classic_space(input.view());
  758|  65.1k|            input.assign(
  759|  65.1k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  65.1k|        }
  761|       |
  762|  67.6k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 62.9k, False: 4.68k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  62.9k|            else {
  767|  62.9k|                input.get_allocated_string().insert(0, L"0x");
  768|  62.9k|            }
  769|  62.9k|        }
  770|       |
  771|  67.6k|        return input.get_allocated_string().c_str();
  772|  67.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  904|  67.6k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|  67.6k|        else {
  909|  67.6k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  67.6k|        }
  911|  67.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  850|  67.6k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  67.6k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|  67.6k|        if constexpr (std::is_same_v<T, float>) {
  876|  67.6k|            return std::wcstof(str, str_end);
  877|       |        }
  878|       |        else if constexpr (std::is_same_v<T, double>) {
  879|       |            return std::wcstod(str, str_end);
  880|       |        }
  881|       |        else if constexpr (std::is_same_v<T, long double>) {
  882|       |            return std::wcstold(str, str_end);
  883|       |        }
  884|  67.6k|#endif
  885|  67.6k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1109|   223k|    {
 1110|       |        if constexpr (sizeof(CharT) == 1) {
 1111|       |            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|   223k|        else {
 1119|   223k|            return std::u32string_view{
 1120|   223k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   223k|                m_input.view().size()};
 1122|   223k|        }
 1123|   223k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   929k|{
 1138|   929k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 5.93k, False: 923k]
  ------------------
 1139|  5.93k|        value = std::numeric_limits<T>::infinity();
 1140|  5.93k|        return 3;
 1141|  5.93k|    }
 1142|   923k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 5.41k, False: 918k]
  ------------------
 1143|  5.41k|        value = std::numeric_limits<T>::infinity();
 1144|  5.41k|        return 8;
 1145|  5.41k|    }
 1146|   918k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 35.5k, False: 882k]
  ------------------
 1147|  35.5k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  35.5k|        return 3;
 1149|  35.5k|    }
 1150|   882k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.54k, False: 881k]
  ------------------
 1151|  1.54k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.54k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.54k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.54k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.54k|    }
 1182|       |
 1183|   881k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   881k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   881k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   881k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 187k, False: 694k]
  ------------------
 1185|   187k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.61k, False: 183k]
  |  |  ------------------
  ------------------
 1186|  3.61k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.61k|                                         "Invalid floating-point digit");
 1188|  3.61k|        }
 1189|   187k|    }
 1190|   877k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   877k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.88k, False: 867k]
  |  |  ------------------
  ------------------
 1191|  9.88k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  9.88k|                                     "Invalid floating-point digit");
 1193|  9.88k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   867k|    else {
 1211|       |        // Default to fast_float
 1212|   867k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   867k|    }
 1214|   867k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1076|   867k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   867k|    {
 1078|   867k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1081|   867k|    {
 1082|   867k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 183k, False: 684k]
  ------------------
 1083|   867k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 29.1k, False: 655k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|   212k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|   212k|                                              value);
 1087|   212k|        }
 1088|       |
 1089|   655k|        const auto flags = get_flags();
 1090|   655k|        const auto view = get_view();
 1091|   655k|        const auto result = fast_float::from_chars(
 1092|   655k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   655k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   655k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 655k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   655k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   655k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.67k, False: 652k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  2.67k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  2.67k|                                              value);
 1102|  2.67k|        }
 1103|       |
 1104|   652k|        return result.ptr - view.data();
 1105|   655k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   215k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   215k|    {
 1048|   215k|#if !SCN_DISABLE_STRTOD
 1049|   215k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   215k|    }
 1056|   215k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  892|   215k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   215k|    {
  894|   215k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  725|   280k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  897|   215k|    {
  898|   215k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   215k|                           generic_strtod);
  900|   215k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|   215k|    {
  732|   215k|        CharT* end{};
  733|   215k|        errno = 0;
  734|   215k|        value = strtod_cb(src, &end);
  735|   215k|        const auto saved_errno = errno;
  736|   215k|        auto chars_read = end - src;
  737|       |
  738|   215k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   215k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   215k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.15k, False: 211k]
  |  |  ------------------
  ------------------
  740|  3.15k|            return unexpected(e);
  741|  3.15k|        }
  742|       |
  743|   211k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 182k, False: 29.0k]
  ------------------
  744|   211k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 182k, False: 0]
  ------------------
  745|   182k|            chars_read -= 2;
  746|   182k|        }
  747|       |
  748|   211k|        return chars_read;
  749|   215k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  777|   280k|    {
  778|   280k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 105k, False: 174k]
  |  Branch (778:37): [True: 0, False: 105k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|   280k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 29.6k, False: 250k]
  ------------------
  785|   280k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 29.6k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|   280k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 5.14k, False: 275k]
  |  Branch (791:34): [True: 539, False: 4.60k]
  ------------------
  792|    539|            SCN_UNLIKELY_ATTR
  793|    539|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    539|        }
  795|       |
  796|   279k|        SCN_GCC_COMPAT_PUSH
  797|   279k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|   279k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 279k, False: 0]
  ------------------
  800|   279k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 279k, False: 0]
  ------------------
  801|   279k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 4.60k, False: 275k]
  ------------------
  802|  4.60k|            SCN_UNLIKELY_ATTR
  803|  4.60k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|  4.60k|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|   275k|            return {};
  809|   279k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  690|   285k|{
  691|   285k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (691:12): [True: 106k, False: 179k]
  |  Branch (691:24): [True: 0, False: 179k]
  ------------------
  692|   285k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   215k|    {
  755|   215k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 211k, False: 3.37k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   211k|            auto first_space = read_until_classic_space(input.view());
  758|   211k|            input.assign(
  759|   211k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   211k|        }
  761|       |
  762|   215k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 183k, False: 31.7k]
  ------------------
  763|   183k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   183k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   183k|        }
  770|       |
  771|   215k|        return input.get_allocated_string().c_str();
  772|   215k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  904|   215k|    {
  905|   215k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   215k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   215k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  812|   215k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   215k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|       |        if constexpr (std::is_same_v<T, float>) {
  838|       |            return std::strtof(str, str_end);
  839|       |        }
  840|   215k|        else if constexpr (std::is_same_v<T, double>) {
  841|   215k|            return std::strtod(str, str_end);
  842|       |        }
  843|       |        else if constexpr (std::is_same_v<T, long double>) {
  844|       |            return std::strtold(str, str_end);
  845|       |        }
  846|   215k|#endif
  847|   215k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1109|   655k|    {
 1110|   655k|        if constexpr (sizeof(CharT) == 1) {
 1111|   655k|            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|       |        else {
 1119|       |            return std::u32string_view{
 1120|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|       |                m_input.view().size()};
 1122|       |        }
 1123|   655k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   350k|{
 1138|   350k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 350k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   350k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 350k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   350k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 350k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   350k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 350k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   350k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   350k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   350k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   350k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 73.5k, False: 276k]
  ------------------
 1185|  73.5k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  73.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.5k, False: 63.0k]
  |  |  ------------------
  ------------------
 1186|  10.5k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  10.5k|                                         "Invalid floating-point digit");
 1188|  10.5k|        }
 1189|  73.5k|    }
 1190|   339k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   339k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.1k, False: 313k]
  |  |  ------------------
  ------------------
 1191|  26.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  26.1k|                                     "Invalid floating-point digit");
 1193|  26.1k|    }
 1194|       |
 1195|       |    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|       |        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|       |            return fast_float_fallback(data, value);
 1208|       |        }
 1209|       |    }
 1210|   313k|    else {
 1211|       |        // Default to fast_float
 1212|   313k|        return fast_float_impl<CharT, T>{data}(value);
 1213|   313k|    }
 1214|   313k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1076|   313k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1077|   313k|    {
 1078|   313k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1081|   313k|    {
 1082|   313k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1082:13): [True: 62.9k, False: 250k]
  ------------------
 1083|   313k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1083:13): [True: 517, False: 249k]
  ------------------
 1084|       |            // fast_float doesn't support hexfloats
 1085|  63.5k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1086|  63.5k|                                              value);
 1087|  63.5k|        }
 1088|       |
 1089|   249k|        const auto flags = get_flags();
 1090|   249k|        const auto view = get_view();
 1091|   249k|        const auto result = fast_float::from_chars(
 1092|   249k|            view.data(), view.data() + view.size(), value, flags);
 1093|       |
 1094|   249k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 249k]
  |  |  ------------------
  ------------------
 1095|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1096|      0|                                         "fast_float: invalid_argument");
 1097|      0|        }
 1098|   249k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.92k, False: 247k]
  |  |  ------------------
  ------------------
 1099|       |            // may just be very large: fall back
 1100|  1.92k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1101|  1.92k|                                              value);
 1102|  1.92k|        }
 1103|       |
 1104|   247k|        return result.ptr - view.data();
 1105|   249k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|  65.4k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|  65.4k|    {
 1048|  65.4k|#if !SCN_DISABLE_STRTOD
 1049|  65.4k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|  65.4k|    }
 1056|  65.4k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  892|  65.4k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|  65.4k|    {
  894|  65.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  897|  65.4k|    {
  898|  65.4k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|  65.4k|                           generic_strtod);
  900|  65.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  731|  65.4k|    {
  732|  65.4k|        CharT* end{};
  733|  65.4k|        errno = 0;
  734|  65.4k|        value = strtod_cb(src, &end);
  735|  65.4k|        const auto saved_errno = errno;
  736|  65.4k|        auto chars_read = end - src;
  737|       |
  738|  65.4k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|  65.4k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  65.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.98k, False: 63.4k]
  |  |  ------------------
  ------------------
  740|  1.98k|            return unexpected(e);
  741|  1.98k|        }
  742|       |
  743|  63.4k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 62.9k, False: 517]
  ------------------
  744|  63.4k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 62.9k, False: 0]
  ------------------
  745|  62.9k|            chars_read -= 2;
  746|  62.9k|        }
  747|       |
  748|  63.4k|        return chars_read;
  749|  65.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|  65.4k|    {
  755|  65.4k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 64.0k, False: 1.37k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|  64.0k|            auto first_space = read_until_classic_space(input.view());
  758|  64.0k|            input.assign(
  759|  64.0k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|  64.0k|        }
  761|       |
  762|  65.4k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 62.9k, False: 2.44k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  62.9k|            else {
  767|  62.9k|                input.get_allocated_string().insert(0, L"0x");
  768|  62.9k|            }
  769|  62.9k|        }
  770|       |
  771|  65.4k|        return input.get_allocated_string().c_str();
  772|  65.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  904|  65.4k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|  65.4k|        else {
  909|  65.4k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|  65.4k|        }
  911|  65.4k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  850|  65.4k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|  65.4k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|       |        if constexpr (std::is_same_v<T, float>) {
  876|       |            return std::wcstof(str, str_end);
  877|       |        }
  878|  65.4k|        else if constexpr (std::is_same_v<T, double>) {
  879|  65.4k|            return std::wcstod(str, str_end);
  880|       |        }
  881|       |        else if constexpr (std::is_same_v<T, long double>) {
  882|       |            return std::wcstold(str, str_end);
  883|       |        }
  884|  65.4k|#endif
  885|  65.4k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1109|   249k|    {
 1110|       |        if constexpr (sizeof(CharT) == 1) {
 1111|       |            return m_input.view();
 1112|       |        }
 1113|       |        else if constexpr (sizeof(CharT) == 2) {
 1114|       |            return std::u16string_view{
 1115|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1116|       |                m_input.view().size()};
 1117|       |        }
 1118|   249k|        else {
 1119|   249k|            return std::u32string_view{
 1120|   249k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1121|   249k|                m_input.view().size()};
 1122|   249k|        }
 1123|   249k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   938k|{
 1138|   938k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 6.06k, False: 932k]
  ------------------
 1139|  6.06k|        value = std::numeric_limits<T>::infinity();
 1140|  6.06k|        return 3;
 1141|  6.06k|    }
 1142|   932k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 5.50k, False: 926k]
  ------------------
 1143|  5.50k|        value = std::numeric_limits<T>::infinity();
 1144|  5.50k|        return 8;
 1145|  5.50k|    }
 1146|   926k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 35.8k, False: 891k]
  ------------------
 1147|  35.8k|        value = std::numeric_limits<T>::quiet_NaN();
 1148|  35.8k|        return 3;
 1149|  35.8k|    }
 1150|   891k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 1.57k, False: 889k]
  ------------------
 1151|  1.57k|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|  1.57k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.57k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|  1.57k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|  1.57k|    }
 1182|       |
 1183|   889k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   889k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   889k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   889k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 187k, False: 701k]
  ------------------
 1185|   187k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.71k, False: 183k]
  |  |  ------------------
  ------------------
 1186|  3.71k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  3.71k|                                         "Invalid floating-point digit");
 1188|  3.71k|        }
 1189|   187k|    }
 1190|   885k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   885k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.2k, False: 875k]
  |  |  ------------------
  ------------------
 1191|  10.2k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  10.2k|                                     "Invalid floating-point digit");
 1193|  10.2k|    }
 1194|       |
 1195|   875k|    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|   875k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   875k|            return fast_float_fallback(data, value);
 1208|   875k|        }
 1209|       |    }
 1210|       |    else {
 1211|       |        // Default to fast_float
 1212|       |        return fast_float_impl<CharT, T>{data}(value);
 1213|       |    }
 1214|   875k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   875k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   875k|    {
 1048|   875k|#if !SCN_DISABLE_STRTOD
 1049|   875k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   875k|    }
 1056|   875k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  892|   875k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   875k|    {
  894|   875k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  725|  1.19M|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  897|   875k|    {
  898|   875k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   875k|                           generic_strtod);
  900|   875k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   875k|    {
  732|   875k|        CharT* end{};
  733|   875k|        errno = 0;
  734|   875k|        value = strtod_cb(src, &end);
  735|   875k|        const auto saved_errno = errno;
  736|   875k|        auto chars_read = end - src;
  737|       |
  738|   875k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   875k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   875k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 655, False: 874k]
  |  |  ------------------
  ------------------
  740|    655|            return unexpected(e);
  741|    655|        }
  742|       |
  743|   874k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 183k, False: 691k]
  ------------------
  744|   874k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 183k, False: 0]
  ------------------
  745|   183k|            chars_read -= 2;
  746|   183k|        }
  747|       |
  748|   874k|        return chars_read;
  749|   875k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  777|  1.19M|    {
  778|  1.19M|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (778:13): [True: 501k, False: 695k]
  |  Branch (778:37): [True: 0, False: 501k]
  ------------------
  779|      0|            SCN_UNLIKELY_ATTR
  780|      0|            return {scan_error::invalid_scanned_value,
  781|      0|                    "strtod failed: No conversion"};
  782|      0|        }
  783|       |
  784|  1.19M|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (784:13): [True: 29.6k, False: 1.16M]
  ------------------
  785|  1.19M|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (785:13): [True: 0, False: 29.6k]
  ------------------
  786|      0|            SCN_UNLIKELY_ATTR
  787|      0|            return {scan_error::invalid_scanned_value,
  788|      0|                    "Hexfloats disallowed by format string"};
  789|      0|        }
  790|       |
  791|  1.19M|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (791:13): [True: 873, False: 1.19M]
  |  Branch (791:34): [True: 131, False: 742]
  ------------------
  792|    131|            SCN_UNLIKELY_ATTR
  793|    131|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  794|    131|        }
  795|       |
  796|  1.19M|        SCN_GCC_COMPAT_PUSH
  797|  1.19M|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  798|       |
  799|  1.19M|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (799:13): [True: 1.19M, False: 0]
  ------------------
  800|  1.19M|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (800:13): [True: 1.19M, False: 0]
  ------------------
  801|  1.19M|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (801:13): [True: 742, False: 1.19M]
  ------------------
  802|    742|            SCN_UNLIKELY_ATTR
  803|    742|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  804|    742|        }
  805|       |
  806|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  807|       |
  808|  1.19M|            return {};
  809|  1.19M|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  694|  1.19M|{
  695|  1.19M|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (695:12): [True: 501k, False: 695k]
  |  Branch (695:26): [True: 0, False: 695k]
  ------------------
  696|  1.19M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   875k|    {
  755|   875k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 812k, False: 63.1k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   812k|            auto first_space = read_until_classic_space(input.view());
  758|   812k|            input.assign(
  759|   812k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   812k|        }
  761|       |
  762|   875k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 183k, False: 691k]
  ------------------
  763|   183k|            if constexpr (std::is_same_v<CharT, char>) {
  764|   183k|                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|       |            else {
  767|       |                input.get_allocated_string().insert(0, L"0x");
  768|       |            }
  769|   183k|        }
  770|       |
  771|   875k|        return input.get_allocated_string().c_str();
  772|   875k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  904|   875k|    {
  905|   875k|        if constexpr (std::is_same_v<CharT, char>) {
  906|   875k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|       |        else {
  909|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|       |        }
  911|   875k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  812|   875k|    {
  813|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  814|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  815|       |        if constexpr (std::is_same_v<T, float>) {
  816|       |            return ::strtof_l(str, str_end, cloc);
  817|       |        }
  818|       |        else if constexpr (std::is_same_v<T, double>) {
  819|       |            return ::strtod_l(str, str_end, cloc);
  820|       |        }
  821|       |        else if constexpr (std::is_same_v<T, long double>) {
  822|       |            return ::strtold_l(str, str_end, cloc);
  823|       |        }
  824|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  825|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  826|       |        if constexpr (std::is_same_v<T, float>) {
  827|       |            return ::_strtof_l(str, str_end, cloc);
  828|       |        }
  829|       |        else if constexpr (std::is_same_v<T, double>) {
  830|       |            return ::_strtod_l(str, str_end, cloc);
  831|       |        }
  832|       |        else if constexpr (std::is_same_v<T, long double>) {
  833|       |            return ::_strtold_l(str, str_end, cloc);
  834|       |        }
  835|       |#else
  836|   875k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  837|       |        if constexpr (std::is_same_v<T, float>) {
  838|       |            return std::strtof(str, str_end);
  839|       |        }
  840|       |        else if constexpr (std::is_same_v<T, double>) {
  841|       |            return std::strtod(str, str_end);
  842|       |        }
  843|   875k|        else if constexpr (std::is_same_v<T, long double>) {
  844|   875k|            return std::strtold(str, str_end);
  845|   875k|        }
  846|   875k|#endif
  847|   875k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1137|   358k|{
 1138|   358k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1138:9): [True: 0, False: 358k]
  ------------------
 1139|      0|        value = std::numeric_limits<T>::infinity();
 1140|      0|        return 3;
 1141|      0|    }
 1142|   358k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1142:9): [True: 0, False: 358k]
  ------------------
 1143|      0|        value = std::numeric_limits<T>::infinity();
 1144|      0|        return 8;
 1145|      0|    }
 1146|   358k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1146:9): [True: 0, False: 358k]
  ------------------
 1147|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1148|      0|        return 3;
 1149|      0|    }
 1150|   358k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1150:9): [True: 0, False: 358k]
  ------------------
 1151|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1152|       |
 1153|       |        // TODO: use payload
 1154|       |#if 0
 1155|       |                    {
 1156|       |                        auto reader = integer_reader<CharT>{
 1157|       |                            integer_reader_base::only_unsigned, 0};
 1158|       |                        if (auto r = reader.read_source(
 1159|       |                                detail::tag_type<unsigned long long>{},
 1160|       |                                nan_payload.view());
 1161|       |                            SCN_UNLIKELY(!r)) {
 1162|       |                            return unexpected(r.error());
 1163|       |                        }
 1164|       |
 1165|       |                        unsigned long long payload;
 1166|       |                        if (auto r = reader.parse_value(payload);
 1167|       |                            SCN_UNLIKELY(!r)) {
 1168|       |                            return unexpected(r.error());
 1169|       |                        }
 1170|       |
 1171|       |                        constexpr auto mantissa_payload_len =
 1172|       |                            std::numeric_limits<T>::digits - 2;
 1173|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1174|       |
 1175|       |
 1176|       |                    }
 1177|       |#endif
 1178|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1179|       |
 1180|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1181|      0|    }
 1182|       |
 1183|   358k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   358k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   358k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1184|   358k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1184:9): [True: 73.6k, False: 284k]
  ------------------
 1185|  73.6k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  73.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.5k, False: 63.0k]
  |  |  ------------------
  ------------------
 1186|  10.5k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1187|  10.5k|                                         "Invalid floating-point digit");
 1188|  10.5k|        }
 1189|  73.6k|    }
 1190|   347k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   347k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.7k, False: 321k]
  |  |  ------------------
  ------------------
 1191|  26.7k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1192|  26.7k|                                     "Invalid floating-point digit");
 1193|  26.7k|    }
 1194|       |
 1195|   321k|    if constexpr (std::is_same_v<T, long double>) {
 1196|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1197|       |            // If double == long double (true on Windows),
 1198|       |            // use fast_float with double
 1199|       |            double tmp{};
 1200|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1201|       |            value = tmp;
 1202|       |            return ret;
 1203|       |        }
 1204|   321k|        else {
 1205|       |            // long doubles aren't supported by fast_float ->
 1206|       |            // fall back to from_chars or strtod
 1207|   321k|            return fast_float_fallback(data, value);
 1208|   321k|        }
 1209|       |    }
 1210|       |    else {
 1211|       |        // Default to fast_float
 1212|       |        return fast_float_impl<CharT, T>{data}(value);
 1213|       |    }
 1214|   321k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1040|   321k|{
 1041|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1042|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1043|       |        return from_chars_impl<T>{data}(value);
 1044|       |    }
 1045|       |    else
 1046|       |#endif
 1047|   321k|    {
 1048|   321k|#if !SCN_DISABLE_STRTOD
 1049|   321k|        return strtod_impl<CharT, T>{data}(value);
 1050|       |#else
 1051|       |        return unexpected_scan_error(
 1052|       |            scan_error::invalid_scanned_value,
 1053|       |            "fast_float failed, and fallbacks are disabled");
 1054|       |#endif
 1055|   321k|    }
 1056|   321k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  892|   321k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  893|   321k|    {
  894|   321k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  897|   321k|    {
  898|   321k|        return this->parse(value, this->get_null_terminated_source(m_input),
  899|   321k|                           generic_strtod);
  900|   321k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  731|   321k|    {
  732|   321k|        CharT* end{};
  733|   321k|        errno = 0;
  734|   321k|        value = strtod_cb(src, &end);
  735|   321k|        const auto saved_errno = errno;
  736|   321k|        auto chars_read = end - src;
  737|       |
  738|   321k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  739|   321k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 218, False: 320k]
  |  |  ------------------
  ------------------
  740|    218|            return unexpected(e);
  741|    218|        }
  742|       |
  743|   320k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (743:13): [True: 62.9k, False: 257k]
  ------------------
  744|   320k|            chars_read >= 2) {
  ------------------
  |  Branch (744:13): [True: 62.9k, False: 0]
  ------------------
  745|  62.9k|            chars_read -= 2;
  746|  62.9k|        }
  747|       |
  748|   320k|        return chars_read;
  749|   321k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  754|   321k|    {
  755|   321k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (755:13): [True: 315k, False: 5.36k]
  ------------------
  756|       |            // TODO: call float_reader::read_source?
  757|   315k|            auto first_space = read_until_classic_space(input.view());
  758|   315k|            input.assign(
  759|   315k|                std::basic_string<CharT>{input.view().begin(), first_space});
  760|   315k|        }
  761|       |
  762|   321k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (762:13): [True: 62.9k, False: 258k]
  ------------------
  763|       |            if constexpr (std::is_same_v<CharT, char>) {
  764|       |                input.get_allocated_string().insert(0, "0x");
  765|       |            }
  766|  62.9k|            else {
  767|  62.9k|                input.get_allocated_string().insert(0, L"0x");
  768|  62.9k|            }
  769|  62.9k|        }
  770|       |
  771|   321k|        return input.get_allocated_string().c_str();
  772|   321k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  904|   321k|    {
  905|       |        if constexpr (std::is_same_v<CharT, char>) {
  906|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  907|       |        }
  908|   321k|        else {
  909|   321k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  910|   321k|        }
  911|   321k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  850|   321k|    {
  851|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  852|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  853|       |        if constexpr (std::is_same_v<T, float>) {
  854|       |            return ::wcstof_l(str, str_end, cloc);
  855|       |        }
  856|       |        else if constexpr (std::is_same_v<T, double>) {
  857|       |            return ::wcstod_l(str, str_end, cloc);
  858|       |        }
  859|       |        else if constexpr (std::is_same_v<T, long double>) {
  860|       |            return ::wcstold_l(str, str_end, cloc);
  861|       |        }
  862|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  863|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  864|       |        if constexpr (std::is_same_v<T, float>) {
  865|       |            return ::_wcstof_l(str, str_end, cloc);
  866|       |        }
  867|       |        else if constexpr (std::is_same_v<T, double>) {
  868|       |            return ::_wcstod_l(str, str_end, cloc);
  869|       |        }
  870|       |        else if constexpr (std::is_same_v<T, long double>) {
  871|       |            return ::_wcstold_l(str, str_end, cloc);
  872|       |        }
  873|       |#else
  874|   321k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  875|       |        if constexpr (std::is_same_v<T, float>) {
  876|       |            return std::wcstof(str, str_end);
  877|       |        }
  878|       |        else if constexpr (std::is_same_v<T, double>) {
  879|       |            return std::wcstod(str, str_end);
  880|       |        }
  881|   321k|        else if constexpr (std::is_same_v<T, long double>) {
  882|   321k|            return std::wcstold(str, str_end);
  883|   321k|        }
  884|   321k|#endif
  885|   321k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  1.41M|{
 2073|  1.41M|    const auto argcount = args.size();
 2074|  1.41M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 290k, False: 1.12M]
  |  Branch (2074:60): [True: 290k, False: 0]
  ------------------
 2075|   290k|        auto arg = args.get(0);
 2076|   290k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   290k|    static_cast<    \
  |  |  929|   290k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   290k|    }
 2078|       |
 2079|  1.12M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 1.12M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  1.12M|    SCN_UNLIKELY_ATTR
 2087|  1.12M|    {
 2088|  1.12M|        auto handler = format_handler<false, CharT>{
 2089|  1.12M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.12M|    static_cast<    \
  |  |  929|  1.12M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.12M|    static_cast<    \
  |  |  929|  1.12M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  1.12M|        return vscan_parse_format_string(format, handler);
 2091|  1.12M|    }
 2092|  1.12M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  2.64M|{
 1625|  2.64M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 2.09M, False: 556k]
  ------------------
 1626|  2.09M|        return false;
 1627|  2.09M|    }
 1628|   556k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 556k, False: 0]
  |  Branch (1628:39): [True: 556k, False: 0]
  ------------------
 1629|  2.64M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   435k|{
 1658|   435k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   435k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 435k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   435k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   435k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 435k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   435k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   435k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   435k|    static_cast<    \
  |  |  929|   435k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   435k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   435k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   435k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   435k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   435k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24.6k, False: 411k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  24.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  24.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  24.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  24.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  24.6k|    }                                                  \
  |  |  |  | 3671|   435k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   411k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   411k|    return it.position();
 1675|   435k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|   961k|        : format_handler_base{argcount},
 1900|   961k|          parse_ctx{format},
 1901|   961k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   961k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   961k|    static_cast<    \
  |  |  929|   961k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   961k|    static_cast<    \
  |  |  929|   961k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   961k|    {
 1903|   961k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|  3.07M|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|  3.07M|    {
 1722|  3.07M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  3.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.07M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  3.07M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|   961k|        : contiguous_ctx(source, args, loc)
 1852|   961k|    {
 1853|   961k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   961k|{
 2038|   961k|    const auto beg = handler.get_ctx().begin();
 2039|   961k|    detail::parse_format_string<false>(format, handler);
 2040|   961k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   961k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82.0k, False: 879k]
  |  |  ------------------
  ------------------
 2041|  82.0k|        return unexpected(handler.error);
 2042|  82.0k|    }
 2043|   879k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   961k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  6.56M|    {
 2022|  6.56M|        return ctx.get();
 2023|  6.56M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  6.56M|    {
 1857|  6.56M|        return contiguous_ctx;
 1858|  6.56M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|  1.84M|    {
 1907|  1.84M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.84M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.84M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   961k|{
 1681|   961k|    auto arg = ctx.arg(id);
 1682|   961k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   961k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 961k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   961k|    return arg;
 1686|   961k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  3.07M|    {
 1797|  3.07M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.07M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  3.07M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  3.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.07M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  3.07M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.07M, False: 0]
  |  |  ------------------
  ------------------
 1807|  3.07M|            visited_args_lower64 |= (1ull << id);
 1808|  3.07M|            return;
 1809|  3.07M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  3.07M|    {
 1782|  3.07M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  3.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.07M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  3.07M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  3.07M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.07M, False: 0]
  |  |  ------------------
  ------------------
 1788|  3.07M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  3.07M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  3.07M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   492k|    {
 1766|   492k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 492k, False: 0]
  |  |  ------------------
  ------------------
 1767|   492k|            error = err;
 1768|   492k|        }
 1769|   492k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   961k|    {
 1944|   961k|        return parse_ctx.next_arg_id();
 1945|   961k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   961k|    {
 1985|   961k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   961k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   961k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 961k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   961k|        auto specs = detail::format_specs{};
 1998|   961k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   961k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   961k|            arg.type()};
 2001|       |
 2002|   961k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   961k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 961k]
  |  Branch (2003:29): [True: 0, False: 961k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   961k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   961k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 961k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   961k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   961k|        on_visit_scan_arg(
 2014|   961k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   961k|                                           get_ctx().locale()},
 2016|   961k|            arg);
 2017|   961k|        return parse_ctx.begin();
 2018|   961k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|   961k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   961k|    {
 1701|   961k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   961k|    {
 1956|   961k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 961k]
  |  Branch (1956:23): [True: 0, False: 961k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   961k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   961k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   961k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   961k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82.0k, False: 879k]
  |  |  ------------------
  ------------------
 1963|  82.0k|            on_error(r.error());
 1964|  82.0k|        }
 1965|   879k|        else {
 1966|   879k|            get_ctx().advance_to(*r);
 1967|   879k|        }
 1968|   961k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  3.07M|    {
 1729|  3.07M|        {
 1730|  3.07M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 3.07M]
  ------------------
 1731|  3.07M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 3.07M]
  ------------------
 1732|  3.07M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  3.07M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  3.07M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 3.07M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  3.07M|        }
 1739|       |
 1740|  3.07M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 3.07M, False: 0]
  ------------------
 1741|  3.07M|            return;
 1742|  3.07M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  3.07M|    {
 1777|  3.07M|        return error;
 1778|  3.07M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  9.22M|    {
 1773|  9.22M|        return static_cast<bool>(error);
 1774|  9.22M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1899|  1.12M|        : format_handler_base{argcount},
 1900|  1.12M|          parse_ctx{format},
 1901|  1.12M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.12M|    static_cast<    \
  |  |  929|  1.12M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.12M|    static_cast<    \
  |  |  929|  1.12M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  1.12M|    {
 1903|  1.12M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1828|  1.12M|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|  1.12M|    static_cast<    \
  |  |  929|  1.12M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|  1.12M|    {
 1830|  1.12M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.12M|{
 2038|  1.12M|    const auto beg = handler.get_ctx().begin();
 2039|  1.12M|    detail::parse_format_string<false>(format, handler);
 2040|  1.12M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82.0k, False: 1.04M]
  |  |  ------------------
  ------------------
 2041|  82.0k|        return unexpected(handler.error);
 2042|  82.0k|    }
 2043|  1.04M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.12M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  7.73M|    {
 2022|  7.73M|        return ctx.get();
 2023|  7.73M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  7.73M|    {
 1834|  7.73M|        return ctx;
 1835|  7.73M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  2.17M|    {
 1907|  2.17M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 2.17M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  2.17M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.12M|{
 1681|  1.12M|    auto arg = ctx.arg(id);
 1682|  1.12M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.12M|    return arg;
 1686|  1.12M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  1.12M|    {
 1944|  1.12M|        return parse_ctx.next_arg_id();
 1945|  1.12M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  1.12M|    {
 1985|  1.12M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.12M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.12M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.12M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.12M|        auto specs = detail::format_specs{};
 1998|  1.12M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.12M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.12M|            arg.type()};
 2001|       |
 2002|  1.12M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.12M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.12M]
  |  Branch (2003:29): [True: 0, False: 1.12M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  1.12M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|  1.12M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.12M|        on_visit_scan_arg(
 2014|  1.12M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.12M|                                           get_ctx().locale()},
 2016|  1.12M|            arg);
 2017|  1.12M|        return parse_ctx.begin();
 2018|  1.12M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1699|  1.12M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  1.12M|    {
 1701|  1.12M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  1.12M|    {
 1956|  1.12M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.12M]
  |  Branch (1956:23): [True: 0, False: 1.12M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.12M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.12M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.12M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 82.0k, False: 1.04M]
  |  |  ------------------
  ------------------
 1963|  82.0k|            on_error(r.error());
 1964|  82.0k|        }
 1965|  1.04M|        else {
 1966|  1.04M|            get_ctx().advance_to(*r);
 1967|  1.04M|        }
 1968|  1.12M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  1.22M|{
 2053|  1.22M|    const auto argcount = args.size();
 2054|  1.22M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 266k, False: 961k]
  |  Branch (2054:60): [True: 266k, False: 0]
  ------------------
 2055|   266k|        auto arg = args.get(0);
 2056|   266k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   266k|    static_cast<    \
  |  |  929|   266k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   266k|    }
 2058|       |
 2059|   961k|    auto handler = format_handler<true, CharT>{
 2060|   961k|        ranges::subrange<const CharT*>{source.data(),
 2061|   961k|                                       source.data() + source.size()},
 2062|   961k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   961k|    static_cast<    \
  |  |  929|   961k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   961k|    static_cast<    \
  |  |  929|   961k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   961k|    return vscan_parse_format_string(format, handler);
 2064|  1.22M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   399k|{
 1638|   399k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 399k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   399k|    auto reader =
 1644|   399k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   399k|            ranges::subrange<const CharT*>{source.data(),
 1646|   399k|                                           source.data() + source.size()},
 1647|   399k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   399k|    static_cast<    \
  |  |  929|   399k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   399k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   399k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   399k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   399k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 24.6k, False: 374k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  24.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  24.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  24.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  24.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  24.6k|    }                                                  \
  |  |  |  | 3671|   399k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   374k|    return ranges::distance(source.data(), it);
 1650|   399k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   611k|{
 2053|   611k|    const auto argcount = args.size();
 2054|   611k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 118k, False: 493k]
  |  Branch (2054:60): [True: 118k, False: 0]
  ------------------
 2055|   118k|        auto arg = args.get(0);
 2056|   118k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   118k|    static_cast<    \
  |  |  929|   118k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   118k|    }
 2058|       |
 2059|   493k|    auto handler = format_handler<true, CharT>{
 2060|   493k|        ranges::subrange<const CharT*>{source.data(),
 2061|   493k|                                       source.data() + source.size()},
 2062|   493k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   493k|    static_cast<    \
  |  |  929|   493k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   493k|    static_cast<    \
  |  |  929|   493k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   493k|    return vscan_parse_format_string(format, handler);
 2064|   611k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  1.22M|{
 1625|  1.22M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 986k, False: 237k]
  ------------------
 1626|   986k|        return false;
 1627|   986k|    }
 1628|   237k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 237k, False: 0]
  |  Branch (1628:39): [True: 237k, False: 0]
  ------------------
 1629|  1.22M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   178k|{
 1638|   178k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 178k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   178k|    auto reader =
 1644|   178k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   178k|            ranges::subrange<const CharT*>{source.data(),
 1646|   178k|                                           source.data() + source.size()},
 1647|   178k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   178k|    static_cast<    \
  |  |  929|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   178k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   178k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   178k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   178k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 49.2k, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  49.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  49.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  49.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  49.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  49.2k|    }                                                  \
  |  |  |  | 3671|   178k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   128k|    return ranges::distance(source.data(), it);
 1650|   178k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|   493k|        : format_handler_base{argcount},
 1900|   493k|          parse_ctx{format},
 1901|   493k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   493k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   493k|    static_cast<    \
  |  |  929|   493k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   493k|    static_cast<    \
  |  |  929|   493k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   493k|    {
 1903|   493k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|   493k|        : contiguous_ctx(source, args, loc)
 1852|   493k|    {
 1853|   493k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   493k|{
 2038|   493k|    const auto beg = handler.get_ctx().begin();
 2039|   493k|    detail::parse_format_string<false>(format, handler);
 2040|   493k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 164k, False: 329k]
  |  |  ------------------
  ------------------
 2041|   164k|        return unexpected(handler.error);
 2042|   164k|    }
 2043|   329k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   493k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  3.12M|    {
 2022|  3.12M|        return ctx.get();
 2023|  3.12M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  3.12M|    {
 1857|  3.12M|        return contiguous_ctx;
 1858|  3.12M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|   822k|    {
 1907|   822k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 822k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   822k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   493k|{
 1681|   493k|    auto arg = ctx.arg(id);
 1682|   493k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   493k|    return arg;
 1686|   493k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   493k|    {
 1944|   493k|        return parse_ctx.next_arg_id();
 1945|   493k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   493k|    {
 1985|   493k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   493k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   493k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 493k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   493k|        auto specs = detail::format_specs{};
 1998|   493k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   493k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   493k|            arg.type()};
 2001|       |
 2002|   493k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   493k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 493k]
  |  Branch (2003:29): [True: 0, False: 493k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   493k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 493k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   493k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   493k|        on_visit_scan_arg(
 2014|   493k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   493k|                                           get_ctx().locale()},
 2016|   493k|            arg);
 2017|   493k|        return parse_ctx.begin();
 2018|   493k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|   493k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   493k|    {
 1701|   493k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   493k|    {
 1956|   493k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 493k]
  |  Branch (1956:23): [True: 0, False: 493k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   493k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   493k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   493k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 164k, False: 329k]
  |  |  ------------------
  ------------------
 1963|   164k|            on_error(r.error());
 1964|   164k|        }
 1965|   329k|        else {
 1966|   329k|            get_ctx().advance_to(*r);
 1967|   329k|        }
 1968|   493k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   611k|{
 2073|   611k|    const auto argcount = args.size();
 2074|   611k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 118k, False: 492k]
  |  Branch (2074:60): [True: 118k, False: 0]
  ------------------
 2075|   118k|        auto arg = args.get(0);
 2076|   118k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   118k|    static_cast<    \
  |  |  929|   118k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   118k|    }
 2078|       |
 2079|   492k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 492k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   492k|    SCN_UNLIKELY_ATTR
 2087|   492k|    {
 2088|   492k|        auto handler = format_handler<false, CharT>{
 2089|   492k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   492k|    static_cast<    \
  |  |  929|   492k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   492k|    static_cast<    \
  |  |  929|   492k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   492k|        return vscan_parse_format_string(format, handler);
 2091|   492k|    }
 2092|   492k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   177k|{
 1658|   177k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   177k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   177k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 177k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   177k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   177k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   177k|    static_cast<    \
  |  |  929|   177k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   177k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   177k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   177k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   177k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 49.2k, False: 128k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  49.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  49.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  49.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  49.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  49.2k|    }                                                  \
  |  |  |  | 3671|   177k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   128k|    return it.position();
 1675|   177k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1899|   492k|        : format_handler_base{argcount},
 1900|   492k|          parse_ctx{format},
 1901|   492k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   492k|    static_cast<    \
  |  |  929|   492k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   492k|    static_cast<    \
  |  |  929|   492k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   492k|    {
 1903|   492k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1828|   492k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   492k|    static_cast<    \
  |  |  929|   492k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   492k|    {
 1830|   492k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   492k|{
 2038|   492k|    const auto beg = handler.get_ctx().begin();
 2039|   492k|    detail::parse_format_string<false>(format, handler);
 2040|   492k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 164k, False: 328k]
  |  |  ------------------
  ------------------
 2041|   164k|        return unexpected(handler.error);
 2042|   164k|    }
 2043|   328k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   492k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  3.12M|    {
 2022|  3.12M|        return ctx.get();
 2023|  3.12M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  3.12M|    {
 1834|  3.12M|        return ctx;
 1835|  3.12M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   821k|    {
 1907|   821k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 821k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   821k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   492k|{
 1681|   492k|    auto arg = ctx.arg(id);
 1682|   492k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 492k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   492k|    return arg;
 1686|   492k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   492k|    {
 1944|   492k|        return parse_ctx.next_arg_id();
 1945|   492k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   492k|    {
 1985|   492k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   492k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   492k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 492k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   492k|        auto specs = detail::format_specs{};
 1998|   492k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   492k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   492k|            arg.type()};
 2001|       |
 2002|   492k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   492k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 492k]
  |  Branch (2003:29): [True: 0, False: 492k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   492k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 492k]
  |  |  ------------------
  ------------------
 2009|      0|            return parse_ctx.begin();
 2010|      0|        }
 2011|   492k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   492k|        on_visit_scan_arg(
 2014|   492k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   492k|                                           get_ctx().locale()},
 2016|   492k|            arg);
 2017|   492k|        return parse_ctx.begin();
 2018|   492k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1699|   492k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   492k|    {
 1701|   492k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   492k|    {
 1956|   492k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 492k]
  |  Branch (1956:23): [True: 0, False: 492k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   492k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   492k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   492k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 164k, False: 328k]
  |  |  ------------------
  ------------------
 1963|   164k|            on_error(r.error());
 1964|   164k|        }
 1965|   328k|        else {
 1966|   328k|            get_ctx().advance_to(*r);
 1967|   328k|        }
 1968|   492k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   133k|{
 2099|   133k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   133k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   145k|{
 2099|   145k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   145k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  59.3k|{
 2099|  59.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  59.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  59.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  59.2k|{
 2099|  59.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  59.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  59.2k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  2.73k|{
 1363|  2.73k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  2.73k|    if constexpr (sizeof(SourceCharT) == 1) {
 1366|       |        if constexpr (sizeof(DestCharT) == 2) {
 1367|       |            std::u32string tmp;
 1368|       |            transcode_to_string_impl_to32(src, tmp);
 1369|       |            return transcode_to_string_impl_32to16<false>(
 1370|       |                std::u32string_view{tmp}, dest);
 1371|       |        }
 1372|  2.73k|        else if constexpr (sizeof(DestCharT) == 4) {
 1373|  2.73k|            return transcode_to_string_impl_to32(src, dest);
 1374|  2.73k|        }
 1375|       |    }
 1376|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|       |        if constexpr (sizeof(DestCharT) == 1) {
 1378|       |            std::u32string tmp;
 1379|       |            transcode_to_string_impl_to32(src, tmp);
 1380|       |            return transcode_to_string_impl_32to8<false>(
 1381|       |                std::u32string_view{tmp}, dest);
 1382|       |        }
 1383|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1384|       |            return trasncode_to_string_impl_to32(src, dest);
 1385|       |        }
 1386|       |    }
 1387|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|       |        if constexpr (sizeof(DestCharT) == 1) {
 1389|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|       |        }
 1391|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1392|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|       |        }
 1394|       |    }
 1395|       |
 1396|  2.73k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  2.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|  2.73k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  2.73k|{
 1256|  2.73k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  2.73k|    auto it = src.begin();
 1259|   839k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 836k, False: 2.73k]
  ------------------
 1260|   836k|        auto res = get_next_code_point(
 1261|   836k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   836k|                                                                 src.end()));
 1263|   836k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   836k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.83k, False: 833k]
  |  |  ------------------
  ------------------
 1264|  2.83k|            dest.push_back(DestCharT{0xfffd});
 1265|  2.83k|        }
 1266|   833k|        else {
 1267|   833k|            dest.push_back(res.value);
 1268|   833k|        }
 1269|   836k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   836k|    }
 1271|  2.73k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.21M|{
 1169|  1.21M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.21M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.21M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.8k, False: 1.17M]
  |  |  ------------------
  ------------------
 1173|  32.8k|        return {get_start_for_next_code_point(input),
 1174|  32.8k|                detail::invalid_code_point};
 1175|  32.8k|    }
 1176|  1.17M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.84k, False: 1.17M]
  |  |  ------------------
  ------------------
 1177|  4.84k|        return {input.end(), detail::invalid_code_point};
 1178|  4.84k|    }
 1179|       |
 1180|  1.17M|    return {input.begin() + len,
 1181|  1.17M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.17M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  32.8k|{
 1155|  32.8k|    auto it = input.begin();
 1156|   269k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 262k, False: 7.76k]
  ------------------
 1157|   262k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 25.0k, False: 237k]
  ------------------
 1158|  25.0k|            break;
 1159|  25.0k|        }
 1160|   262k|    }
 1161|  32.8k|    return it;
 1162|  32.8k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  33.7M|    constexpr parse_error(code c) : m_code(c)
  808|  33.7M|    {
  809|  33.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  33.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  33.7M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  12.6M|    {
  823|  12.6M|        return a.m_code == b.m_code;
  824|  12.6M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1726|  1.75M|    clocale_restorer(int cat) : m_category(cat)
 1727|  1.75M|    {
 1728|  1.75M|        const auto loc = std::setlocale(cat, nullptr);
 1729|  1.75M|        std::strcpy(m_locbuf, loc);
 1730|  1.75M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1732|  1.75M|    {
 1733|       |        // Restore locale to what it was before
 1734|  1.75M|        std::setlocale(m_category, m_locbuf);
 1735|  1.75M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1755|  1.75M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1756|  1.75M|    {
 1757|  1.75M|        std::setlocale(cat, "C");
 1758|  1.75M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  3.07M|    {
 2936|  3.07M|        return m_msg == nullptr;
 2937|  3.07M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3644|  3.04M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  21.5M|{
  458|  21.5M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  21.5M|        static_cast<unsigned char>(ch))];
  460|  21.5M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   135k|{
  469|   135k|    return static_cast<unsigned char>(ch) <= 127;
  470|   135k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  4.97M|{
  539|  4.97M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  4.97M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  14.3M|{
  784|  14.3M|    return e != eof_error::good;
  785|  14.3M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  45.7k|{
  798|  45.7k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  45.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  45.7k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  45.7k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   214k|{
  845|   214k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   214k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   214k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   214k|    return parse_error::eof;
  847|   214k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  4.46M|{
  854|  4.46M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 4.46M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  4.46M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 78.7k, False: 4.38M]
  ------------------
  859|  78.7k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  78.7k|    }
  861|       |
  862|  4.38M|    return scan_error{code, msg};
  863|  4.46M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  4.46M|{
  868|  4.46M|    return [code, msg](parse_error err) {
  869|  4.46M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  4.46M|    };
  871|  4.46M|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|  6.12M|{
 1200|       |    // Pattern_White_Space property
 1201|  6.12M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 5.87M, False: 252k]
  |  Branch (1201:27): [True: 1.25M, False: 4.62M]
  ------------------
 1202|  6.12M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 84.9k, False: 4.79M]
  ------------------
 1203|  6.12M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 59.9k, False: 4.73M]
  ------------------
 1204|  6.12M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 3.89k, False: 4.72M]
  ------------------
 1205|  6.12M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 23.6k, False: 4.70M]
  ------------------
 1206|  6.12M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 1.07M, False: 3.62M]
  ------------------
 1207|  6.12M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 154, False: 3.62M]
  ------------------
 1208|  6.12M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2219|  3.53M|{
 2220|  3.53M|    unsigned char running_diff{0};
 2221|  13.3M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2221:24): [True: 9.76M, False: 3.53M]
  ------------------
 2222|  9.76M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2223|  9.76M|    }
 2224|  3.53M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2224:12): [True: 103k, False: 3.43M]
  |  Branch (2224:33): [True: 18.8k, False: 3.41M]
  ------------------
 2225|  3.53M|}
_ZN3scn2v34impl11char_to_intEc:
 3122|  25.6M|{
 3123|  25.6M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3124|  25.6M|}
_ZN3scn2v34impl11char_to_intEw:
 3126|  3.54M|{
 3127|  3.54M|#if WCHAR_MIN < 0
 3128|  3.54M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3128:9): [True: 3.52M, False: 16.7k]
  |  Branch (3128:20): [True: 2.18M, False: 1.33M]
  ------------------
 3129|       |#else
 3130|       |    if (ch <= 255) {
 3131|       |#endif
 3132|  2.18M|        return char_to_int(static_cast<char>(ch));
 3133|  2.18M|    }
 3134|  1.35M|    return 255;
 3135|  3.54M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  2.58M|{
 6008|  2.58M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 2.58M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  2.58M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 2.58M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  2.58M|    return {};
 6023|  2.58M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  3.96M|    {
  304|  3.96M|        ranges::advance(x, n);
  305|  3.96M|        return x;
  306|  3.96M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  3.96M|    {
  268|  3.96M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  3.96M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  3.96M|    {
  151|  3.96M|        i += n;
  152|  3.96M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  4.68M|    {
  108|  4.68M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  4.68M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  4.68M|    {
   87|  4.68M|        return s - i;
   88|  4.68M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.15M|    {
  304|  2.15M|        ranges::advance(x, n);
  305|  2.15M|        return x;
  306|  2.15M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.15M|    {
  268|  2.15M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.15M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.15M|    {
  151|  2.15M|        i += n;
  152|  2.15M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   612k|    {
  108|   612k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   612k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   612k|    {
   87|   612k|        return s - i;
   88|   612k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  1.56M|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|  1.56M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  1.56M|        auto beg = r.begin();
  990|  1.56M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 1.56M, False: 0]
  ------------------
  991|  1.56M|            return false;
  992|  1.56M|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  1.56M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  40.8M|    {
  763|  40.8M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  40.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  40.8M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  4.11M|{
 1857|  4.11M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  4.11M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.11M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|       |    if constexpr (ranges::sized_range<Range>) {
 1860|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|       |        if (sz < count) {
 1862|       |            return unexpected(eof_error::eof);
 1863|       |        }
 1864|       |
 1865|       |        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|  4.11M|    else {
 1868|  4.11M|        auto it = range.begin();
 1869|  4.11M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 2.53M, False: 1.58M]
  ------------------
 1870|  2.53M|            return ranges::next(it, count);
 1871|  2.53M|        }
 1872|       |
 1873|  6.28M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 4.74M, False: 1.54M]
  ------------------
 1874|  4.74M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 37.5k, False: 4.70M]
  ------------------
 1875|  37.5k|                return unexpected(eof_error::eof);
 1876|  37.5k|            }
 1877|  4.74M|        }
 1878|       |
 1879|  1.54M|        return it;
 1880|  1.58M|    }
 1881|  4.11M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  4.11M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  4.11M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  4.11M|        else {
 1106|  4.11M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 4.11M, False: 0]
  ------------------
 1107|  4.11M|                return static_cast<size_t>(
 1108|  4.11M|                    r.begin().parent()->chars_available() -
 1109|  4.11M|                    r.begin().position());
 1110|  4.11M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  4.11M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  4.11M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  3.79M|        : m_fptr([](storage fn,
  743|  3.79M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.79M|              cvref<T> obj = *get<T>(fn);
  745|  3.79M|              if constexpr (std::is_void_v<R>) {
  746|  3.79M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.79M|              }
  748|  3.79M|              else {
  749|  3.79M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.79M|              }
  751|  3.79M|          }),
  752|  3.79M|          m_storage(std::addressof(f))
  753|  3.79M|    {
  754|  3.79M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  20.4M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.4M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  20.4M|              else {
  749|  20.4M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.4M|              }
  751|  20.4M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  20.4M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  20.4M|        else if constexpr (std::is_object_v<T>) {
  688|  20.4M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  20.4M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  3.79M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.79M|        {
  662|  3.79M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  10.6M|    {
  763|  10.6M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  10.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  10.6M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.73M|        : m_fptr([](storage fn,
  743|  2.73M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.73M|              cvref<T> obj = *get<T>(fn);
  745|  2.73M|              if constexpr (std::is_void_v<R>) {
  746|  2.73M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.73M|              }
  748|  2.73M|              else {
  749|  2.73M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.73M|              }
  751|  2.73M|          }),
  752|  2.73M|          m_storage(std::addressof(f))
  753|  2.73M|    {
  754|  2.73M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  4.92M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.92M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.92M|              else {
  749|  4.92M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.92M|              }
  751|  4.92M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  4.92M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.92M|        else if constexpr (std::is_object_v<T>) {
  688|  4.92M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.92M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.73M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.73M|        {
  662|  2.73M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  1.12M|    {
 6037|  1.12M|        const bool need_skipped_width =
 6038|  1.12M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.12M]
  |  Branch (6038:33): [True: 0, False: 1.12M]
  ------------------
 6039|  1.12M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.12M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.12M]
  ------------------
 6043|  1.12M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.12M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.12M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.12M, False: 0]
  |  Branch (6047:56): [True: 1.12M, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  1.12M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 1.12M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  2.24M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  1.12M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.12M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.12M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.9k, False: 1.11M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  15.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  15.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  15.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  15.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  15.9k|    }                                                  \
  |  |  |  | 3671|  1.12M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  2.24M|                            make_eof_scan_error));
 6058|       |
 6059|  2.24M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 1.11M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  1.11M|            return result_type{it, 0};
 6067|  2.24M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|  1.12M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  3.02M|{
 1976|  3.02M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  3.02M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  3.02M|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|  3.02M|    else {
 1961|  3.02M|        auto first = range.begin();
 1962|  16.4M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 16.3M, False: 29.2k]
  ------------------
 1963|  16.3M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.99M, False: 13.3M]
  ------------------
 1964|  2.99M|                return first;
 1965|  2.99M|            }
 1966|  16.3M|        }
 1967|  29.2k|        return first;
 1968|  3.02M|    }
 1969|  3.02M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  2.69M|    {
  108|  2.69M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.69M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  2.69M|    {
   94|  2.69M|        iter_difference_t<I> counter{0};
   95|  26.6M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 23.9M, False: 2.69M]
  ------------------
   96|  23.9M|            ++i;
   97|  23.9M|            ++counter;
   98|  23.9M|        }
   99|  2.69M|        return counter;
  100|  2.69M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  4.46M|    return [code, msg](parse_error err) {
  869|  4.46M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  4.46M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1779|   578k|    {
 1780|   578k|        auto stdloc = loc.get<std::locale>();
 1781|   578k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   578k|        grouping = numpunct.grouping();
 1783|   578k|        thousands_sep =
 1784|   578k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 578k]
  ------------------
 1785|   578k|        decimal_point = numpunct.decimal_point();
 1786|   578k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1716|   578k|{
 1717|   578k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 578k, False: 0]
  ------------------
 1718|   578k|        return std::use_facet<Facet>(stdloc);
 1719|   578k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   578k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  4.41M|{
 1846|  4.41M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.5k, False: 4.39M]
  |  |  ------------------
  ------------------
 1847|  21.5k|        return unexpected(e);
 1848|  21.5k|    }
 1849|       |
 1850|  4.39M|    return ranges::next(range.begin());
 1851|  4.41M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  6.40M|{
  950|  6.40M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  6.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.5k, False: 6.36M]
  |  |  ------------------
  ------------------
  951|  42.5k|        return eof_error::eof;
  952|  42.5k|    }
  953|  6.36M|    return eof_error::good;
  954|  6.40M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  9.06M|{
  944|  9.06M|    return is_range_eof(r.begin(), r.end());
  945|  9.06M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  9.06M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  9.06M|    {
  937|  9.06M|        return begin == end;
  938|  9.06M|    }
  939|  9.06M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  4.39M|    {
  296|  4.39M|        ++x;
  297|  4.39M|        return x;
  298|  4.39M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|  1.68M|{
 3141|  1.68M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.68M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.30M, False: 380k]
  ------------------
 3143|  1.30M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.30M, False: 309]
  ------------------
 3144|  1.30M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.30M|        }
 3146|    309|        return unexpected(eof_error::eof);
 3147|  1.30M|    }
 3148|       |
 3149|   380k|    auto& it = *r;
 3150|   380k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 154k, False: 225k]
  ------------------
 3151|   154k|        return std::pair{it, sign_type::minus_sign};
 3152|   154k|    }
 3153|   225k|    return std::pair{it, sign_type::plus_sign};
 3154|   380k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  2.94M|{
 2272|  2.94M|    auto it = read_code_unit(range);
 2273|  2.94M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.6k, False: 2.93M]
  |  |  ------------------
  ------------------
 2274|  12.6k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  12.6k|    }
 2276|       |
 2277|  5.55M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 5.55M, False: 2.41M]
  ------------------
 2278|  5.55M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 521k, False: 5.03M]
  ------------------
 2279|   521k|            return *it;
 2280|   521k|        }
 2281|  5.55M|    }
 2282|       |
 2283|  2.41M|    return unexpected(parse_error::error);
 2284|  2.93M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  4.11M|{
 2231|  4.11M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|  4.11M|    else {
 2244|  4.11M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.11M|            if (ch < 'A' || ch > 'Z') {
 2246|  4.11M|                return ch;
 2247|  4.11M|            }
 2248|  4.11M|            return static_cast<char_type>(ch +
 2249|  4.11M|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.11M|        };
 2251|       |
 2252|  4.11M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  4.11M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.11M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.11M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.5k, False: 4.08M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  37.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  37.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  37.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  37.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  37.5k|    }                                                  \
  |  |  |  | 3671|  4.11M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  4.08M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  4.08M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  4.08M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  4.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.95M, False: 126k]
  |  |  ------------------
  ------------------
 2257|  4.08M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  4.08M|                    return ascii_tolower(a) ==
 2259|  4.08M|                           static_cast<detail::char_t<Range>>(b);
 2260|  4.08M|                }))) {
 2261|  3.95M|            return unexpected(parse_error::error);
 2262|  3.95M|        }
 2263|       |
 2264|   126k|        return it;
 2265|  4.08M|    }
 2266|  4.11M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2244|  4.70M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  4.70M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 4.28M, False: 422k]
  |  Branch (2245:29): [True: 355k, False: 67.6k]
  ------------------
 2246|  4.63M|                return ch;
 2247|  4.63M|            }
 2248|  67.6k|            return static_cast<char_type>(ch +
 2249|  67.6k|                                          static_cast<char_type>('a' - 'A'));
 2250|  4.70M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|  1.46M|{
 2146|  1.46M|    auto it = read_code_unit(range);
 2147|  1.46M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.84k, False: 1.45M]
  |  |  ------------------
  ------------------
 2148|  8.84k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  8.84k|    }
 2150|       |
 2151|  1.45M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.18M, False: 268k]
  |  |  ------------------
  ------------------
 2152|  1.45M|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|  1.18M|        return unexpected(parse_error::error);
 2154|  1.18M|    }
 2155|       |
 2156|   268k|    return *it;
 2157|  1.45M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  3.01M|{
 1996|  3.01M|    auto it = read_while_code_unit(range, pred);
 1997|  3.01M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 1.22M, False: 1.78M]
  ------------------
 1998|  1.22M|        return unexpected(parse_error::error);
 1999|  1.22M|    }
 2000|  1.78M|    return it;
 2001|  3.01M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|  1.39M|    {
 1621|  1.39M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|  1.39M|                           ranges::common_range<Range>) {
 1638|  1.39M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.39M|            auto end_seg = range.end().contiguous_segment();
 1640|  1.39M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 186k, False: 1.20M]
  |  |  ------------------
  ------------------
 1641|  1.39M|                             detail::to_address(end_seg.end()))) {
 1642|   186k|                auto& str = m_storage.emplace();
 1643|   186k|                str.reserve(range.end().position() - range.begin().position());
 1644|   186k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|   186k|                m_view = string_view_type{str};
 1646|   186k|                return;
 1647|   186k|            }
 1648|       |
 1649|  1.20M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.20M|                                                            end_seg.data());
 1651|  1.20M|            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|  1.39M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|  9.53M|    {
 1582|  9.53M|        return m_view;
 1583|  9.53M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|  5.77M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  1.03M|    {
 6079|  1.03M|        const bool need_skipped_width =
 6080|  1.03M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 1.03M]
  |  Branch (6080:33): [True: 0, False: 1.03M]
  ------------------
 6081|  1.03M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  1.03M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 1.03M]
  ------------------
 6084|  1.03M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 1.03M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  1.03M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 1.03M, False: 0]
  ------------------
 6093|  1.03M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 1.03M]
  ------------------
 6094|  1.03M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  1.03M|        return result_type{rng.begin(), 0};
 6118|  1.03M|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|  2.01M|{
 1846|  2.01M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.21k, False: 2.00M]
  |  |  ------------------
  ------------------
 1847|  5.21k|        return unexpected(e);
 1848|  5.21k|    }
 1849|       |
 1850|  2.00M|    return ranges::next(range.begin());
 1851|  2.01M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  3.76M|{
  950|  3.76M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  3.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.5k, False: 3.74M]
  |  |  ------------------
  ------------------
  951|  22.5k|        return eof_error::eof;
  952|  22.5k|    }
  953|  3.74M|    return eof_error::good;
  954|  3.76M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  3.76M|{
  944|  3.76M|    return is_range_eof(r.begin(), r.end());
  945|  3.76M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  3.76M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  3.76M|    {
  937|  3.76M|        return begin == end;
  938|  3.76M|    }
  939|  3.76M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  2.00M|    {
  296|  2.00M|        ++x;
  297|  2.00M|        return x;
  298|  2.00M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|  1.37M|{
 3141|  1.37M|    auto r = read_one_of_code_unit(range, "+-");
 3142|  1.37M|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 1.06M, False: 313k]
  ------------------
 3143|  1.06M|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 1.06M, False: 102]
  ------------------
 3144|  1.06M|            return std::pair{range.begin(), sign_type::default_sign};
 3145|  1.06M|        }
 3146|    102|        return unexpected(eof_error::eof);
 3147|  1.06M|    }
 3148|       |
 3149|   313k|    auto& it = *r;
 3150|   313k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 137k, False: 175k]
  ------------------
 3151|   137k|        return std::pair{it, sign_type::minus_sign};
 3152|   137k|    }
 3153|   175k|    return std::pair{it, sign_type::plus_sign};
 3154|   313k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|  1.59M|{
 2272|  1.59M|    auto it = read_code_unit(range);
 2273|  1.59M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.25k, False: 1.59M]
  |  |  ------------------
  ------------------
 2274|  2.25k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  2.25k|    }
 2276|       |
 2277|  2.99M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.99M, False: 1.24M]
  ------------------
 2278|  2.99M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 346k, False: 2.64M]
  ------------------
 2279|   346k|            return *it;
 2280|   346k|        }
 2281|  2.99M|    }
 2282|       |
 2283|  1.24M|    return unexpected(parse_error::error);
 2284|  1.59M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  3.57M|{
 2231|  3.57M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|  3.57M|                  std::is_same_v<char_type, char>) {
 2235|  3.57M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2235:13): [True: 36.8k, False: 3.53M]
  ------------------
 2236|  36.8k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|  36.8k|        }
 2238|  3.53M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2238:13): [True: 3.41M, False: 122k]
  ------------------
 2239|  3.41M|            return unexpected(parse_error::error);
 2240|  3.41M|        }
 2241|   122k|        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|       |    else {
 2244|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|       |            if (ch < 'A' || ch > 'Z') {
 2246|       |                return ch;
 2247|       |            }
 2248|       |            return static_cast<char_type>(ch +
 2249|       |                                          static_cast<char_type>('a' - 'A'));
 2250|       |        };
 2251|       |
 2252|       |        SCN_TRY(it, read_exactly_n_code_units(
 2253|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|       |                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|       |        if (SCN_UNLIKELY(!std::equal(
 2257|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|       |                    return ascii_tolower(a) ==
 2259|       |                           static_cast<detail::char_t<Range>>(b);
 2260|       |                }))) {
 2261|       |            return unexpected(parse_error::error);
 2262|       |        }
 2263|       |
 2264|       |        return it;
 2265|       |    }
 2266|  3.57M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   413k|{
 2146|   413k|    auto it = read_code_unit(range);
 2147|   413k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   413k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.96k, False: 410k]
  |  |  ------------------
  ------------------
 2148|  2.96k|        return unexpected(make_eof_parse_error(it.error()));
 2149|  2.96k|    }
 2150|       |
 2151|   410k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   410k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 340k, False: 69.7k]
  |  |  ------------------
  ------------------
 2152|   410k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   340k|        return unexpected(parse_error::error);
 2154|   340k|    }
 2155|       |
 2156|  69.7k|    return *it;
 2157|   410k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  5.17M|    {
 1503|  5.17M|        return sv;
 1504|  5.17M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   772k|{
 1976|   772k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   772k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   772k|{
 1957|   772k|    if constexpr (ranges::common_range<Range>) {
 1958|   772k|        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|       |    else {
 1961|       |        auto first = range.begin();
 1962|       |        for (; first != range.end(); ++first) {
 1963|       |            if (pred(*first)) {
 1964|       |                return first;
 1965|       |            }
 1966|       |        }
 1967|       |        return first;
 1968|       |    }
 1969|   772k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  1.35M|{
 2951|  1.35M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.35M, False: 0]
  ------------------
 2952|  1.35M|        auto it = read_while_classic_space(range);
 2953|  1.35M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.35M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.9k, False: 1.34M]
  |  |  ------------------
  ------------------
 2955|  12.9k|            return unexpected(e);
 2956|  12.9k|        }
 2957|       |
 2958|  1.34M|        return it;
 2959|  1.35M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.35M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  1.35M|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|  1.35M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|  1.35M|        auto buf = make_contiguous_buffer(range);
 2121|  1.35M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  1.35M|        return ranges::next(range.begin(),
 2123|  1.35M|                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|       |    else {
 2126|       |        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|       |        return read_while_code_point(
 2138|       |            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|       |    }
 2140|  1.35M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|  1.35M|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|  1.35M|                  ranges::sized_range<Range>) {
 1686|  1.35M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|  1.35M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1488|  1.35M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|  1.35M|    {
 1490|  1.35M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  4.16M|    {
  304|  4.16M|        ranges::advance(x, n);
  305|  4.16M|        return x;
  306|  4.16M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  5.55M|    {
  268|  5.55M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  5.55M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  5.55M|    {
  181|  26.2M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 20.6M, False: 5.55M]
  ------------------
  182|  20.6M|            ++i;
  183|  20.6M|        }
  184|  5.55M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   365k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   365k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   365k|            auto rd = make_reader<T, char_type>();
 6206|   365k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 365k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   365k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 365k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   365k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   365k|                return impl(rd, range, value);
 6213|   365k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   365k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|  2.09M|    {
 3040|  2.09M|        reader_error_handler eh{};
 3041|  2.09M|        get_derived().check_specs_impl(specs, eh);
 3042|  2.09M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  2.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.09M]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|  2.09M|        return {};
 3046|  2.09M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3050|  2.09M|    {
 3051|  2.09M|        return static_cast<Derived&>(*this);
 3052|  2.09M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|  2.09M|    {
 4145|  2.09M|        detail::check_float_type_specs(specs, eh);
 4146|  2.09M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   365k|    {
 6124|   365k|        const bool need_skipped_width =
 6125|   365k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 365k]
  |  Branch (6125:33): [True: 0, False: 365k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   365k|        auto it = rng.begin();
 6129|   365k|        std::ptrdiff_t prefix_width = 0;
 6130|   365k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 365k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   365k|        else {
 6138|   365k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   365k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   365k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   365k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.78k, False: 360k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.78k|    }                                                  \
  |  |  |  | 3671|   365k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   360k|            std::tie(it, prefix_width) = prefix_result;
 6140|   360k|        }
 6141|   360k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   360k|        std::ptrdiff_t value_width = 0;
 6145|   360k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 360k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   360k|        else {
 6161|   360k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   360k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   360k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   360k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22.5k, False: 337k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  22.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  22.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  22.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  22.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  22.5k|    }                                                  \
  |  | 3671|   360k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   337k|                                             specs, value, loc));
 6163|       |
 6164|   337k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 337k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   337k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   337k|        std::ptrdiff_t postfix_width = 0;
 6173|   337k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 333k, False: 3.88k]
  ------------------
 6174|   333k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   333k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   333k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   333k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 333k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   333k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   333k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   333k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   333k|                                 value_width));
 6178|   333k|            std::tie(it, postfix_width) = postfix_result;
 6179|   333k|        }
 6180|       |
 6181|   337k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   337k|                                                 value_width, postfix_width);
 6183|   337k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 337k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   337k|        return it;
 6188|   337k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3034|  4.82M|    {
 3035|  4.82M|        return true;
 3036|  4.82M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4216|  2.06M|    {
 4217|  2.06M|        unsigned options{};
 4218|  2.06M|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 578k, False: 1.48M]
  ------------------
 4219|   578k|            options |= float_reader_base::allow_thsep;
 4220|   578k|        }
 4221|       |
 4222|  2.06M|        SCN_GCC_COMPAT_PUSH
 4223|  2.06M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|  2.06M|        switch (specs.type) {
 4226|   313k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 313k, False: 1.74M]
  ------------------
 4227|   313k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  48.5k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 48.5k, False: 2.01M]
  ------------------
 4230|  48.5k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   624k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 624k, False: 1.43M]
  ------------------
 4233|   624k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   497k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 497k, False: 1.56M]
  ------------------
 4236|   497k|                return options | float_reader_base::allow_scientific |
 4237|   497k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   578k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 578k, False: 1.48M]
  ------------------
 4240|   578k|                return options | float_reader_base::allow_scientific |
 4241|   578k|                       float_reader_base::allow_fixed |
 4242|   578k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 2.06M]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|  2.06M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|  2.06M|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|  2.06M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3659|  2.06M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1770|  2.88M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1531|  5.77M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   895k|    {
 3691|   895k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   895k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   895k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   895k|        const std::ptrdiff_t sign_len =
 3694|   895k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 205k, False: 689k]
  ------------------
 3695|       |
 3696|   895k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   895k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   895k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   895k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   895k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.7k, False: 875k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  19.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  19.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  19.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  19.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  19.7k|    }                                                  \
  |  |  |  | 3671|   895k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   875k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   875k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   895k|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4056|  2.76M|    {
 4057|  2.76M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 2.76M, False: 0]
  ------------------
 4058|  2.76M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 2.76M, False: 0]
  ------------------
 4059|  2.76M|            return;
 4060|  2.76M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|  3.14M|    {
 1587|  3.14M|        return m_storage.has_value();
 1588|  3.14M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  1.84M|    {
 1592|  1.84M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  1.84M|        return *m_storage;
 1594|  1.84M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   360k|    {
 4170|   360k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   360k|#if !SCN_DISABLE_LOCALE
 4173|   360k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 100k, False: 259k]
  ------------------
 4174|   100k|            return read_impl<Range>(
 4175|   100k|                range, rd,
 4176|   100k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   100k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   100k|                },
 4179|   100k|                value, loc);
 4180|   100k|        }
 4181|   259k|#endif
 4182|       |
 4183|   259k|        return read_impl<Range>(
 4184|   259k|            range, rd,
 4185|   259k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   259k|                return r.read_source(SCN_FWD(args)...);
 4187|   259k|            },
 4188|   259k|            value);
 4189|   360k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   499k|    {
 4206|   499k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   499k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.4k, False: 473k]
  |  |  ------------------
  ------------------
 4208|  25.4k|            return unexpected(r.error());
 4209|  25.4k|        }
 4210|       |
 4211|   473k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   473k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   473k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   473k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   473k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.76k, False: 469k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.76k|    }                                                  \
  |  |  |  | 3671|   473k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   469k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   469k|        return ranges::next(range.begin(), n);
 4213|   473k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.54M|    {
  763|  1.54M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.54M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   100k|        : m_fptr([](storage fn,
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
  752|   100k|          m_storage(std::addressof(f))
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   100k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  688|   100k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   100k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   100k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   100k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   100k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   315k|    {
 3679|   315k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   315k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   315k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 315k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   315k|        return read_source_impl(range);
 3685|   315k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|  1.54M|    {
 3705|  1.54M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.54M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.54M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.54M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.54M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.54M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.54M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.54M|        auto it = sign_result.first;
 3708|  1.54M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.54M|        auto digits_begin = it;
 3711|  1.54M|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|       |                      ranges::sized_range<Range>) {
 3714|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|       |                SCN_TRY_ASSIGN(
 3717|       |                    it,
 3718|       |                    do_read_source_impl(
 3719|       |                        r,
 3720|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|       |            }
 3723|       |            else {
 3724|       |                auto cb = [&](const auto& rr)
 3725|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|       |                    auto res = read_all(rr);
 3727|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|       |                        return unexpected_scan_error(
 3729|       |                            scan_error::invalid_scanned_value,
 3730|       |                            "Invalid float value");
 3731|       |                    }
 3732|       |                    return res;
 3733|       |                };
 3734|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|       |            }
 3736|       |        }
 3737|  1.54M|        else {
 3738|  1.54M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|  1.54M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.54M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 79.6k, False: 1.46M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  79.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  79.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  79.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  79.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  79.6k|    }                                                  \
  |  | 3671|  1.54M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|  1.46M|                it,
 3740|  1.46M|                do_read_source_impl(
 3741|  1.46M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|  1.46M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|  1.46M|        }
 3744|       |
 3745|  1.54M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.46M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.45M, False: 8.80k]
  |  Branch (3747:48): [True: 1.44M, False: 8.18k]
  ------------------
 3748|  1.46M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.39M, False: 53.4k]
  ------------------
 3749|  1.46M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.39M, False: 2.37k]
  ------------------
 3750|  1.39M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.39M|        }
 3752|       |
 3753|  1.46M|        handle_separators();
 3754|       |
 3755|  1.46M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.46M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.46M|        return it;
 3768|  1.46M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|  1.54M|    {
 4000|  1.54M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.54M|        const bool allowed_nonhex =
 4002|  1.54M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.54M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.54M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.52M, False: 16.9k]
  |  Branch (4005:45): [True: 0, False: 1.52M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.54M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 16.9k, False: 1.52M]
  ------------------
 4011|  16.9k|            return *r;
 4012|  16.9k|        }
 4013|       |
 4014|  1.52M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.47M, False: 55.8k]
  |  Branch (4014:45): [True: 1.39k, False: 1.46M]
  ------------------
 4015|  1.39k|            return unexpected(r.error());
 4016|  1.39k|        }
 4017|  1.52M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 55.8k, False: 1.46M]
  ------------------
 4018|  55.8k|            return *r;
 4019|  55.8k|        }
 4020|       |
 4021|  1.46M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 1.03M, False: 437k]
  |  Branch (4021:28): [True: 323k, False: 708k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   323k|            auto it = range.begin();
 4025|       |
 4026|   323k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 13.6k, False: 310k]
  ------------------
 4027|  13.6k|                m_kind = float_kind::hex_with_prefix;
 4028|  13.6k|                it = *r;
 4029|  13.6k|            }
 4030|   310k|            else {
 4031|   310k|                m_kind = float_kind::hex_without_prefix;
 4032|   310k|            }
 4033|       |
 4034|   323k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   323k|        }
 4036|  1.14M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 437k, False: 708k]
  |  Branch (4036:29): [True: 437k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   437k|            m_kind = float_kind::generic;
 4040|   437k|            return read_regular_float(range);
 4041|   437k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   708k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.1k, False: 678k]
  |  |  ------------------
  ------------------
 4047|  30.1k|            m_kind = float_kind::hex_with_prefix;
 4048|  30.1k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  30.1k|        }
 4050|       |
 4051|   678k|        m_kind = float_kind::generic;
 4052|   678k|        return read_regular(range);
 4053|   708k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|  1.54M|    {
 3811|  1.54M|        auto it = range.begin();
 3812|  1.54M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.52M, False: 16.9k]
  ------------------
 3813|  1.52M|            return unexpected(r.error());
 3814|  1.52M|        }
 3815|  16.9k|        else {
 3816|  16.9k|            it = *r;
 3817|  16.9k|        }
 3818|       |
 3819|  16.9k|        if (auto r = read_matching_string_classic_nocase(
 3820|  16.9k|                ranges::subrange{it, range.end()}, "inity");
 3821|  16.9k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 8.80k, False: 8.18k]
  ------------------
 3822|  8.80k|            m_kind = float_kind::inf_short;
 3823|  8.80k|            return it;
 3824|  8.80k|        }
 3825|  8.18k|        else {
 3826|  8.18k|            m_kind = float_kind::inf_long;
 3827|  8.18k|            return *r;
 3828|  8.18k|        }
 3829|  16.9k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|  1.52M|    {
 3834|  1.52M|        auto it = range.begin();
 3835|  1.52M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.46M, False: 57.2k]
  ------------------
 3836|  1.46M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.46M|                scan_error::invalid_scanned_value,
 3838|  1.46M|                "Invalid floating-point NaN value"));
 3839|  1.46M|        }
 3840|  57.2k|        else {
 3841|  57.2k|            it = *r;
 3842|  57.2k|        }
 3843|       |
 3844|  57.2k|        if (auto r =
 3845|  57.2k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  57.2k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 53.4k, False: 3.76k]
  ------------------
 3847|  53.4k|            m_kind = float_kind::nan_simple;
 3848|  53.4k|            return it;
 3849|  53.4k|        }
 3850|  3.76k|        else {
 3851|  3.76k|            it = *r;
 3852|  3.76k|        }
 3853|       |
 3854|  3.76k|        auto payload_beg_it = it;
 3855|  3.76k|        it = read_while_code_unit(
 3856|  3.76k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.76k|                return is_ascii_char(ch) &&
 3858|  3.76k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.76k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.76k|            });
 3861|  3.76k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.76k|        m_kind = float_kind::nan_with_payload;
 3864|  3.76k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.37k, False: 1.39k]
  ------------------
 3865|  3.76k|                                             ')')) {
 3866|  2.37k|            return *r;
 3867|  2.37k|        }
 3868|  1.39k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.39k|                                     "Invalid floating-point NaN payload");
 3870|  3.76k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  3.76k|        : m_fptr([](storage fn,
  743|  3.76k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.76k|              cvref<T> obj = *get<T>(fn);
  745|  3.76k|              if constexpr (std::is_void_v<R>) {
  746|  3.76k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.76k|              }
  748|  3.76k|              else {
  749|  3.76k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.76k|              }
  751|  3.76k|          }),
  752|  3.76k|          m_storage(std::addressof(f))
  753|  3.76k|    {
  754|  3.76k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  74.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  74.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  74.0k|              else {
  749|  74.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  74.0k|              }
  751|  74.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  74.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  74.0k|        else if constexpr (std::is_object_v<T>) {
  688|  74.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  74.0k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3856|  74.0k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  74.0k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 74.0k, False: 91]
  ------------------
 3858|  74.0k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 71.3k, False: 2.62k]
  |  Branch (3858:39): [True: 63.3k, False: 8.05k]
  |  Branch (3858:54): [True: 2.79k, False: 7.88k]
  |  Branch (3858:67): [True: 2.71k, False: 83]
  ------------------
 3859|  74.0k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.33k, False: 2.62k]
  |  Branch (3859:39): [True: 2.53k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 2.71k]
  ------------------
 3860|  74.0k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  3.76k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.76k|        {
  662|  3.76k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|  1.03M|    {
 3804|  1.03M|        return read_matching_string_classic_nocase(range, "0x");
 3805|  1.03M|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   354k|    {
 3904|   354k|        auto it = range.begin();
 3905|       |
 3906|   354k|        std::ptrdiff_t digits_count = 0;
 3907|   354k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   354k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.97k, False: 344k]
  |  |  ------------------
  ------------------
 3909|  9.97k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  9.97k|                scan_error::invalid_scanned_value,
 3911|  9.97k|                "Invalid hexadecimal floating-point value"));
 3912|  9.97k|        }
 3913|   344k|        else {
 3914|   344k|            digits_count += ranges::distance(it, *r);
 3915|   344k|            it = *r;
 3916|   344k|        }
 3917|       |
 3918|   344k|        m_integral_part_length = digits_count;
 3919|   344k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 55.1k, False: 288k]
  ------------------
 3920|   344k|                                             m_locale_options.decimal_point)) {
 3921|  55.1k|            it = *r;
 3922|  55.1k|        }
 3923|       |
 3924|   344k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 50.5k, False: 293k]
  ------------------
 3925|   344k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|  50.5k|            digits_count += ranges::distance(it, *r);
 3927|  50.5k|            it = *r;
 3928|  50.5k|        }
 3929|       |
 3930|   344k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   344k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 344k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|   344k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|   344k|        return it;
 3938|   344k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   698k|    {
 3789|   698k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   698k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 698k]
  |  |  |  Branch (859:45): [True: 0, False: 698k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   698k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   698k|        return read_while1_code_unit(
 3798|   698k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   698k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   698k|        : m_fptr([](storage fn,
  743|   698k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   698k|              cvref<T> obj = *get<T>(fn);
  745|   698k|              if constexpr (std::is_void_v<R>) {
  746|   698k|                  obj(static_cast<decltype(args)>(args)...);
  747|   698k|              }
  748|   698k|              else {
  749|   698k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   698k|              }
  751|   698k|          }),
  752|   698k|          m_storage(std::addressof(f))
  753|   698k|    {
  754|   698k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  3.69M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.69M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.69M|              else {
  749|  3.69M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.69M|              }
  751|  3.69M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  3.69M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.69M|        else if constexpr (std::is_object_v<T>) {
  688|  3.69M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.69M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3798|  3.69M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   698k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   698k|        {
  662|   698k|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|  1.26M|    {
 3876|  1.26M|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 141k, False: 1.11M]
  ------------------
 3877|   141k|            auto beg_exp_it = range.begin();
 3878|   141k|            auto it = *r;
 3879|       |
 3880|   141k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 141k, False: 309]
  ------------------
 3881|   141k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|   141k|                it = r_sign->first;
 3883|   141k|            }
 3884|       |
 3885|   141k|            if (auto r_exp = read_while1_code_unit(
 3886|   141k|                    ranges::subrange{it, range.end()},
 3887|   141k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|   141k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.11k, False: 139k]
  |  |  ------------------
  ------------------
 3889|  2.11k|                it = beg_exp_it;
 3890|  2.11k|            }
 3891|   139k|            else {
 3892|   139k|                it = *r_exp;
 3893|   139k|            }
 3894|       |
 3895|   141k|            return it;
 3896|   141k|        }
 3897|  1.11M|        return range.begin();
 3898|  1.26M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|   141k|        : m_fptr([](storage fn,
  743|   141k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   141k|              cvref<T> obj = *get<T>(fn);
  745|   141k|              if constexpr (std::is_void_v<R>) {
  746|   141k|                  obj(static_cast<decltype(args)>(args)...);
  747|   141k|              }
  748|   141k|              else {
  749|   141k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   141k|              }
  751|   141k|          }),
  752|   141k|          m_storage(std::addressof(f))
  753|   141k|    {
  754|   141k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   457k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   457k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   457k|              else {
  749|   457k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   457k|              }
  751|   457k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   457k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   457k|        else if constexpr (std::is_object_v<T>) {
  688|   457k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   457k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3887|   457k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|   141k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   141k|        {
  662|   141k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|  1.11M|    {
 3944|  1.11M|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|  1.11M|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 956k, False: 159k]
  |  Branch (3945:50): [True: 24.3k, False: 932k]
  ------------------
 3946|       |
 3947|  1.11M|        auto it = ranges::begin(range);
 3948|  1.11M|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|  1.11M|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|  1.11M|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54.1k, False: 1.06M]
  |  |  ------------------
  ------------------
 3952|  54.1k|            return r.transform_error(
 3953|  54.1k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  54.1k|                                              "Invalid floating-point value"));
 3955|  54.1k|        }
 3956|  1.06M|        else {
 3957|  1.06M|            digits_count += ranges::distance(it, *r);
 3958|  1.06M|            it = *r;
 3959|  1.06M|        }
 3960|       |
 3961|  1.06M|        m_integral_part_length = digits_count;
 3962|  1.06M|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 207k, False: 854k]
  ------------------
 3963|  1.06M|                                             m_locale_options.decimal_point)) {
 3964|   207k|            it = *r;
 3965|   207k|        }
 3966|       |
 3967|  1.06M|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 192k, False: 868k]
  ------------------
 3968|  1.06M|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|   192k|            digits_count += ranges::distance(it, *r);
 3970|   192k|            it = *r;
 3971|   192k|        }
 3972|       |
 3973|  1.06M|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|  1.06M|        auto beg_exp_it = it;
 3979|  1.06M|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 916k, False: 144k]
  ------------------
 3980|   916k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   916k|        }
 3982|  1.06M|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 23.5k, False: 1.03M]
  |  Branch (3982:29): [True: 14.1k, False: 9.37k]
  ------------------
 3983|  14.1k|            return unexpected_scan_error(
 3984|  14.1k|                scan_error::invalid_scanned_value,
 3985|  14.1k|                "No exponent given to scientific float");
 3986|  14.1k|        }
 3987|       |
 3988|  1.04M|        m_kind =
 3989|  1.04M|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 908k, False: 138k]
  ------------------
 3990|       |
 3991|  1.04M|        return it;
 3992|  1.06M|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|  2.17M|    {
 3774|  2.17M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.17M]
  |  |  |  Branch (859:45): [True: 0, False: 2.17M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|  2.17M|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|  2.17M|        return read_while1_code_unit(
 3783|  2.17M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|  2.17M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  2.17M|        : m_fptr([](storage fn,
  743|  2.17M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.17M|              cvref<T> obj = *get<T>(fn);
  745|  2.17M|              if constexpr (std::is_void_v<R>) {
  746|  2.17M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.17M|              }
  748|  2.17M|              else {
  749|  2.17M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.17M|              }
  751|  2.17M|          }),
  752|  2.17M|          m_storage(std::addressof(f))
  753|  2.17M|    {
  754|  2.17M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  12.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.1M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  12.1M|              else {
  749|  12.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.1M|              }
  751|  12.1M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  12.1M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  12.1M|        else if constexpr (std::is_object_v<T>) {
  688|  12.1M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  12.1M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3783|  12.1M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  2.17M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.17M|        {
  662|  2.17M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1576|  1.39M|    {
 1577|  1.39M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.39M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   100k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   259k|        : m_fptr([](storage fn,
  743|   259k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   259k|              cvref<T> obj = *get<T>(fn);
  745|   259k|              if constexpr (std::is_void_v<R>) {
  746|   259k|                  obj(static_cast<decltype(args)>(args)...);
  747|   259k|              }
  748|   259k|              else {
  749|   259k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   259k|              }
  751|   259k|          }),
  752|   259k|          m_storage(std::addressof(f))
  753|   259k|    {
  754|   259k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   259k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   259k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   259k|              else {
  749|   259k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   259k|              }
  751|   259k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   259k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   259k|        else if constexpr (std::is_object_v<T>) {
  688|   259k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   259k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   259k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   259k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   259k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   259k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|  1.22M|    {
 3665|  1.22M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.22M|        return read_source_impl(range);
 3671|  1.22M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   259k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   259k|        {
  662|   259k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   308k|    {
 4170|   308k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   308k|#if !SCN_DISABLE_LOCALE
 4173|   308k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 84.8k, False: 223k]
  ------------------
 4174|  84.8k|            return read_impl<Range>(
 4175|  84.8k|                range, rd,
 4176|  84.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  84.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  84.8k|                },
 4179|  84.8k|                value, loc);
 4180|  84.8k|        }
 4181|   223k|#endif
 4182|       |
 4183|   223k|        return read_impl<Range>(
 4184|   223k|            range, rd,
 4185|   223k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   223k|                return r.read_source(SCN_FWD(args)...);
 4187|   223k|            },
 4188|   223k|            value);
 4189|   308k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   436k|    {
 4206|   436k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   436k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.4k, False: 421k]
  |  |  ------------------
  ------------------
 4208|  14.4k|            return unexpected(r.error());
 4209|  14.4k|        }
 4210|       |
 4211|   421k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   421k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   421k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   421k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   421k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.9k, False: 405k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  15.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  15.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  15.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  15.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  15.9k|    }                                                  \
  |  |  |  | 3671|   421k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   405k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   405k|        return ranges::next(range.begin(), n);
 4213|   421k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|  1.34M|    {
  763|  1.34M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.34M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  84.8k|        : m_fptr([](storage fn,
  743|  84.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  84.8k|              cvref<T> obj = *get<T>(fn);
  745|  84.8k|              if constexpr (std::is_void_v<R>) {
  746|  84.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  84.8k|              }
  748|  84.8k|              else {
  749|  84.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  84.8k|              }
  751|  84.8k|          }),
  752|  84.8k|          m_storage(std::addressof(f))
  753|  84.8k|    {
  754|  84.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  84.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  84.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  84.8k|              else {
  749|  84.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  84.8k|              }
  751|  84.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  84.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  84.8k|        else if constexpr (std::is_object_v<T>) {
  688|  84.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  84.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  84.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  84.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  84.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  84.8k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   263k|    {
 3679|   263k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   263k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   263k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   263k|        return read_source_impl(range);
 3685|   263k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|  1.34M|    {
 3705|  1.34M|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|  1.34M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.34M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.34M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.34M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  1.34M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|  1.34M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|  1.34M|        auto it = sign_result.first;
 3708|  1.34M|        m_sign = sign_result.second;
 3709|       |
 3710|  1.34M|        auto digits_begin = it;
 3711|  1.34M|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|  1.34M|                      ranges::sized_range<Range>) {
 3714|  1.34M|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  2.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.34M]
  |  |  |  Branch (859:45): [True: 0, False: 1.34M]
  |  |  |  Branch (859:45): [True: 0, False: 1.34M]
  |  |  ------------------
  ------------------
 3715|  1.34M|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|  1.34M|            else {
 3724|  1.34M|                auto cb = [&](const auto& rr)
 3725|  1.34M|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|  1.34M|                    auto res = read_all(rr);
 3727|  1.34M|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|  1.34M|                        return unexpected_scan_error(
 3729|  1.34M|                            scan_error::invalid_scanned_value,
 3730|  1.34M|                            "Invalid float value");
 3731|  1.34M|                    }
 3732|  1.34M|                    return res;
 3733|  1.34M|                };
 3734|  1.34M|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|  1.34M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  1.34M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 44.2k, False: 1.29M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  44.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  44.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  44.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  44.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  44.2k|    }                                                  \
  |  | 3671|  1.34M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|  1.29M|            }
 3736|       |        }
 3737|       |        else {
 3738|       |            SCN_TRY_ASSIGN(
 3739|       |                it,
 3740|       |                do_read_source_impl(
 3741|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|       |        }
 3744|       |
 3745|  1.34M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.34M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.34M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|  1.29M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 1.29M, False: 8.47k]
  |  Branch (3747:48): [True: 1.28M, False: 7.74k]
  ------------------
 3748|  1.29M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 1.23M, False: 52.5k]
  ------------------
 3749|  1.29M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 1.22M, False: 2.13k]
  ------------------
 3750|  1.22M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|  1.22M|        }
 3752|       |
 3753|  1.29M|        handle_separators();
 3754|       |
 3755|  1.29M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 1.29M]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|  1.29M|        return it;
 3768|  1.29M|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|  1.34M|    {
 3811|  1.34M|        auto it = range.begin();
 3812|  1.34M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 1.32M, False: 16.2k]
  ------------------
 3813|  1.32M|            return unexpected(r.error());
 3814|  1.32M|        }
 3815|  16.2k|        else {
 3816|  16.2k|            it = *r;
 3817|  16.2k|        }
 3818|       |
 3819|  16.2k|        if (auto r = read_matching_string_classic_nocase(
 3820|  16.2k|                ranges::subrange{it, range.end()}, "inity");
 3821|  16.2k|            !r) {
  ------------------
  |  Branch (3821:13): [True: 8.47k, False: 7.74k]
  ------------------
 3822|  8.47k|            m_kind = float_kind::inf_short;
 3823|  8.47k|            return it;
 3824|  8.47k|        }
 3825|  7.74k|        else {
 3826|  7.74k|            m_kind = float_kind::inf_long;
 3827|  7.74k|            return *r;
 3828|  7.74k|        }
 3829|  16.2k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|  1.32M|    {
 3834|  1.32M|        auto it = range.begin();
 3835|  1.32M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 1.27M, False: 55.9k]
  ------------------
 3836|  1.27M|            return r.transform_error(map_parse_error_to_scan_error(
 3837|  1.27M|                scan_error::invalid_scanned_value,
 3838|  1.27M|                "Invalid floating-point NaN value"));
 3839|  1.27M|        }
 3840|  55.9k|        else {
 3841|  55.9k|            it = *r;
 3842|  55.9k|        }
 3843|       |
 3844|  55.9k|        if (auto r =
 3845|  55.9k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|  55.9k|            !r) {
  ------------------
  |  Branch (3846:13): [True: 52.5k, False: 3.36k]
  ------------------
 3847|  52.5k|            m_kind = float_kind::nan_simple;
 3848|  52.5k|            return it;
 3849|  52.5k|        }
 3850|  3.36k|        else {
 3851|  3.36k|            it = *r;
 3852|  3.36k|        }
 3853|       |
 3854|  3.36k|        auto payload_beg_it = it;
 3855|  3.36k|        it = read_while_code_unit(
 3856|  3.36k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  3.36k|                return is_ascii_char(ch) &&
 3858|  3.36k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|  3.36k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|  3.36k|            });
 3861|  3.36k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|  3.36k|        m_kind = float_kind::nan_with_payload;
 3864|  3.36k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 2.13k, False: 1.23k]
  ------------------
 3865|  3.36k|                                             ')')) {
 3866|  2.13k|            return *r;
 3867|  2.13k|        }
 3868|  1.23k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|  1.23k|                                     "Invalid floating-point NaN payload");
 3870|  3.36k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  3.36k|        : m_fptr([](storage fn,
  743|  3.36k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.36k|              cvref<T> obj = *get<T>(fn);
  745|  3.36k|              if constexpr (std::is_void_v<R>) {
  746|  3.36k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.36k|              }
  748|  3.36k|              else {
  749|  3.36k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.36k|              }
  751|  3.36k|          }),
  752|  3.36k|          m_storage(std::addressof(f))
  753|  3.36k|    {
  754|  3.36k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  61.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  61.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  61.3k|              else {
  749|  61.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  61.3k|              }
  751|  61.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  61.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  61.3k|        else if constexpr (std::is_object_v<T>) {
  688|  61.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  61.3k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3856|  61.3k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|  61.3k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3857:24): [True: 61.2k, False: 85]
  ------------------
 3858|  61.3k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3858:26): [True: 59.0k, False: 2.23k]
  |  Branch (3858:39): [True: 51.0k, False: 7.96k]
  |  Branch (3858:54): [True: 2.71k, False: 7.49k]
  |  Branch (3858:67): [True: 2.63k, False: 83]
  ------------------
 3859|  61.2k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3859:26): [True: 5.33k, False: 2.23k]
  |  Branch (3859:39): [True: 2.53k, False: 2.80k]
  |  Branch (3859:53): [True: 2.72k, False: 2.32k]
  ------------------
 3860|  61.3k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  3.36k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.36k|        {
  662|  3.36k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   888k|    {
 3804|   888k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   888k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   769k|{
 1996|   769k|    auto it = read_while_code_unit(range, pred);
 1997|   769k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 323k, False: 445k]
  ------------------
 1998|   323k|        return unexpected(parse_error::error);
 1999|   323k|    }
 2000|   445k|    return it;
 2001|   769k|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|   222k|    {
 3876|   222k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 32.8k, False: 189k]
  ------------------
 3877|  32.8k|            auto beg_exp_it = range.begin();
 3878|  32.8k|            auto it = *r;
 3879|       |
 3880|  32.8k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 32.7k, False: 102]
  ------------------
 3881|  32.8k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  32.7k|                it = r_sign->first;
 3883|  32.7k|            }
 3884|       |
 3885|  32.8k|            if (auto r_exp = read_while1_code_unit(
 3886|  32.8k|                    ranges::subrange{it, range.end()},
 3887|  32.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  32.8k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  32.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 730, False: 32.1k]
  |  |  ------------------
  ------------------
 3889|    730|                it = beg_exp_it;
 3890|    730|            }
 3891|  32.1k|            else {
 3892|  32.1k|                it = *r_exp;
 3893|  32.1k|            }
 3894|       |
 3895|  32.8k|            return it;
 3896|  32.8k|        }
 3897|   189k|        return range.begin();
 3898|   222k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  32.8k|        : m_fptr([](storage fn,
  743|  32.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.8k|              cvref<T> obj = *get<T>(fn);
  745|  32.8k|              if constexpr (std::is_void_v<R>) {
  746|  32.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.8k|              }
  748|  32.8k|              else {
  749|  32.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.8k|              }
  751|  32.8k|          }),
  752|  32.8k|          m_storage(std::addressof(f))
  753|  32.8k|    {
  754|  32.8k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|  98.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  98.5k|              else {
  749|  98.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.5k|              }
  751|  98.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  98.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  98.5k|        else if constexpr (std::is_object_v<T>) {
  688|  98.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  98.5k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3887|  98.5k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  32.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  32.8k|        {
  662|  32.8k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   382k|    {
 3944|   382k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   382k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 236k, False: 146k]
  |  Branch (3945:50): [True: 21.9k, False: 214k]
  ------------------
 3946|       |
 3947|   382k|        auto it = ranges::begin(range);
 3948|   382k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   382k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   382k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   382k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.3k, False: 354k]
  |  |  ------------------
  ------------------
 3952|  28.3k|            return r.transform_error(
 3953|  28.3k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  28.3k|                                              "Invalid floating-point value"));
 3955|  28.3k|        }
 3956|   354k|        else {
 3957|   354k|            digits_count += ranges::distance(it, *r);
 3958|   354k|            it = *r;
 3959|   354k|        }
 3960|       |
 3961|   354k|        m_integral_part_length = digits_count;
 3962|   354k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 64.2k, False: 289k]
  ------------------
 3963|   354k|                                             m_locale_options.decimal_point)) {
 3964|  64.2k|            it = *r;
 3965|  64.2k|        }
 3966|       |
 3967|   354k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 59.2k, False: 294k]
  ------------------
 3968|   354k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  59.2k|            digits_count += ranges::distance(it, *r);
 3970|  59.2k|            it = *r;
 3971|  59.2k|        }
 3972|       |
 3973|   354k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   354k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 354k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   354k|        auto beg_exp_it = it;
 3979|   354k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 222k, False: 131k]
  ------------------
 3980|   222k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   222k|        }
 3982|   354k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 20.6k, False: 333k]
  |  Branch (3982:29): [True: 13.8k, False: 6.85k]
  ------------------
 3983|  13.8k|            return unexpected_scan_error(
 3984|  13.8k|                scan_error::invalid_scanned_value,
 3985|  13.8k|                "No exponent given to scientific float");
 3986|  13.8k|        }
 3987|       |
 3988|   340k|        m_kind =
 3989|   340k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 308k, False: 32.1k]
  ------------------
 3990|       |
 3991|   340k|        return it;
 3992|   354k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   736k|    {
 3774|   736k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   736k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 736k]
  |  |  |  Branch (859:45): [True: 0, False: 736k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   736k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   736k|        return read_while1_code_unit(
 3783|   736k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   736k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   736k|        : m_fptr([](storage fn,
  743|   736k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   736k|              cvref<T> obj = *get<T>(fn);
  745|   736k|              if constexpr (std::is_void_v<R>) {
  746|   736k|                  obj(static_cast<decltype(args)>(args)...);
  747|   736k|              }
  748|   736k|              else {
  749|   736k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   736k|              }
  751|   736k|          }),
  752|   736k|          m_storage(std::addressof(f))
  753|   736k|    {
  754|   736k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  3.88M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.88M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.88M|              else {
  749|  3.88M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.88M|              }
  751|  3.88M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  3.88M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.88M|        else if constexpr (std::is_object_v<T>) {
  688|  3.88M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.88M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3783|  3.88M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   736k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   736k|        {
  662|   736k|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|  1.34M|    {
 4000|  1.34M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|  1.34M|        const bool allowed_nonhex =
 4002|  1.34M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|  1.34M|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|  1.34M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 1.32M, False: 16.2k]
  |  Branch (4005:45): [True: 0, False: 1.32M]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|  1.34M|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 16.2k, False: 1.32M]
  ------------------
 4011|  16.2k|            return *r;
 4012|  16.2k|        }
 4013|       |
 4014|  1.32M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 1.27M, False: 54.6k]
  |  Branch (4014:45): [True: 1.23k, False: 1.27M]
  ------------------
 4015|  1.23k|            return unexpected(r.error());
 4016|  1.23k|        }
 4017|  1.32M|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 54.6k, False: 1.27M]
  ------------------
 4018|  54.6k|            return *r;
 4019|  54.6k|        }
 4020|       |
 4021|  1.27M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 888k, False: 382k]
  |  Branch (4021:28): [True: 268k, False: 620k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   268k|            auto it = range.begin();
 4025|       |
 4026|   268k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 12.3k, False: 255k]
  ------------------
 4027|  12.3k|                m_kind = float_kind::hex_with_prefix;
 4028|  12.3k|                it = *r;
 4029|  12.3k|            }
 4030|   255k|            else {
 4031|   255k|                m_kind = float_kind::hex_without_prefix;
 4032|   255k|            }
 4033|       |
 4034|   268k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   268k|        }
 4036|  1.00M|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 382k, False: 620k]
  |  Branch (4036:29): [True: 382k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   382k|            m_kind = float_kind::generic;
 4040|   382k|            return read_regular_float(range);
 4041|   382k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   620k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   620k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 29.8k, False: 590k]
  |  |  ------------------
  ------------------
 4047|  29.8k|            m_kind = float_kind::hex_with_prefix;
 4048|  29.8k|            return read_hex(ranges::subrange{*r, range.end()});
 4049|  29.8k|        }
 4050|       |
 4051|   590k|        m_kind = float_kind::generic;
 4052|   590k|        return read_regular(range);
 4053|   620k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   888k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   888k|                    auto res = read_all(rr);
 3727|   888k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   888k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 858, False: 887k]
  |  |  ------------------
  ------------------
 3728|    858|                        return unexpected_scan_error(
 3729|    858|                            scan_error::invalid_scanned_value,
 3730|    858|                            "Invalid float value");
 3731|    858|                    }
 3732|   887k|                    return res;
 3733|   888k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   888k|{
 1839|   888k|    return ranges::next(range.begin(), range.end());
 1840|   888k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   888k|    {
  313|   888k|        ranges::advance(x, bound);
  314|   888k|        return x;
  315|   888k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   888k|    {
  275|   888k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   888k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   888k|    {
  190|   888k|        i = std::move(bound);
  191|   888k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1576|  1.23M|    {
 1577|  1.23M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.23M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1620|  1.23M|    {
 1621|  1.23M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|  1.23M|                      ranges::sized_range<Range>) {
 1626|  1.23M|            m_storage.reset();
 1627|  1.23M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|  1.23M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  84.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  84.8k|        {
  662|  84.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   223k|        : m_fptr([](storage fn,
  743|   223k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   223k|              cvref<T> obj = *get<T>(fn);
  745|   223k|              if constexpr (std::is_void_v<R>) {
  746|   223k|                  obj(static_cast<decltype(args)>(args)...);
  747|   223k|              }
  748|   223k|              else {
  749|   223k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   223k|              }
  751|   223k|          }),
  752|   223k|          m_storage(std::addressof(f))
  753|   223k|    {
  754|   223k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   223k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   223k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   223k|              else {
  749|   223k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   223k|              }
  751|   223k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   223k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   223k|        else if constexpr (std::is_object_v<T>) {
  688|   223k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   223k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   223k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   223k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   223k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|  1.08M|    {
 3665|  1.08M|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.08M]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|  1.08M|        return read_source_impl(range);
 3671|  1.08M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   223k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   223k|        {
  662|   223k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   380k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   380k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   380k|            auto rd = make_reader<T, char_type>();
 6206|   380k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   380k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 380k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   380k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 380k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   380k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   380k|                return impl(rd, range, value);
 6213|   380k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   380k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   380k|    {
 6124|   380k|        const bool need_skipped_width =
 6125|   380k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 380k]
  |  Branch (6125:33): [True: 0, False: 380k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   380k|        auto it = rng.begin();
 6129|   380k|        std::ptrdiff_t prefix_width = 0;
 6130|   380k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 380k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   380k|        else {
 6138|   380k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   380k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   380k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   380k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   380k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.41k, False: 374k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.41k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.41k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.41k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.41k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.41k|    }                                                  \
  |  |  |  | 3671|   380k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   374k|            std::tie(it, prefix_width) = prefix_result;
 6140|   374k|        }
 6141|   374k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   374k|        std::ptrdiff_t value_width = 0;
 6145|   374k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 374k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   374k|        else {
 6161|   374k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   374k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   374k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   374k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 21.9k, False: 352k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  21.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  21.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  21.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  21.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  21.9k|    }                                                  \
  |  | 3671|   374k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   374k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   352k|                                             specs, value, loc));
 6163|       |
 6164|   352k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 352k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   352k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   352k|        std::ptrdiff_t postfix_width = 0;
 6173|   352k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 348k, False: 4.39k]
  ------------------
 6174|   348k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   348k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   348k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   348k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   348k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 348k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   348k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   348k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   348k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   348k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   348k|                                 value_width));
 6178|   348k|            std::tie(it, postfix_width) = postfix_result;
 6179|   348k|        }
 6180|       |
 6181|   352k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   352k|                                                 value_width, postfix_width);
 6183|   352k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 352k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   352k|        return it;
 6188|   352k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   929k|    {
 3691|   929k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   929k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   929k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   929k|        const std::ptrdiff_t sign_len =
 3694|   929k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 215k, False: 714k]
  ------------------
 3695|       |
 3696|   929k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   929k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   929k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   929k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   929k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16.6k, False: 912k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  16.6k|    }                                                  \
  |  |  |  | 3671|   929k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   912k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   912k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   929k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   374k|    {
 4170|   374k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   374k|#if !SCN_DISABLE_LOCALE
 4173|   374k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 106k, False: 268k]
  ------------------
 4174|   106k|            return read_impl<Range>(
 4175|   106k|                range, rd,
 4176|   106k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   106k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   106k|                },
 4179|   106k|                value, loc);
 4180|   106k|        }
 4181|   268k|#endif
 4182|       |
 4183|   268k|        return read_impl<Range>(
 4184|   268k|            range, rd,
 4185|   268k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   268k|                return r.read_source(SCN_FWD(args)...);
 4187|   268k|            },
 4188|   268k|            value);
 4189|   374k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   520k|    {
 4206|   520k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   520k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   520k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.6k, False: 493k]
  |  |  ------------------
  ------------------
 4208|  26.6k|            return unexpected(r.error());
 4209|  26.6k|        }
 4210|       |
 4211|   493k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   493k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   493k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   493k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.73k, False: 491k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.73k|    }                                                  \
  |  |  |  | 3671|   493k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   491k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   491k|        return ranges::next(range.begin(), n);
 4213|   493k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   106k|        : m_fptr([](storage fn,
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|   106k|              if constexpr (std::is_void_v<R>) {
  746|   106k|                  obj(static_cast<decltype(args)>(args)...);
  747|   106k|              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
  752|   106k|          m_storage(std::addressof(f))
  753|   106k|    {
  754|   106k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   106k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   106k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   106k|              else {
  749|   106k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   106k|              }
  751|   106k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   106k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   106k|        else if constexpr (std::is_object_v<T>) {
  688|   106k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   106k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   106k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   106k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   106k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   106k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   106k|        {
  662|   106k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   268k|        : m_fptr([](storage fn,
  743|   268k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   268k|              cvref<T> obj = *get<T>(fn);
  745|   268k|              if constexpr (std::is_void_v<R>) {
  746|   268k|                  obj(static_cast<decltype(args)>(args)...);
  747|   268k|              }
  748|   268k|              else {
  749|   268k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   268k|              }
  751|   268k|          }),
  752|   268k|          m_storage(std::addressof(f))
  753|   268k|    {
  754|   268k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   268k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   268k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   268k|              else {
  749|   268k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   268k|              }
  751|   268k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   268k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   268k|        else if constexpr (std::is_object_v<T>) {
  688|   268k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   268k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   268k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   268k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   268k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   268k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   268k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   268k|        {
  662|   268k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   318k|    {
 4170|   318k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   318k|#if !SCN_DISABLE_LOCALE
 4173|   318k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 88.3k, False: 230k]
  ------------------
 4174|  88.3k|            return read_impl<Range>(
 4175|  88.3k|                range, rd,
 4176|  88.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  88.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  88.3k|                },
 4179|  88.3k|                value, loc);
 4180|  88.3k|        }
 4181|   230k|#endif
 4182|       |
 4183|   230k|        return read_impl<Range>(
 4184|   230k|            range, rd,
 4185|   230k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   230k|                return r.read_source(SCN_FWD(args)...);
 4187|   230k|            },
 4188|   230k|            value);
 4189|   318k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   451k|    {
 4206|   451k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   451k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   451k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.7k, False: 436k]
  |  |  ------------------
  ------------------
 4208|  14.7k|            return unexpected(r.error());
 4209|  14.7k|        }
 4210|       |
 4211|   436k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   436k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   436k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   436k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   436k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.9k, False: 421k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.9k|    }                                                  \
  |  |  |  | 3671|   436k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   421k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   421k|        return ranges::next(range.begin(), n);
 4213|   436k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  88.3k|        : m_fptr([](storage fn,
  743|  88.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  88.3k|              cvref<T> obj = *get<T>(fn);
  745|  88.3k|              if constexpr (std::is_void_v<R>) {
  746|  88.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  88.3k|              }
  748|  88.3k|              else {
  749|  88.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  88.3k|              }
  751|  88.3k|          }),
  752|  88.3k|          m_storage(std::addressof(f))
  753|  88.3k|    {
  754|  88.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  88.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  88.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  88.3k|              else {
  749|  88.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  88.3k|              }
  751|  88.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  88.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  88.3k|        else if constexpr (std::is_object_v<T>) {
  688|  88.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  88.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  88.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  88.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  88.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  88.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  88.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  88.3k|        {
  662|  88.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   230k|        : m_fptr([](storage fn,
  743|   230k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   230k|              cvref<T> obj = *get<T>(fn);
  745|   230k|              if constexpr (std::is_void_v<R>) {
  746|   230k|                  obj(static_cast<decltype(args)>(args)...);
  747|   230k|              }
  748|   230k|              else {
  749|   230k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   230k|              }
  751|   230k|          }),
  752|   230k|          m_storage(std::addressof(f))
  753|   230k|    {
  754|   230k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   230k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   230k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   230k|              else {
  749|   230k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   230k|              }
  751|   230k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   230k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   230k|        else if constexpr (std::is_object_v<T>) {
  688|   230k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   230k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   230k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   230k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   230k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   230k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   230k|        {
  662|   230k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|   383k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   383k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   383k|            auto rd = make_reader<T, char_type>();
 6206|   383k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 383k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   383k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 383k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   383k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   383k|                return impl(rd, range, value);
 6213|   383k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   383k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   383k|    {
 6124|   383k|        const bool need_skipped_width =
 6125|   383k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 383k]
  |  Branch (6125:33): [True: 0, False: 383k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   383k|        auto it = rng.begin();
 6129|   383k|        std::ptrdiff_t prefix_width = 0;
 6130|   383k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 383k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   383k|        else {
 6138|   383k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   383k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   383k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   383k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   383k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.76k, False: 378k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.76k|    }                                                  \
  |  |  |  | 3671|   383k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   378k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   378k|            std::tie(it, prefix_width) = prefix_result;
 6140|   378k|        }
 6141|   378k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   378k|        std::ptrdiff_t value_width = 0;
 6145|   378k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 378k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   378k|        else {
 6161|   378k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   378k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   378k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   378k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 21.5k, False: 356k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  21.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  21.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  21.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  21.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  21.5k|    }                                                  \
  |  | 3671|   378k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   378k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   356k|                                             specs, value, loc));
 6163|       |
 6164|   356k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 356k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   356k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   356k|        std::ptrdiff_t postfix_width = 0;
 6173|   356k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 351k, False: 4.67k]
  ------------------
 6174|   351k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   351k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   351k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   351k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 351k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   351k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   351k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   351k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   351k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   351k|                                 value_width));
 6178|   351k|            std::tie(it, postfix_width) = postfix_result;
 6179|   351k|        }
 6180|       |
 6181|   356k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   356k|                                                 value_width, postfix_width);
 6183|   356k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 356k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   356k|        return it;
 6188|   356k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   938k|    {
 3691|   938k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   938k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   938k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   938k|        const std::ptrdiff_t sign_len =
 3694|   938k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 220k, False: 718k]
  ------------------
 3695|       |
 3696|   938k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   938k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   938k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   938k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   938k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.6k, False: 923k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.6k|    }                                                  \
  |  |  |  | 3671|   938k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   923k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   923k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   938k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   378k|    {
 4170|   378k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   378k|#if !SCN_DISABLE_LOCALE
 4173|   378k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 107k, False: 270k]
  ------------------
 4174|   107k|            return read_impl<Range>(
 4175|   107k|                range, rd,
 4176|   107k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   107k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|   107k|                },
 4179|   107k|                value, loc);
 4180|   107k|        }
 4181|   270k|#endif
 4182|       |
 4183|   270k|        return read_impl<Range>(
 4184|   270k|            range, rd,
 4185|   270k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   270k|                return r.read_source(SCN_FWD(args)...);
 4187|   270k|            },
 4188|   270k|            value);
 4189|   378k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   524k|    {
 4206|   524k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   524k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.4k, False: 497k]
  |  |  ------------------
  ------------------
 4208|  27.4k|            return unexpected(r.error());
 4209|  27.4k|        }
 4210|       |
 4211|   497k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   497k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   497k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   497k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   497k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 458, False: 496k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    458|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    458|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    458|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    458|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    458|    }                                                  \
  |  |  |  | 3671|   497k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   496k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   496k|        return ranges::next(range.begin(), n);
 4213|   497k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   107k|        : m_fptr([](storage fn,
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|   107k|              if constexpr (std::is_void_v<R>) {
  746|   107k|                  obj(static_cast<decltype(args)>(args)...);
  747|   107k|              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
  752|   107k|          m_storage(std::addressof(f))
  753|   107k|    {
  754|   107k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   107k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   107k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   107k|              else {
  749|   107k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   107k|              }
  751|   107k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   107k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   107k|        else if constexpr (std::is_object_v<T>) {
  688|   107k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   107k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|   107k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|   107k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|   107k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   107k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   107k|        {
  662|   107k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   270k|        : m_fptr([](storage fn,
  743|   270k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   270k|              cvref<T> obj = *get<T>(fn);
  745|   270k|              if constexpr (std::is_void_v<R>) {
  746|   270k|                  obj(static_cast<decltype(args)>(args)...);
  747|   270k|              }
  748|   270k|              else {
  749|   270k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   270k|              }
  751|   270k|          }),
  752|   270k|          m_storage(std::addressof(f))
  753|   270k|    {
  754|   270k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   270k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   270k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   270k|              else {
  749|   270k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   270k|              }
  751|   270k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   270k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   270k|        else if constexpr (std::is_object_v<T>) {
  688|   270k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   270k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   270k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   270k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   270k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   270k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   270k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   270k|        {
  662|   270k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   321k|    {
 4170|   321k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   321k|#if !SCN_DISABLE_LOCALE
 4173|   321k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 89.8k, False: 231k]
  ------------------
 4174|  89.8k|            return read_impl<Range>(
 4175|  89.8k|                range, rd,
 4176|  89.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  89.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  89.8k|                },
 4179|  89.8k|                value, loc);
 4180|  89.8k|        }
 4181|   231k|#endif
 4182|       |
 4183|   231k|        return read_impl<Range>(
 4184|   231k|            range, rd,
 4185|   231k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   231k|                return r.read_source(SCN_FWD(args)...);
 4187|   231k|            },
 4188|   231k|            value);
 4189|   321k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   456k|    {
 4206|   456k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   456k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   456k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.1k, False: 441k]
  |  |  ------------------
  ------------------
 4208|  15.1k|            return unexpected(r.error());
 4209|  15.1k|        }
 4210|       |
 4211|   441k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   441k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   441k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   441k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   441k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.1k, False: 427k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  14.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  14.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  14.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  14.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  14.1k|    }                                                  \
  |  |  |  | 3671|   441k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   427k|        return ranges::next(range.begin(), n);
 4213|   441k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  89.8k|        : m_fptr([](storage fn,
  743|  89.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.8k|              cvref<T> obj = *get<T>(fn);
  745|  89.8k|              if constexpr (std::is_void_v<R>) {
  746|  89.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  89.8k|              }
  748|  89.8k|              else {
  749|  89.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.8k|              }
  751|  89.8k|          }),
  752|  89.8k|          m_storage(std::addressof(f))
  753|  89.8k|    {
  754|  89.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  89.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  89.8k|              else {
  749|  89.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.8k|              }
  751|  89.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  89.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  89.8k|        else if constexpr (std::is_object_v<T>) {
  688|  89.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  89.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  89.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  89.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  89.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  89.8k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  89.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  89.8k|        {
  662|  89.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   231k|        : m_fptr([](storage fn,
  743|   231k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   231k|              cvref<T> obj = *get<T>(fn);
  745|   231k|              if constexpr (std::is_void_v<R>) {
  746|   231k|                  obj(static_cast<decltype(args)>(args)...);
  747|   231k|              }
  748|   231k|              else {
  749|   231k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   231k|              }
  751|   231k|          }),
  752|   231k|          m_storage(std::addressof(f))
  753|   231k|    {
  754|   231k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   231k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   231k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   231k|              else {
  749|   231k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   231k|              }
  751|   231k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   231k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   231k|        else if constexpr (std::is_object_v<T>) {
  688|   231k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   231k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   231k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   231k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   231k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   231k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   231k|        {
  662|   231k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  1.56M|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|  1.56M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|  1.56M|        else {
 1054|  1.56M|            return r.begin().contiguous_segment();
 1055|  1.56M|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|  1.56M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  1.38M|{
 2061|  1.38M|    auto it = range.begin();
 2062|  2.67M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 2.66M, False: 16.5k]
  ------------------
 2063|  2.66M|        const auto val =
 2064|  2.66M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  2.66M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.66M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.64M, False: 15.9k]
  |  |  ------------------
  ------------------
 2066|  2.64M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  2.64M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  2.64M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 1.37M, False: 1.27M]
  ------------------
 2069|  1.37M|                return it;
 2070|  1.37M|            }
 2071|  2.64M|        }
 2072|  1.28M|        it = val.iterator;
 2073|  1.28M|    }
 2074|       |
 2075|  16.5k|    return it;
 2076|  1.38M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  2.66M|{
 1899|  2.66M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  2.66M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.66M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  2.66M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  2.66M|    auto it = range.begin();
 1903|  2.66M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  2.66M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.66M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.9k, False: 2.64M]
  |  |  ------------------
  ------------------
 1906|  15.9k|        ++it;
 1907|  15.9k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  15.9k|        return {it, {}};
 1909|  15.9k|    }
 1910|       |
 1911|  2.64M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 2.62M, False: 22.5k]
  ------------------
 1912|  2.62M|        ++it;
 1913|  2.62M|        return {it, string_type(1, *range.begin())};
 1914|  2.62M|    }
 1915|       |
 1916|  22.5k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  22.5k|    return {it, string_type{range.begin(), it}};
 1918|  2.64M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  15.9k|{
 1155|  15.9k|    auto it = input.begin();
 1156|   160k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 159k, False: 1.38k]
  ------------------
 1157|   159k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 14.5k, False: 144k]
  ------------------
 1158|  14.5k|            break;
 1159|  14.5k|        }
 1160|   159k|    }
 1161|  15.9k|    return it;
 1162|  15.9k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  22.5k|    {
  283|  22.5k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  22.5k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  22.5k|    {
  252|  22.5k|        constexpr iter_difference_t<I> zero{0};
  253|  22.5k|        iter_difference_t<I> counter{0};
  254|       |
  255|  68.4k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 46.8k, False: 21.6k]
  |  Branch (255:30): [True: 45.8k, False: 981]
  ------------------
  256|  45.8k|            ++i;
  257|  45.8k|            ++counter;
  258|  45.8k|        }
  259|       |
  260|  22.5k|        return counter;
  261|  22.5k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  2.66M|    {
 1890|  2.66M|        return !codepoint.empty();
 1891|  2.66M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.38M|{
 2082|  1.38M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.38M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.56M|{
 2951|  1.56M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.56M, False: 0]
  ------------------
 2952|  1.56M|        auto it = read_while_classic_space(range);
 2953|  1.56M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.56M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.5k, False: 1.54M]
  |  |  ------------------
  ------------------
 2955|  16.5k|            return unexpected(e);
 2956|  16.5k|        }
 2957|       |
 2958|  1.54M|        return it;
 2959|  1.56M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.56M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.56M|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|  1.56M|    else {
 2126|  1.56M|        auto it = range.begin();
 2127|       |
 2128|  1.56M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|  1.56M|            auto seg = get_contiguous_beginning(range);
 2130|  1.56M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  1.56M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 170k, False: 1.38M]
  ------------------
 2132|   170k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   170k|            }
 2134|  1.38M|            ranges::advance(it, seg.size());
 2135|  1.38M|        }
 2136|       |
 2137|      0|        return read_while_code_point(
 2138|  1.56M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.56M|    }
 2140|  1.56M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.38M|        : m_fptr([](storage fn,
  743|  1.38M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.38M|              cvref<T> obj = *get<T>(fn);
  745|  1.38M|              if constexpr (std::is_void_v<R>) {
  746|  1.38M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.38M|              }
  748|  1.38M|              else {
  749|  1.38M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.38M|              }
  751|  1.38M|          }),
  752|  1.38M|          m_storage(std::addressof(f))
  753|  1.38M|    {
  754|  1.38M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  2.64M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.64M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.64M|              else {
  749|  2.64M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.64M|              }
  751|  2.64M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.64M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.64M|        else if constexpr (std::is_object_v<T>) {
  688|  2.64M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.64M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  2.64M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.38M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.38M|        {
  662|  1.38M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   670k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   670k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   670k|        auto beg = r.begin();
  990|   670k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 670k, False: 0]
  ------------------
  991|   670k|            return false;
  992|   670k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   670k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  4.65M|    {
  763|  4.65M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  4.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  4.65M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1856|  1.75M|{
 1857|  1.75M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|       |    if constexpr (ranges::sized_range<Range>) {
 1860|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|       |        if (sz < count) {
 1862|       |            return unexpected(eof_error::eof);
 1863|       |        }
 1864|       |
 1865|       |        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|  1.75M|    else {
 1868|  1.75M|        auto it = range.begin();
 1869|  1.75M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1869:13): [True: 1.05M, False: 698k]
  ------------------
 1870|  1.05M|            return ranges::next(it, count);
 1871|  1.05M|        }
 1872|       |
 1873|  2.70M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1873:36): [True: 2.06M, False: 643k]
  ------------------
 1874|  2.06M|            if (it == range.end()) {
  ------------------
  |  Branch (1874:17): [True: 55.4k, False: 2.00M]
  ------------------
 1875|  55.4k|                return unexpected(eof_error::eof);
 1876|  55.4k|            }
 1877|  2.06M|        }
 1878|       |
 1879|   643k|        return it;
 1880|   698k|    }
 1881|  1.75M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  1.75M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  1.75M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  1.75M|        else {
 1106|  1.75M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 1.75M, False: 0]
  ------------------
 1107|  1.75M|                return static_cast<size_t>(
 1108|  1.75M|                    r.begin().parent()->chars_available() -
 1109|  1.75M|                    r.begin().position());
 1110|  1.75M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  1.75M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  1.75M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.54M|        : m_fptr([](storage fn,
  743|  1.54M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.54M|              cvref<T> obj = *get<T>(fn);
  745|  1.54M|              if constexpr (std::is_void_v<R>) {
  746|  1.54M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.54M|              }
  748|  1.54M|              else {
  749|  1.54M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.54M|              }
  751|  1.54M|          }),
  752|  1.54M|          m_storage(std::addressof(f))
  753|  1.54M|    {
  754|  1.54M|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  2.32M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.32M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.32M|              else {
  749|  2.32M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.32M|              }
  751|  2.32M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  2.32M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.32M|        else if constexpr (std::is_object_v<T>) {
  688|  2.32M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.32M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.54M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.54M|        {
  662|  1.54M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   492k|    {
 6037|   492k|        const bool need_skipped_width =
 6038|   492k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 492k]
  |  Branch (6038:33): [True: 0, False: 492k]
  ------------------
 6039|   492k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   492k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 492k]
  ------------------
 6043|   492k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 492k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   492k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 492k, False: 0]
  |  Branch (6047:56): [True: 492k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   492k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 492k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   983k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   492k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   492k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   492k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   492k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.73k, False: 490k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.73k|    }                                                  \
  |  |  |  | 3671|   492k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   490k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   983k|                            make_eof_scan_error));
 6058|       |
 6059|   983k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 490k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   490k|            return result_type{it, 0};
 6067|   983k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   492k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  1.14M|{
 1976|  1.14M|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  1.14M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  1.14M|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|  1.14M|    else {
 1961|  1.14M|        auto first = range.begin();
 1962|  1.73M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 1.72M, False: 3.00k]
  ------------------
 1963|  1.72M|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 1.14M, False: 586k]
  ------------------
 1964|  1.14M|                return first;
 1965|  1.14M|            }
 1966|  1.72M|        }
 1967|  3.00k|        return first;
 1968|  1.14M|    }
 1969|  1.14M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   795k|    {
  108|   795k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   795k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   795k|    {
   94|   795k|        iter_difference_t<I> counter{0};
   95|  2.09M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.30M, False: 795k]
  ------------------
   96|  1.30M|            ++i;
   97|  1.30M|            ++counter;
   98|  1.30M|        }
   99|   795k|        return counter;
  100|   795k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1779|   236k|    {
 1780|   236k|        auto stdloc = loc.get<std::locale>();
 1781|   236k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1782|   236k|        grouping = numpunct.grouping();
 1783|   236k|        thousands_sep =
 1784|   236k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1784:13): [True: 0, False: 236k]
  ------------------
 1785|   236k|        decimal_point = numpunct.decimal_point();
 1786|   236k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1716|   236k|{
 1717|   236k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1717:9): [True: 236k, False: 0]
  ------------------
 1718|   236k|        return std::use_facet<Facet>(stdloc);
 1719|   236k|    }
 1720|      0|    stdloc = std::locale(stdloc, new Facet{});
 1721|      0|    return std::use_facet<Facet>(stdloc);
 1722|   236k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1845|  1.54M|{
 1846|  1.54M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.54M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.96k, False: 1.54M]
  |  |  ------------------
  ------------------
 1847|  1.96k|        return unexpected(e);
 1848|  1.96k|    }
 1849|       |
 1850|  1.54M|    return ranges::next(range.begin());
 1851|  1.54M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  2.39M|{
  950|  2.39M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.62k, False: 2.38M]
  |  |  ------------------
  ------------------
  951|  5.62k|        return eof_error::eof;
  952|  5.62k|    }
  953|  2.38M|    return eof_error::good;
  954|  2.39M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  3.53M|{
  944|  3.53M|    return is_range_eof(r.begin(), r.end());
  945|  3.53M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  3.53M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  3.53M|    {
  937|  3.53M|        return begin == end;
  938|  3.53M|    }
  939|  3.53M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.54M|    {
  296|  1.54M|        ++x;
  297|  1.54M|        return x;
  298|  1.54M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3140|   680k|{
 3141|   680k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   680k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 674k, False: 6.14k]
  ------------------
 3143|   674k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 673k, False: 70]
  ------------------
 3144|   673k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   673k|        }
 3146|     70|        return unexpected(eof_error::eof);
 3147|   674k|    }
 3148|       |
 3149|  6.14k|    auto& it = *r;
 3150|  6.14k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 5.08k, False: 1.05k]
  ------------------
 3151|  5.08k|        return std::pair{it, sign_type::minus_sign};
 3152|  5.08k|    }
 3153|  1.05k|    return std::pair{it, sign_type::plus_sign};
 3154|  6.14k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2271|  1.07M|{
 2272|  1.07M|    auto it = read_code_unit(range);
 2273|  1.07M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.07k, False: 1.07M]
  |  |  ------------------
  ------------------
 2274|  1.07k|        return unexpected(make_eof_parse_error(it.error()));
 2275|  1.07k|    }
 2276|       |
 2277|  2.15M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 2.15M, False: 1.05M]
  ------------------
 2278|  2.15M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 19.2k, False: 2.13M]
  ------------------
 2279|  19.2k|            return *it;
 2280|  19.2k|        }
 2281|  2.15M|    }
 2282|       |
 2283|  1.05M|    return unexpected(parse_error::error);
 2284|  1.07M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2230|  1.75M|{
 2231|  1.75M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|  1.75M|    else {
 2244|  1.75M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.75M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.75M|                return ch;
 2247|  1.75M|            }
 2248|  1.75M|            return static_cast<char_type>(ch +
 2249|  1.75M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.75M|        };
 2251|       |
 2252|  1.75M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.75M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.75M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.75M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 55.4k, False: 1.70M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  55.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  55.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  55.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  55.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  55.4k|    }                                                  \
  |  |  |  | 3671|  1.75M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.70M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.70M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.70M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.69M, False: 1.03k]
  |  |  ------------------
  ------------------
 2257|  1.70M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.70M|                    return ascii_tolower(a) ==
 2259|  1.70M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.70M|                }))) {
 2261|  1.69M|            return unexpected(parse_error::error);
 2262|  1.69M|        }
 2263|       |
 2264|  1.03k|        return it;
 2265|  1.70M|    }
 2266|  1.75M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.97M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.97M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 1.54M, False: 436k]
  |  Branch (2245:29): [True: 422k, False: 13.9k]
  ------------------
 2246|  1.96M|                return ch;
 2247|  1.96M|            }
 2248|  13.9k|            return static_cast<char_type>(ch +
 2249|  13.9k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.97M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2145|   464k|{
 2146|   464k|    auto it = read_code_unit(range);
 2147|   464k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   464k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 889, False: 464k]
  |  |  ------------------
  ------------------
 2148|    889|        return unexpected(make_eof_parse_error(it.error()));
 2149|    889|    }
 2150|       |
 2151|   464k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   464k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 461k, False: 2.12k]
  |  |  ------------------
  ------------------
 2152|   464k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   461k|        return unexpected(parse_error::error);
 2154|   461k|    }
 2155|       |
 2156|  2.12k|    return *it;
 2157|   464k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1995|  1.14M|{
 1996|  1.14M|    auto it = read_while_code_unit(range, pred);
 1997|  1.14M|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 666k, False: 478k]
  ------------------
 1998|   666k|        return unexpected(parse_error::error);
 1999|   666k|    }
 2000|   478k|    return it;
 2001|  1.14M|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|   460k|    {
 1621|   460k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|   460k|                           ranges::common_range<Range>) {
 1638|   460k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   460k|            auto end_seg = range.end().contiguous_segment();
 1640|   460k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.0k, False: 445k]
  |  |  ------------------
  ------------------
 1641|   460k|                             detail::to_address(end_seg.end()))) {
 1642|  15.0k|                auto& str = m_storage.emplace();
 1643|  15.0k|                str.reserve(range.end().position() - range.begin().position());
 1644|  15.0k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  15.0k|                m_view = string_view_type{str};
 1646|  15.0k|                return;
 1647|  15.0k|            }
 1648|       |
 1649|   445k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   445k|                                                            end_seg.data());
 1651|   445k|            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|   460k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  4.09M|    {
 1582|  4.09M|        return m_view;
 1583|  4.09M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  2.66M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   327k|    {
 6079|   327k|        const bool need_skipped_width =
 6080|   327k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 327k]
  |  Branch (6080:33): [True: 0, False: 327k]
  ------------------
 6081|   327k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   327k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 327k]
  ------------------
 6084|   327k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 327k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   327k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 327k, False: 0]
  ------------------
 6093|   327k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 327k]
  ------------------
 6094|   327k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   327k|        return result_type{rng.begin(), 0};
 6118|   327k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1856|  1.75M|{
 1857|  1.75M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1858|       |
 1859|  1.75M|    if constexpr (ranges::sized_range<Range>) {
 1860|  1.75M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1861|  1.75M|        if (sz < count) {
  ------------------
  |  Branch (1861:13): [True: 55.5k, False: 1.70M]
  ------------------
 1862|  55.5k|            return unexpected(eof_error::eof);
 1863|  55.5k|        }
 1864|       |
 1865|  1.70M|        return ranges::next(range.begin(), count);
 1866|       |    }
 1867|       |    else {
 1868|       |        auto it = range.begin();
 1869|       |        if (guaranteed_minimum_size(range) >= count) {
 1870|       |            return ranges::next(it, count);
 1871|       |        }
 1872|       |
 1873|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1874|       |            if (it == range.end()) {
 1875|       |                return unexpected(eof_error::eof);
 1876|       |            }
 1877|       |        }
 1878|       |
 1879|       |        return it;
 1880|       |    }
 1881|  1.75M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  1.96M|{
 1899|  1.96M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.96M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.96M|    auto it = range.begin();
 1903|  1.96M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.96M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.96M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.96M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.96M, False: 0]
  ------------------
 1912|  1.96M|        ++it;
 1913|  1.96M|        return {it, string_type(1, *range.begin())};
 1914|  1.96M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.96M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  3.72M|{
  944|  3.72M|    return is_range_eof(r.begin(), r.end());
  945|  3.72M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  3.72M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  3.72M|    {
  937|  3.72M|        return begin == end;
  938|  3.72M|    }
  939|  3.72M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   421k|    {
  190|   421k|        i = std::move(bound);
  191|   421k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  1.96M|    {
 1890|  1.96M|        return !codepoint.empty();
 1891|  1.96M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  1.76M|{
  950|  1.76M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.15k, False: 1.75M]
  |  |  ------------------
  ------------------
  951|  4.15k|        return eof_error::eof;
  952|  4.15k|    }
  953|  1.75M|    return eof_error::good;
  954|  1.76M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1845|   911k|{
 1846|   911k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   911k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 486, False: 911k]
  |  |  ------------------
  ------------------
 1847|    486|        return unexpected(e);
 1848|    486|    }
 1849|       |
 1850|   911k|    return ranges::next(range.begin());
 1851|   911k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   911k|    {
  296|   911k|        ++x;
  297|   911k|        return x;
  298|   911k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3140|   672k|{
 3141|   672k|    auto r = read_one_of_code_unit(range, "+-");
 3142|   672k|    if (!r) {
  ------------------
  |  Branch (3142:9): [True: 668k, False: 3.74k]
  ------------------
 3143|   668k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3143:13): [True: 668k, False: 24]
  ------------------
 3144|   668k|            return std::pair{range.begin(), sign_type::default_sign};
 3145|   668k|        }
 3146|     24|        return unexpected(eof_error::eof);
 3147|   668k|    }
 3148|       |
 3149|  3.74k|    auto& it = *r;
 3150|  3.74k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3150:9): [True: 2.87k, False: 869]
  ------------------
 3151|  2.87k|        return std::pair{it, sign_type::minus_sign};
 3152|  2.87k|    }
 3153|    869|    return std::pair{it, sign_type::plus_sign};
 3154|  3.74k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2271|   758k|{
 2272|   758k|    auto it = read_code_unit(range);
 2273|   758k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   758k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 238, False: 757k]
  |  |  ------------------
  ------------------
 2274|    238|        return unexpected(make_eof_parse_error(it.error()));
 2275|    238|    }
 2276|       |
 2277|  1.51M|    for (auto ch : str) {
  ------------------
  |  Branch (2277:18): [True: 1.51M, False: 749k]
  ------------------
 2278|  1.51M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2278:13): [True: 8.24k, False: 1.50M]
  ------------------
 2279|  8.24k|            return *it;
 2280|  8.24k|        }
 2281|  1.51M|    }
 2282|       |
 2283|   749k|    return unexpected(parse_error::error);
 2284|   757k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2230|  1.75M|{
 2231|  1.75M|    using char_type = detail::char_t<Range>;
 2232|       |
 2233|       |    if constexpr (ranges::contiguous_range<Range> &&
 2234|       |                  std::is_same_v<char_type, char>) {
 2235|       |        if (range.size() < str.size()) {
 2236|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2237|       |        }
 2238|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2239|       |            return unexpected(parse_error::error);
 2240|       |        }
 2241|       |        return ranges::next(range.begin(), str.size());
 2242|       |    }
 2243|  1.75M|    else {
 2244|  1.75M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.75M|            if (ch < 'A' || ch > 'Z') {
 2246|  1.75M|                return ch;
 2247|  1.75M|            }
 2248|  1.75M|            return static_cast<char_type>(ch +
 2249|  1.75M|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.75M|        };
 2251|       |
 2252|  1.75M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3672|  1.75M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.75M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.75M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 55.5k, False: 1.70M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  55.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  55.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  55.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  55.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  55.5k|    }                                                  \
  |  |  |  | 3671|  1.75M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2253|  1.70M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2254|  1.70M|                        .transform_error(make_eof_parse_error));
 2255|       |
 2256|  1.70M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.70M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.70M, False: 1.03k]
  |  |  ------------------
  ------------------
 2257|  1.70M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2258|  1.70M|                    return ascii_tolower(a) ==
 2259|  1.70M|                           static_cast<detail::char_t<Range>>(b);
 2260|  1.70M|                }))) {
 2261|  1.70M|            return unexpected(parse_error::error);
 2262|  1.70M|        }
 2263|       |
 2264|  1.03k|        return it;
 2265|  1.70M|    }
 2266|  1.75M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2244|  1.98M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2245|  1.98M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2245:17): [True: 1.54M, False: 438k]
  |  Branch (2245:29): [True: 424k, False: 14.0k]
  ------------------
 2246|  1.96M|                return ch;
 2247|  1.96M|            }
 2248|  14.0k|            return static_cast<char_type>(ch +
 2249|  14.0k|                                          static_cast<char_type>('a' - 'A'));
 2250|  1.98M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2145|   153k|{
 2146|   153k|    auto it = read_code_unit(range);
 2147|   153k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 248, False: 153k]
  |  |  ------------------
  ------------------
 2148|    248|        return unexpected(make_eof_parse_error(it.error()));
 2149|    248|    }
 2150|       |
 2151|   153k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 152k, False: 838]
  |  |  ------------------
  ------------------
 2152|   153k|                     static_cast<detail::char_t<Range>>(ch))) {
 2153|   152k|        return unexpected(parse_error::error);
 2154|   152k|    }
 2155|       |
 2156|    838|    return *it;
 2157|   153k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|   403k|{
 1976|   403k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|   403k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|   403k|{
 1957|   403k|    if constexpr (ranges::common_range<Range>) {
 1958|   403k|        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|       |    else {
 1961|       |        auto first = range.begin();
 1962|       |        for (; first != range.end(); ++first) {
 1963|       |            if (pred(*first)) {
 1964|       |                return first;
 1965|       |            }
 1966|       |        }
 1967|       |        return first;
 1968|       |    }
 1969|   403k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   670k|{
 2951|   670k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 670k, False: 0]
  ------------------
 2952|   670k|        auto it = read_while_classic_space(range);
 2953|   670k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   670k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   670k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.23k, False: 667k]
  |  |  ------------------
  ------------------
 2955|  3.23k|            return unexpected(e);
 2956|  3.23k|        }
 2957|       |
 2958|   667k|        return it;
 2959|   670k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   670k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   670k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|   670k|    else {
 2126|   670k|        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|   670k|        return read_while_code_point(
 2138|   670k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   670k|    }
 2140|   670k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|   670k|{
 2082|   670k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   670k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  1.11M|{
 2061|  1.11M|    auto it = range.begin();
 2062|  2.24M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.96M, False: 279k]
  ------------------
 2063|  1.96M|        const auto val =
 2064|  1.96M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.96M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.96M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.96M, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.96M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.96M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.96M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 836k, False: 1.13M]
  ------------------
 2069|   836k|                return it;
 2070|   836k|            }
 2071|  1.96M|        }
 2072|  1.13M|        it = val.iterator;
 2073|  1.13M|    }
 2074|       |
 2075|   279k|    return it;
 2076|  1.11M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   670k|        : m_fptr([](storage fn,
  743|   670k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   670k|              cvref<T> obj = *get<T>(fn);
  745|   670k|              if constexpr (std::is_void_v<R>) {
  746|   670k|                  obj(static_cast<decltype(args)>(args)...);
  747|   670k|              }
  748|   670k|              else {
  749|   670k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   670k|              }
  751|   670k|          }),
  752|   670k|          m_storage(std::addressof(f))
  753|   670k|    {
  754|   670k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  1.14M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.14M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.14M|              else {
  749|  1.14M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.14M|              }
  751|  1.14M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  1.14M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.14M|        else if constexpr (std::is_object_v<T>) {
  688|  1.14M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.14M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  1.14M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   670k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   670k|        {
  662|   670k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.51M|    {
  304|  1.51M|        ranges::advance(x, n);
  305|  1.51M|        return x;
  306|  1.51M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.51M|    {
  268|  1.51M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.51M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.51M|    {
  181|  4.84M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 3.33M, False: 1.51M]
  ------------------
  182|  3.33M|            ++i;
  183|  3.33M|        }
  184|  1.51M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   157k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   157k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   157k|            auto rd = make_reader<T, char_type>();
 6206|   157k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 157k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   157k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 157k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   157k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   157k|                return impl(rd, range, value);
 6213|   157k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   157k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|   986k|    {
 3040|   986k|        reader_error_handler eh{};
 3041|   986k|        get_derived().check_specs_impl(specs, eh);
 3042|   986k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   986k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 986k]
  |  |  ------------------
  ------------------
 3043|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|      0|        }
 3045|   986k|        return {};
 3046|   986k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3050|   986k|    {
 3051|   986k|        return static_cast<Derived&>(*this);
 3052|   986k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4144|   986k|    {
 4145|   986k|        detail::check_float_type_specs(specs, eh);
 4146|   986k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   157k|    {
 6124|   157k|        const bool need_skipped_width =
 6125|   157k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 157k]
  |  Branch (6125:33): [True: 0, False: 157k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   157k|        auto it = rng.begin();
 6129|   157k|        std::ptrdiff_t prefix_width = 0;
 6130|   157k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 157k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   157k|        else {
 6138|   157k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   157k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 852, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    852|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    852|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    852|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    852|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    852|    }                                                  \
  |  |  |  | 3671|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   157k|            std::tie(it, prefix_width) = prefix_result;
 6140|   157k|        }
 6141|   157k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   157k|        std::ptrdiff_t value_width = 0;
 6145|   157k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 157k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   157k|        else {
 6161|   157k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.8k, False: 103k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  53.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  53.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  53.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  53.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  53.8k|    }                                                  \
  |  | 3671|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   103k|                                             specs, value, loc));
 6163|       |
 6164|   103k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 103k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   103k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   103k|        std::ptrdiff_t postfix_width = 0;
 6173|   103k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 102k, False: 358]
  ------------------
 6174|   102k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 102k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   102k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   102k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   102k|                                 value_width));
 6178|   102k|            std::tie(it, postfix_width) = postfix_result;
 6179|   102k|        }
 6180|       |
 6181|   103k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   103k|                                                 value_width, postfix_width);
 6183|   103k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 103k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   103k|        return it;
 6188|   103k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3034|  1.99M|    {
 3035|  1.99M|        return true;
 3036|  1.99M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4216|   980k|    {
 4217|   980k|        unsigned options{};
 4218|   980k|        if (specs.localized) {
  ------------------
  |  Branch (4218:13): [True: 236k, False: 744k]
  ------------------
 4219|   236k|            options |= float_reader_base::allow_thsep;
 4220|   236k|        }
 4221|       |
 4222|   980k|        SCN_GCC_COMPAT_PUSH
 4223|   980k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4224|       |
 4225|   980k|        switch (specs.type) {
 4226|   200k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4226:13): [True: 200k, False: 780k]
  ------------------
 4227|   200k|                return options | float_reader_base::allow_fixed;
 4228|       |
 4229|  66.8k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4229:13): [True: 66.8k, False: 913k]
  ------------------
 4230|  66.8k|                return options | float_reader_base::allow_scientific;
 4231|       |
 4232|   253k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4232:13): [True: 253k, False: 727k]
  ------------------
 4233|   253k|                return options | float_reader_base::allow_hex;
 4234|       |
 4235|   224k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4235:13): [True: 224k, False: 756k]
  ------------------
 4236|   224k|                return options | float_reader_base::allow_scientific |
 4237|   224k|                       float_reader_base::allow_fixed;
 4238|       |
 4239|   236k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4239:13): [True: 236k, False: 744k]
  ------------------
 4240|   236k|                return options | float_reader_base::allow_scientific |
 4241|   236k|                       float_reader_base::allow_fixed |
 4242|   236k|                       float_reader_base::allow_hex;
 4243|       |
 4244|      0|            default:
  ------------------
  |  Branch (4244:13): [True: 0, False: 980k]
  ------------------
 4245|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4246|   980k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4247|   980k|        }
 4248|       |
 4249|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4250|   980k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3659|   980k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1770|  1.33M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1531|  2.66M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3690|   323k|    {
 3691|   323k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   323k|        const std::ptrdiff_t sign_len =
 3694|   323k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 1.40k, False: 321k]
  ------------------
 3695|       |
 3696|   323k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   323k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   323k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   323k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 40.2k, False: 283k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  40.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  40.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  40.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  40.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  40.2k|    }                                                  \
  |  |  |  | 3671|   323k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   283k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   323k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4056|  1.03M|    {
 4057|  1.03M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4057:13): [True: 1.03M, False: 0]
  ------------------
 4058|  1.03M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4058:13): [True: 1.03M, False: 0]
  ------------------
 4059|  1.03M|            return;
 4060|  1.03M|        }
 4061|       |
 4062|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4063|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4063:13): [True: 0, False: 0]
  ------------------
 4064|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4064:27): [True: 0, False: 0]
  ------------------
 4065|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4065:21): [True: 0, False: 0]
  ------------------
 4066|      0|                    ch = CharT{'.'};
 4067|      0|                }
 4068|      0|            }
 4069|      0|        }
 4070|       |
 4071|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4071:13): [True: 0, False: 0]
  ------------------
 4072|      0|            return;
 4073|      0|        }
 4074|       |
 4075|      0|        auto first =
 4076|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4077|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4077:13): [True: 0, False: 0]
  ------------------
 4078|      0|            return;
 4079|      0|        }
 4080|       |
 4081|      0|        m_thsep_indices.push_back(
 4082|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4083|       |
 4084|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4084:31): [True: 0, False: 0]
  ------------------
 4085|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4085:17): [True: 0, False: 0]
  ------------------
 4086|      0|                *first++ = std::move(*it);
 4087|      0|            }
 4088|      0|            else {
 4089|      0|                m_thsep_indices.push_back(
 4090|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4091|      0|            }
 4092|      0|        }
 4093|       |
 4094|      0|        str.erase(first, str.end());
 4095|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|  1.09M|    {
 1587|  1.09M|        return m_storage.has_value();
 1588|  1.09M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|   643k|    {
 1592|   643k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|   643k|        return *m_storage;
 1594|   643k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   157k|    {
 4170|   157k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   157k|#if !SCN_DISABLE_LOCALE
 4173|   157k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 36.2k, False: 120k]
  ------------------
 4174|  36.2k|            return read_impl<Range>(
 4175|  36.2k|                range, rd,
 4176|  36.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  36.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  36.2k|                },
 4179|  36.2k|                value, loc);
 4180|  36.2k|        }
 4181|   120k|#endif
 4182|       |
 4183|   120k|        return read_impl<Range>(
 4184|   120k|            range, rd,
 4185|   120k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   120k|                return r.read_source(SCN_FWD(args)...);
 4187|   120k|            },
 4188|   120k|            value);
 4189|   157k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   211k|    {
 4206|   211k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   211k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 67.8k, False: 143k]
  |  |  ------------------
  ------------------
 4208|  67.8k|            return unexpected(r.error());
 4209|  67.8k|        }
 4210|       |
 4211|   143k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   143k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.13k, False: 141k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.13k|    }                                                  \
  |  |  |  | 3671|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   141k|        return ranges::next(range.begin(), n);
 4213|   143k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   667k|    {
  763|   667k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   667k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   667k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  36.2k|        : m_fptr([](storage fn,
  743|  36.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.2k|              cvref<T> obj = *get<T>(fn);
  745|  36.2k|              if constexpr (std::is_void_v<R>) {
  746|  36.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  36.2k|              }
  748|  36.2k|              else {
  749|  36.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.2k|              }
  751|  36.2k|          }),
  752|  36.2k|          m_storage(std::addressof(f))
  753|  36.2k|    {
  754|  36.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  36.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  36.2k|              else {
  749|  36.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.2k|              }
  751|  36.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  36.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  36.2k|        else if constexpr (std::is_object_v<T>) {
  688|  36.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  36.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  36.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  36.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  36.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  36.2k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3678|   117k|    {
 3679|   117k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   117k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   117k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 117k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   117k|        return read_source_impl(range);
 3685|   117k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3704|   667k|    {
 3705|   667k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   667k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   667k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   667k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   667k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 667k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   667k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   667k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   667k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   667k|        auto it = sign_result.first;
 3708|   667k|        m_sign = sign_result.second;
 3709|       |
 3710|   667k|        auto digits_begin = it;
 3711|   667k|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|       |                      ranges::sized_range<Range>) {
 3714|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3715|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|       |                SCN_TRY_ASSIGN(
 3717|       |                    it,
 3718|       |                    do_read_source_impl(
 3719|       |                        r,
 3720|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|       |            }
 3723|       |            else {
 3724|       |                auto cb = [&](const auto& rr)
 3725|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|       |                    auto res = read_all(rr);
 3727|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|       |                        return unexpected_scan_error(
 3729|       |                            scan_error::invalid_scanned_value,
 3730|       |                            "Invalid float value");
 3731|       |                    }
 3732|       |                    return res;
 3733|       |                };
 3734|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3735|       |            }
 3736|       |        }
 3737|   667k|        else {
 3738|   667k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|   667k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   667k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   667k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 206k, False: 460k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|   206k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|   206k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|   206k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|   206k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|   206k|    }                                                  \
  |  | 3671|   667k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   667k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3739|   460k|                it,
 3740|   460k|                do_read_source_impl(
 3741|   460k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|   460k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|   460k|        }
 3744|       |
 3745|   667k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   667k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   667k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   460k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 460k, False: 0]
  |  Branch (3747:48): [True: 460k, False: 0]
  ------------------
 3748|   460k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 460k, False: 0]
  ------------------
 3749|   460k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 460k, False: 0]
  ------------------
 3750|   460k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   460k|        }
 3752|       |
 3753|   460k|        handle_separators();
 3754|       |
 3755|   460k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 460k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   460k|        return it;
 3768|   460k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3999|   667k|    {
 4000|   667k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   667k|        const bool allowed_nonhex =
 4002|   667k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   667k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   667k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 667k, False: 0]
  |  Branch (4005:45): [True: 0, False: 667k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   667k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 667k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   667k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 667k, False: 0]
  |  Branch (4014:45): [True: 0, False: 667k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   667k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 667k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   667k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 421k, False: 245k]
  |  Branch (4021:28): [True: 126k, False: 294k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   126k|            auto it = range.begin();
 4025|       |
 4026|   126k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 306, False: 126k]
  ------------------
 4027|    306|                m_kind = float_kind::hex_with_prefix;
 4028|    306|                it = *r;
 4029|    306|            }
 4030|   126k|            else {
 4031|   126k|                m_kind = float_kind::hex_without_prefix;
 4032|   126k|            }
 4033|       |
 4034|   126k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   126k|        }
 4036|   540k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 245k, False: 294k]
  |  Branch (4036:29): [True: 245k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   245k|            m_kind = float_kind::generic;
 4040|   245k|            return read_regular_float(range);
 4041|   245k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   294k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 725, False: 294k]
  |  |  ------------------
  ------------------
 4047|    725|            m_kind = float_kind::hex_with_prefix;
 4048|    725|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    725|        }
 4050|       |
 4051|   294k|        m_kind = float_kind::generic;
 4052|   294k|        return read_regular(range);
 4053|   294k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3810|   667k|    {
 3811|   667k|        auto it = range.begin();
 3812|   667k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 667k, False: 0]
  ------------------
 3813|   667k|            return unexpected(r.error());
 3814|   667k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3833|   667k|    {
 3834|   667k|        auto it = range.begin();
 3835|   667k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 667k, False: 0]
  ------------------
 3836|   667k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   667k|                scan_error::invalid_scanned_value,
 3838|   667k|                "Invalid floating-point NaN value"));
 3839|   667k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3803|   421k|    {
 3804|   421k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   421k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3903|   127k|    {
 3904|   127k|        auto it = range.begin();
 3905|       |
 3906|   127k|        std::ptrdiff_t digits_count = 0;
 3907|   127k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3908|   127k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.1k, False: 95.0k]
  |  |  ------------------
  ------------------
 3909|  32.1k|            return r.transform_error(map_parse_error_to_scan_error(
 3910|  32.1k|                scan_error::invalid_scanned_value,
 3911|  32.1k|                "Invalid hexadecimal floating-point value"));
 3912|  32.1k|        }
 3913|  95.0k|        else {
 3914|  95.0k|            digits_count += ranges::distance(it, *r);
 3915|  95.0k|            it = *r;
 3916|  95.0k|        }
 3917|       |
 3918|  95.0k|        m_integral_part_length = digits_count;
 3919|  95.0k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3919:18): [True: 396, False: 94.6k]
  ------------------
 3920|  95.0k|                                             m_locale_options.decimal_point)) {
 3921|    396|            it = *r;
 3922|    396|        }
 3923|       |
 3924|  95.0k|        if (auto r =
  ------------------
  |  Branch (3924:18): [True: 318, False: 94.7k]
  ------------------
 3925|  95.0k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3926|    318|            digits_count += ranges::distance(it, *r);
 3927|    318|            it = *r;
 3928|    318|        }
 3929|       |
 3930|  95.0k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  95.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 95.0k]
  |  |  ------------------
  ------------------
 3931|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3932|      0|                                         "No significand digits in hexfloat");
 3933|      0|        }
 3934|       |
 3935|  95.0k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3936|       |
 3937|  95.0k|        return it;
 3938|  95.0k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3788|   222k|    {
 3789|   222k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   222k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 222k]
  |  |  |  Branch (859:45): [True: 0, False: 222k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3790|   222k|                         thsep_allowed)) {
 3791|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3792|      0|                return char_to_int(ch) < 16 ||
 3793|      0|                       ch == m_locale_options.thousands_sep;
 3794|      0|            });
 3795|      0|        }
 3796|       |
 3797|   222k|        return read_while1_code_unit(
 3798|   222k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3799|   222k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   222k|        : m_fptr([](storage fn,
  743|   222k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   222k|              cvref<T> obj = *get<T>(fn);
  745|   222k|              if constexpr (std::is_void_v<R>) {
  746|   222k|                  obj(static_cast<decltype(args)>(args)...);
  747|   222k|              }
  748|   222k|              else {
  749|   222k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   222k|              }
  751|   222k|          }),
  752|   222k|          m_storage(std::addressof(f))
  753|   222k|    {
  754|   222k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   343k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   343k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   343k|              else {
  749|   343k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   343k|              }
  751|   343k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   343k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   343k|        else if constexpr (std::is_object_v<T>) {
  688|   343k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   343k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3798|   343k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   222k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   222k|        {
  662|   222k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3875|   397k|    {
 3876|   397k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 13.0k, False: 384k]
  ------------------
 3877|  13.0k|            auto beg_exp_it = range.begin();
 3878|  13.0k|            auto it = *r;
 3879|       |
 3880|  13.0k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 12.9k, False: 70]
  ------------------
 3881|  13.0k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  12.9k|                it = r_sign->first;
 3883|  12.9k|            }
 3884|       |
 3885|  13.0k|            if (auto r_exp = read_while1_code_unit(
 3886|  13.0k|                    ranges::subrange{it, range.end()},
 3887|  13.0k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  13.0k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.40k, False: 11.6k]
  |  |  ------------------
  ------------------
 3889|  1.40k|                it = beg_exp_it;
 3890|  1.40k|            }
 3891|  11.6k|            else {
 3892|  11.6k|                it = *r_exp;
 3893|  11.6k|            }
 3894|       |
 3895|  13.0k|            return it;
 3896|  13.0k|        }
 3897|   384k|        return range.begin();
 3898|   397k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  13.0k|        : m_fptr([](storage fn,
  743|  13.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.0k|              cvref<T> obj = *get<T>(fn);
  745|  13.0k|              if constexpr (std::is_void_v<R>) {
  746|  13.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.0k|              }
  748|  13.0k|              else {
  749|  13.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.0k|              }
  751|  13.0k|          }),
  752|  13.0k|          m_storage(std::addressof(f))
  753|  13.0k|    {
  754|  13.0k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  44.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  44.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  44.9k|              else {
  749|  44.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  44.9k|              }
  751|  44.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  44.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  44.9k|        else if constexpr (std::is_object_v<T>) {
  688|  44.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  44.9k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  44.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  13.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  13.0k|        {
  662|  13.0k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3943|   539k|    {
 3944|   539k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   539k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 439k, False: 100k]
  |  Branch (3945:50): [True: 33.4k, False: 406k]
  ------------------
 3946|       |
 3947|   539k|        auto it = ranges::begin(range);
 3948|   539k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   539k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   539k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   539k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 170k, False: 369k]
  |  |  ------------------
  ------------------
 3952|   170k|            return r.transform_error(
 3953|   170k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|   170k|                                              "Invalid floating-point value"));
 3955|   170k|        }
 3956|   369k|        else {
 3957|   369k|            digits_count += ranges::distance(it, *r);
 3958|   369k|            it = *r;
 3959|   369k|        }
 3960|       |
 3961|   369k|        m_integral_part_length = digits_count;
 3962|   369k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 1.73k, False: 368k]
  ------------------
 3963|   369k|                                             m_locale_options.decimal_point)) {
 3964|  1.73k|            it = *r;
 3965|  1.73k|        }
 3966|       |
 3967|   369k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 1.39k, False: 368k]
  ------------------
 3968|   369k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|  1.39k|            digits_count += ranges::distance(it, *r);
 3970|  1.39k|            it = *r;
 3971|  1.39k|        }
 3972|       |
 3973|   369k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 369k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   369k|        auto beg_exp_it = it;
 3979|   369k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 302k, False: 67.7k]
  ------------------
 3980|   302k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|   302k|        }
 3982|   369k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 5.13k, False: 364k]
  |  Branch (3982:29): [True: 4.20k, False: 936]
  ------------------
 3983|  4.20k|            return unexpected_scan_error(
 3984|  4.20k|                scan_error::invalid_scanned_value,
 3985|  4.20k|                "No exponent given to scientific float");
 3986|  4.20k|        }
 3987|       |
 3988|   365k|        m_kind =
 3989|   365k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 354k, False: 11.5k]
  ------------------
 3990|       |
 3991|   365k|        return it;
 3992|   369k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3773|   909k|    {
 3774|   909k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   909k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 909k]
  |  |  |  Branch (859:45): [True: 0, False: 909k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   909k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   909k|        return read_while1_code_unit(
 3783|   909k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   909k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   909k|        : m_fptr([](storage fn,
  743|   909k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   909k|              cvref<T> obj = *get<T>(fn);
  745|   909k|              if constexpr (std::is_void_v<R>) {
  746|   909k|                  obj(static_cast<decltype(args)>(args)...);
  747|   909k|              }
  748|   909k|              else {
  749|   909k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   909k|              }
  751|   909k|          }),
  752|   909k|          m_storage(std::addressof(f))
  753|   909k|    {
  754|   909k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.34M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.34M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.34M|              else {
  749|  1.34M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.34M|              }
  751|  1.34M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.34M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.34M|        else if constexpr (std::is_object_v<T>) {
  688|  1.34M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.34M|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3783|  1.34M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   909k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   909k|        {
  662|   909k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1576|   460k|    {
 1577|   460k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   460k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   460k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  36.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  36.2k|        {
  662|  36.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   120k|        : m_fptr([](storage fn,
  743|   120k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   120k|              cvref<T> obj = *get<T>(fn);
  745|   120k|              if constexpr (std::is_void_v<R>) {
  746|   120k|                  obj(static_cast<decltype(args)>(args)...);
  747|   120k|              }
  748|   120k|              else {
  749|   120k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   120k|              }
  751|   120k|          }),
  752|   120k|          m_storage(std::addressof(f))
  753|   120k|    {
  754|   120k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   120k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   120k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   120k|              else {
  749|   120k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   120k|              }
  751|   120k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   120k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   120k|        else if constexpr (std::is_object_v<T>) {
  688|   120k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   120k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   120k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   120k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   120k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3664|   549k|    {
 3665|   549k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   549k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 549k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   549k|        return read_source_impl(range);
 3671|   549k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   120k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   120k|        {
  662|   120k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   157k|    {
 4170|   157k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   157k|#if !SCN_DISABLE_LOCALE
 4173|   157k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 36.2k, False: 120k]
  ------------------
 4174|  36.2k|            return read_impl<Range>(
 4175|  36.2k|                range, rd,
 4176|  36.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  36.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  36.2k|                },
 4179|  36.2k|                value, loc);
 4180|  36.2k|        }
 4181|   120k|#endif
 4182|       |
 4183|   120k|        return read_impl<Range>(
 4184|   120k|            range, rd,
 4185|   120k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   120k|                return r.read_source(SCN_FWD(args)...);
 4187|   120k|            },
 4188|   120k|            value);
 4189|   157k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   211k|    {
 4206|   211k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   211k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 31.8k, False: 179k]
  |  |  ------------------
  ------------------
 4208|  31.8k|            return unexpected(r.error());
 4209|  31.8k|        }
 4210|       |
 4211|   179k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   179k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   179k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   179k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.1k, False: 141k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  38.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  38.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  38.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  38.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  38.1k|    }                                                  \
  |  |  |  | 3671|   179k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   141k|        return ranges::next(range.begin(), n);
 4213|   179k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   667k|    {
  763|   667k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   667k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   667k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  36.2k|        : m_fptr([](storage fn,
  743|  36.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.2k|              cvref<T> obj = *get<T>(fn);
  745|  36.2k|              if constexpr (std::is_void_v<R>) {
  746|  36.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  36.2k|              }
  748|  36.2k|              else {
  749|  36.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.2k|              }
  751|  36.2k|          }),
  752|  36.2k|          m_storage(std::addressof(f))
  753|  36.2k|    {
  754|  36.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  36.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  36.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  36.2k|              else {
  749|  36.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  36.2k|              }
  751|  36.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  36.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  36.2k|        else if constexpr (std::is_object_v<T>) {
  688|  36.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  36.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  36.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  36.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  36.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  36.2k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3678|   118k|    {
 3679|   118k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3680|   118k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   118k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 3681|      0|            m_locale_options.thousands_sep = CharT{0};
 3682|      0|        }
 3683|       |
 3684|   118k|        return read_source_impl(range);
 3685|   118k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3704|   667k|    {
 3705|   667k|        SCN_TRY(sign_result,
  ------------------
  |  | 3672|   667k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   667k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   667k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   667k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 667k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   667k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   667k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3706|   667k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3707|   667k|        auto it = sign_result.first;
 3708|   667k|        m_sign = sign_result.second;
 3709|       |
 3710|   667k|        auto digits_begin = it;
 3711|   667k|        auto r = ranges::subrange{it, range.end()};
 3712|       |        if constexpr (ranges::contiguous_range<Range> &&
 3713|   667k|                      ranges::sized_range<Range>) {
 3714|   667k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 667k]
  |  |  |  Branch (859:45): [True: 0, False: 667k]
  |  |  |  Branch (859:45): [True: 0, False: 667k]
  |  |  ------------------
  ------------------
 3715|   667k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3716|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|      0|    }                                                  \
  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3717|      0|                    it,
 3718|      0|                    do_read_source_impl(
 3719|      0|                        r,
 3720|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3721|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3722|      0|            }
 3723|   667k|            else {
 3724|   667k|                auto cb = [&](const auto& rr)
 3725|   667k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   667k|                    auto res = read_all(rr);
 3727|   667k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3728|   667k|                        return unexpected_scan_error(
 3729|   667k|                            scan_error::invalid_scanned_value,
 3730|   667k|                            "Invalid float value");
 3731|   667k|                    }
 3732|   667k|                    return res;
 3733|   667k|                };
 3734|   667k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3667|   667k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   667k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   667k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 96.3k, False: 571k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  96.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  96.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  96.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  96.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  96.3k|    }                                                  \
  |  | 3671|   667k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   667k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3735|   571k|            }
 3736|       |        }
 3737|       |        else {
 3738|       |            SCN_TRY_ASSIGN(
 3739|       |                it,
 3740|       |                do_read_source_impl(
 3741|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3742|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3743|       |        }
 3744|       |
 3745|   667k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   667k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   667k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|       |
 3747|   571k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3747:13): [True: 571k, False: 0]
  |  Branch (3747:48): [True: 571k, False: 0]
  ------------------
 3748|   571k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3748:13): [True: 571k, False: 0]
  ------------------
 3749|   571k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3749:13): [True: 571k, False: 0]
  ------------------
 3750|   571k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3751|   571k|        }
 3752|       |
 3753|   571k|        handle_separators();
 3754|       |
 3755|   571k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3755:13): [True: 0, False: 571k]
  ------------------
 3756|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3757|      0|            if (auto e = check_thsep_grouping(
 3758|      0|                    ranges::subrange{
 3759|      0|                        digits_begin,
 3760|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3761|      0|                    m_thsep_indices, m_locale_options.grouping);
 3762|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3763|      0|                return unexpected(e);
 3764|      0|            }
 3765|      0|        }
 3766|       |
 3767|   571k|        return it;
 3768|   571k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3810|   667k|    {
 3811|   667k|        auto it = range.begin();
 3812|   667k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3812:73): [True: 667k, False: 0]
  ------------------
 3813|   667k|            return unexpected(r.error());
 3814|   667k|        }
 3815|      0|        else {
 3816|      0|            it = *r;
 3817|      0|        }
 3818|       |
 3819|      0|        if (auto r = read_matching_string_classic_nocase(
 3820|      0|                ranges::subrange{it, range.end()}, "inity");
 3821|      0|            !r) {
  ------------------
  |  Branch (3821:13): [True: 0, False: 0]
  ------------------
 3822|      0|            m_kind = float_kind::inf_short;
 3823|      0|            return it;
 3824|      0|        }
 3825|      0|        else {
 3826|      0|            m_kind = float_kind::inf_long;
 3827|      0|            return *r;
 3828|      0|        }
 3829|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3833|   667k|    {
 3834|   667k|        auto it = range.begin();
 3835|   667k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3835:73): [True: 667k, False: 0]
  ------------------
 3836|   667k|            return r.transform_error(map_parse_error_to_scan_error(
 3837|   667k|                scan_error::invalid_scanned_value,
 3838|   667k|                "Invalid floating-point NaN value"));
 3839|   667k|        }
 3840|      0|        else {
 3841|      0|            it = *r;
 3842|      0|        }
 3843|       |
 3844|      0|        if (auto r =
 3845|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3846|      0|            !r) {
  ------------------
  |  Branch (3846:13): [True: 0, False: 0]
  ------------------
 3847|      0|            m_kind = float_kind::nan_simple;
 3848|      0|            return it;
 3849|      0|        }
 3850|      0|        else {
 3851|      0|            it = *r;
 3852|      0|        }
 3853|       |
 3854|      0|        auto payload_beg_it = it;
 3855|      0|        it = read_while_code_unit(
 3856|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3857|      0|                return is_ascii_char(ch) &&
 3858|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3859|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3860|      0|            });
 3861|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3862|       |
 3863|      0|        m_kind = float_kind::nan_with_payload;
 3864|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3864:18): [True: 0, False: 0]
  ------------------
 3865|      0|                                             ')')) {
 3866|      0|            return *r;
 3867|      0|        }
 3868|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3869|      0|                                     "Invalid floating-point NaN payload");
 3870|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3803|   421k|    {
 3804|   421k|        return read_matching_string_classic_nocase(range, "0x");
 3805|   421k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1995|   403k|{
 1996|   403k|    auto it = read_while_code_unit(range, pred);
 1997|   403k|    if (it == range.begin()) {
  ------------------
  |  Branch (1997:9): [True: 245k, False: 158k]
  ------------------
 1998|   245k|        return unexpected(parse_error::error);
 1999|   245k|    }
 2000|   158k|    return it;
 2001|   403k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3875|  85.9k|    {
 3876|  85.9k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3876:18): [True: 4.50k, False: 81.4k]
  ------------------
 3877|  4.50k|            auto beg_exp_it = range.begin();
 3878|  4.50k|            auto it = *r;
 3879|       |
 3880|  4.50k|            if (auto r_sign =
  ------------------
  |  Branch (3880:22): [True: 4.47k, False: 24]
  ------------------
 3881|  4.50k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3882|  4.47k|                it = r_sign->first;
 3883|  4.47k|            }
 3884|       |
 3885|  4.50k|            if (auto r_exp = read_while1_code_unit(
 3886|  4.50k|                    ranges::subrange{it, range.end()},
 3887|  4.50k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3888|  4.50k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  4.50k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 540, False: 3.96k]
  |  |  ------------------
  ------------------
 3889|    540|                it = beg_exp_it;
 3890|    540|            }
 3891|  3.96k|            else {
 3892|  3.96k|                it = *r_exp;
 3893|  3.96k|            }
 3894|       |
 3895|  4.50k|            return it;
 3896|  4.50k|        }
 3897|  81.4k|        return range.begin();
 3898|  85.9k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  4.50k|        : m_fptr([](storage fn,
  743|  4.50k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.50k|              cvref<T> obj = *get<T>(fn);
  745|  4.50k|              if constexpr (std::is_void_v<R>) {
  746|  4.50k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.50k|              }
  748|  4.50k|              else {
  749|  4.50k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.50k|              }
  751|  4.50k|          }),
  752|  4.50k|          m_storage(std::addressof(f))
  753|  4.50k|    {
  754|  4.50k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  15.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.3k|              else {
  749|  15.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.3k|              }
  751|  15.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  15.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  15.3k|        else if constexpr (std::is_object_v<T>) {
  688|  15.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.3k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3887|  15.3k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  4.50k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  4.50k|        {
  662|  4.50k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3943|   245k|    {
 3944|   245k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3945|   245k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3945:35): [True: 145k, False: 100k]
  |  Branch (3945:50): [True: 33.4k, False: 112k]
  ------------------
 3946|       |
 3947|   245k|        auto it = ranges::begin(range);
 3948|   245k|        std::ptrdiff_t digits_count = 0;
 3949|       |
 3950|   245k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3951|   245k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   245k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 92.0k, False: 153k]
  |  |  ------------------
  ------------------
 3952|  92.0k|            return r.transform_error(
 3953|  92.0k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3954|  92.0k|                                              "Invalid floating-point value"));
 3955|  92.0k|        }
 3956|   153k|        else {
 3957|   153k|            digits_count += ranges::distance(it, *r);
 3958|   153k|            it = *r;
 3959|   153k|        }
 3960|       |
 3961|   153k|        m_integral_part_length = digits_count;
 3962|   153k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3962:18): [True: 838, False: 152k]
  ------------------
 3963|   153k|                                             m_locale_options.decimal_point)) {
 3964|    838|            it = *r;
 3965|    838|        }
 3966|       |
 3967|   153k|        if (auto r =
  ------------------
  |  Branch (3967:18): [True: 664, False: 153k]
  ------------------
 3968|   153k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3969|    664|            digits_count += ranges::distance(it, *r);
 3970|    664|            it = *r;
 3971|    664|        }
 3972|       |
 3973|   153k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 153k]
  |  |  ------------------
  ------------------
 3974|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3975|      0|                                         "No significand digits in float");
 3976|      0|        }
 3977|       |
 3978|   153k|        auto beg_exp_it = it;
 3979|   153k|        if (allowed_exp) {
  ------------------
  |  Branch (3979:13): [True: 85.9k, False: 67.7k]
  ------------------
 3980|  85.9k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3981|  85.9k|        }
 3982|   153k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3982:13): [True: 5.13k, False: 148k]
  |  Branch (3982:29): [True: 4.20k, False: 936]
  ------------------
 3983|  4.20k|            return unexpected_scan_error(
 3984|  4.20k|                scan_error::invalid_scanned_value,
 3985|  4.20k|                "No exponent given to scientific float");
 3986|  4.20k|        }
 3987|       |
 3988|   149k|        m_kind =
 3989|   149k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3989:13): [True: 145k, False: 3.96k]
  ------------------
 3990|       |
 3991|   149k|        return it;
 3992|   153k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3773|   399k|    {
 3774|   399k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 399k]
  |  |  |  Branch (859:45): [True: 0, False: 399k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3775|   399k|                         thsep_allowed)) {
 3776|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3777|      0|                return char_to_int(ch) < 10 ||
 3778|      0|                       ch == m_locale_options.thousands_sep;
 3779|      0|            });
 3780|      0|        }
 3781|       |
 3782|   399k|        return read_while1_code_unit(
 3783|   399k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3784|   399k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   399k|        : m_fptr([](storage fn,
  743|   399k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   399k|              cvref<T> obj = *get<T>(fn);
  745|   399k|              if constexpr (std::is_void_v<R>) {
  746|   399k|                  obj(static_cast<decltype(args)>(args)...);
  747|   399k|              }
  748|   399k|              else {
  749|   399k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   399k|              }
  751|   399k|          }),
  752|   399k|          m_storage(std::addressof(f))
  753|   399k|    {
  754|   399k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   581k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   581k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   581k|              else {
  749|   581k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   581k|              }
  751|   581k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   581k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   581k|        else if constexpr (std::is_object_v<T>) {
  688|   581k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   581k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3783|   581k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   399k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   399k|        {
  662|   399k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3999|   667k|    {
 4000|   667k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4001|   667k|        const bool allowed_nonhex =
 4002|   667k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4003|   667k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4004|       |
 4005|   667k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4005:39): [True: 667k, False: 0]
  |  Branch (4005:45): [True: 0, False: 667k]
  ------------------
 4006|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4007|      0|                scan_error::invalid_scanned_value,
 4008|      0|                "Invalid infinite floating-point value"));
 4009|      0|        }
 4010|   667k|        else if (r) {
  ------------------
  |  Branch (4010:18): [True: 0, False: 667k]
  ------------------
 4011|      0|            return *r;
 4012|      0|        }
 4013|       |
 4014|   667k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4014:39): [True: 667k, False: 0]
  |  Branch (4014:45): [True: 0, False: 667k]
  ------------------
 4015|      0|            return unexpected(r.error());
 4016|      0|        }
 4017|   667k|        else if (r) {
  ------------------
  |  Branch (4017:18): [True: 0, False: 667k]
  ------------------
 4018|      0|            return *r;
 4019|      0|        }
 4020|       |
 4021|   667k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4021:13): [True: 421k, False: 245k]
  |  Branch (4021:28): [True: 126k, False: 295k]
  ------------------
 4022|       |            // only hex allowed:
 4023|       |            // prefix "0x" allowed, not required
 4024|   126k|            auto it = range.begin();
 4025|       |
 4026|   126k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4026:22): [True: 306, False: 126k]
  ------------------
 4027|    306|                m_kind = float_kind::hex_with_prefix;
 4028|    306|                it = *r;
 4029|    306|            }
 4030|   126k|            else {
 4031|   126k|                m_kind = float_kind::hex_without_prefix;
 4032|   126k|            }
 4033|       |
 4034|   126k|            return read_hex(ranges::subrange{it, range.end()});
 4035|   126k|        }
 4036|   540k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4036:13): [True: 245k, False: 295k]
  |  Branch (4036:29): [True: 245k, False: 0]
  ------------------
 4037|       |            // only nonhex allowed:
 4038|       |            // no prefix allowed
 4039|   245k|            m_kind = float_kind::generic;
 4040|   245k|            return read_regular_float(range);
 4041|   245k|        }
 4042|       |        // both hex and nonhex allowed:
 4043|       |        // check for "0x" prefix -> hex,
 4044|       |        // regular otherwise
 4045|       |
 4046|   295k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 725, False: 294k]
  |  |  ------------------
  ------------------
 4047|    725|            m_kind = float_kind::hex_with_prefix;
 4048|    725|            return read_hex(ranges::subrange{*r, range.end()});
 4049|    725|        }
 4050|       |
 4051|   294k|        m_kind = float_kind::generic;
 4052|   294k|        return read_regular(range);
 4053|   295k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3725|   421k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3726|   421k|                    auto res = read_all(rr);
 3727|   421k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   421k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 151, False: 421k]
  |  |  ------------------
  ------------------
 3728|    151|                        return unexpected_scan_error(
 3729|    151|                            scan_error::invalid_scanned_value,
 3730|    151|                            "Invalid float value");
 3731|    151|                    }
 3732|   421k|                    return res;
 3733|   421k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1838|   421k|{
 1839|   421k|    return ranges::next(range.begin(), range.end());
 1840|   421k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   421k|    {
  313|   421k|        ranges::advance(x, bound);
  314|   421k|        return x;
  315|   421k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   421k|    {
  275|   421k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   421k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1576|   571k|    {
 1577|   571k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   571k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   571k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1620|   571k|    {
 1621|   571k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|   571k|                      ranges::sized_range<Range>) {
 1626|   571k|            m_storage.reset();
 1627|   571k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|   571k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  36.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  36.2k|        {
  662|  36.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   120k|        : m_fptr([](storage fn,
  743|   120k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   120k|              cvref<T> obj = *get<T>(fn);
  745|   120k|              if constexpr (std::is_void_v<R>) {
  746|   120k|                  obj(static_cast<decltype(args)>(args)...);
  747|   120k|              }
  748|   120k|              else {
  749|   120k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   120k|              }
  751|   120k|          }),
  752|   120k|          m_storage(std::addressof(f))
  753|   120k|    {
  754|   120k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   120k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   120k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   120k|              else {
  749|   120k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   120k|              }
  751|   120k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   120k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   120k|        else if constexpr (std::is_object_v<T>) {
  688|   120k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   120k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   120k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   120k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   120k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3664|   549k|    {
 3665|   549k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   549k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 549k]
  |  |  ------------------
  ------------------
 3666|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3667|      0|                classic_with_thsep_tag{}};
 3668|      0|        }
 3669|       |
 3670|   549k|        return read_source_impl(range);
 3671|   549k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   120k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   120k|        {
  662|   120k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   166k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   166k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   166k|            auto rd = make_reader<T, char_type>();
 6206|   166k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   166k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 166k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   166k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   166k|                return impl(rd, range, value);
 6213|   166k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   166k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   166k|    {
 6124|   166k|        const bool need_skipped_width =
 6125|   166k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 166k]
  |  Branch (6125:33): [True: 0, False: 166k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   166k|        auto it = rng.begin();
 6129|   166k|        std::ptrdiff_t prefix_width = 0;
 6130|   166k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 166k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   166k|        else {
 6138|   166k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 920, False: 165k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    920|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    920|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    920|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    920|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    920|    }                                                  \
  |  |  |  | 3671|   166k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   165k|            std::tie(it, prefix_width) = prefix_result;
 6140|   165k|        }
 6141|   165k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   165k|        std::ptrdiff_t value_width = 0;
 6145|   165k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 165k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   165k|        else {
 6161|   165k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.7k, False: 111k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  53.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  53.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  53.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  53.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  53.7k|    }                                                  \
  |  | 3671|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   111k|                                             specs, value, loc));
 6163|       |
 6164|   111k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 111k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   111k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   111k|        std::ptrdiff_t postfix_width = 0;
 6173|   111k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 110k, False: 390]
  ------------------
 6174|   110k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   110k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   110k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   110k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 110k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   110k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   110k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   110k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   110k|                                 value_width));
 6178|   110k|            std::tie(it, postfix_width) = postfix_result;
 6179|   110k|        }
 6180|       |
 6181|   111k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   111k|                                                 value_width, postfix_width);
 6183|   111k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 111k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   111k|        return it;
 6188|   111k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3690|   350k|    {
 3691|   350k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   350k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   350k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   350k|        const std::ptrdiff_t sign_len =
 3694|   350k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 1.47k, False: 348k]
  ------------------
 3695|       |
 3696|   350k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   350k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   350k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   350k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   350k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 38.7k, False: 311k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  38.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  38.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  38.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  38.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  38.7k|    }                                                  \
  |  |  |  | 3671|   350k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   311k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   311k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   350k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   165k|    {
 4170|   165k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   165k|#if !SCN_DISABLE_LOCALE
 4173|   165k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 40.2k, False: 124k]
  ------------------
 4174|  40.2k|            return read_impl<Range>(
 4175|  40.2k|                range, rd,
 4176|  40.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  40.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  40.2k|                },
 4179|  40.2k|                value, loc);
 4180|  40.2k|        }
 4181|   124k|#endif
 4182|       |
 4183|   124k|        return read_impl<Range>(
 4184|   124k|            range, rd,
 4185|   124k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   124k|                return r.read_source(SCN_FWD(args)...);
 4187|   124k|            },
 4188|   124k|            value);
 4189|   165k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   225k|    {
 4206|   225k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   225k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 68.8k, False: 156k]
  |  |  ------------------
  ------------------
 4208|  68.8k|            return unexpected(r.error());
 4209|  68.8k|        }
 4210|       |
 4211|   156k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   156k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   156k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   156k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.00k, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.00k|    }                                                  \
  |  |  |  | 3671|   156k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   155k|        return ranges::next(range.begin(), n);
 4213|   156k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  40.2k|        : m_fptr([](storage fn,
  743|  40.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.2k|              cvref<T> obj = *get<T>(fn);
  745|  40.2k|              if constexpr (std::is_void_v<R>) {
  746|  40.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.2k|              }
  748|  40.2k|              else {
  749|  40.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.2k|              }
  751|  40.2k|          }),
  752|  40.2k|          m_storage(std::addressof(f))
  753|  40.2k|    {
  754|  40.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  40.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.2k|              else {
  749|  40.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.2k|              }
  751|  40.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.2k|        else if constexpr (std::is_object_v<T>) {
  688|  40.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  40.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  40.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  40.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  40.2k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  40.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.2k|        {
  662|  40.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   124k|        : m_fptr([](storage fn,
  743|   124k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   124k|              cvref<T> obj = *get<T>(fn);
  745|   124k|              if constexpr (std::is_void_v<R>) {
  746|   124k|                  obj(static_cast<decltype(args)>(args)...);
  747|   124k|              }
  748|   124k|              else {
  749|   124k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   124k|              }
  751|   124k|          }),
  752|   124k|          m_storage(std::addressof(f))
  753|   124k|    {
  754|   124k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   124k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   124k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   124k|              else {
  749|   124k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   124k|              }
  751|   124k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   124k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   124k|        else if constexpr (std::is_object_v<T>) {
  688|   124k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   124k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   124k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   124k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   124k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   124k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   124k|        {
  662|   124k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   165k|    {
 4170|   165k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   165k|#if !SCN_DISABLE_LOCALE
 4173|   165k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 40.2k, False: 124k]
  ------------------
 4174|  40.2k|            return read_impl<Range>(
 4175|  40.2k|                range, rd,
 4176|  40.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  40.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  40.2k|                },
 4179|  40.2k|                value, loc);
 4180|  40.2k|        }
 4181|   124k|#endif
 4182|       |
 4183|   124k|        return read_impl<Range>(
 4184|   124k|            range, rd,
 4185|   124k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   124k|                return r.read_source(SCN_FWD(args)...);
 4187|   124k|            },
 4188|   124k|            value);
 4189|   165k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   225k|    {
 4206|   225k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   225k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.1k, False: 193k]
  |  |  ------------------
  ------------------
 4208|  32.1k|            return unexpected(r.error());
 4209|  32.1k|        }
 4210|       |
 4211|   193k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   193k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   193k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   193k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.7k, False: 155k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  37.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  37.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  37.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  37.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  37.7k|    }                                                  \
  |  |  |  | 3671|   193k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   155k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   155k|        return ranges::next(range.begin(), n);
 4213|   193k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  40.2k|        : m_fptr([](storage fn,
  743|  40.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.2k|              cvref<T> obj = *get<T>(fn);
  745|  40.2k|              if constexpr (std::is_void_v<R>) {
  746|  40.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.2k|              }
  748|  40.2k|              else {
  749|  40.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.2k|              }
  751|  40.2k|          }),
  752|  40.2k|          m_storage(std::addressof(f))
  753|  40.2k|    {
  754|  40.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  40.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.2k|              else {
  749|  40.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.2k|              }
  751|  40.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.2k|        else if constexpr (std::is_object_v<T>) {
  688|  40.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  40.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  40.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  40.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  40.2k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  40.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.2k|        {
  662|  40.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   124k|        : m_fptr([](storage fn,
  743|   124k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   124k|              cvref<T> obj = *get<T>(fn);
  745|   124k|              if constexpr (std::is_void_v<R>) {
  746|   124k|                  obj(static_cast<decltype(args)>(args)...);
  747|   124k|              }
  748|   124k|              else {
  749|   124k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   124k|              }
  751|   124k|          }),
  752|   124k|          m_storage(std::addressof(f))
  753|   124k|    {
  754|   124k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   124k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   124k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   124k|              else {
  749|   124k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   124k|              }
  751|   124k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   124k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   124k|        else if constexpr (std::is_object_v<T>) {
  688|   124k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   124k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   124k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   124k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   124k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   124k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   124k|        {
  662|   124k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   168k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   168k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   168k|            auto rd = make_reader<T, char_type>();
 6206|   168k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 168k]
  |  |  ------------------
  ------------------
 6207|      0|                return unexpected(e);
 6208|      0|            }
 6209|       |
 6210|   168k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 168k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   168k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   168k|                return impl(rd, range, value);
 6213|   168k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   168k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6123|   168k|    {
 6124|   168k|        const bool need_skipped_width =
 6125|   168k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 168k]
  |  Branch (6125:33): [True: 0, False: 168k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   168k|        auto it = rng.begin();
 6129|   168k|        std::ptrdiff_t prefix_width = 0;
 6130|   168k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 168k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   168k|        else {
 6138|   168k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   168k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   168k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   168k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 960, False: 167k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    960|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    960|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    960|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    960|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    960|    }                                                  \
  |  |  |  | 3671|   168k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   167k|            std::tie(it, prefix_width) = prefix_result;
 6140|   167k|        }
 6141|   167k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   167k|        std::ptrdiff_t value_width = 0;
 6145|   167k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 167k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   167k|        else {
 6161|   167k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.7k, False: 114k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  53.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  53.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  53.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  53.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  53.7k|    }                                                  \
  |  | 3671|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   114k|                                             specs, value, loc));
 6163|       |
 6164|   114k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 114k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   114k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   114k|        std::ptrdiff_t postfix_width = 0;
 6173|   114k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 113k, False: 408]
  ------------------
 6174|   113k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   113k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   113k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   113k|                                 value_width));
 6178|   113k|            std::tie(it, postfix_width) = postfix_result;
 6179|   113k|        }
 6180|       |
 6181|   114k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   114k|                                                 value_width, postfix_width);
 6183|   114k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 114k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   114k|        return it;
 6188|   114k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3690|   358k|    {
 3691|   358k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   358k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   358k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3692|       |
 3693|   358k|        const std::ptrdiff_t sign_len =
 3694|   358k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3694:13): [True: 1.48k, False: 357k]
  ------------------
 3695|       |
 3696|   358k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3672|   358k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   358k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   358k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   358k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.5k, False: 320k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  37.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  37.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  37.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  37.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  37.5k|    }                                                  \
  |  |  |  | 3671|   358k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   320k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3697|   320k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3698|   358k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4169|   167k|    {
 4170|   167k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   167k|#if !SCN_DISABLE_LOCALE
 4173|   167k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 41.5k, False: 126k]
  ------------------
 4174|  41.5k|            return read_impl<Range>(
 4175|  41.5k|                range, rd,
 4176|  41.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  41.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  41.5k|                },
 4179|  41.5k|                value, loc);
 4180|  41.5k|        }
 4181|   126k|#endif
 4182|       |
 4183|   126k|        return read_impl<Range>(
 4184|   126k|            range, rd,
 4185|   126k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   126k|                return r.read_source(SCN_FWD(args)...);
 4187|   126k|            },
 4188|   126k|            value);
 4189|   167k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4205|   230k|    {
 4206|   230k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   230k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 69.6k, False: 160k]
  |  |  ------------------
  ------------------
 4208|  69.6k|            return unexpected(r.error());
 4209|  69.6k|        }
 4210|       |
 4211|   160k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   160k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   160k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   160k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   160k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 123, False: 160k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    123|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    123|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    123|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    123|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    123|    }                                                  \
  |  |  |  | 3671|   160k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   160k|        return ranges::next(range.begin(), n);
 4213|   160k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  41.5k|        : m_fptr([](storage fn,
  743|  41.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.5k|              cvref<T> obj = *get<T>(fn);
  745|  41.5k|              if constexpr (std::is_void_v<R>) {
  746|  41.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  41.5k|              }
  748|  41.5k|              else {
  749|  41.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.5k|              }
  751|  41.5k|          }),
  752|  41.5k|          m_storage(std::addressof(f))
  753|  41.5k|    {
  754|  41.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  41.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  41.5k|              else {
  749|  41.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.5k|              }
  751|  41.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  41.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  41.5k|        else if constexpr (std::is_object_v<T>) {
  688|  41.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  41.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4176|  41.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  41.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  41.5k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  41.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  41.5k|        {
  662|  41.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   126k|        : m_fptr([](storage fn,
  743|   126k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   126k|              cvref<T> obj = *get<T>(fn);
  745|   126k|              if constexpr (std::is_void_v<R>) {
  746|   126k|                  obj(static_cast<decltype(args)>(args)...);
  747|   126k|              }
  748|   126k|              else {
  749|   126k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   126k|              }
  751|   126k|          }),
  752|   126k|          m_storage(std::addressof(f))
  753|   126k|    {
  754|   126k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   126k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   126k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   126k|              else {
  749|   126k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   126k|              }
  751|   126k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   126k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   126k|        else if constexpr (std::is_object_v<T>) {
  688|   126k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   126k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4185|   126k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   126k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   126k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   126k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   126k|        {
  662|   126k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4169|   167k|    {
 4170|   167k|        float_reader<CharT> rd{get_options(specs)};
 4171|       |
 4172|   167k|#if !SCN_DISABLE_LOCALE
 4173|   167k|        if (specs.localized) {
  ------------------
  |  Branch (4173:13): [True: 41.5k, False: 126k]
  ------------------
 4174|  41.5k|            return read_impl<Range>(
 4175|  41.5k|                range, rd,
 4176|  41.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  41.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4178|  41.5k|                },
 4179|  41.5k|                value, loc);
 4180|  41.5k|        }
 4181|   126k|#endif
 4182|       |
 4183|   126k|        return read_impl<Range>(
 4184|   126k|            range, rd,
 4185|   126k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   126k|                return r.read_source(SCN_FWD(args)...);
 4187|   126k|            },
 4188|   126k|            value);
 4189|   167k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4205|   230k|    {
 4206|   230k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4207|   230k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 32.4k, False: 197k]
  |  |  ------------------
  ------------------
 4208|  32.4k|            return unexpected(r.error());
 4209|  32.4k|        }
 4210|       |
 4211|   197k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3672|   197k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   197k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   197k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 37.3k, False: 160k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  37.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  37.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  37.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  37.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  37.3k|    }                                                  \
  |  |  |  | 3671|   197k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   160k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4212|   160k|        return ranges::next(range.begin(), n);
 4213|   197k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  41.5k|        : m_fptr([](storage fn,
  743|  41.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.5k|              cvref<T> obj = *get<T>(fn);
  745|  41.5k|              if constexpr (std::is_void_v<R>) {
  746|  41.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  41.5k|              }
  748|  41.5k|              else {
  749|  41.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.5k|              }
  751|  41.5k|          }),
  752|  41.5k|          m_storage(std::addressof(f))
  753|  41.5k|    {
  754|  41.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  41.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  41.5k|              else {
  749|  41.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.5k|              }
  751|  41.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  41.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  41.5k|        else if constexpr (std::is_object_v<T>) {
  688|  41.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  41.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4176|  41.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4177|  41.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  41.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4178|  41.5k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  41.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  41.5k|        {
  662|  41.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   126k|        : m_fptr([](storage fn,
  743|   126k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   126k|              cvref<T> obj = *get<T>(fn);
  745|   126k|              if constexpr (std::is_void_v<R>) {
  746|   126k|                  obj(static_cast<decltype(args)>(args)...);
  747|   126k|              }
  748|   126k|              else {
  749|   126k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   126k|              }
  751|   126k|          }),
  752|   126k|          m_storage(std::addressof(f))
  753|   126k|    {
  754|   126k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   126k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   126k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   126k|              else {
  749|   126k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   126k|              }
  751|   126k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   126k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   126k|        else if constexpr (std::is_object_v<T>) {
  688|   126k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   126k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4185|   126k|            [](float_reader<CharT>& r, auto&&... args) {
 4186|   126k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4187|   126k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   126k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   126k|        {
  662|   126k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   670k|{
 2061|   670k|    auto it = range.begin();
 2062|  1.14M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.14M, False: 3.23k]
  ------------------
 2063|  1.14M|        const auto val =
 2064|  1.14M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.14M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.14M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.14M, False: 0]
  |  |  ------------------
  ------------------
 2066|  1.14M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.14M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.14M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 667k, False: 473k]
  ------------------
 2069|   667k|                return it;
 2070|   667k|            }
 2071|  1.14M|        }
 2072|   473k|        it = val.iterator;
 2073|   473k|    }
 2074|       |
 2075|  3.23k|    return it;
 2076|   670k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  1.14M|{
 1899|  1.14M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.14M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.14M|    auto it = range.begin();
 1903|  1.14M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.14M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.14M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.14M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  1.14M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.14M, False: 0]
  ------------------
 1912|  1.14M|        ++it;
 1913|  1.14M|        return {it, string_type(1, *range.begin())};
 1914|  1.14M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  1.14M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|  1.14M|    {
 1890|  1.14M|        return !codepoint.empty();
 1891|  1.14M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   670k|{
 2082|   670k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   670k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   670k|{
 2951|   670k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 670k, False: 0]
  ------------------
 2952|   670k|        auto it = read_while_classic_space(range);
 2953|   670k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   670k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   670k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.23k, False: 667k]
  |  |  ------------------
  ------------------
 2955|  3.23k|            return unexpected(e);
 2956|  3.23k|        }
 2957|       |
 2958|   667k|        return it;
 2959|   670k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   670k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   670k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|   670k|    else {
 2126|   670k|        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|   670k|        return read_while_code_point(
 2138|   670k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   670k|    }
 2140|   670k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   670k|        : m_fptr([](storage fn,
  743|   670k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   670k|              cvref<T> obj = *get<T>(fn);
  745|   670k|              if constexpr (std::is_void_v<R>) {
  746|   670k|                  obj(static_cast<decltype(args)>(args)...);
  747|   670k|              }
  748|   670k|              else {
  749|   670k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   670k|              }
  751|   670k|          }),
  752|   670k|          m_storage(std::addressof(f))
  753|   670k|    {
  754|   670k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.14M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.14M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.14M|              else {
  749|  1.14M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.14M|              }
  751|  1.14M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.14M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.14M|        else if constexpr (std::is_object_v<T>) {
  688|  1.14M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.14M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  1.14M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   670k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   670k|        {
  662|   670k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|  1.23M|{
 2088|       |    if constexpr (ranges::contiguous_range<Range> &&
 2089|       |                  ranges::sized_range<Range> &&
 2090|  1.23M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2091|  1.23M|        auto buf = make_contiguous_buffer(range);
 2092|  1.23M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  1.23M|        return ranges::next(range.begin(),
 2094|  1.23M|                            ranges::distance(buf.view().begin(), it));
 2095|       |    }
 2096|       |    else {
 2097|       |        auto it = range.begin();
 2098|       |
 2099|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|       |            auto seg = get_contiguous_beginning(range);
 2101|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|       |                seg_it != seg.end()) {
 2103|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|       |            }
 2105|       |            ranges::advance(it, seg.size());
 2106|       |        }
 2107|       |
 2108|       |        return read_until_code_point(
 2109|       |            ranges::subrange{it, range.end()},
 2110|       |            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|       |    }
 2112|  1.23M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1682|  1.23M|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|  1.23M|                  ranges::sized_range<Range>) {
 1686|  1.23M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|  1.23M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1488|  1.23M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|  1.23M|    {
 1490|  1.23M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1576|  1.23M|    {
 1577|  1.23M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|  1.23M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1620|  1.23M|    {
 1621|  1.23M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|  1.23M|                                          std::basic_string<CharT>>) {
 1631|  1.23M|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|  1.23M|            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|  1.23M|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4099|   895k|    {
 4100|   895k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 89.1k, False: 806k]
  ------------------
 4101|  89.1k|            return std::copysign(value, T{-1.0});
 4102|  89.1k|        }
 4103|   806k|        return std::copysign(value, T{1.0});
 4104|   895k|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2087|   445k|{
 2088|       |    if constexpr (ranges::contiguous_range<Range> &&
 2089|       |                  ranges::sized_range<Range> &&
 2090|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2091|       |        auto buf = make_contiguous_buffer(range);
 2092|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2093|       |        return ranges::next(range.begin(),
 2094|       |                            ranges::distance(buf.view().begin(), it));
 2095|       |    }
 2096|   445k|    else {
 2097|   445k|        auto it = range.begin();
 2098|       |
 2099|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|       |            auto seg = get_contiguous_beginning(range);
 2101|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|       |                seg_it != seg.end()) {
 2103|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|       |            }
 2105|       |            ranges::advance(it, seg.size());
 2106|       |        }
 2107|       |
 2108|   445k|        return read_until_code_point(
 2109|   445k|            ranges::subrange{it, range.end()},
 2110|   445k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   445k|    }
 2112|   445k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   445k|        : m_fptr([](storage fn,
  743|   445k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   445k|              cvref<T> obj = *get<T>(fn);
  745|   445k|              if constexpr (std::is_void_v<R>) {
  746|   445k|                  obj(static_cast<decltype(args)>(args)...);
  747|   445k|              }
  748|   445k|              else {
  749|   445k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   445k|              }
  751|   445k|          }),
  752|   445k|          m_storage(std::addressof(f))
  753|   445k|    {
  754|   445k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|   827k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   827k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   827k|              else {
  749|   827k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   827k|              }
  751|   827k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   827k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   827k|        else if constexpr (std::is_object_v<T>) {
  688|   827k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   827k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2110|   827k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   445k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   445k|        {
  662|   445k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1576|   445k|    {
 1577|   445k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1578|   445k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1620|   445k|    {
 1621|   445k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|   445k|                                          std::basic_string<CharT>>) {
 1631|   445k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1632|   445k|            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|       |                           ranges::common_range<Range>) {
 1638|       |            auto beg_seg = range.begin().contiguous_segment();
 1639|       |            auto end_seg = range.end().contiguous_segment();
 1640|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1641|       |                             detail::to_address(end_seg.end()))) {
 1642|       |                auto& str = m_storage.emplace();
 1643|       |                str.reserve(range.end().position() - range.begin().position());
 1644|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|       |                m_view = string_view_type{str};
 1646|       |                return;
 1647|       |            }
 1648|       |
 1649|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|       |                                                            end_seg.data());
 1651|       |            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|   445k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4099|   323k|    {
 4100|   323k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 1.05k, False: 322k]
  ------------------
 4101|  1.05k|            return std::copysign(value, T{-1.0});
 4102|  1.05k|        }
 4103|   322k|        return std::copysign(value, T{1.0});
 4104|   323k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4099|   929k|    {
 4100|   929k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 92.8k, False: 836k]
  ------------------
 4101|  92.8k|            return std::copysign(value, T{-1.0});
 4102|  92.8k|        }
 4103|   836k|        return std::copysign(value, T{1.0});
 4104|   929k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4099|   350k|    {
 4100|   350k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 1.07k, False: 348k]
  ------------------
 4101|  1.07k|            return std::copysign(value, T{-1.0});
 4102|  1.07k|        }
 4103|   348k|        return std::copysign(value, T{1.0});
 4104|   350k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4099|   938k|    {
 4100|   938k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 95.4k, False: 843k]
  ------------------
 4101|  95.4k|            return std::copysign(value, T{-1.0});
 4102|  95.4k|        }
 4103|   843k|        return std::copysign(value, T{1.0});
 4104|   938k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4099|   358k|    {
 4100|   358k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4100:13): [True: 1.09k, False: 357k]
  ------------------
 4101|  1.09k|            return std::copysign(value, T{-1.0});
 4102|  1.09k|        }
 4103|   357k|        return std::copysign(value, T{1.0});
 4104|   358k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   399k|{
 5795|   399k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.38k, False: 395k]
  |  |  ------------------
  ------------------
 5796|  4.38k|        return unexpected(e);
 5797|  4.38k|    }
 5798|       |
 5799|   395k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 395k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   395k|    return skip_classic_whitespace(range);
 5804|   395k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5870|   128k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|   128k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   128k|            auto rd = make_reader<T, char_type>();
 5876|   128k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   128k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   128k|    {
 5863|   128k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.43k|    }                                                  \
  |  |  |  | 3671|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   127k|                        .transform_error(make_eof_scan_error));
 5865|   127k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   128k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   127k|    {
 4152|   127k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   127k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   127k|        float_reader<CharT> rd{};
 4155|   127k|        return read_impl<Range>(
 4156|   127k|            range, rd,
 4157|   127k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   127k|                return r.read_source(SCN_FWD(args)...);
 4159|   127k|            },
 4160|   127k|            value);
 4161|   127k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3657|   825k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3643|  1.17M|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   127k|        : m_fptr([](storage fn,
  743|   127k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   127k|              cvref<T> obj = *get<T>(fn);
  745|   127k|              if constexpr (std::is_void_v<R>) {
  746|   127k|                  obj(static_cast<decltype(args)>(args)...);
  747|   127k|              }
  748|   127k|              else {
  749|   127k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   127k|              }
  751|   127k|          }),
  752|   127k|          m_storage(std::addressof(f))
  753|   127k|    {
  754|   127k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   127k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   127k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   127k|              else {
  749|   127k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   127k|              }
  751|   127k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   127k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   127k|        else if constexpr (std::is_object_v<T>) {
  688|   127k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   127k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   127k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   127k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   127k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   127k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   127k|        {
  662|   127k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5870|   134k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|   134k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   134k|            auto rd = make_reader<T, char_type>();
 5876|   134k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   134k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   134k|    {
 5863|   134k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.65k, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.65k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.65k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.65k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.65k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.65k|    }                                                  \
  |  |  |  | 3671|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   132k|                        .transform_error(make_eof_scan_error));
 5865|   132k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   134k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   132k|    {
 4152|   132k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   132k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   132k|        float_reader<CharT> rd{};
 4155|   132k|        return read_impl<Range>(
 4156|   132k|            range, rd,
 4157|   132k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   132k|                return r.read_source(SCN_FWD(args)...);
 4159|   132k|            },
 4160|   132k|            value);
 4161|   132k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   132k|        : m_fptr([](storage fn,
  743|   132k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   132k|              cvref<T> obj = *get<T>(fn);
  745|   132k|              if constexpr (std::is_void_v<R>) {
  746|   132k|                  obj(static_cast<decltype(args)>(args)...);
  747|   132k|              }
  748|   132k|              else {
  749|   132k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   132k|              }
  751|   132k|          }),
  752|   132k|          m_storage(std::addressof(f))
  753|   132k|    {
  754|   132k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   132k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   132k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   132k|              else {
  749|   132k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   132k|              }
  751|   132k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   132k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   132k|        else if constexpr (std::is_object_v<T>) {
  688|   132k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   132k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   132k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   132k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   132k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   132k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   132k|        {
  662|   132k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5870|   136k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|   136k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   136k|            auto rd = make_reader<T, char_type>();
 5876|   136k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   136k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|   136k|    {
 5863|   136k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   136k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.78k, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.78k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.78k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.78k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.78k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.78k|    }                                                  \
  |  |  |  | 3671|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   134k|                        .transform_error(make_eof_scan_error));
 5865|   134k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   136k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|   134k|    {
 4152|   134k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   134k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   134k|        float_reader<CharT> rd{};
 4155|   134k|        return read_impl<Range>(
 4156|   134k|            range, rd,
 4157|   134k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   134k|                return r.read_source(SCN_FWD(args)...);
 4159|   134k|            },
 4160|   134k|            value);
 4161|   134k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   134k|        : m_fptr([](storage fn,
  743|   134k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   134k|              cvref<T> obj = *get<T>(fn);
  745|   134k|              if constexpr (std::is_void_v<R>) {
  746|   134k|                  obj(static_cast<decltype(args)>(args)...);
  747|   134k|              }
  748|   134k|              else {
  749|   134k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   134k|              }
  751|   134k|          }),
  752|   134k|          m_storage(std::addressof(f))
  753|   134k|    {
  754|   134k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   134k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   134k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   134k|              else {
  749|   134k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   134k|              }
  751|   134k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   134k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   134k|        else if constexpr (std::is_object_v<T>) {
  688|   134k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   134k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|   134k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   134k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   134k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   134k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   134k|        {
  662|   134k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   435k|{
 5795|   435k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   435k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.57k, False: 431k]
  |  |  ------------------
  ------------------
 5796|  4.57k|        return unexpected(e);
 5797|  4.57k|    }
 5798|       |
 5799|   431k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 431k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   431k|    return skip_classic_whitespace(range);
 5804|   431k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   140k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|   140k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   140k|            auto rd = make_reader<T, char_type>();
 5880|   140k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 140k, False: 0]
  ------------------
 5881|   140k|                return impl(rd, range, value);
 5882|   140k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   140k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   140k|    {
 5863|   140k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.51k, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.51k|    }                                                  \
  |  |  |  | 3671|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   138k|                        .transform_error(make_eof_scan_error));
 5865|   138k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   140k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   138k|    {
 4152|   138k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   138k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   138k|        float_reader<CharT> rd{};
 4155|   138k|        return read_impl<Range>(
 4156|   138k|            range, rd,
 4157|   138k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   138k|                return r.read_source(SCN_FWD(args)...);
 4159|   138k|            },
 4160|   138k|            value);
 4161|   138k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   138k|        : m_fptr([](storage fn,
  743|   138k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   138k|              cvref<T> obj = *get<T>(fn);
  745|   138k|              if constexpr (std::is_void_v<R>) {
  746|   138k|                  obj(static_cast<decltype(args)>(args)...);
  747|   138k|              }
  748|   138k|              else {
  749|   138k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   138k|              }
  751|   138k|          }),
  752|   138k|          m_storage(std::addressof(f))
  753|   138k|    {
  754|   138k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   138k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   138k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   138k|              else {
  749|   138k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   138k|              }
  751|   138k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   138k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   138k|        else if constexpr (std::is_object_v<T>) {
  688|   138k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   138k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   138k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   138k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   138k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   138k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   138k|        {
  662|   138k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   147k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|   147k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   147k|            auto rd = make_reader<T, char_type>();
 5880|   147k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 147k, False: 0]
  ------------------
 5881|   147k|                return impl(rd, range, value);
 5882|   147k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   147k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   147k|    {
 5863|   147k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   147k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   147k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   147k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.74k, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.74k|    }                                                  \
  |  |  |  | 3671|   147k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   145k|                        .transform_error(make_eof_scan_error));
 5865|   145k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   147k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   145k|    {
 4152|   145k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   145k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   145k|        float_reader<CharT> rd{};
 4155|   145k|        return read_impl<Range>(
 4156|   145k|            range, rd,
 4157|   145k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   145k|                return r.read_source(SCN_FWD(args)...);
 4159|   145k|            },
 4160|   145k|            value);
 4161|   145k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   145k|        : m_fptr([](storage fn,
  743|   145k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   145k|              cvref<T> obj = *get<T>(fn);
  745|   145k|              if constexpr (std::is_void_v<R>) {
  746|   145k|                  obj(static_cast<decltype(args)>(args)...);
  747|   145k|              }
  748|   145k|              else {
  749|   145k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   145k|              }
  751|   145k|          }),
  752|   145k|          m_storage(std::addressof(f))
  753|   145k|    {
  754|   145k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   145k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   145k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   145k|              else {
  749|   145k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   145k|              }
  751|   145k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   145k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   145k|        else if constexpr (std::is_object_v<T>) {
  688|   145k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   145k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   145k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   145k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   145k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   145k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   145k|        {
  662|   145k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   148k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|   148k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   148k|            auto rd = make_reader<T, char_type>();
 5880|   148k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 148k, False: 0]
  ------------------
 5881|   148k|                return impl(rd, range, value);
 5882|   148k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   148k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|   148k|    {
 5863|   148k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   148k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   148k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   148k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.87k, False: 146k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.87k|    }                                                  \
  |  |  |  | 3671|   148k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   146k|                        .transform_error(make_eof_scan_error));
 5865|   146k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   148k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|   146k|    {
 4152|   146k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   146k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|   146k|        float_reader<CharT> rd{};
 4155|   146k|        return read_impl<Range>(
 4156|   146k|            range, rd,
 4157|   146k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   146k|                return r.read_source(SCN_FWD(args)...);
 4159|   146k|            },
 4160|   146k|            value);
 4161|   146k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   146k|        : m_fptr([](storage fn,
  743|   146k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   146k|              cvref<T> obj = *get<T>(fn);
  745|   146k|              if constexpr (std::is_void_v<R>) {
  746|   146k|                  obj(static_cast<decltype(args)>(args)...);
  747|   146k|              }
  748|   146k|              else {
  749|   146k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   146k|              }
  751|   146k|          }),
  752|   146k|          m_storage(std::addressof(f))
  753|   146k|    {
  754|   146k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   146k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   146k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   146k|              else {
  749|   146k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   146k|              }
  751|   146k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   146k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   146k|        else if constexpr (std::is_object_v<T>) {
  688|   146k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   146k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|   146k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|   146k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|   146k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   146k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   146k|        {
  662|   146k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2875|   961k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   961k|    static_cast<    \
  |  |  929|   961k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2876|   961k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   961k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|   961k|          m_current(m_range.begin())
 2878|   961k|    {
 2879|   961k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|  2.80M|    {
 2883|  2.80M|        return m_current;
 2884|  2.80M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|  1.84M|    {
 2888|  1.84M|        return m_range.end();
 2889|  1.84M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   879k|    {
 2903|   879k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   879k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   879k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   879k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2905|   879k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 879k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   879k|        }
 2909|   879k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   879k|    static_cast<    \
  |  |  929|   879k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   879k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   961k|    {
 2893|   961k|        return ranges::subrange{begin(), end()};
 2894|   961k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   961k|    {
 6037|   961k|        const bool need_skipped_width =
 6038|   961k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 961k]
  |  Branch (6038:33): [True: 0, False: 961k]
  ------------------
 6039|   961k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   961k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 961k]
  ------------------
 6043|   961k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 961k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   961k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 961k, False: 0]
  |  Branch (6047:56): [True: 961k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   961k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 961k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.91M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   961k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   961k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   961k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   961k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.4k, False: 948k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  12.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  12.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  12.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  12.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  12.4k|    }                                                  \
  |  |  |  | 3671|   961k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   948k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.91M|                            make_eof_scan_error));
 6058|       |
 6059|  1.91M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 948k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   948k|            return result_type{it, 0};
 6067|  1.91M|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   961k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   868k|    {
 6079|   868k|        const bool need_skipped_width =
 6080|   868k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 868k]
  |  Branch (6080:33): [True: 0, False: 868k]
  ------------------
 6081|   868k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   868k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 868k]
  ------------------
 6084|   868k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 868k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   868k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 868k, False: 0]
  ------------------
 6093|   868k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 868k]
  ------------------
 6094|   868k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   868k|        return result_type{rng.begin(), 0};
 6118|   868k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6192|   312k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   312k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   312k|            auto rd = make_reader<T, char_type>();
 6198|   312k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 312k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   312k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   312k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   312k|    {
 6124|   312k|        const bool need_skipped_width =
 6125|   312k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 312k]
  |  Branch (6125:33): [True: 0, False: 312k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   312k|        auto it = rng.begin();
 6129|   312k|        std::ptrdiff_t prefix_width = 0;
 6130|   312k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 312k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   312k|        else {
 6138|   312k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   312k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   312k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   312k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.76k, False: 308k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.76k|    }                                                  \
  |  |  |  | 3671|   312k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   308k|            std::tie(it, prefix_width) = prefix_result;
 6140|   308k|        }
 6141|   308k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   308k|        std::ptrdiff_t value_width = 0;
 6145|   308k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 308k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   308k|        else {
 6161|   308k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   308k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   308k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 23.5k, False: 285k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  23.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  23.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  23.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  23.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  23.5k|    }                                                  \
  |  | 3671|   308k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   285k|                                             specs, value, loc));
 6163|       |
 6164|   285k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 285k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   285k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   285k|        std::ptrdiff_t postfix_width = 0;
 6173|   285k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 281k, False: 3.34k]
  ------------------
 6174|   281k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   281k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   281k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   281k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 281k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   281k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   281k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   281k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   281k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   281k|                                 value_width));
 6178|   281k|            std::tie(it, postfix_width) = postfix_result;
 6179|   281k|        }
 6180|       |
 6181|   285k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   285k|                                                 value_width, postfix_width);
 6183|   285k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 285k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   285k|        return it;
 6188|   285k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6192|   322k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   322k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   322k|            auto rd = make_reader<T, char_type>();
 6198|   322k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 322k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   322k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   322k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   322k|    {
 6124|   322k|        const bool need_skipped_width =
 6125|   322k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 322k]
  |  Branch (6125:33): [True: 0, False: 322k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   322k|        auto it = rng.begin();
 6129|   322k|        std::ptrdiff_t prefix_width = 0;
 6130|   322k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 322k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   322k|        else {
 6138|   322k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   322k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   322k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   322k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.21k, False: 318k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.21k|    }                                                  \
  |  |  |  | 3671|   322k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   318k|            std::tie(it, prefix_width) = prefix_result;
 6140|   318k|        }
 6141|   318k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   318k|        std::ptrdiff_t value_width = 0;
 6145|   318k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 318k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   318k|        else {
 6161|   318k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   318k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   318k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   318k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 23.1k, False: 295k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  23.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  23.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  23.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  23.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  23.1k|    }                                                  \
  |  | 3671|   318k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   295k|                                             specs, value, loc));
 6163|       |
 6164|   295k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 295k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   295k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   295k|        std::ptrdiff_t postfix_width = 0;
 6173|   295k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 291k, False: 3.74k]
  ------------------
 6174|   291k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   291k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   291k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   291k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 291k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   291k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   291k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   291k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   291k|                                 value_width));
 6178|   291k|            std::tie(it, postfix_width) = postfix_result;
 6179|   291k|        }
 6180|       |
 6181|   295k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   295k|                                                 value_width, postfix_width);
 6183|   295k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 295k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   295k|        return it;
 6188|   295k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6192|   326k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   326k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   326k|            auto rd = make_reader<T, char_type>();
 6198|   326k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 326k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   326k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   326k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   326k|    {
 6124|   326k|        const bool need_skipped_width =
 6125|   326k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 326k]
  |  Branch (6125:33): [True: 0, False: 326k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   326k|        auto it = rng.begin();
 6129|   326k|        std::ptrdiff_t prefix_width = 0;
 6130|   326k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 326k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   326k|        else {
 6138|   326k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   326k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   326k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   326k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   326k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.48k, False: 321k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.48k|    }                                                  \
  |  |  |  | 3671|   326k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   321k|            std::tie(it, prefix_width) = prefix_result;
 6140|   321k|        }
 6141|   321k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   321k|        std::ptrdiff_t value_width = 0;
 6145|   321k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 321k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   321k|        else {
 6161|   321k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   321k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   321k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   321k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 22.8k, False: 298k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  22.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  22.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  22.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  22.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  22.8k|    }                                                  \
  |  | 3671|   321k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   321k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   298k|                                             specs, value, loc));
 6163|       |
 6164|   298k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 298k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   298k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   298k|        std::ptrdiff_t postfix_width = 0;
 6173|   298k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 294k, False: 3.98k]
  ------------------
 6174|   294k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   294k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   294k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   294k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 294k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   294k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   294k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   294k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   294k|                                 value_width));
 6178|   294k|            std::tie(it, postfix_width) = postfix_result;
 6179|   294k|        }
 6180|       |
 6181|   298k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   298k|                                                 value_width, postfix_width);
 6183|   298k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 298k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   298k|        return it;
 6188|   298k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   178k|{
 5795|   178k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 426, False: 177k]
  |  |  ------------------
  ------------------
 5796|    426|        return unexpected(e);
 5797|    426|    }
 5798|       |
 5799|   177k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 177k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   177k|    return skip_classic_whitespace(range);
 5804|   177k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5870|  54.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  54.6k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  54.6k|            auto rd = make_reader<T, char_type>();
 5876|  54.6k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  54.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  54.6k|    {
 5863|  54.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  54.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  54.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  54.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 276, False: 54.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    276|    }                                                  \
  |  |  |  | 3671|  54.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  54.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  54.3k|                        .transform_error(make_eof_scan_error));
 5865|  54.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  54.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  54.3k|    {
 4152|  54.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  54.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  54.3k|        float_reader<CharT> rd{};
 4155|  54.3k|        return read_impl<Range>(
 4156|  54.3k|            range, rd,
 4157|  54.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  54.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  54.3k|            },
 4160|  54.3k|            value);
 4161|  54.3k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3657|   354k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  54.3k|        : m_fptr([](storage fn,
  743|  54.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.3k|              cvref<T> obj = *get<T>(fn);
  745|  54.3k|              if constexpr (std::is_void_v<R>) {
  746|  54.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  54.3k|              }
  748|  54.3k|              else {
  749|  54.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.3k|              }
  751|  54.3k|          }),
  752|  54.3k|          m_storage(std::addressof(f))
  753|  54.3k|    {
  754|  54.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  54.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  54.3k|              else {
  749|  54.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.3k|              }
  751|  54.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  54.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  54.3k|        else if constexpr (std::is_object_v<T>) {
  688|  54.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  54.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  54.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  54.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  54.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  54.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  54.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  54.3k|        {
  662|  54.3k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5870|  60.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  60.6k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  60.6k|            auto rd = make_reader<T, char_type>();
 5876|  60.6k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  60.6k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  60.6k|    {
 5863|  60.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  60.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  60.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  60.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 315, False: 60.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    315|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    315|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    315|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    315|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    315|    }                                                  \
  |  |  |  | 3671|  60.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  60.3k|                        .transform_error(make_eof_scan_error));
 5865|  60.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  60.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  60.3k|    {
 4152|  60.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  60.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  60.3k|        float_reader<CharT> rd{};
 4155|  60.3k|        return read_impl<Range>(
 4156|  60.3k|            range, rd,
 4157|  60.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  60.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  60.3k|            },
 4160|  60.3k|            value);
 4161|  60.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  60.3k|        : m_fptr([](storage fn,
  743|  60.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.3k|              cvref<T> obj = *get<T>(fn);
  745|  60.3k|              if constexpr (std::is_void_v<R>) {
  746|  60.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  60.3k|              }
  748|  60.3k|              else {
  749|  60.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.3k|              }
  751|  60.3k|          }),
  752|  60.3k|          m_storage(std::addressof(f))
  753|  60.3k|    {
  754|  60.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  60.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  60.3k|              else {
  749|  60.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.3k|              }
  751|  60.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  60.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  60.3k|        else if constexpr (std::is_object_v<T>) {
  688|  60.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  60.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  60.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  60.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  60.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  60.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  60.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  60.3k|        {
  662|  60.3k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5870|  62.7k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|  62.7k|                          basic_contiguous_scan_context<char_type>>) {
 5875|  62.7k|            auto rd = make_reader<T, char_type>();
 5876|  62.7k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  62.7k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5862|  62.7k|    {
 5863|  62.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  62.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  62.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  62.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 342, False: 62.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    342|    }                                                  \
  |  |  |  | 3671|  62.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  62.3k|                        .transform_error(make_eof_scan_error));
 5865|  62.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  62.7k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4151|  62.3k|    {
 4152|  62.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  62.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  62.3k|        float_reader<CharT> rd{};
 4155|  62.3k|        return read_impl<Range>(
 4156|  62.3k|            range, rd,
 4157|  62.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  62.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  62.3k|            },
 4160|  62.3k|            value);
 4161|  62.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  62.3k|        : m_fptr([](storage fn,
  743|  62.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  62.3k|              cvref<T> obj = *get<T>(fn);
  745|  62.3k|              if constexpr (std::is_void_v<R>) {
  746|  62.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  62.3k|              }
  748|  62.3k|              else {
  749|  62.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  62.3k|              }
  751|  62.3k|          }),
  752|  62.3k|          m_storage(std::addressof(f))
  753|  62.3k|    {
  754|  62.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  62.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  62.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  62.3k|              else {
  749|  62.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  62.3k|              }
  751|  62.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  62.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  62.3k|        else if constexpr (std::is_object_v<T>) {
  688|  62.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  62.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4157|  62.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  62.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  62.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  62.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  62.3k|        {
  662|  62.3k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2875|   493k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   493k|    static_cast<    \
  |  |  929|   493k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2876|   493k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   493k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|   493k|          m_current(m_range.begin())
 2878|   493k|    {
 2879|   493k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  1.31M|    {
 2883|  1.31M|        return m_current;
 2884|  1.31M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|   822k|    {
 2888|   822k|        return m_range.end();
 2889|   822k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   329k|    {
 2903|   329k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   329k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2905|   329k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 329k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   329k|        }
 2909|   329k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   329k|    static_cast<    \
  |  |  929|   329k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   329k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|   493k|    {
 2893|   493k|        return ranges::subrange{begin(), end()};
 2894|   493k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   493k|    {
 6037|   493k|        const bool need_skipped_width =
 6038|   493k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 493k]
  |  Branch (6038:33): [True: 0, False: 493k]
  ------------------
 6039|   493k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   493k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 493k]
  ------------------
 6043|   493k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 493k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   493k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 493k, False: 0]
  |  Branch (6047:56): [True: 493k, False: 0]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   493k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 493k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   983k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   493k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   493k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   493k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   493k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.73k, False: 490k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.73k|    }                                                  \
  |  |  |  | 3671|   493k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   490k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   983k|                            make_eof_scan_error));
 6058|       |
 6059|   983k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 490k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   490k|            return result_type{it, 0};
 6067|   983k|        }
 6068|       |
 6069|      0|        return result_type{rng.begin(), 0};
 6070|   493k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   327k|    {
 6079|   327k|        const bool need_skipped_width =
 6080|   327k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 327k]
  |  Branch (6080:33): [True: 0, False: 327k]
  ------------------
 6081|   327k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   327k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 327k]
  ------------------
 6084|   327k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 327k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   327k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 327k, False: 0]
  ------------------
 6093|   327k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 0, False: 327k]
  ------------------
 6094|   327k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 0]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 0]
  ------------------
 6096|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   327k|        return result_type{rng.begin(), 0};
 6118|   327k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6192|   158k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   158k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   158k|            auto rd = make_reader<T, char_type>();
 6198|   158k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 158k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   158k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   158k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   158k|    {
 6124|   158k|        const bool need_skipped_width =
 6125|   158k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 158k]
  |  Branch (6125:33): [True: 0, False: 158k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   158k|        auto it = rng.begin();
 6129|   158k|        std::ptrdiff_t prefix_width = 0;
 6130|   158k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 158k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   158k|        else {
 6138|   158k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   158k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   158k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   158k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 852, False: 157k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    852|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    852|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    852|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    852|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    852|    }                                                  \
  |  |  |  | 3671|   158k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   157k|            std::tie(it, prefix_width) = prefix_result;
 6140|   157k|        }
 6141|   157k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   157k|        std::ptrdiff_t value_width = 0;
 6145|   157k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 157k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   157k|        else {
 6161|   157k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   157k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   157k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.8k, False: 103k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  53.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  53.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  53.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  53.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  53.8k|    }                                                  \
  |  | 3671|   157k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   103k|                                             specs, value, loc));
 6163|       |
 6164|   103k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 103k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   103k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   103k|        std::ptrdiff_t postfix_width = 0;
 6173|   103k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 103k, False: 358]
  ------------------
 6174|   103k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   103k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   103k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   103k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   103k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   103k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   103k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   103k|                                 value_width));
 6178|   103k|            std::tie(it, postfix_width) = postfix_result;
 6179|   103k|        }
 6180|       |
 6181|   103k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   103k|                                                 value_width, postfix_width);
 6183|   103k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 103k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   103k|        return it;
 6188|   103k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6192|   166k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   166k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   166k|            auto rd = make_reader<T, char_type>();
 6198|   166k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   166k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   166k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   166k|    {
 6124|   166k|        const bool need_skipped_width =
 6125|   166k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 166k]
  |  Branch (6125:33): [True: 0, False: 166k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   166k|        auto it = rng.begin();
 6129|   166k|        std::ptrdiff_t prefix_width = 0;
 6130|   166k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 166k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   166k|        else {
 6138|   166k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 920, False: 165k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    920|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    920|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    920|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    920|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    920|    }                                                  \
  |  |  |  | 3671|   166k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   165k|            std::tie(it, prefix_width) = prefix_result;
 6140|   165k|        }
 6141|   165k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   165k|        std::ptrdiff_t value_width = 0;
 6145|   165k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 165k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   165k|        else {
 6161|   165k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   165k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   165k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   165k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.7k, False: 111k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  53.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  53.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  53.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  53.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  53.7k|    }                                                  \
  |  | 3671|   165k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   111k|                                             specs, value, loc));
 6163|       |
 6164|   111k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 111k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   111k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   111k|        std::ptrdiff_t postfix_width = 0;
 6173|   111k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 111k, False: 390]
  ------------------
 6174|   111k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   111k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   111k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   111k|                                 value_width));
 6178|   111k|            std::tie(it, postfix_width) = postfix_result;
 6179|   111k|        }
 6180|       |
 6181|   111k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   111k|                                                 value_width, postfix_width);
 6183|   111k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 111k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   111k|        return it;
 6188|   111k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6192|   168k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   168k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   168k|            auto rd = make_reader<T, char_type>();
 6198|   168k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 168k]
  |  |  ------------------
  ------------------
 6199|      0|                return unexpected(e);
 6200|      0|            }
 6201|       |
 6202|   168k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   168k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6123|   168k|    {
 6124|   168k|        const bool need_skipped_width =
 6125|   168k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 168k]
  |  Branch (6125:33): [True: 0, False: 168k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   168k|        auto it = rng.begin();
 6129|   168k|        std::ptrdiff_t prefix_width = 0;
 6130|   168k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 168k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   168k|        else {
 6138|   168k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   168k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   168k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   168k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 960, False: 167k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    960|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    960|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    960|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    960|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    960|    }                                                  \
  |  |  |  | 3671|   168k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   167k|            std::tie(it, prefix_width) = prefix_result;
 6140|   167k|        }
 6141|   167k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   167k|        std::ptrdiff_t value_width = 0;
 6145|   167k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 167k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   167k|        else {
 6161|   167k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   167k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   167k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 53.7k, False: 114k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  53.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  53.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  53.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  53.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  53.7k|    }                                                  \
  |  | 3671|   167k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   114k|                                             specs, value, loc));
 6163|       |
 6164|   114k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 114k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   114k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   114k|        std::ptrdiff_t postfix_width = 0;
 6173|   114k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 113k, False: 408]
  ------------------
 6174|   113k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   113k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   113k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   113k|                                 value_width));
 6178|   113k|            std::tie(it, postfix_width) = postfix_result;
 6179|   113k|        }
 6180|       |
 6181|   114k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   114k|                                                 value_width, postfix_width);
 6183|   114k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 114k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   114k|        return it;
 6188|   114k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   177k|{
 5795|   177k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 426, False: 177k]
  |  |  ------------------
  ------------------
 5796|    426|        return unexpected(e);
 5797|    426|    }
 5798|       |
 5799|   177k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 177k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   177k|    return skip_classic_whitespace(range);
 5804|   177k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  54.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  54.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  54.6k|            auto rd = make_reader<T, char_type>();
 5880|  54.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 54.6k, False: 0]
  ------------------
 5881|  54.6k|                return impl(rd, range, value);
 5882|  54.6k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  54.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  54.6k|    {
 5863|  54.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  54.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  54.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  54.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 276, False: 54.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    276|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    276|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    276|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    276|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    276|    }                                                  \
  |  |  |  | 3671|  54.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  54.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  54.3k|                        .transform_error(make_eof_scan_error));
 5865|  54.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  54.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  54.3k|    {
 4152|  54.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  54.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  54.3k|        float_reader<CharT> rd{};
 4155|  54.3k|        return read_impl<Range>(
 4156|  54.3k|            range, rd,
 4157|  54.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  54.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  54.3k|            },
 4160|  54.3k|            value);
 4161|  54.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  54.3k|        : m_fptr([](storage fn,
  743|  54.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.3k|              cvref<T> obj = *get<T>(fn);
  745|  54.3k|              if constexpr (std::is_void_v<R>) {
  746|  54.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  54.3k|              }
  748|  54.3k|              else {
  749|  54.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.3k|              }
  751|  54.3k|          }),
  752|  54.3k|          m_storage(std::addressof(f))
  753|  54.3k|    {
  754|  54.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  54.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  54.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  54.3k|              else {
  749|  54.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  54.3k|              }
  751|  54.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  54.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  54.3k|        else if constexpr (std::is_object_v<T>) {
  688|  54.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  54.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  54.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  54.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  54.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  54.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  54.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  54.3k|        {
  662|  54.3k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  60.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  60.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  60.6k|            auto rd = make_reader<T, char_type>();
 5880|  60.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 60.6k, False: 0]
  ------------------
 5881|  60.6k|                return impl(rd, range, value);
 5882|  60.6k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  60.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  60.6k|    {
 5863|  60.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  60.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  60.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  60.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  60.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 315, False: 60.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    315|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    315|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    315|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    315|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    315|    }                                                  \
  |  |  |  | 3671|  60.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  60.3k|                        .transform_error(make_eof_scan_error));
 5865|  60.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  60.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  60.3k|    {
 4152|  60.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  60.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  60.3k|        float_reader<CharT> rd{};
 4155|  60.3k|        return read_impl<Range>(
 4156|  60.3k|            range, rd,
 4157|  60.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  60.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  60.3k|            },
 4160|  60.3k|            value);
 4161|  60.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  60.3k|        : m_fptr([](storage fn,
  743|  60.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.3k|              cvref<T> obj = *get<T>(fn);
  745|  60.3k|              if constexpr (std::is_void_v<R>) {
  746|  60.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  60.3k|              }
  748|  60.3k|              else {
  749|  60.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.3k|              }
  751|  60.3k|          }),
  752|  60.3k|          m_storage(std::addressof(f))
  753|  60.3k|    {
  754|  60.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  60.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  60.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  60.3k|              else {
  749|  60.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  60.3k|              }
  751|  60.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  60.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  60.3k|        else if constexpr (std::is_object_v<T>) {
  688|  60.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  60.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  60.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  60.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  60.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  60.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  60.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  60.3k|        {
  662|  60.3k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  62.6k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|  62.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  62.6k|            auto rd = make_reader<T, char_type>();
 5880|  62.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 62.6k, False: 0]
  ------------------
 5881|  62.6k|                return impl(rd, range, value);
 5882|  62.6k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|  62.6k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5862|  62.6k|    {
 5863|  62.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  62.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  62.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  62.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  62.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 342, False: 62.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    342|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    342|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    342|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    342|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    342|    }                                                  \
  |  |  |  | 3671|  62.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  62.3k|                        .transform_error(make_eof_scan_error));
 5865|  62.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  62.6k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4151|  62.3k|    {
 4152|  62.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  62.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4153|       |
 4154|  62.3k|        float_reader<CharT> rd{};
 4155|  62.3k|        return read_impl<Range>(
 4156|  62.3k|            range, rd,
 4157|  62.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  62.3k|                return r.read_source(SCN_FWD(args)...);
 4159|  62.3k|            },
 4160|  62.3k|            value);
 4161|  62.3k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  62.3k|        : m_fptr([](storage fn,
  743|  62.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  62.3k|              cvref<T> obj = *get<T>(fn);
  745|  62.3k|              if constexpr (std::is_void_v<R>) {
  746|  62.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  62.3k|              }
  748|  62.3k|              else {
  749|  62.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  62.3k|              }
  751|  62.3k|          }),
  752|  62.3k|          m_storage(std::addressof(f))
  753|  62.3k|    {
  754|  62.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  62.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  62.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  62.3k|              else {
  749|  62.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  62.3k|              }
  751|  62.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  62.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  62.3k|        else if constexpr (std::is_object_v<T>) {
  688|  62.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  62.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4157|  62.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4158|  62.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  62.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4159|  62.3k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  62.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  62.3k|        {
  662|  62.3k|        }

LLVMFuzzerTestOneInput:
   54|  2.73k|{
   55|  2.73k|    scn::fuzz::run(data, size);
   56|  2.73k|    return 0;
   57|  2.73k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.73k|{
   33|  2.73k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.73k]
  |  Branch (33:35): [True: 0, False: 2.73k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.73k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.73k|    const auto& f =
   40|  2.73k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.73k|    do_basic_run(sv, f);
   42|       |
   43|  2.73k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.73k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.73k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.73k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.73k, False: 0]
  ------------------
   47|  2.73k|        do_basic_run(wsv_transcode, wf);
   48|  2.73k|    }
   49|  2.73k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.73k|{
   25|  2.73k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.73k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.73k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.73k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.73k|{
   25|  2.73k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.73k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.73k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.73k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  5.47k|{
   25|  5.47k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  5.47k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  5.47k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  5.47k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  5.47k|{
   25|  5.47k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  5.47k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  5.47k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  5.47k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.73k|{
   52|  2.73k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.73k|    string_buffer.resize(size);
   56|  2.73k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.73k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.73k|    const auto wsv_reinterpret_size =
   61|  2.73k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 67, False: 2.66k]
  ------------------
   62|  2.73k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.73k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.73k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.73k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.73k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.73k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.73k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.73k|{
  122|  2.73k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.73k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.73k|    buf.resize(sizeof...(Args));
  125|  2.73k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.73k|    return buf;
  127|  2.73k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.73k|{
  108|  2.73k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  2.73k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  2.73k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.73k|{
  185|  2.73k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.73k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.73k|                                   format_strings);
  188|  2.73k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.73k|{
  133|       |    // Regular scan
  134|  16.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.4k, False: 2.73k]
  ------------------
  135|  16.4k|        auto it = scn::ranges::begin(source);
  136|   199k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   199k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   199k|            auto result = scn::scan<T>(
  139|   199k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   199k|                scn::runtime_format(f));
  141|   199k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 16.4k, False: 182k]
  ------------------
  142|  16.4k|                break;
  143|  16.4k|            }
  144|   182k|            it = result->begin();
  145|   182k|        }
  146|  16.4k|    }
  147|       |
  148|       |    // scan localized
  149|  16.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 16.4k, False: 2.73k]
  ------------------
  150|  16.4k|        auto it = scn::ranges::begin(source);
  151|   199k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   199k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   199k|            auto result = scn::scan<T>(
  154|   199k|                global_locale,
  155|   199k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   199k|                scn::runtime_format(f));
  157|   199k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 16.4k, False: 182k]
  ------------------
  158|  16.4k|                break;
  159|  16.4k|            }
  160|   182k|            it = result->begin();
  161|   182k|        }
  162|  16.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.73k|    {
  166|  2.73k|        auto it = scn::ranges::begin(source);
  167|  42.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  42.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  42.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  42.9k|            auto result = scn::scan_value<T>(
  170|  42.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  42.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.73k, False: 40.1k]
  ------------------
  172|  2.73k|                break;
  173|  2.73k|            }
  174|  40.1k|            it = result->begin();
  175|  40.1k|        }
  176|  2.73k|    }
  177|  2.73k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.73k|{
  133|       |    // Regular scan
  134|  16.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.4k, False: 2.73k]
  ------------------
  135|  16.4k|        auto it = scn::ranges::begin(source);
  136|   206k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   206k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   206k|            auto result = scn::scan<T>(
  139|   206k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   206k|                scn::runtime_format(f));
  141|   206k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 16.4k, False: 189k]
  ------------------
  142|  16.4k|                break;
  143|  16.4k|            }
  144|   189k|            it = result->begin();
  145|   189k|        }
  146|  16.4k|    }
  147|       |
  148|       |    // scan localized
  149|  16.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 16.4k, False: 2.73k]
  ------------------
  150|  16.4k|        auto it = scn::ranges::begin(source);
  151|   206k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   206k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   206k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   206k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   206k|            auto result = scn::scan<T>(
  154|   206k|                global_locale,
  155|   206k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   206k|                scn::runtime_format(f));
  157|   206k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 16.4k, False: 189k]
  ------------------
  158|  16.4k|                break;
  159|  16.4k|            }
  160|   189k|            it = result->begin();
  161|   189k|        }
  162|  16.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.73k|    {
  166|  2.73k|        auto it = scn::ranges::begin(source);
  167|  44.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  44.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  44.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  44.7k|            auto result = scn::scan_value<T>(
  170|  44.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  44.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.73k, False: 41.9k]
  ------------------
  172|  2.73k|                break;
  173|  2.73k|            }
  174|  41.9k|            it = result->begin();
  175|  41.9k|        }
  176|  2.73k|    }
  177|  2.73k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.73k|{
  133|       |    // Regular scan
  134|  16.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.4k, False: 2.73k]
  ------------------
  135|  16.4k|        auto it = scn::ranges::begin(source);
  136|   208k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   208k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   208k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   208k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   208k|            auto result = scn::scan<T>(
  139|   208k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   208k|                scn::runtime_format(f));
  141|   208k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 16.4k, False: 192k]
  ------------------
  142|  16.4k|                break;
  143|  16.4k|            }
  144|   192k|            it = result->begin();
  145|   192k|        }
  146|  16.4k|    }
  147|       |
  148|       |    // scan localized
  149|  16.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 16.4k, False: 2.73k]
  ------------------
  150|  16.4k|        auto it = scn::ranges::begin(source);
  151|   208k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   208k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   208k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   208k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   208k|            auto result = scn::scan<T>(
  154|   208k|                global_locale,
  155|   208k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   208k|                scn::runtime_format(f));
  157|   208k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 16.4k, False: 192k]
  ------------------
  158|  16.4k|                break;
  159|  16.4k|            }
  160|   192k|            it = result->begin();
  161|   192k|        }
  162|  16.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.73k|    {
  166|  2.73k|        auto it = scn::ranges::begin(source);
  167|  45.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  45.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  45.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  45.5k|            auto result = scn::scan_value<T>(
  170|  45.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  45.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.73k, False: 42.7k]
  ------------------
  172|  2.73k|                break;
  173|  2.73k|            }
  174|  42.7k|            it = result->begin();
  175|  42.7k|        }
  176|  2.73k|    }
  177|  2.73k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.73k|{
  133|       |    // Regular scan
  134|  16.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.4k, False: 2.73k]
  ------------------
  135|  16.4k|        auto it = scn::ranges::begin(source);
  136|   229k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   229k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   229k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   229k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   229k|            auto result = scn::scan<T>(
  139|   229k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   229k|                scn::runtime_format(f));
  141|   229k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 16.4k, False: 212k]
  ------------------
  142|  16.4k|                break;
  143|  16.4k|            }
  144|   212k|            it = result->begin();
  145|   212k|        }
  146|  16.4k|    }
  147|       |
  148|       |    // scan localized
  149|  16.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 16.4k, False: 2.73k]
  ------------------
  150|  16.4k|        auto it = scn::ranges::begin(source);
  151|   229k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   229k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   229k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   229k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   229k|            auto result = scn::scan<T>(
  154|   229k|                global_locale,
  155|   229k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   229k|                scn::runtime_format(f));
  157|   229k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 16.4k, False: 212k]
  ------------------
  158|  16.4k|                break;
  159|  16.4k|            }
  160|   212k|            it = result->begin();
  161|   212k|        }
  162|  16.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.73k|    {
  166|  2.73k|        auto it = scn::ranges::begin(source);
  167|  46.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  46.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  46.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  46.7k|            auto result = scn::scan_value<T>(
  170|  46.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  46.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.73k, False: 44.0k]
  ------------------
  172|  2.73k|                break;
  173|  2.73k|            }
  174|  44.0k|            it = result->begin();
  175|  44.0k|        }
  176|  2.73k|    }
  177|  2.73k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.73k|{
  133|       |    // Regular scan
  134|  16.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.4k, False: 2.73k]
  ------------------
  135|  16.4k|        auto it = scn::ranges::begin(source);
  136|   239k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   239k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   239k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   239k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   239k|            auto result = scn::scan<T>(
  139|   239k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   239k|                scn::runtime_format(f));
  141|   239k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 16.4k, False: 222k]
  ------------------
  142|  16.4k|                break;
  143|  16.4k|            }
  144|   222k|            it = result->begin();
  145|   222k|        }
  146|  16.4k|    }
  147|       |
  148|       |    // scan localized
  149|  16.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 16.4k, False: 2.73k]
  ------------------
  150|  16.4k|        auto it = scn::ranges::begin(source);
  151|   239k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   239k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   239k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   239k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   239k|            auto result = scn::scan<T>(
  154|   239k|                global_locale,
  155|   239k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   239k|                scn::runtime_format(f));
  157|   239k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 16.4k, False: 222k]
  ------------------
  158|  16.4k|                break;
  159|  16.4k|            }
  160|   222k|            it = result->begin();
  161|   222k|        }
  162|  16.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.73k|    {
  166|  2.73k|        auto it = scn::ranges::begin(source);
  167|  49.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  49.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  49.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  49.0k|            auto result = scn::scan_value<T>(
  170|  49.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  49.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.73k, False: 46.2k]
  ------------------
  172|  2.73k|                break;
  173|  2.73k|            }
  174|  46.2k|            it = result->begin();
  175|  46.2k|        }
  176|  2.73k|    }
  177|  2.73k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.73k|{
  133|       |    // Regular scan
  134|  16.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.4k, False: 2.73k]
  ------------------
  135|  16.4k|        auto it = scn::ranges::begin(source);
  136|   241k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   241k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   241k|            auto result = scn::scan<T>(
  139|   241k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   241k|                scn::runtime_format(f));
  141|   241k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 16.4k, False: 225k]
  ------------------
  142|  16.4k|                break;
  143|  16.4k|            }
  144|   225k|            it = result->begin();
  145|   225k|        }
  146|  16.4k|    }
  147|       |
  148|       |    // scan localized
  149|  16.4k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 16.4k, False: 2.73k]
  ------------------
  150|  16.4k|        auto it = scn::ranges::begin(source);
  151|   241k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   241k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   241k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   241k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   241k|            auto result = scn::scan<T>(
  154|   241k|                global_locale,
  155|   241k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   241k|                scn::runtime_format(f));
  157|   241k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 16.4k, False: 225k]
  ------------------
  158|  16.4k|                break;
  159|  16.4k|            }
  160|   225k|            it = result->begin();
  161|   225k|        }
  162|  16.4k|    }
  163|       |
  164|       |    // scan_value
  165|  2.73k|    {
  166|  2.73k|        auto it = scn::ranges::begin(source);
  167|  49.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  49.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  49.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  49.5k|            auto result = scn::scan_value<T>(
  170|  49.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  49.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.73k, False: 46.7k]
  ------------------
  172|  2.73k|                break;
  173|  2.73k|            }
  174|  46.7k|            it = result->begin();
  175|  46.7k|        }
  176|  2.73k|    }
  177|  2.73k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.73k|{
   90|  2.73k|    using char_type = ranges::range_value_t<Source>;
   91|  2.73k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.73k|    deque.clear();
   93|  2.73k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.73k|              std::back_inserter(deque));
   95|  2.73k|    return deque;
   96|  2.73k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.73k|{
   79|  2.73k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  2.73k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  2.73k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.73k|{
  122|  2.73k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.73k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.73k|    buf.resize(sizeof...(Args));
  125|  2.73k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.73k|    return buf;
  127|  2.73k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.73k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  2.73k|    else {
  112|  2.73k|        return wformat_string_view_buffer;
  113|  2.73k|    }
  114|  2.73k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  5.47k|{
  185|  5.47k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  5.47k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  5.47k|                                   format_strings);
  188|  5.47k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  5.47k|{
  133|       |    // Regular scan
  134|  32.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.8k, False: 5.47k]
  ------------------
  135|  32.8k|        auto it = scn::ranges::begin(source);
  136|  97.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  97.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  97.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  97.2k|            auto result = scn::scan<T>(
  139|  97.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  97.2k|                scn::runtime_format(f));
  141|  97.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 32.8k, False: 64.4k]
  ------------------
  142|  32.8k|                break;
  143|  32.8k|            }
  144|  64.4k|            it = result->begin();
  145|  64.4k|        }
  146|  32.8k|    }
  147|       |
  148|       |    // scan localized
  149|  32.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 32.8k, False: 5.47k]
  ------------------
  150|  32.8k|        auto it = scn::ranges::begin(source);
  151|  97.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  97.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  97.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  97.2k|            auto result = scn::scan<T>(
  154|  97.2k|                global_locale,
  155|  97.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  97.2k|                scn::runtime_format(f));
  157|  97.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 32.8k, False: 64.4k]
  ------------------
  158|  32.8k|                break;
  159|  32.8k|            }
  160|  64.4k|            it = result->begin();
  161|  64.4k|        }
  162|  32.8k|    }
  163|       |
  164|       |    // scan_value
  165|  5.47k|    {
  166|  5.47k|        auto it = scn::ranges::begin(source);
  167|  18.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  18.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  18.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  18.2k|            auto result = scn::scan_value<T>(
  170|  18.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  18.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 5.47k, False: 12.7k]
  ------------------
  172|  5.47k|                break;
  173|  5.47k|            }
  174|  12.7k|            it = result->begin();
  175|  12.7k|        }
  176|  5.47k|    }
  177|  5.47k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  5.47k|{
  133|       |    // Regular scan
  134|  32.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.8k, False: 5.47k]
  ------------------
  135|  32.8k|        auto it = scn::ranges::begin(source);
  136|   103k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   103k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   103k|            auto result = scn::scan<T>(
  139|   103k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   103k|                scn::runtime_format(f));
  141|   103k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 32.8k, False: 70.4k]
  ------------------
  142|  32.8k|                break;
  143|  32.8k|            }
  144|  70.4k|            it = result->begin();
  145|  70.4k|        }
  146|  32.8k|    }
  147|       |
  148|       |    // scan localized
  149|  32.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 32.8k, False: 5.47k]
  ------------------
  150|  32.8k|        auto it = scn::ranges::begin(source);
  151|   103k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   103k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   103k|            auto result = scn::scan<T>(
  154|   103k|                global_locale,
  155|   103k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   103k|                scn::runtime_format(f));
  157|   103k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 32.8k, False: 70.4k]
  ------------------
  158|  32.8k|                break;
  159|  32.8k|            }
  160|  70.4k|            it = result->begin();
  161|  70.4k|        }
  162|  32.8k|    }
  163|       |
  164|       |    // scan_value
  165|  5.47k|    {
  166|  5.47k|        auto it = scn::ranges::begin(source);
  167|  20.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  20.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  20.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  20.2k|            auto result = scn::scan_value<T>(
  170|  20.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  20.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 5.47k, False: 14.7k]
  ------------------
  172|  5.47k|                break;
  173|  5.47k|            }
  174|  14.7k|            it = result->begin();
  175|  14.7k|        }
  176|  5.47k|    }
  177|  5.47k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  5.47k|{
  133|       |    // Regular scan
  134|  32.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.8k, False: 5.47k]
  ------------------
  135|  32.8k|        auto it = scn::ranges::begin(source);
  136|   105k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   105k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   105k|            auto result = scn::scan<T>(
  139|   105k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   105k|                scn::runtime_format(f));
  141|   105k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 32.8k, False: 72.5k]
  ------------------
  142|  32.8k|                break;
  143|  32.8k|            }
  144|  72.5k|            it = result->begin();
  145|  72.5k|        }
  146|  32.8k|    }
  147|       |
  148|       |    // scan localized
  149|  32.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 32.8k, False: 5.47k]
  ------------------
  150|  32.8k|        auto it = scn::ranges::begin(source);
  151|   105k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   105k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   105k|            auto result = scn::scan<T>(
  154|   105k|                global_locale,
  155|   105k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   105k|                scn::runtime_format(f));
  157|   105k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 32.8k, False: 72.5k]
  ------------------
  158|  32.8k|                break;
  159|  32.8k|            }
  160|  72.5k|            it = result->begin();
  161|  72.5k|        }
  162|  32.8k|    }
  163|       |
  164|       |    // scan_value
  165|  5.47k|    {
  166|  5.47k|        auto it = scn::ranges::begin(source);
  167|  20.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  20.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  20.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  20.9k|            auto result = scn::scan_value<T>(
  170|  20.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  20.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 5.47k, False: 15.4k]
  ------------------
  172|  5.47k|                break;
  173|  5.47k|            }
  174|  15.4k|            it = result->begin();
  175|  15.4k|        }
  176|  5.47k|    }
  177|  5.47k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  5.47k|{
  133|       |    // Regular scan
  134|  32.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.8k, False: 5.47k]
  ------------------
  135|  32.8k|        auto it = scn::ranges::begin(source);
  136|  97.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  97.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  97.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  97.1k|            auto result = scn::scan<T>(
  139|  97.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  97.1k|                scn::runtime_format(f));
  141|  97.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 32.8k, False: 64.3k]
  ------------------
  142|  32.8k|                break;
  143|  32.8k|            }
  144|  64.3k|            it = result->begin();
  145|  64.3k|        }
  146|  32.8k|    }
  147|       |
  148|       |    // scan localized
  149|  32.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 32.8k, False: 5.47k]
  ------------------
  150|  32.8k|        auto it = scn::ranges::begin(source);
  151|  97.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  97.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  97.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  97.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  97.1k|            auto result = scn::scan<T>(
  154|  97.1k|                global_locale,
  155|  97.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  97.1k|                scn::runtime_format(f));
  157|  97.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 32.8k, False: 64.3k]
  ------------------
  158|  32.8k|                break;
  159|  32.8k|            }
  160|  64.3k|            it = result->begin();
  161|  64.3k|        }
  162|  32.8k|    }
  163|       |
  164|       |    // scan_value
  165|  5.47k|    {
  166|  5.47k|        auto it = scn::ranges::begin(source);
  167|  18.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  18.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  18.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  18.2k|            auto result = scn::scan_value<T>(
  170|  18.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  18.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 5.47k, False: 12.7k]
  ------------------
  172|  5.47k|                break;
  173|  5.47k|            }
  174|  12.7k|            it = result->begin();
  175|  12.7k|        }
  176|  5.47k|    }
  177|  5.47k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  5.47k|{
  133|       |    // Regular scan
  134|  32.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.8k, False: 5.47k]
  ------------------
  135|  32.8k|        auto it = scn::ranges::begin(source);
  136|   103k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   103k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   103k|            auto result = scn::scan<T>(
  139|   103k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   103k|                scn::runtime_format(f));
  141|   103k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 32.8k, False: 70.4k]
  ------------------
  142|  32.8k|                break;
  143|  32.8k|            }
  144|  70.4k|            it = result->begin();
  145|  70.4k|        }
  146|  32.8k|    }
  147|       |
  148|       |    // scan localized
  149|  32.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 32.8k, False: 5.47k]
  ------------------
  150|  32.8k|        auto it = scn::ranges::begin(source);
  151|   103k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   103k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   103k|            auto result = scn::scan<T>(
  154|   103k|                global_locale,
  155|   103k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   103k|                scn::runtime_format(f));
  157|   103k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 32.8k, False: 70.4k]
  ------------------
  158|  32.8k|                break;
  159|  32.8k|            }
  160|  70.4k|            it = result->begin();
  161|  70.4k|        }
  162|  32.8k|    }
  163|       |
  164|       |    // scan_value
  165|  5.47k|    {
  166|  5.47k|        auto it = scn::ranges::begin(source);
  167|  20.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  20.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  20.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  20.2k|            auto result = scn::scan_value<T>(
  170|  20.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  20.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 5.47k, False: 14.7k]
  ------------------
  172|  5.47k|                break;
  173|  5.47k|            }
  174|  14.7k|            it = result->begin();
  175|  14.7k|        }
  176|  5.47k|    }
  177|  5.47k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  5.47k|{
  133|       |    // Regular scan
  134|  32.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 32.8k, False: 5.47k]
  ------------------
  135|  32.8k|        auto it = scn::ranges::begin(source);
  136|   105k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   105k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   105k|            auto result = scn::scan<T>(
  139|   105k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   105k|                scn::runtime_format(f));
  141|   105k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 32.8k, False: 72.4k]
  ------------------
  142|  32.8k|                break;
  143|  32.8k|            }
  144|  72.4k|            it = result->begin();
  145|  72.4k|        }
  146|  32.8k|    }
  147|       |
  148|       |    // scan localized
  149|  32.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 32.8k, False: 5.47k]
  ------------------
  150|  32.8k|        auto it = scn::ranges::begin(source);
  151|   105k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   105k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   105k|            auto result = scn::scan<T>(
  154|   105k|                global_locale,
  155|   105k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   105k|                scn::runtime_format(f));
  157|   105k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 32.8k, False: 72.4k]
  ------------------
  158|  32.8k|                break;
  159|  32.8k|            }
  160|  72.4k|            it = result->begin();
  161|  72.4k|        }
  162|  32.8k|    }
  163|       |
  164|       |    // scan_value
  165|  5.47k|    {
  166|  5.47k|        auto it = scn::ranges::begin(source);
  167|  20.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  20.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  20.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  20.8k|            auto result = scn::scan_value<T>(
  170|  20.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  20.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 5.47k, False: 15.4k]
  ------------------
  172|  5.47k|                break;
  173|  5.47k|            }
  174|  15.4k|            it = result->begin();
  175|  15.4k|        }
  176|  5.47k|    }
  177|  5.47k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  5.47k|{
   90|  5.47k|    using char_type = ranges::range_value_t<Source>;
   91|  5.47k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  5.47k|    deque.clear();
   93|  5.47k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  5.47k|              std::back_inserter(deque));
   95|  5.47k|    return deque;
   96|  5.47k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  5.47k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  5.47k|    else {
   83|  5.47k|        return wnoncontiguous_buffer;
   84|  5.47k|    }
   85|  5.47k|}

