_ZN10fast_float19parse_number_stringIcEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   923k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   923k|  chars_format const fmt = options.format;
  277|   923k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   923k|  parsed_number_string_t<UC> answer;
  280|   923k|  answer.valid = false;
  281|   923k|  answer.too_many_digits = false;
  282|   923k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   923k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 923k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   923k|  UC const * const start_digits = p;
  303|       |
  304|   923k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|  4.88M|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 4.42M, False: 460k]
  |  Branch (306:25): [True: 3.96M, False: 462k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|  3.96M|    i = 10 * i +
  310|  3.96M|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|  3.96M|    ++p;
  312|  3.96M|  }
  313|   923k|  UC const * const end_of_integer_part = p;
  314|   923k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   923k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   923k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   923k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 923k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   923k|  int64_t exponent = 0;
  324|   923k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 462k, False: 460k]
  |  Branch (324:49): [True: 169k, False: 292k]
  ------------------
  325|   923k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 169k, False: 753k]
  ------------------
  326|   169k|    ++p;
  327|   169k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|   169k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|   708k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 602k, False: 105k]
  |  Branch (332:27): [True: 538k, False: 64.0k]
  ------------------
  333|   538k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|   538k|      ++p;
  335|   538k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|   538k|    }
  337|   169k|    exponent = before - p;
  338|   169k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|   169k|    digit_count -= exponent;
  340|   169k|  }
  341|   923k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   923k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 923k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   923k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 923k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   923k|  int64_t exp_number = 0;            // explicit exponential part
  351|   923k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 796k, False: 126k]
  ------------------
  352|   923k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 356k, False: 439k]
  ------------------
  353|   923k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 77.1k, False: 279k]
  |  Branch (353:29): [True: 48.6k, False: 231k]
  ------------------
  354|   923k|       ||
  355|   923k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   797k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 797k]
  ------------------
  356|   797k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   797k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|   125k|    UC const * location_of_e = p;
  359|   125k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 77.1k, False: 48.6k]
  |  Branch (359:28): [True: 48.6k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|   125k|      ++p;
  361|   125k|    }
  362|   125k|    bool neg_exp = false;
  363|   125k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 125k, False: 115]
  |  Branch (363:24): [True: 6.23k, False: 119k]
  ------------------
  364|  6.23k|      neg_exp = true;
  365|  6.23k|      ++p;
  366|   119k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 119k, False: 115]
  |  Branch (366:31): [True: 32.1k, False: 87.2k]
  ------------------
  367|  32.1k|      ++p;
  368|  32.1k|    }
  369|   125k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 165, False: 125k]
  |  Branch (369:24): [True: 500, False: 125k]
  ------------------
  370|    665|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 665]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    665|      p = location_of_e;
  376|   125k|    } else {
  377|   390k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 297k, False: 92.1k]
  |  Branch (377:29): [True: 264k, False: 32.9k]
  ------------------
  378|   264k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|   264k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 243k, False: 21.0k]
  ------------------
  380|   243k|          exp_number = 10 * exp_number + digit;
  381|   243k|        }
  382|   264k|        ++p;
  383|   264k|      }
  384|   125k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 6.19k, False: 118k]
  ------------------
  385|   125k|      exponent += exp_number;
  386|   125k|    }
  387|   797k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   797k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 671k, False: 126k]
  |  Branch (389:44): [True: 0, False: 671k]
  ------------------
  390|   797k|  }
  391|   923k|  answer.lastmatch = p;
  392|   923k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   923k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 155k, False: 767k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|   155k|    UC const * start = start_digits;
  405|   634k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 632k, False: 1.32k]
  |  Branch (405:32): [True: 471k, False: 161k]
  |  Branch (405:53): [True: 7.23k, False: 154k]
  ------------------
  406|   478k|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 471k, False: 7.23k]
  ------------------
  407|   478k|      start++;
  408|   478k|    }
  409|       |
  410|   155k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 150k, False: 4.95k]
  ------------------
  411|   150k|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|   150k|      i = 0;
  416|   150k|      p = answer.integer.ptr;
  417|   150k|      UC const* int_end = p + answer.integer.len();
  418|   150k|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  1.51M|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 1.47M, False: 40.0k]
  |  Branch (419:54): [True: 1.36M, False: 110k]
  ------------------
  420|  1.36M|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  1.36M|        ++p;
  422|  1.36M|      }
  423|   150k|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 40.0k, False: 110k]
  ------------------
  424|  40.0k|        exponent = end_of_integer_part - p + exp_number;
  425|  40.0k|      }
  426|   110k|      else { // We have a value with a fractional component.
  427|   110k|        p = answer.fraction.ptr;
  428|   110k|        UC const* frac_end = p + answer.fraction.len();
  429|  1.95M|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 1.84M, False: 110k]
  |  Branch (429:56): [True: 1.84M, False: 0]
  ------------------
  430|  1.84M|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  1.84M|          ++p;
  432|  1.84M|        }
  433|   110k|        exponent = answer.fraction.ptr - p + exp_number;
  434|   110k|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|   150k|    }
  437|   155k|  }
  438|   923k|  answer.exponent = exponent;
  439|   923k|  answer.mantissa = i;
  440|   923k|  return answer;
  441|   923k|}
_ZN10fast_float10is_integerIcEEbT_:
   35|  5.45M|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|  5.45M|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 144k, False: 5.30M]
  |  Branch (36:27): [True: 415k, False: 4.89M]
  ------------------
   37|  5.45M|}
_ZN10fast_float26loop_parse_if_eight_digitsERPKcS1_Rm:
  247|   169k|void loop_parse_if_eight_digits(const char*& p, const char* const pend, uint64_t& i) {
  248|       |  // optimizes better than parse_if_eight_digits_unrolled() for UC = char.
  249|   633k|  while ((std::distance(p, pend) >= 8) && is_made_of_eight_digits_fast(read8_to_u64(p))) {
  ------------------
  |  Branch (249:10): [True: 515k, False: 118k]
  |  Branch (249:43): [True: 463k, False: 51.4k]
  ------------------
  250|   463k|    i = i * 100000000 + parse_eight_digits_unrolled(read8_to_u64(p)); // in rare cases, this will overflow, but that's ok
  251|   463k|    p += 8;
  252|   463k|  }
  253|   169k|}
_ZN10fast_float28is_made_of_eight_digits_fastEm:
  169|   515k|fastfloat_really_inline constexpr bool is_made_of_eight_digits_fast(uint64_t val)  noexcept {
  170|   515k|  return !((((val + 0x4646464646464646) | (val - 0x3030303030303030)) &
  171|   515k|     0x8080808080808080));
  172|   515k|}
_ZN10fast_float12read8_to_u64IcEEmPKT_:
   53|  1.17M|uint64_t read8_to_u64(const UC *chars) {
   54|  1.17M|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|      0|    uint64_t val = 0;
   56|      0|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 0, False: 0]
  ------------------
   57|      0|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|      0|      ++chars;
   59|      0|    }
   60|      0|    return val;
   61|      0|  }
   62|  1.17M|  uint64_t val;
   63|  1.17M|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|  1.17M|  return val;
   69|  1.17M|}
_ZN10fast_float27parse_eight_digits_unrolledEm:
  146|   664k|uint32_t parse_eight_digits_unrolled(uint64_t val) {
  147|   664k|  const uint64_t mask = 0x000000FF000000FF;
  148|   664k|  const uint64_t mul1 = 0x000F424000000064; // 100 + (1000000ULL << 32)
  149|   664k|  const uint64_t mul2 = 0x0000271000000001; // 1 + (10000ULL << 32)
  150|   664k|  val -= 0x3030303030303030;
  151|   664k|  val = (val * 10) + (val >> 8); // val = (val * 2561) >> 8;
  152|   664k|  val = (((val & mask) * mul1) + (((val >> 16) & mask) * mul2)) >> 32;
  153|   664k|  return uint32_t(val);
  154|   664k|}
_ZN10fast_float27parse_eight_digits_unrolledIcEEjPKT_:
  160|   200k|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|   200k|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|   200k|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|   200k|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|   200k|}
_ZN10fast_float19parse_number_stringIDiEENS_22parsed_number_string_tIT_EEPKS2_S5_NS_15parse_options_tIS2_EE:
  275|   392k|parsed_number_string_t<UC> parse_number_string(UC const *p, UC const * pend, parse_options_t<UC> options) noexcept {
  276|   392k|  chars_format const fmt = options.format;
  277|   392k|  UC const decimal_point = options.decimal_point;
  278|       |
  279|   392k|  parsed_number_string_t<UC> answer;
  280|   392k|  answer.valid = false;
  281|   392k|  answer.too_many_digits = false;
  282|   392k|  answer.negative = (*p == UC('-'));
  283|       |#ifdef FASTFLOAT_ALLOWS_LEADING_PLUS // disabled by default
  284|       |  if ((*p == UC('-')) || (!(fmt & FASTFLOAT_JSONFMT) && *p == UC('+'))) {
  285|       |#else
  286|   392k|  if (*p == UC('-')) { // C++17 20.19.3.(7.1) explicitly forbids '+' sign here
  ------------------
  |  Branch (286:7): [True: 0, False: 392k]
  ------------------
  287|      0|#endif
  288|      0|    ++p;
  289|      0|    if (p == pend) {
  ------------------
  |  Branch (289:9): [True: 0, False: 0]
  ------------------
  290|      0|      return answer;
  291|      0|    }
  292|      0|    if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|      0|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (292:9): [True: 0, False: 0]
  ------------------
  293|      0|      if (!is_integer(*p)) { // a sign must be followed by an integer
  ------------------
  |  Branch (293:11): [True: 0, False: 0]
  ------------------
  294|      0|        return answer;
  295|      0|      }    
  296|      0|    } else {
  297|      0|      if (!is_integer(*p) && (*p != decimal_point)) { // a sign must be followed by an integer or the dot
  ------------------
  |  Branch (297:11): [True: 0, False: 0]
  |  Branch (297:30): [True: 0, False: 0]
  ------------------
  298|      0|        return answer;
  299|      0|      }
  300|      0|    }
  301|      0|  }
  302|   392k|  UC const * const start_digits = p;
  303|       |
  304|   392k|  uint64_t i = 0; // an unsigned int avoids signed overflows (which are bad)
  305|       |
  306|   842k|  while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (306:10): [True: 574k, False: 267k]
  |  Branch (306:25): [True: 449k, False: 124k]
  ------------------
  307|       |    // a multiplication by 10 is cheaper than an arbitrary integer
  308|       |    // multiplication
  309|   449k|    i = 10 * i +
  310|   449k|        uint64_t(*p - UC('0')); // might overflow, we will handle the overflow later
  311|   449k|    ++p;
  312|   449k|  }
  313|   392k|  UC const * const end_of_integer_part = p;
  314|   392k|  int64_t digit_count = int64_t(end_of_integer_part - start_digits);
  315|   392k|  answer.integer = span<const UC>(start_digits, size_t(digit_count));
  316|   392k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   392k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (316:7): [True: 0, False: 392k]
  ------------------
  317|       |    // at least 1 digit in integer part, without leading zeros
  318|      0|    if (digit_count == 0 || (start_digits[0] == UC('0') && digit_count > 1)) {
  ------------------
  |  Branch (318:9): [True: 0, False: 0]
  |  Branch (318:30): [True: 0, False: 0]
  |  Branch (318:60): [True: 0, False: 0]
  ------------------
  319|      0|      return answer;
  320|      0|    }
  321|      0|  }
  322|       |
  323|   392k|  int64_t exponent = 0;
  324|   392k|  const bool has_decimal_point = (p != pend) && (*p == decimal_point);
  ------------------
  |  Branch (324:34): [True: 124k, False: 267k]
  |  Branch (324:49): [True: 2.16k, False: 122k]
  ------------------
  325|   392k|  if (has_decimal_point) {
  ------------------
  |  Branch (325:7): [True: 2.16k, False: 389k]
  ------------------
  326|  2.16k|    ++p;
  327|  2.16k|    UC const * before = p;
  328|       |    // can occur at most twice without overflowing, but let it occur more, since
  329|       |    // for integers with many digits, digit parsing is the primary bottleneck.
  330|  2.16k|    loop_parse_if_eight_digits(p, pend, i);
  331|       |
  332|  13.2k|    while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (332:12): [True: 11.8k, False: 1.38k]
  |  Branch (332:27): [True: 11.0k, False: 784]
  ------------------
  333|  11.0k|      uint8_t digit = uint8_t(*p - UC('0'));
  334|  11.0k|      ++p;
  335|  11.0k|      i = i * 10 + digit; // in rare cases, this will overflow, but that's ok
  336|  11.0k|    }
  337|  2.16k|    exponent = before - p;
  338|  2.16k|    answer.fraction = span<const UC>(before, size_t(p - before));
  339|  2.16k|    digit_count -= exponent;
  340|  2.16k|  }
  341|   392k|  if (fmt & FASTFLOAT_JSONFMT) {
  ------------------
  |  |   19|   392k|#define FASTFLOAT_JSONFMT (1 << 5)
  ------------------
  |  Branch (341:7): [True: 0, False: 392k]
  ------------------
  342|       |    // at least 1 digit in fractional part
  343|      0|    if (has_decimal_point && exponent == 0) {
  ------------------
  |  Branch (343:9): [True: 0, False: 0]
  |  Branch (343:30): [True: 0, False: 0]
  ------------------
  344|      0|      return answer;
  345|      0|    }
  346|      0|  } 
  347|   392k|  else if (digit_count == 0) { // we must have encountered at least one integer!
  ------------------
  |  Branch (347:12): [True: 0, False: 392k]
  ------------------
  348|      0|    return answer;
  349|      0|  }
  350|   392k|  int64_t exp_number = 0;            // explicit exponential part
  351|   392k|  if ( ((fmt & chars_format::scientific) &&
  ------------------
  |  Branch (351:9): [True: 319k, False: 73.0k]
  ------------------
  352|   392k|        (p != pend) &&
  ------------------
  |  Branch (352:9): [True: 123k, False: 195k]
  ------------------
  353|   392k|        ((UC('e') == *p) || (UC('E') == *p)))
  ------------------
  |  Branch (353:10): [True: 215, False: 123k]
  |  Branch (353:29): [True: 12.6k, False: 110k]
  ------------------
  354|   392k|       ||
  355|   392k|       ((fmt & FASTFLOAT_FORTRANFMT) &&
  ------------------
  |  |   20|   379k|#define FASTFLOAT_FORTRANFMT (1 << 6)
  ------------------
  |  Branch (355:9): [True: 0, False: 379k]
  ------------------
  356|   379k|        (p != pend) &&
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|   379k|        ((UC('+') == *p) || (UC('-') == *p) || (UC('d') == *p) || (UC('D') == *p)))) {
  ------------------
  |  Branch (357:10): [True: 0, False: 0]
  |  Branch (357:29): [True: 0, False: 0]
  |  Branch (357:48): [True: 0, False: 0]
  |  Branch (357:67): [True: 0, False: 0]
  ------------------
  358|  12.8k|    UC const * location_of_e = p;
  359|  12.8k|    if ((UC('e') == *p) || (UC('E') == *p) || (UC('d') == *p) || (UC('D') == *p)) {
  ------------------
  |  Branch (359:9): [True: 215, False: 12.6k]
  |  Branch (359:28): [True: 12.6k, False: 0]
  |  Branch (359:47): [True: 0, False: 0]
  |  Branch (359:66): [True: 0, False: 0]
  ------------------
  360|  12.8k|      ++p;
  361|  12.8k|    }
  362|  12.8k|    bool neg_exp = false;
  363|  12.8k|    if ((p != pend) && (UC('-') == *p)) {
  ------------------
  |  Branch (363:9): [True: 12.8k, False: 20]
  |  Branch (363:24): [True: 2.98k, False: 9.86k]
  ------------------
  364|  2.98k|      neg_exp = true;
  365|  2.98k|      ++p;
  366|  9.88k|    } else if ((p != pend) && (UC('+') == *p)) { // '+' on exponent is allowed by C++17 20.19.3.(7.1)
  ------------------
  |  Branch (366:16): [True: 9.86k, False: 20]
  |  Branch (366:31): [True: 265, False: 9.59k]
  ------------------
  367|    265|      ++p;
  368|    265|    }
  369|  12.8k|    if ((p == pend) || !is_integer(*p)) {
  ------------------
  |  Branch (369:9): [True: 40, False: 12.8k]
  |  Branch (369:24): [True: 360, False: 12.4k]
  ------------------
  370|    400|      if(!(fmt & chars_format::fixed)) {
  ------------------
  |  Branch (370:10): [True: 0, False: 400]
  ------------------
  371|       |        // We are in error.
  372|      0|        return answer;
  373|      0|      }
  374|       |      // Otherwise, we will be ignoring the 'e'.
  375|    400|      p = location_of_e;
  376|  12.4k|    } else {
  377|  46.2k|      while ((p != pend) && is_integer(*p)) {
  ------------------
  |  Branch (377:14): [True: 37.6k, False: 8.62k]
  |  Branch (377:29): [True: 33.7k, False: 3.84k]
  ------------------
  378|  33.7k|        uint8_t digit = uint8_t(*p - UC('0'));
  379|  33.7k|        if (exp_number < 0x10000000) {
  ------------------
  |  Branch (379:13): [True: 31.8k, False: 1.93k]
  ------------------
  380|  31.8k|          exp_number = 10 * exp_number + digit;
  381|  31.8k|        }
  382|  33.7k|        ++p;
  383|  33.7k|      }
  384|  12.4k|      if(neg_exp) { exp_number = - exp_number; }
  ------------------
  |  Branch (384:10): [True: 2.96k, False: 9.50k]
  ------------------
  385|  12.4k|      exponent += exp_number;
  386|  12.4k|    }
  387|   379k|  } else {
  388|       |    // If it scientific and not fixed, we have to bail out.
  389|   379k|    if((fmt & chars_format::scientific) && !(fmt & chars_format::fixed)) { return answer; }
  ------------------
  |  Branch (389:8): [True: 306k, False: 73.0k]
  |  Branch (389:44): [True: 0, False: 306k]
  ------------------
  390|   379k|  }
  391|   392k|  answer.lastmatch = p;
  392|   392k|  answer.valid = true;
  393|       |
  394|       |  // If we frequently had to deal with long strings of digits,
  395|       |  // we could extend our code by using a 128-bit integer instead
  396|       |  // of a 64-bit integer. However, this is uncommon.
  397|       |  //
  398|       |  // We can deal with up to 19 digits.
  399|   392k|  if (digit_count > 19) { // this is uncommon
  ------------------
  |  Branch (399:7): [True: 1.09k, False: 390k]
  ------------------
  400|       |    // It is possible that the integer had an overflow.
  401|       |    // We have to handle the case where we have 0.0000somenumber.
  402|       |    // We need to be mindful of the case where we only have zeroes...
  403|       |    // E.g., 0.000000000...000.
  404|  1.09k|    UC const * start = start_digits;
  405|  1.33k|    while ((start != pend) && (*start == UC('0') || *start == decimal_point)) {
  ------------------
  |  Branch (405:12): [True: 1.33k, False: 0]
  |  Branch (405:32): [True: 240, False: 1.09k]
  |  Branch (405:53): [True: 0, False: 1.09k]
  ------------------
  406|    240|      if(*start == UC('0')) { digit_count --; }
  ------------------
  |  Branch (406:10): [True: 240, False: 0]
  ------------------
  407|    240|      start++;
  408|    240|    }
  409|       |
  410|  1.09k|    if (digit_count > 19) {
  ------------------
  |  Branch (410:9): [True: 992, False: 100]
  ------------------
  411|    992|      answer.too_many_digits = true;
  412|       |      // Let us start again, this time, avoiding overflows.
  413|       |      // We don't need to check if is_integer, since we use the
  414|       |      // pre-tokenized spans from above.
  415|    992|      i = 0;
  416|    992|      p = answer.integer.ptr;
  417|    992|      UC const* int_end = p + answer.integer.len();
  418|    992|      const uint64_t minimal_nineteen_digit_integer{ 1000000000000000000 };
  419|  15.2k|      while ((i < minimal_nineteen_digit_integer) && (p != int_end)) {
  ------------------
  |  Branch (419:14): [True: 14.7k, False: 468]
  |  Branch (419:54): [True: 14.2k, False: 524]
  ------------------
  420|  14.2k|        i = i * 10 + uint64_t(*p - UC('0'));
  421|  14.2k|        ++p;
  422|  14.2k|      }
  423|    992|      if (i >= minimal_nineteen_digit_integer) { // We have a big integers
  ------------------
  |  Branch (423:11): [True: 468, False: 524]
  ------------------
  424|    468|        exponent = end_of_integer_part - p + exp_number;
  425|    468|      }
  426|    524|      else { // We have a value with a fractional component.
  427|    524|        p = answer.fraction.ptr;
  428|    524|        UC const* frac_end = p + answer.fraction.len();
  429|  5.21k|        while ((i < minimal_nineteen_digit_integer) && (p != frac_end)) {
  ------------------
  |  Branch (429:16): [True: 4.68k, False: 524]
  |  Branch (429:56): [True: 4.68k, False: 0]
  ------------------
  430|  4.68k|          i = i * 10 + uint64_t(*p - UC('0'));
  431|  4.68k|          ++p;
  432|  4.68k|        }
  433|    524|        exponent = answer.fraction.ptr - p + exp_number;
  434|    524|      }
  435|       |      // We have now corrected both exponent and i, to a truncated value
  436|    992|    }
  437|  1.09k|  }
  438|   392k|  answer.exponent = exponent;
  439|   392k|  answer.mantissa = i;
  440|   392k|  return answer;
  441|   392k|}
_ZN10fast_float10is_integerIDiEEbT_:
   35|   637k|fastfloat_really_inline constexpr bool is_integer(UC c) noexcept {
   36|   637k|  return !(c > UC('9') || c < UC('0'));
  ------------------
  |  Branch (36:12): [True: 126k, False: 510k]
  |  Branch (36:27): [True: 3.03k, False: 507k]
  ------------------
   37|   637k|}
_ZN10fast_float26loop_parse_if_eight_digitsIDiTnNSt3__19enable_ifIXntsr3std7is_sameIT_cEE5valueEiE4typeELi0EEEvRPKS3_S7_Rm:
  237|  2.16k|void loop_parse_if_eight_digits(const UC*& p, const UC* const pend, uint64_t& i) {
  238|  2.16k|  if (!has_simd_opt<UC>()) {
  ------------------
  |  Branch (238:7): [Folded - Ignored]
  ------------------
  239|  2.16k|    return;
  240|  2.16k|  }
  241|      0|  while ((std::distance(p, pend) >= 8) && simd_parse_if_eight_digits_unrolled(p, i)) { // in rare cases, this will overflow, but that's ok
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:43): [True: 0, False: 0]
  ------------------
  242|      0|    p += 8;
  243|      0|  }
  244|      0|}
_ZN10fast_float27parse_eight_digits_unrolledIDiEEjPKT_:
  160|    108|uint32_t parse_eight_digits_unrolled(UC const * chars)  noexcept {
  161|    108|  if (cpp20_and_in_constexpr() || !has_simd_opt<UC>()) {
  ------------------
  |  Branch (161:7): [Folded - Ignored]
  |  Branch (161:35): [Folded - Ignored]
  ------------------
  162|    108|    return parse_eight_digits_unrolled(read8_to_u64(chars)); // truncation okay
  163|    108|  }
  164|      0|  return parse_eight_digits_unrolled(simd_read8_to_u64(chars));
  165|    108|}
_ZN10fast_float12read8_to_u64IDiEEmPKT_:
   53|    108|uint64_t read8_to_u64(const UC *chars) {
   54|    108|  if (cpp20_and_in_constexpr() || !std::is_same<UC, char>::value) {
  ------------------
  |  Branch (54:7): [Folded - Ignored]
  |  Branch (54:35): [Folded - Ignored]
  ------------------
   55|    108|    uint64_t val = 0;
   56|    972|    for(int i = 0; i < 8; ++i) {
  ------------------
  |  Branch (56:20): [True: 864, False: 108]
  ------------------
   57|    864|      val |= uint64_t(uint8_t(*chars)) << (i*8);
   58|    864|      ++chars;
   59|    864|    }
   60|    108|    return val;
   61|    108|  }
   62|      0|  uint64_t val;
   63|      0|  ::memcpy(&val, chars, sizeof(uint64_t));
   64|       |#if FASTFLOAT_IS_BIG_ENDIAN == 1
   65|       |  // Need to read as-if the number was in little-endian order.
   66|       |  val = byteswap(val);
   67|       |#endif
   68|      0|  return val;
   69|    108|}

_ZN10fast_float6bigintC2Ev:
  412|  52.0k|  FASTFLOAT_CONSTEXPR20 bigint(): vec() {}
_ZN10fast_float8stackvecILt62EEC2Ev:
   46|   113k|  stackvec() = default;
_ZN10fast_float6bigint3mulEm:
  563|   178k|  FASTFLOAT_CONSTEXPR20 bool mul(limb y) noexcept {
  564|   178k|    return small_mul(vec, y);
  565|   178k|  }
_ZN10fast_float9small_mulILt62EEEbRNS_8stackvecIXT_EEEm:
  282|   264k|bool small_mul(stackvec<size>& vec, limb y) noexcept {
  283|   264k|  limb carry = 0;
  284|  1.08M|  for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (284:26): [True: 817k, False: 264k]
  ------------------
  285|   817k|    vec[index] = scalar_mul(vec[index], y, carry);
  286|   817k|  }
  287|   264k|  if (carry != 0) {
  ------------------
  |  Branch (287:7): [True: 154k, False: 109k]
  ------------------
  288|   154k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|   154k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 154k]
  |  |  ------------------
  ------------------
  289|   154k|  }
  290|   264k|  return true;
  291|   264k|}
_ZNK10fast_float8stackvecILt62EE3lenEv:
   76|  2.05M|  constexpr size_t len() const noexcept {
   77|  2.05M|    return length;
   78|  2.05M|  }
_ZN10fast_float10scalar_mulEmmRm:
  229|   817k|limb scalar_mul(limb x, limb y, limb& carry) noexcept {
  230|   817k|#ifdef FASTFLOAT_64BIT_LIMB
  231|   817k|  #if defined(__SIZEOF_INT128__)
  232|       |  // GCC and clang both define it as an extension.
  233|   817k|  __uint128_t z = __uint128_t(x) * __uint128_t(y) + __uint128_t(carry);
  234|   817k|  carry = limb(z >> limb_bits);
  235|   817k|  return limb(z);
  236|       |  #else
  237|       |  // fallback, no native 128-bit integer multiplication with carry.
  238|       |  // on msvc, this optimizes identically, somehow.
  239|       |  value128 z = full_multiplication(x, y);
  240|       |  bool overflow;
  241|       |  z.low = scalar_add(z.low, carry, overflow);
  242|       |  z.high += uint64_t(overflow);  // cannot overflow
  243|       |  carry = z.high;
  244|       |  return z.low;
  245|       |  #endif
  246|       |#else
  247|       |  uint64_t z = uint64_t(x) * uint64_t(y) + uint64_t(carry);
  248|       |  carry = limb(z >> limb_bits);
  249|       |  return limb(z);
  250|       |#endif
  251|   817k|}
_ZN10fast_float8stackvecILt62EEixEm:
   57|  2.24M|  FASTFLOAT_CONSTEXPR14 limb& operator[](size_t index) noexcept {
   58|  2.24M|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  2.24M|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   59|  2.24M|    return data[index];
   60|  2.24M|  }
_ZN10fast_float8stackvecILt62EE8try_pushEm:
   91|   216k|  FASTFLOAT_CONSTEXPR14 bool try_push(limb value) noexcept {
   92|   216k|    if (len() < capacity()) {
  ------------------
  |  Branch (92:9): [True: 216k, False: 0]
  ------------------
   93|   216k|      push_unchecked(value);
   94|   216k|      return true;
   95|   216k|    } else {
   96|      0|      return false;
   97|      0|    }
   98|   216k|  }
_ZNK10fast_float8stackvecILt62EE8capacityEv:
   82|   252k|  constexpr size_t capacity() const noexcept {
   83|   252k|    return size;
   84|   252k|  }
_ZN10fast_float8stackvecILt62EE14push_uncheckedEm:
   86|   265k|  FASTFLOAT_CONSTEXPR14 void push_unchecked(limb value) noexcept {
   87|   265k|    data[length] = value;
   88|   265k|    length++;
   89|   265k|  }
_ZN10fast_float6bigint3addEm:
  567|   178k|  FASTFLOAT_CONSTEXPR20 bool add(limb y) noexcept {
  568|   178k|    return small_add(vec, y);
  569|   178k|  }
_ZN10fast_float9small_addILt62EEEbRNS_8stackvecIXT_EEEm:
  275|   178k|bool small_add(stackvec<size>& vec, limb y) noexcept {
  276|   178k|  return small_add_from(vec, y, 0);
  277|   178k|}
_ZN10fast_float14small_add_fromILt62EEEbRNS_8stackvecIXT_EEEmm:
  257|   178k|bool small_add_from(stackvec<size>& vec, limb y, size_t start) noexcept {
  258|   178k|  size_t index = start;
  259|   178k|  limb carry = y;
  260|   178k|  bool overflow;
  261|   271k|  while (carry != 0 && index < vec.len()) {
  ------------------
  |  Branch (261:10): [True: 144k, False: 126k]
  |  Branch (261:24): [True: 92.5k, False: 52.0k]
  ------------------
  262|  92.5k|    vec[index] = scalar_add(vec[index], carry, overflow);
  263|  92.5k|    carry = limb(overflow);
  264|  92.5k|    index += 1;
  265|  92.5k|  }
  266|   178k|  if (carry != 0) {
  ------------------
  |  Branch (266:7): [True: 52.0k, False: 126k]
  ------------------
  267|  52.0k|    FASTFLOAT_TRY(vec.try_push(carry));
  ------------------
  |  |  178|  52.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 52.0k]
  |  |  ------------------
  ------------------
  268|  52.0k|  }
  269|   178k|  return true;
  270|   178k|}
_ZN10fast_float10scalar_addEmmRb:
  209|   230k|limb scalar_add(limb x, limb y, bool& overflow) noexcept {
  210|   230k|  limb z;
  211|       |// gcc and clang
  212|   230k|#if defined(__has_builtin)
  213|   230k|  #if __has_builtin(__builtin_add_overflow)
  214|   230k|    if (!cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (214:9): [Folded - Ignored]
  ------------------
  215|   230k|      overflow = __builtin_add_overflow(x, y, &z);
  216|   230k|      return z;
  217|   230k|    }
  218|      0|  #endif
  219|      0|#endif
  220|       |
  221|       |  // generic, this still optimizes correctly on MSVC.
  222|      0|  z = x + y;
  223|      0|  overflow = z < x;
  224|      0|  return z;
  225|   230k|}
_ZN10fast_float6bigint5pow10Ej:
  609|  3.68k|  FASTFLOAT_CONSTEXPR20 bool pow10(uint32_t exp) noexcept {
  610|  3.68k|    FASTFLOAT_TRY(pow5(exp));
  ------------------
  |  |  178|  3.68k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.68k]
  |  |  ------------------
  ------------------
  611|  3.68k|    return pow2(exp);
  612|  3.68k|  }
_ZN10fast_float6bigint4pow5Ej:
  577|  52.0k|  FASTFLOAT_CONSTEXPR20 bool pow5(uint32_t exp) noexcept {
  578|       |    // multiply by a power of 5
  579|  52.0k|    size_t large_length = sizeof(large_power_of_5) / sizeof(limb);
  580|  52.0k|    limb_span large = limb_span(large_power_of_5, large_length);
  581|  55.3k|    while (exp >= large_step) {
  ------------------
  |  Branch (581:12): [True: 3.32k, False: 52.0k]
  ------------------
  582|  3.32k|      FASTFLOAT_TRY(large_mul(vec, large));
  ------------------
  |  |  178|  3.32k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.32k]
  |  |  ------------------
  ------------------
  583|  3.32k|      exp -= large_step;
  584|  3.32k|    }
  585|  52.0k|#ifdef FASTFLOAT_64BIT_LIMB
  586|  52.0k|    uint32_t small_step = 27;
  587|  52.0k|    limb max_native = 7450580596923828125UL;
  588|       |#else
  589|       |    uint32_t small_step = 13;
  590|       |    limb max_native = 1220703125U;
  591|       |#endif
  592|  75.4k|    while (exp >= small_step) {
  ------------------
  |  Branch (592:12): [True: 23.3k, False: 52.0k]
  ------------------
  593|  23.3k|      FASTFLOAT_TRY(small_mul(vec, max_native));
  ------------------
  |  |  178|  23.3k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 23.3k]
  |  |  ------------------
  ------------------
  594|  23.3k|      exp -= small_step;
  595|  23.3k|    }
  596|  52.0k|    if (exp != 0) {
  ------------------
  |  Branch (596:9): [True: 45.4k, False: 6.61k]
  ------------------
  597|       |      // Work around clang bug https://godbolt.org/z/zedh7rrhc
  598|       |      // This is similar to https://github.com/llvm/llvm-project/issues/47746,
  599|       |      // except the workaround described there don't work here
  600|  45.4k|      FASTFLOAT_TRY(
  ------------------
  |  |  178|  45.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 45.4k]
  |  |  ------------------
  ------------------
  601|  45.4k|        small_mul(vec, limb(((void)small_power_of_5[0], small_power_of_5[exp])))
  602|  45.4k|      );
  603|  45.4k|    }
  604|       |
  605|  52.0k|    return true;
  606|  52.0k|  }
_ZN10fast_float9large_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  364|  3.32k|bool large_mul(stackvec<size>& x, limb_span y) noexcept {
  365|  3.32k|  if (y.len() == 1) {
  ------------------
  |  Branch (365:7): [True: 0, False: 3.32k]
  ------------------
  366|      0|    FASTFLOAT_TRY(small_mul(x, y[0]));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|  3.32k|  } else {
  368|  3.32k|    FASTFLOAT_TRY(long_mul(x, y));
  ------------------
  |  |  178|  3.32k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.32k]
  |  |  ------------------
  ------------------
  369|  3.32k|  }
  370|  3.32k|  return true;
  371|  3.32k|}
_ZN10fast_float8long_mulILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEE:
  335|  3.32k|bool long_mul(stackvec<size>& x, limb_span y) noexcept {
  336|  3.32k|  limb_span xs = limb_span(x.data, x.len());
  337|  3.32k|  stackvec<size> z(xs);
  338|  3.32k|  limb_span zs = limb_span(z.data, z.len());
  339|       |
  340|  3.32k|  if (y.len() != 0) {
  ------------------
  |  Branch (340:7): [True: 3.32k, False: 0]
  ------------------
  341|  3.32k|    limb y0 = y[0];
  342|  3.32k|    FASTFLOAT_TRY(small_mul(x, y0));
  ------------------
  |  |  178|  3.32k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 3.32k]
  |  |  ------------------
  ------------------
  343|  16.6k|    for (size_t index = 1; index < y.len(); index++) {
  ------------------
  |  Branch (343:28): [True: 13.2k, False: 3.32k]
  ------------------
  344|  13.2k|      limb yi = y[index];
  345|  13.2k|      stackvec<size> zi;
  346|  13.2k|      if (yi != 0) {
  ------------------
  |  Branch (346:11): [True: 13.2k, False: 0]
  ------------------
  347|       |        // re-use the same buffer throughout
  348|  13.2k|        zi.set_len(0);
  349|  13.2k|        FASTFLOAT_TRY(zi.try_extend(zs));
  ------------------
  |  |  178|  13.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
  350|  13.2k|        FASTFLOAT_TRY(small_mul(zi, yi));
  ------------------
  |  |  178|  13.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
  351|  13.2k|        limb_span zis = limb_span(zi.data, zi.len());
  352|  13.2k|        FASTFLOAT_TRY(large_add_from(x, zis, index));
  ------------------
  |  |  178|  13.2k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
  353|  13.2k|      }
  354|  13.2k|    }
  355|  3.32k|  }
  356|       |
  357|  3.32k|  x.normalize();
  358|  3.32k|  return true;
  359|  3.32k|}
_ZN10fast_float8stackvecILt62EEC2ENS_4spanImEE:
   53|  3.32k|  FASTFLOAT_CONSTEXPR20 stackvec(limb_span s) {
   54|  3.32k|    FASTFLOAT_ASSERT(try_extend(s));
  ------------------
  |  |  170|  3.32k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
   55|  3.32k|  }
_ZN10fast_float8stackvecILt62EE7set_lenEm:
   73|  49.2k|  FASTFLOAT_CONSTEXPR14 void set_len(size_t len) noexcept {
   74|  49.2k|    length = uint16_t(len);
   75|  49.2k|  }
_ZN10fast_float8stackvecILt62EE10try_extendENS_4spanImEE:
  106|  16.6k|  FASTFLOAT_CONSTEXPR20 bool try_extend(limb_span s) noexcept {
  107|  16.6k|    if (len() + s.len() <= capacity()) {
  ------------------
  |  Branch (107:9): [True: 16.6k, False: 0]
  ------------------
  108|  16.6k|      extend_unchecked(s);
  109|  16.6k|      return true;
  110|  16.6k|    } else {
  111|      0|      return false;
  112|      0|    }
  113|  16.6k|  }
_ZN10fast_float8stackvecILt62EE16extend_uncheckedENS_4spanImEE:
  100|  16.6k|  FASTFLOAT_CONSTEXPR20 void extend_unchecked(limb_span s) noexcept {
  101|  16.6k|    limb* ptr = data + length;
  102|  16.6k|    std::copy_n(s.ptr, s.len(), ptr);
  103|  16.6k|    set_len(len() + s.len());
  104|  16.6k|  }
_ZN10fast_float14large_add_fromILt62EEEbRNS_8stackvecIXT_EEENS_4spanImEEm:
  297|  13.2k|bool large_add_from(stackvec<size>& x, limb_span y, size_t start) noexcept {
  298|       |  // the effective x buffer is from `xstart..x.len()`, so exit early
  299|       |  // if we can't get that current range.
  300|  13.2k|  if (x.len() < start || y.len() > x.len() - start) {
  ------------------
  |  Branch (300:7): [True: 0, False: 13.2k]
  |  Branch (300:26): [True: 13.0k, False: 247]
  ------------------
  301|  13.0k|      FASTFLOAT_TRY(x.try_resize(y.len() + start, 0));
  ------------------
  |  |  178|  13.0k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 13.0k]
  |  |  ------------------
  ------------------
  302|  13.0k|  }
  303|       |
  304|  13.2k|  bool carry = false;
  305|   113k|  for (size_t index = 0; index < y.len(); index++) {
  ------------------
  |  Branch (305:26): [True: 99.7k, False: 13.2k]
  ------------------
  306|  99.7k|    limb xi = x[index + start];
  307|  99.7k|    limb yi = y[index];
  308|  99.7k|    bool c1 = false;
  309|  99.7k|    bool c2 = false;
  310|  99.7k|    xi = scalar_add(xi, yi, c1);
  311|  99.7k|    if (carry) {
  ------------------
  |  Branch (311:9): [True: 37.8k, False: 61.9k]
  ------------------
  312|  37.8k|      xi = scalar_add(xi, 1, c2);
  313|  37.8k|    }
  314|  99.7k|    x[index + start] = xi;
  315|  99.7k|    carry = c1 | c2;
  316|  99.7k|  }
  317|       |
  318|       |  // handle overflow
  319|  13.2k|  if (carry) {
  ------------------
  |  Branch (319:7): [True: 0, False: 13.2k]
  ------------------
  320|      0|    FASTFLOAT_TRY(small_add_from(x, 1, y.len() + start));
  ------------------
  |  |  178|      0|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  321|      0|  }
  322|  13.2k|  return true;
  323|  13.2k|}
_ZN10fast_float8stackvecILt62EE10try_resizeEmm:
  130|  13.0k|  FASTFLOAT_CONSTEXPR20 bool try_resize(size_t new_len, limb value) noexcept {
  131|  13.0k|    if (new_len > capacity()) {
  ------------------
  |  Branch (131:9): [True: 0, False: 13.0k]
  ------------------
  132|      0|      return false;
  133|  13.0k|    } else {
  134|  13.0k|      resize_unchecked(new_len, value);
  135|  13.0k|      return true;
  136|  13.0k|    }
  137|  13.0k|  }
_ZN10fast_float8stackvecILt62EE16resize_uncheckedEmm:
  118|  13.0k|  void resize_unchecked(size_t new_len, limb value) noexcept {
  119|  13.0k|    if (new_len > len()) {
  ------------------
  |  Branch (119:9): [True: 13.0k, False: 0]
  ------------------
  120|  13.0k|      size_t count = new_len - len();
  121|  13.0k|      limb* first = data + len();
  122|  13.0k|      limb* last = first + count;
  123|  13.0k|      ::std::fill(first, last, value);
  124|  13.0k|      set_len(new_len);
  125|  13.0k|    } else {
  126|      0|      set_len(new_len);
  127|      0|    }
  128|  13.0k|  }
_ZN10fast_float8stackvecILt62EE9normalizeEv:
  151|  51.6k|  FASTFLOAT_CONSTEXPR14 void normalize() noexcept {
  152|  51.6k|    while (len() > 0 && rindex(0) == 0) {
  ------------------
  |  Branch (152:12): [True: 51.6k, False: 0]
  |  Branch (152:25): [True: 0, False: 51.6k]
  ------------------
  153|      0|      length--;
  154|      0|    }
  155|  51.6k|  }
_ZNK10fast_float8stackvecILt62EE6rindexEm:
   66|  62.3k|  FASTFLOAT_CONSTEXPR14 const limb& rindex(size_t index) const noexcept {
   67|  62.3k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|  62.3k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   68|  62.3k|    size_t rindex = length - index - 1;
   69|  62.3k|    return data[rindex];
   70|  62.3k|  }
_ZN10fast_float6bigint4pow2Ej:
  572|  51.9k|  FASTFLOAT_CONSTEXPR20 bool pow2(uint32_t exp) noexcept {
  573|  51.9k|    return shl(exp);
  574|  51.9k|  }
_ZN10fast_float6bigint3shlEm:
  530|  51.9k|  FASTFLOAT_CONSTEXPR20 bool shl(size_t n) noexcept {
  531|  51.9k|    size_t rem = n % limb_bits;
  532|  51.9k|    size_t div = n / limb_bits;
  533|  51.9k|    if (rem != 0) {
  ------------------
  |  Branch (533:9): [True: 48.4k, False: 3.52k]
  ------------------
  534|  48.4k|      FASTFLOAT_TRY(shl_bits(rem));
  ------------------
  |  |  178|  48.4k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 48.4k]
  |  |  ------------------
  ------------------
  535|  48.4k|    }
  536|  51.9k|    if (div != 0) {
  ------------------
  |  Branch (536:9): [True: 6.32k, False: 45.6k]
  ------------------
  537|  6.32k|      FASTFLOAT_TRY(shl_limbs(div));
  ------------------
  |  |  178|  6.32k|#define FASTFLOAT_TRY(x) { if (!(x)) return false; }
  |  |  ------------------
  |  |  |  Branch (178:32): [True: 0, False: 6.32k]
  |  |  ------------------
  ------------------
  538|  6.32k|    }
  539|  51.9k|    return true;
  540|  51.9k|  }
_ZN10fast_float6bigint8shl_bitsEm:
  483|  48.4k|  FASTFLOAT_CONSTEXPR20 bool shl_bits(size_t n) noexcept {
  484|       |    // Internally, for each item, we shift left by n, and add the previous
  485|       |    // right shifted limb-bits.
  486|       |    // For example, we transform (for u8) shifted left 2, to:
  487|       |    //      b10100100 b01000010
  488|       |    //      b10 b10010001 b00001000
  489|  48.4k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  48.4k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  490|  48.4k|    FASTFLOAT_DEBUG_ASSERT(n < sizeof(limb) * 8);
  ------------------
  |  |  174|  48.4k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  491|       |
  492|  48.4k|    size_t shl = n;
  493|  48.4k|    size_t shr = limb_bits - shl;
  494|  48.4k|    limb prev = 0;
  495|   161k|    for (size_t index = 0; index < vec.len(); index++) {
  ------------------
  |  Branch (495:28): [True: 113k, False: 48.4k]
  ------------------
  496|   113k|      limb xi = vec[index];
  497|   113k|      vec[index] = (xi << shl) | (prev >> shr);
  498|   113k|      prev = xi;
  499|   113k|    }
  500|       |
  501|  48.4k|    limb carry = prev >> shr;
  502|  48.4k|    if (carry != 0) {
  ------------------
  |  Branch (502:9): [True: 10.2k, False: 38.1k]
  ------------------
  503|  10.2k|      return vec.try_push(carry);
  504|  10.2k|    }
  505|  38.1k|    return true;
  506|  48.4k|  }
_ZN10fast_float6bigint9shl_limbsEm:
  509|  6.32k|  FASTFLOAT_CONSTEXPR20 bool shl_limbs(size_t n) noexcept {
  510|  6.32k|    FASTFLOAT_DEBUG_ASSERT(n != 0);
  ------------------
  |  |  174|  6.32k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  511|  6.32k|    if (n + vec.len() > vec.capacity()) {
  ------------------
  |  Branch (511:9): [True: 0, False: 6.32k]
  ------------------
  512|      0|      return false;
  513|  6.32k|    } else if (!vec.is_empty()) {
  ------------------
  |  Branch (513:16): [True: 6.32k, False: 0]
  ------------------
  514|       |      // move limbs
  515|  6.32k|      limb* dst = vec.data + n;
  516|  6.32k|      const limb* src = vec.data;
  517|  6.32k|      std::copy_backward(src, src + vec.len(), dst + vec.len());
  518|       |      // fill in empty limbs
  519|  6.32k|      limb* first = vec.data;
  520|  6.32k|      limb* last = first + n;
  521|  6.32k|      ::std::fill(first, last, 0);
  522|  6.32k|      vec.set_len(n + vec.len());
  523|  6.32k|      return true;
  524|  6.32k|    } else {
  525|      0|      return true;
  526|      0|    }
  527|  6.32k|  }
_ZNK10fast_float8stackvecILt62EE8is_emptyEv:
   79|  10.0k|  constexpr bool is_empty() const noexcept {
   80|  10.0k|    return length == 0;
   81|  10.0k|  }
_ZNK10fast_float6bigint4hi64ERb:
  430|  3.68k|  FASTFLOAT_CONSTEXPR20 uint64_t hi64(bool& truncated) const noexcept {
  431|  3.68k|#ifdef FASTFLOAT_64BIT_LIMB
  432|  3.68k|    if (vec.len() == 0) {
  ------------------
  |  Branch (432:9): [True: 0, False: 3.68k]
  ------------------
  433|      0|      return empty_hi64(truncated);
  434|  3.68k|    } else if (vec.len() == 1) {
  ------------------
  |  Branch (434:16): [True: 952, False: 2.72k]
  ------------------
  435|    952|      return uint64_hi64(vec.rindex(0), truncated);
  436|  2.72k|    } else {
  437|  2.72k|      uint64_t result = uint64_hi64(vec.rindex(0), vec.rindex(1), truncated);
  438|  2.72k|      truncated |= vec.nonzero(2);
  439|  2.72k|      return result;
  440|  2.72k|    }
  441|       |#else
  442|       |    if (vec.len() == 0) {
  443|       |      return empty_hi64(truncated);
  444|       |    } else if (vec.len() == 1) {
  445|       |      return uint32_hi64(vec.rindex(0), truncated);
  446|       |    } else if (vec.len() == 2) {
  447|       |      return uint32_hi64(vec.rindex(0), vec.rindex(1), truncated);
  448|       |    } else {
  449|       |      uint64_t result = uint32_hi64(vec.rindex(0), vec.rindex(1), vec.rindex(2), truncated);
  450|       |      truncated |= vec.nonzero(3);
  451|       |      return result;
  452|       |    }
  453|       |#endif
  454|  3.68k|  }
_ZN10fast_float11uint64_hi64EmRb:
  165|    952|uint64_t uint64_hi64(uint64_t r0, bool& truncated) noexcept {
  166|    952|  truncated = false;
  167|    952|  int shl = leading_zeroes(r0);
  168|    952|  return r0 << shl;
  169|    952|}
_ZN10fast_float11uint64_hi64EmmRb:
  172|  2.72k|uint64_t uint64_hi64(uint64_t r0, uint64_t r1, bool& truncated) noexcept {
  173|  2.72k|  int shl = leading_zeroes(r0);
  174|  2.72k|  if (shl == 0) {
  ------------------
  |  Branch (174:7): [True: 36, False: 2.69k]
  ------------------
  175|     36|    truncated = r1 != 0;
  176|     36|    return r0;
  177|  2.69k|  } else {
  178|  2.69k|    int shr = 64 - shl;
  179|  2.69k|    truncated = (r1 << shl) != 0;
  180|  2.69k|    return (r0 << shl) | (r1 >> shr);
  181|  2.69k|  }
  182|  2.72k|}
_ZNK10fast_float8stackvecILt62EE7nonzeroEm:
  141|  2.72k|  FASTFLOAT_CONSTEXPR14 bool nonzero(size_t index) const noexcept {
  142|  2.76k|    while (index < len()) {
  ------------------
  |  Branch (142:12): [True: 530, False: 2.23k]
  ------------------
  143|    530|      if (rindex(index) != 0) {
  ------------------
  |  Branch (143:11): [True: 492, False: 38]
  ------------------
  144|    492|        return true;
  145|    492|      }
  146|     38|      index++;
  147|     38|    }
  148|  2.23k|    return false;
  149|  2.72k|  }
_ZNK10fast_float6bigint10bit_lengthEv:
  558|  3.68k|  FASTFLOAT_CONSTEXPR20 int bit_length() const noexcept {
  559|  3.68k|    int lz = ctlz();
  560|  3.68k|    return int(limb_bits * vec.len()) - lz;
  561|  3.68k|  }
_ZNK10fast_float6bigint4ctlzEv:
  543|  3.68k|  FASTFLOAT_CONSTEXPR20 int ctlz() const noexcept {
  544|  3.68k|    if (vec.is_empty()) {
  ------------------
  |  Branch (544:9): [True: 0, False: 3.68k]
  ------------------
  545|      0|      return 0;
  546|  3.68k|    } else {
  547|  3.68k|#ifdef FASTFLOAT_64BIT_LIMB
  548|  3.68k|      return leading_zeroes(vec.rindex(0));
  549|       |#else
  550|       |      // no use defining a specialized leading_zeroes for a 32-bit type.
  551|       |      uint64_t r0 = vec.rindex(0);
  552|       |      return leading_zeroes(r0 << 32);
  553|       |#endif
  554|  3.68k|    }
  555|  3.68k|  }
_ZN10fast_float6bigintC2Em:
  418|  48.3k|  FASTFLOAT_CONSTEXPR20 bigint(uint64_t value): vec() {
  419|  48.3k|#ifdef FASTFLOAT_64BIT_LIMB
  420|  48.3k|    vec.push_unchecked(value);
  421|       |#else
  422|       |    vec.push_unchecked(uint32_t(value));
  423|       |    vec.push_unchecked(uint32_t(value >> 32));
  424|       |#endif
  425|  48.3k|    vec.normalize();
  426|  48.3k|  }
_ZNK10fast_float6bigint7compareERKS0_:
  462|  48.3k|  FASTFLOAT_CONSTEXPR20 int compare(const bigint& other) const noexcept {
  463|  48.3k|    if (vec.len() > other.vec.len()) {
  ------------------
  |  Branch (463:9): [True: 0, False: 48.3k]
  ------------------
  464|      0|      return 1;
  465|  48.3k|    } else if (vec.len() < other.vec.len()) {
  ------------------
  |  Branch (465:16): [True: 0, False: 48.3k]
  ------------------
  466|      0|      return -1;
  467|  48.3k|    } else {
  468|  94.8k|      for (size_t index = vec.len(); index > 0; index--) {
  ------------------
  |  Branch (468:38): [True: 91.0k, False: 3.80k]
  ------------------
  469|  91.0k|        limb xi = vec[index - 1];
  470|  91.0k|        limb yi = other.vec[index - 1];
  471|  91.0k|        if (xi > yi) {
  ------------------
  |  Branch (471:13): [True: 11.8k, False: 79.2k]
  ------------------
  472|  11.8k|          return 1;
  473|  79.2k|        } else if (xi < yi) {
  ------------------
  |  Branch (473:20): [True: 32.7k, False: 46.5k]
  ------------------
  474|  32.7k|          return -1;
  475|  32.7k|        }
  476|  91.0k|      }
  477|  3.80k|      return 0;
  478|  48.3k|    }
  479|  48.3k|  }
_ZNK10fast_float8stackvecILt62EEixEm:
   61|   182k|  FASTFLOAT_CONSTEXPR14 const limb& operator[](size_t index) const noexcept {
   62|   182k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   182k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
   63|   182k|    return data[index];
   64|   182k|  }

_ZN10fast_float13compute_floatINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   94|   205k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   205k|  adjusted_mantissa answer;
   96|   205k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.72k, False: 201k]
  |  Branch (96:19): [True: 1.14k, False: 200k]
  ------------------
   97|  4.86k|    answer.power2 = 0;
   98|  4.86k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  4.86k|    return answer;
  101|  4.86k|  }
  102|   200k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 7.10k, False: 193k]
  ------------------
  103|       |    // we want to get infinity:
  104|  7.10k|    answer.power2 = binary::infinite_power();
  105|  7.10k|    answer.mantissa = 0;
  106|  7.10k|    return answer;
  107|  7.10k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   193k|  int lz = leading_zeroes(w);
  112|   193k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   193k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   193k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   193k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   193k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   193k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 958, False: 192k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|    958|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 88, False: 870]
  ------------------
  137|     88|      answer.power2 = 0;
  138|     88|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|     88|      return answer;
  141|     88|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|    870|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|    870|    answer.mantissa += (answer.mantissa & 1); // round up
  147|    870|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|    870|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 870, False: 0]
  ------------------
  156|    870|    return answer;
  157|    958|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   192k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 65.8k, False: 126k]
  |  Branch (162:30): [True: 64.0k, False: 1.80k]
  |  Branch (162:77): [True: 58.7k, False: 5.29k]
  ------------------
  163|   192k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 8.13k, False: 50.6k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  8.13k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 3.99k, False: 4.13k]
  ------------------
  168|  3.99k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  3.99k|    }
  170|  8.13k|  }
  171|       |
  172|   192k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   192k|  answer.mantissa >>= 1;
  174|   192k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 12.8k, False: 179k]
  ------------------
  175|  12.8k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  12.8k|    answer.power2++; // undo previous addition
  177|  12.8k|  }
  178|       |
  179|   192k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   192k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 1.07k, False: 191k]
  ------------------
  181|  1.07k|    answer.power2 = binary::infinite_power();
  182|  1.07k|    answer.mantissa = 0;
  183|  1.07k|  }
  184|   192k|  return answer;
  185|   193k|}
_ZN10fast_float29compute_product_approximationILi26EEENS_8value128Elm:
   21|   214k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   214k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   214k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   214k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   214k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   214k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   214k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 41.0k, False: 173k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  41.0k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  41.0k|    firstproduct.low += secondproduct.high;
   35|  41.0k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 29.5k, False: 11.5k]
  ------------------
   36|  29.5k|      firstproduct.high++;
   37|  29.5k|    }
   38|  41.0k|  }
   39|   214k|  return firstproduct;
   40|   214k|}
_ZN10fast_float6detail5powerEi:
   58|   425k|  constexpr fastfloat_really_inline int32_t power(int32_t q)  noexcept  {
   59|   425k|    return (((152170 + 65536) * q) >> 16) + 63;
   60|   425k|  }
_ZN10fast_float13compute_errorINS_13binary_formatIfEEEENS_17adjusted_mantissaElm:
   80|  21.1k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  21.1k|  int lz = leading_zeroes(w);
   82|  21.1k|  w <<= lz;
   83|  21.1k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  21.1k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  21.1k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIfEEEENS_17adjusted_mantissaElmi:
   67|  21.1k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  21.1k|  int hilz = int(w >> 63) ^ 1;
   69|  21.1k|  adjusted_mantissa answer;
   70|  21.1k|  answer.mantissa = w << hilz;
   71|  21.1k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  21.1k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  21.1k|  return answer;
   74|  21.1k|}
_ZN10fast_float13compute_floatINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   94|   187k|adjusted_mantissa compute_float(int64_t q, uint64_t w)  noexcept  {
   95|   187k|  adjusted_mantissa answer;
   96|   187k|  if ((w == 0) || (q < binary::smallest_power_of_ten())) {
  ------------------
  |  Branch (96:7): [True: 3.45k, False: 183k]
  |  Branch (96:19): [True: 299, False: 183k]
  ------------------
   97|  3.75k|    answer.power2 = 0;
   98|  3.75k|    answer.mantissa = 0;
   99|       |    // result should be zero
  100|  3.75k|    return answer;
  101|  3.75k|  }
  102|   183k|  if (q > binary::largest_power_of_ten()) {
  ------------------
  |  Branch (102:7): [True: 3.65k, False: 179k]
  ------------------
  103|       |    // we want to get infinity:
  104|  3.65k|    answer.power2 = binary::infinite_power();
  105|  3.65k|    answer.mantissa = 0;
  106|  3.65k|    return answer;
  107|  3.65k|  }
  108|       |  // At this point in time q is in [powers::smallest_power_of_five, powers::largest_power_of_five].
  109|       |
  110|       |  // We want the most significant bit of i to be 1. Shift if needed.
  111|   179k|  int lz = leading_zeroes(w);
  112|   179k|  w <<= lz;
  113|       |
  114|       |  // The required precision is binary::mantissa_explicit_bits() + 3 because
  115|       |  // 1. We need the implicit bit
  116|       |  // 2. We need an extra bit for rounding purposes
  117|       |  // 3. We might lose a bit due to the "upperbit" routine (result too small, requiring a shift)
  118|       |
  119|   179k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
  120|       |  // The computed 'product' is always sufficient.
  121|       |  // Mathematical proof:
  122|       |  // Noble Mushtak and Daniel Lemire, Fast Number Parsing Without Fallback (to appear)
  123|       |  // See script/mushtak_lemire.py
  124|       |
  125|       |  // The "compute_product_approximation" function can be slightly slower than a branchless approach:
  126|       |  // value128 product = compute_product(q, w);
  127|       |  // but in practice, we can win big with the compute_product_approximation if its additional branch
  128|       |  // is easily predicted. Which is best is data specific.
  129|   179k|  int upperbit = int(product.high >> 63);
  130|       |
  131|   179k|  answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  132|       |
  133|   179k|  answer.power2 = int32_t(detail::power(int32_t(q)) + upperbit - lz - binary::minimum_exponent());
  134|   179k|  if (answer.power2 <= 0) { // we have a subnormal?
  ------------------
  |  Branch (134:7): [True: 2.59k, False: 177k]
  ------------------
  135|       |    // Here have that answer.power2 <= 0 so -answer.power2 >= 0
  136|  2.59k|    if(-answer.power2 + 1 >= 64) { // if we have more than 64 bits below the minimum exponent, you have a zero for sure.
  ------------------
  |  Branch (136:8): [True: 102, False: 2.49k]
  ------------------
  137|    102|      answer.power2 = 0;
  138|    102|      answer.mantissa = 0;
  139|       |      // result should be zero
  140|    102|      return answer;
  141|    102|    }
  142|       |    // next line is safe because -answer.power2 + 1 < 64
  143|  2.49k|    answer.mantissa >>= -answer.power2 + 1;
  144|       |    // Thankfully, we can't have both "round-to-even" and subnormals because
  145|       |    // "round-to-even" only occurs for powers close to 0.
  146|  2.49k|    answer.mantissa += (answer.mantissa & 1); // round up
  147|  2.49k|    answer.mantissa >>= 1;
  148|       |    // There is a weird scenario where we don't have a subnormal but just.
  149|       |    // Suppose we start with 2.2250738585072013e-308, we end up
  150|       |    // with 0x3fffffffffffff x 2^-1023-53 which is technically subnormal
  151|       |    // whereas 0x40000000000000 x 2^-1023-53  is normal. Now, we need to round
  152|       |    // up 0x3fffffffffffff x 2^-1023-53  and once we do, we are no longer
  153|       |    // subnormal, but we can only know this after rounding.
  154|       |    // So we only declare a subnormal if we are smaller than the threshold.
  155|  2.49k|    answer.power2 = (answer.mantissa < (uint64_t(1) << binary::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (155:21): [True: 2.49k, False: 0]
  ------------------
  156|  2.49k|    return answer;
  157|  2.59k|  }
  158|       |
  159|       |  // usually, we round *up*, but if we fall right in between and and we have an
  160|       |  // even basis, we need to round down
  161|       |  // We are only concerned with the cases where 5**q fits in single 64-bit word.
  162|   177k|  if ((product.low <= 1) &&  (q >= binary::min_exponent_round_to_even()) && (q <= binary::max_exponent_round_to_even()) &&
  ------------------
  |  Branch (162:7): [True: 53.2k, False: 123k]
  |  Branch (162:30): [True: 29.7k, False: 23.5k]
  |  Branch (162:77): [True: 25.3k, False: 4.34k]
  ------------------
  163|   177k|      ((answer.mantissa & 3) == 1) ) { // we may fall between two floats!
  ------------------
  |  Branch (163:7): [True: 5.06k, False: 20.3k]
  ------------------
  164|       |    // To be in-between two floats we need that in doing
  165|       |    //   answer.mantissa = product.high >> (upperbit + 64 - binary::mantissa_explicit_bits() - 3);
  166|       |    // ... we dropped out only zeroes. But if this happened, then we can go back!!!
  167|  5.06k|    if((answer.mantissa  << (upperbit + 64 - binary::mantissa_explicit_bits() - 3)) ==  product.high) {
  ------------------
  |  Branch (167:8): [True: 3.93k, False: 1.12k]
  ------------------
  168|  3.93k|      answer.mantissa &= ~uint64_t(1);          // flip it so that we do not round up
  169|  3.93k|    }
  170|  5.06k|  }
  171|       |
  172|   177k|  answer.mantissa += (answer.mantissa & 1); // round up
  173|   177k|  answer.mantissa >>= 1;
  174|   177k|  if (answer.mantissa >= (uint64_t(2) << binary::mantissa_explicit_bits())) {
  ------------------
  |  Branch (174:7): [True: 12.2k, False: 164k]
  ------------------
  175|  12.2k|    answer.mantissa = (uint64_t(1) << binary::mantissa_explicit_bits());
  176|  12.2k|    answer.power2++; // undo previous addition
  177|  12.2k|  }
  178|       |
  179|   177k|  answer.mantissa &= ~(uint64_t(1) << binary::mantissa_explicit_bits());
  180|   177k|  if (answer.power2 >= binary::infinite_power()) { // infinity
  ------------------
  |  Branch (180:7): [True: 244, False: 176k]
  ------------------
  181|    244|    answer.power2 = binary::infinite_power();
  182|    244|    answer.mantissa = 0;
  183|    244|  }
  184|   177k|  return answer;
  185|   179k|}
_ZN10fast_float29compute_product_approximationILi55EEENS_8value128Elm:
   21|   210k|value128 compute_product_approximation(int64_t q, uint64_t w) {
   22|   210k|  const int index = 2 * int(q - powers::smallest_power_of_five);
   23|       |  // For small values of q, e.g., q in [0,27], the answer is always exact because
   24|       |  // The line value128 firstproduct = full_multiplication(w, power_of_five_128[index]);
   25|       |  // gives the exact answer.
   26|   210k|  value128 firstproduct = full_multiplication(w, powers::power_of_five_128[index]);
   27|   210k|  static_assert((bit_precision >= 0) && (bit_precision <= 64), " precision should  be in (0,64]");
   28|   210k|  constexpr uint64_t precision_mask = (bit_precision < 64) ?
  ------------------
  |  Branch (28:39): [Folded - Ignored]
  ------------------
   29|      0|               (uint64_t(0xFFFFFFFFFFFFFFFF) >> bit_precision)
   30|   210k|               : uint64_t(0xFFFFFFFFFFFFFFFF);
   31|   210k|  if((firstproduct.high & precision_mask) == precision_mask) { // could further guard with  (lower + w < lower)
  ------------------
  |  Branch (31:6): [True: 82.9k, False: 127k]
  ------------------
   32|       |    // regarding the second product, we only need secondproduct.high, but our expectation is that the compiler will optimize this extra work away if needed.
   33|  82.9k|    value128 secondproduct = full_multiplication(w, powers::power_of_five_128[index + 1]);
   34|  82.9k|    firstproduct.low += secondproduct.high;
   35|  82.9k|    if(secondproduct.high > firstproduct.low) {
  ------------------
  |  Branch (35:8): [True: 26.5k, False: 56.4k]
  ------------------
   36|  26.5k|      firstproduct.high++;
   37|  26.5k|    }
   38|  82.9k|  }
   39|   210k|  return firstproduct;
   40|   210k|}
_ZN10fast_float13compute_errorINS_13binary_formatIdEEEENS_17adjusted_mantissaElm:
   80|  30.8k|adjusted_mantissa compute_error(int64_t q, uint64_t w)  noexcept  {
   81|  30.8k|  int lz = leading_zeroes(w);
   82|  30.8k|  w <<= lz;
   83|  30.8k|  value128 product = compute_product_approximation<binary::mantissa_explicit_bits() + 3>(q, w);
   84|  30.8k|  return compute_error_scaled<binary>(q, product.high, lz);
   85|  30.8k|}
_ZN10fast_float20compute_error_scaledINS_13binary_formatIdEEEENS_17adjusted_mantissaElmi:
   67|  30.8k|adjusted_mantissa compute_error_scaled(int64_t q, uint64_t w, int lz) noexcept  {
   68|  30.8k|  int hilz = int(w >> 63) ^ 1;
   69|  30.8k|  adjusted_mantissa answer;
   70|  30.8k|  answer.mantissa = w << hilz;
   71|  30.8k|  int bias = binary::mantissa_explicit_bits() - binary::minimum_exponent();
   72|  30.8k|  answer.power2 = int32_t(detail::power(int32_t(q)) + bias - hilz - lz - 62 + invalid_am_bias);
   73|  30.8k|  return answer;
   74|  30.8k|}

_ZN10fast_float10digit_compIfcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  21.1k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  21.1k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  21.1k|  int32_t sci_exp = scientific_exponent(num);
  411|  21.1k|  size_t max_digits = binary_format<T>::max_digits();
  412|  21.1k|  size_t digits = 0;
  413|  21.1k|  bigint bigmant;
  414|  21.1k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  21.1k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  21.1k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 514, False: 20.6k]
  ------------------
  418|    514|    return positive_digit_comp<T>(bigmant, exponent);
  419|  20.6k|  } else {
  420|  20.6k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  20.6k|  }
  422|  21.1k|}
_ZN10fast_float19scientific_exponentIcEEiRNS_22parsed_number_string_tIT_EE:
   28|  51.9k|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|  51.9k|  uint64_t mantissa = num.mantissa;
   30|  51.9k|  int32_t exponent = int32_t(num.exponent);
   31|   259k|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 207k, False: 51.9k]
  ------------------
   32|   207k|    mantissa /= 10000;
   33|   207k|    exponent += 4;
   34|   207k|  }
   35|   103k|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 51.9k, False: 51.9k]
  ------------------
   36|  51.9k|    mantissa /= 100;
   37|  51.9k|    exponent += 2;
   38|  51.9k|  }
   39|  51.9k|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 51.9k]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|  51.9k|  return exponent;
   44|  51.9k|}
_ZN10fast_float14parse_mantissaIcEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|  51.9k|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|  51.9k|  size_t counter = 0;
  245|  51.9k|  digits = 0;
  246|  51.9k|  limb value = 0;
  247|  51.9k|#ifdef FASTFLOAT_64BIT_LIMB
  248|  51.9k|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|  51.9k|  UC const * p = num.integer.ptr;
  255|  51.9k|  UC const * pend = p + num.integer.len();
  256|  51.9k|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|   116k|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 64.7k, False: 51.6k]
  ------------------
  259|   109k|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 57.9k, False: 51.6k]
  |  Branch (259:45): [True: 45.1k, False: 12.8k]
  |  Branch (259:70): [True: 44.8k, False: 267]
  ------------------
  260|  44.8k|      parse_eight_digits(p, value, counter, digits);
  261|  44.8k|    }
  262|   203k|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 188k, False: 15.1k]
  |  Branch (262:30): [True: 139k, False: 49.3k]
  |  Branch (262:43): [True: 138k, False: 267]
  ------------------
  263|   138k|      parse_one_digit(p, value, counter, digits);
  264|   138k|    }
  265|  64.7k|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 267, False: 64.5k]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|    267|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|    267|      bool truncated = is_truncated(p, pend);
  269|    267|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 231, False: 36]
  ------------------
  270|    231|        truncated |= is_truncated(num.fraction);
  271|    231|      }
  272|    267|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 161, False: 106]
  ------------------
  273|    161|        round_up_bigint(result, digits);
  274|    161|      }
  275|    267|      return;
  276|  64.5k|    } else {
  277|  64.5k|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|  64.5k|      counter = 0;
  279|  64.5k|      value = 0;
  280|  64.5k|    }
  281|  64.7k|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|  51.6k|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 48.4k, False: 3.27k]
  ------------------
  285|  48.4k|    p = num.fraction.ptr;
  286|  48.4k|    pend = p + num.fraction.len();
  287|  48.4k|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 2.30k, False: 46.1k]
  ------------------
  288|  2.30k|      skip_zeros(p, pend);
  289|  2.30k|    }
  290|       |    // process all digits, in increments of step per loop
  291|   157k|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 111k, False: 45.5k]
  ------------------
  292|   267k|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 209k, False: 58.3k]
  |  Branch (292:47): [True: 157k, False: 51.9k]
  |  Branch (292:72): [True: 155k, False: 1.42k]
  ------------------
  293|   155k|        parse_eight_digits(p, value, counter, digits);
  294|   155k|      }
  295|   465k|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 400k, False: 65.0k]
  |  Branch (295:32): [True: 355k, False: 44.3k]
  |  Branch (295:45): [True: 353k, False: 2.27k]
  ------------------
  296|   353k|        parse_one_digit(p, value, counter, digits);
  297|   353k|      }
  298|   111k|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 2.88k, False: 108k]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|  2.88k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|  2.88k|        bool truncated = is_truncated(p, pend);
  302|  2.88k|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 2.04k, False: 845]
  ------------------
  303|  2.04k|          round_up_bigint(result, digits);
  304|  2.04k|        }
  305|  2.88k|        return;
  306|   108k|      } else {
  307|   108k|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|   108k|        counter = 0;
  309|   108k|        value = 0;
  310|   108k|      }
  311|   111k|    }
  312|  48.4k|  }
  313|       |
  314|  48.8k|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 48.8k]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|  48.8k|}
_ZN10fast_float10skip_zerosIcEEvRPKT_S3_:
  159|  54.2k|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|  54.2k|  uint64_t val;
  161|  65.5k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 30.6k, False: 34.9k]
  ------------------
  162|  30.6k|    ::memcpy(&val, first, sizeof(uint64_t));
  163|  30.6k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 19.3k, False: 11.2k]
  ------------------
  164|  19.3k|      break;
  165|  19.3k|    }
  166|  11.2k|    first += int_cmp_len<UC>();
  167|  11.2k|  }
  168|   102k|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 99.8k, False: 2.30k]
  ------------------
  169|  99.8k|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 51.9k, False: 47.8k]
  ------------------
  170|  51.9k|      break;
  171|  51.9k|    }
  172|  47.8k|    first++;
  173|  47.8k|  }
  174|  54.2k|}
_ZN10fast_float18parse_eight_digitsIcEEvRPKT_RmS5_S5_:
  207|   200k|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|   200k|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|   200k|  p += 8;
  210|   200k|  counter += 8;
  211|   200k|  count += 8;
  212|   200k|}
_ZN10fast_float15parse_one_digitIcEEvRPKT_RmS5_S5_:
  216|   492k|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|   492k|  value = value * 10 + limb(*p - UC('0'));
  218|   492k|  p++;
  219|   492k|  counter++;
  220|   492k|  count++;
  221|   492k|}
_ZN10fast_float10add_nativeERNS_6bigintEmm:
  224|   178k|void add_native(bigint& big, limb power, limb value) noexcept {
  225|   178k|  big.mul(power);
  226|   178k|  big.add(value);
  227|   178k|}
_ZN10fast_float12is_truncatedIcEEbPKT_S3_:
  180|  3.38k|bool is_truncated(UC const * first, UC const * last) noexcept {
  181|       |  // do 8-bit optimizations, can just compare to 8 literal 0s.
  182|  3.38k|  uint64_t val;
  183|  6.56k|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (183:10): [Folded - Ignored]
  |  Branch (183:39): [True: 4.34k, False: 2.21k]
  ------------------
  184|  4.34k|    ::memcpy(&val, first, sizeof(uint64_t));
  185|  4.34k|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (185:9): [True: 1.17k, False: 3.17k]
  ------------------
  186|  1.17k|      return true;
  187|  1.17k|    }
  188|  3.17k|    first += int_cmp_len<UC>();
  189|  3.17k|  }
  190|  3.76k|  while (first != last) {
  ------------------
  |  Branch (190:10): [True: 2.67k, False: 1.09k]
  ------------------
  191|  2.67k|    if (*first != UC('0')) {
  ------------------
  |  Branch (191:9): [True: 1.11k, False: 1.55k]
  ------------------
  192|  1.11k|      return true;
  193|  1.11k|    }
  194|  1.55k|    ++first;
  195|  1.55k|  }
  196|  1.09k|  return false;
  197|  2.21k|}
_ZN10fast_float12is_truncatedIcEEbNS_4spanIKT_EE:
  200|    231|bool is_truncated(span<const UC> s) noexcept {
  201|    231|  return is_truncated(s.ptr, s.ptr + s.len());
  202|    231|}
_ZN10fast_float15round_up_bigintERNS_6bigintERm:
  230|  2.20k|void round_up_bigint(bigint& big, size_t& count) noexcept {
  231|       |  // need to round-up the digits, but need to avoid rounding
  232|       |  // ....9999 to ...10000, which could cause a false halfway point.
  233|  2.20k|  add_native(big, 10, 1);
  234|  2.20k|  count++;
  235|  2.20k|}
_ZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEi:
  321|    514|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|    514|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|    514|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|    514|  adjusted_mantissa answer;
  324|    514|  bool truncated;
  325|    514|  answer.mantissa = bigmant.hi64(truncated);
  326|    514|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|    514|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|    514|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    514|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    514|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    514|    });
  333|    514|  });
  334|       |
  335|    514|  return answer;
  336|    514|}
_ZN10fast_float5roundIfZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|    514|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|    514|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|    514|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 514]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|    514|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|    514|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 514]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|    514|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|    514|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 514]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|    514|}
_ZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|    514|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|    514|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    514|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|    514|    });
  333|    514|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|    514|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|    514|  const uint64_t mask
  125|    514|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 514]
  ------------------
  126|    514|    ? UINT64_MAX
  127|    514|    : (uint64_t(1) << shift) - 1;
  128|    514|  const uint64_t halfway
  129|    514|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 514]
  ------------------
  130|    514|    ? 0
  131|    514|    : uint64_t(1) << (shift - 1);
  132|    514|  uint64_t truncated_bits = am.mantissa & mask;
  133|    514|  bool is_above = truncated_bits > halfway;
  134|    514|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|    514|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 514]
  ------------------
  138|      0|    am.mantissa = 0;
  139|    514|  } else {
  140|    514|    am.mantissa >>= shift;
  141|    514|  }
  142|    514|  am.power2 += shift;
  143|       |
  144|    514|  bool is_odd = (am.mantissa & 1) == 1;
  145|    514|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|    514|}
_ZZZN10fast_float19positive_digit_compIfEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|    514|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|    514|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 74, False: 440]
  |  Branch (331:27): [True: 348, False: 92]
  |  Branch (331:41): [True: 58, False: 290]
  |  Branch (331:56): [True: 56, False: 326]
  |  Branch (331:66): [True: 32, False: 24]
  ------------------
  332|    514|    });
_ZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  20.6k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  20.6k|  bigint& real_digits = bigmant;
  347|  20.6k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  20.6k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  20.6k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  20.6k|  T b;
  354|  20.6k|  to_float(false, am_b, b);
  355|  20.6k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  20.6k|  bigint theor_digits(theor.mantissa);
  357|  20.6k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  20.6k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  20.6k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  20.6k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 20.6k, False: 0]
  ------------------
  363|  20.6k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  20.6k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  20.6k|  }
  365|  20.6k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 20.6k, False: 0]
  ------------------
  366|  20.6k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  20.6k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  20.6k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 0, False: 0]
  ------------------
  368|      0|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|      0|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|      0|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  20.6k|  int ord = real_digits.compare(theor_digits);
  373|  20.6k|  adjusted_mantissa answer = am;
  374|  20.6k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  20.6k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  20.6k|      (void)_;  // not needed, since we've done our comparison
  377|  20.6k|      (void)__; // not needed, since we've done our comparison
  378|  20.6k|      if (ord > 0) {
  379|  20.6k|        return true;
  380|  20.6k|      } else if (ord < 0) {
  381|  20.6k|        return false;
  382|  20.6k|      } else {
  383|  20.6k|        return is_odd;
  384|  20.6k|      }
  385|  20.6k|    });
  386|  20.6k|  });
  387|       |
  388|  20.6k|  return answer;
  389|  20.6k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  20.6k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  20.6k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  20.6k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 20.6k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  20.6k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  20.6k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 20.6k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  20.6k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  20.6k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 20.6k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  20.6k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  20.6k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float10round_downERNS_17adjusted_mantissaEi:
  149|  48.3k|void round_down(adjusted_mantissa& am, int32_t shift) noexcept {
  150|  48.3k|  if (shift == 64) {
  ------------------
  |  Branch (150:7): [True: 0, False: 48.3k]
  ------------------
  151|      0|    am.mantissa = 0;
  152|  48.3k|  } else {
  153|  48.3k|    am.mantissa >>= shift;
  154|  48.3k|  }
  155|  48.3k|  am.power2 += shift;
  156|  48.3k|}
_ZN10fast_float19to_extended_halfwayIfEENS_17adjusted_mantissaET_:
   82|  20.6k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  20.6k|  adjusted_mantissa am = to_extended(value);
   84|  20.6k|  am.mantissa <<= 1;
   85|  20.6k|  am.mantissa += 1;
   86|  20.6k|  am.power2 -= 1;
   87|  20.6k|  return am;
   88|  20.6k|}
_ZN10fast_float11to_extendedIfEENS_17adjusted_mantissaET_:
   49|  20.6k|adjusted_mantissa to_extended(T value) noexcept {
   50|  20.6k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  20.6k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  20.6k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  20.6k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  20.6k|  adjusted_mantissa am;
   56|  20.6k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  20.6k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  20.6k|  ::memcpy(&bits, &value, sizeof(T));
   62|  20.6k|#endif
   63|  20.6k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 0, False: 20.6k]
  ------------------
   64|       |    // denormal
   65|      0|    am.power2 = 1 - bias;
   66|      0|    am.mantissa = bits & mantissa_mask;
   67|  20.6k|  } else {
   68|       |    // normal
   69|  20.6k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  20.6k|    am.power2 -= bias;
   71|  20.6k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  20.6k|  }
   73|       |
   74|  20.6k|  return am;
   75|  20.6k|}
_ZN10fast_float5roundIfZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  20.6k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  20.6k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  20.6k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 20.6k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  20.6k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  20.6k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 20.6k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  20.6k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  20.6k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 20.6k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  20.6k|}
_ZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  20.6k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  20.6k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  20.6k|      (void)_;  // not needed, since we've done our comparison
  377|  20.6k|      (void)__; // not needed, since we've done our comparison
  378|  20.6k|      if (ord > 0) {
  379|  20.6k|        return true;
  380|  20.6k|      } else if (ord < 0) {
  381|  20.6k|        return false;
  382|  20.6k|      } else {
  383|  20.6k|        return is_odd;
  384|  20.6k|      }
  385|  20.6k|    });
  386|  20.6k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  20.6k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  20.6k|  const uint64_t mask
  125|  20.6k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 20.6k]
  ------------------
  126|  20.6k|    ? UINT64_MAX
  127|  20.6k|    : (uint64_t(1) << shift) - 1;
  128|  20.6k|  const uint64_t halfway
  129|  20.6k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 20.6k]
  ------------------
  130|  20.6k|    ? 0
  131|  20.6k|    : uint64_t(1) << (shift - 1);
  132|  20.6k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  20.6k|  bool is_above = truncated_bits > halfway;
  134|  20.6k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  20.6k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 20.6k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  20.6k|  } else {
  140|  20.6k|    am.mantissa >>= shift;
  141|  20.6k|  }
  142|  20.6k|  am.power2 += shift;
  143|       |
  144|  20.6k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  20.6k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  20.6k|}
_ZZZN10fast_float19negative_digit_compIfEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  20.6k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  20.6k|      (void)_;  // not needed, since we've done our comparison
  377|  20.6k|      (void)__; // not needed, since we've done our comparison
  378|  20.6k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 210, False: 20.4k]
  ------------------
  379|    210|        return true;
  380|  20.4k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 17.1k, False: 3.31k]
  ------------------
  381|  17.1k|        return false;
  382|  17.1k|      } else {
  383|  3.31k|        return is_odd;
  384|  3.31k|      }
  385|  20.6k|    });
_ZN10fast_float19scientific_exponentIDiEEiRNS_22parsed_number_string_tIT_EE:
   28|     72|int32_t scientific_exponent(parsed_number_string_t<UC> & num) noexcept {
   29|     72|  uint64_t mantissa = num.mantissa;
   30|     72|  int32_t exponent = int32_t(num.exponent);
   31|    360|  while (mantissa >= 10000) {
  ------------------
  |  Branch (31:10): [True: 288, False: 72]
  ------------------
   32|    288|    mantissa /= 10000;
   33|    288|    exponent += 4;
   34|    288|  }
   35|    144|  while (mantissa >= 100) {
  ------------------
  |  Branch (35:10): [True: 72, False: 72]
  ------------------
   36|     72|    mantissa /= 100;
   37|     72|    exponent += 2;
   38|     72|  }
   39|     72|  while (mantissa >= 10) {
  ------------------
  |  Branch (39:10): [True: 0, False: 72]
  ------------------
   40|      0|    mantissa /= 10;
   41|      0|    exponent += 1;
   42|      0|  }
   43|     72|  return exponent;
   44|     72|}
_ZN10fast_float14parse_mantissaIDiEEvRNS_6bigintERNS_22parsed_number_string_tIT_EEmRm:
  240|     72|void parse_mantissa(bigint& result, parsed_number_string_t<UC>& num, size_t max_digits, size_t& digits) noexcept {
  241|       |  // try to minimize the number of big integer and scalar multiplication.
  242|       |  // therefore, try to parse 8 digits at a time, and multiply by the largest
  243|       |  // scalar value (9 or 19 digits) for each step.
  244|     72|  size_t counter = 0;
  245|     72|  digits = 0;
  246|     72|  limb value = 0;
  247|     72|#ifdef FASTFLOAT_64BIT_LIMB
  248|     72|  size_t step = 19;
  249|       |#else
  250|       |  size_t step = 9;
  251|       |#endif
  252|       |
  253|       |  // process all integer digits.
  254|     72|  UC const * p = num.integer.ptr;
  255|     72|  UC const * pend = p + num.integer.len();
  256|     72|  skip_zeros(p, pend);
  257|       |  // process all digits, in increments of step per loop
  258|    144|  while (p != pend) {
  ------------------
  |  Branch (258:10): [True: 72, False: 72]
  ------------------
  259|     72|    while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (259:12): [True: 0, False: 72]
  |  Branch (259:45): [True: 0, False: 0]
  |  Branch (259:70): [True: 0, False: 0]
  ------------------
  260|      0|      parse_eight_digits(p, value, counter, digits);
  261|      0|    }
  262|    576|    while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (262:12): [True: 576, False: 0]
  |  Branch (262:30): [True: 504, False: 72]
  |  Branch (262:43): [True: 504, False: 0]
  ------------------
  263|    504|      parse_one_digit(p, value, counter, digits);
  264|    504|    }
  265|     72|    if (digits == max_digits) {
  ------------------
  |  Branch (265:9): [True: 0, False: 72]
  ------------------
  266|       |      // add the temporary value, then check if we've truncated any digits
  267|      0|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  268|      0|      bool truncated = is_truncated(p, pend);
  269|      0|      if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (269:11): [True: 0, False: 0]
  ------------------
  270|      0|        truncated |= is_truncated(num.fraction);
  271|      0|      }
  272|      0|      if (truncated) {
  ------------------
  |  Branch (272:11): [True: 0, False: 0]
  ------------------
  273|      0|        round_up_bigint(result, digits);
  274|      0|      }
  275|      0|      return;
  276|     72|    } else {
  277|     72|      add_native(result, limb(powers_of_ten_uint64[counter]), value);
  278|     72|      counter = 0;
  279|     72|      value = 0;
  280|     72|    }
  281|     72|  }
  282|       |
  283|       |  // add our fraction digits, if they're available.
  284|     72|  if (num.fraction.ptr != nullptr) {
  ------------------
  |  Branch (284:7): [True: 72, False: 0]
  ------------------
  285|     72|    p = num.fraction.ptr;
  286|     72|    pend = p + num.fraction.len();
  287|     72|    if (digits == 0) {
  ------------------
  |  Branch (287:9): [True: 0, False: 72]
  ------------------
  288|      0|      skip_zeros(p, pend);
  289|      0|    }
  290|       |    // process all digits, in increments of step per loop
  291|    162|    while (p != pend) {
  ------------------
  |  Branch (291:12): [True: 90, False: 72]
  ------------------
  292|    198|      while ((std::distance(p, pend) >= 8) && (step - counter >= 8) && (max_digits - digits >= 8)) {
  ------------------
  |  Branch (292:14): [True: 108, False: 90]
  |  Branch (292:47): [True: 108, False: 0]
  |  Branch (292:72): [True: 108, False: 0]
  ------------------
  293|    108|        parse_eight_digits(p, value, counter, digits);
  294|    108|      }
  295|    432|      while (counter < step && p != pend && digits < max_digits) {
  ------------------
  |  Branch (295:14): [True: 414, False: 18]
  |  Branch (295:32): [True: 342, False: 72]
  |  Branch (295:45): [True: 342, False: 0]
  ------------------
  296|    342|        parse_one_digit(p, value, counter, digits);
  297|    342|      }
  298|     90|      if (digits == max_digits) {
  ------------------
  |  Branch (298:11): [True: 0, False: 90]
  ------------------
  299|       |        // add the temporary value, then check if we've truncated any digits
  300|      0|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  301|      0|        bool truncated = is_truncated(p, pend);
  302|      0|        if (truncated) {
  ------------------
  |  Branch (302:13): [True: 0, False: 0]
  ------------------
  303|      0|          round_up_bigint(result, digits);
  304|      0|        }
  305|      0|        return;
  306|     90|      } else {
  307|     90|        add_native(result, limb(powers_of_ten_uint64[counter]), value);
  308|     90|        counter = 0;
  309|     90|        value = 0;
  310|     90|      }
  311|     90|    }
  312|     72|  }
  313|       |
  314|     72|  if (counter != 0) {
  ------------------
  |  Branch (314:7): [True: 0, False: 72]
  ------------------
  315|      0|    add_native(result, limb(powers_of_ten_uint64[counter]), value);
  316|      0|  }
  317|     72|}
_ZN10fast_float10skip_zerosIDiEEvRPKT_S3_:
  159|     72|void skip_zeros(UC const * & first, UC const * last) noexcept {
  160|     72|  uint64_t val;
  161|     72|  while (!cpp20_and_in_constexpr() && std::distance(first, last) >= int_cmp_len<UC>()) {
  ------------------
  |  Branch (161:10): [Folded - Ignored]
  |  Branch (161:39): [True: 72, False: 0]
  ------------------
  162|     72|    ::memcpy(&val, first, sizeof(uint64_t));
  163|     72|    if (val != int_cmp_zeros<UC>()) {
  ------------------
  |  Branch (163:9): [True: 72, False: 0]
  ------------------
  164|     72|      break;
  165|     72|    }
  166|      0|    first += int_cmp_len<UC>();
  167|      0|  }
  168|     72|  while (first != last) {
  ------------------
  |  Branch (168:10): [True: 72, False: 0]
  ------------------
  169|     72|    if (*first != UC('0')) {
  ------------------
  |  Branch (169:9): [True: 72, False: 0]
  ------------------
  170|     72|      break;
  171|     72|    }
  172|      0|    first++;
  173|      0|  }
  174|     72|}
_ZN10fast_float18parse_eight_digitsIDiEEvRPKT_RmS5_S5_:
  207|    108|void parse_eight_digits(const UC*& p, limb& value, size_t& counter, size_t& count) noexcept {
  208|    108|  value = value * 100000000 + parse_eight_digits_unrolled(p);
  209|    108|  p += 8;
  210|    108|  counter += 8;
  211|    108|  count += 8;
  212|    108|}
_ZN10fast_float15parse_one_digitIDiEEvRPKT_RmS5_S5_:
  216|    846|void parse_one_digit(UC const *& p, limb& value, size_t& counter, size_t& count) noexcept {
  217|    846|  value = value * 10 + limb(*p - UC('0'));
  218|    846|  p++;
  219|    846|  counter++;
  220|    846|  count++;
  221|    846|}
_ZN10fast_float10digit_compIdcEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|  30.7k|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|  30.7k|  am.power2 -= invalid_am_bias;
  409|       |
  410|  30.7k|  int32_t sci_exp = scientific_exponent(num);
  411|  30.7k|  size_t max_digits = binary_format<T>::max_digits();
  412|  30.7k|  size_t digits = 0;
  413|  30.7k|  bigint bigmant;
  414|  30.7k|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|  30.7k|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|  30.7k|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 3.16k, False: 27.6k]
  ------------------
  418|  3.16k|    return positive_digit_comp<T>(bigmant, exponent);
  419|  27.6k|  } else {
  420|  27.6k|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|  27.6k|  }
  422|  30.7k|}
_ZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEi:
  321|  3.16k|adjusted_mantissa positive_digit_comp(bigint& bigmant, int32_t exponent) noexcept {
  322|  3.16k|  FASTFLOAT_ASSERT(bigmant.pow10(uint32_t(exponent)));
  ------------------
  |  |  170|  3.16k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  323|  3.16k|  adjusted_mantissa answer;
  324|  3.16k|  bool truncated;
  325|  3.16k|  answer.mantissa = bigmant.hi64(truncated);
  326|  3.16k|  int bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
  327|  3.16k|  answer.power2 = bigmant.bit_length() - 64 + bias;
  328|       |
  329|  3.16k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  3.16k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.16k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  3.16k|    });
  333|  3.16k|  });
  334|       |
  335|  3.16k|  return answer;
  336|  3.16k|}
_ZN10fast_float5roundIdZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiEUlRS2_iE_EEvS5_T0_:
   93|  3.16k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  3.16k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  3.16k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 0, False: 3.16k]
  ------------------
   96|       |    // have a denormal float
   97|      0|    int32_t shift = -am.power2 + 1;
   98|      0|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|      0|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 0, False: 0]
  ------------------
  101|      0|    return;
  102|      0|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  3.16k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  3.16k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 432, False: 2.73k]
  ------------------
  109|    432|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|    432|    am.power2++;
  111|    432|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  3.16k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  3.16k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 3.16k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  3.16k|}
_ZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_i:
  329|  3.16k|  round<T>(answer, [truncated](adjusted_mantissa& a, int32_t shift) {
  330|  3.16k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.16k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  332|  3.16k|    });
  333|  3.16k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS2_iE_clES5_iEUlbbbE_EEvS5_iT_:
  123|  3.16k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  3.16k|  const uint64_t mask
  125|  3.16k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 3.16k]
  ------------------
  126|  3.16k|    ? UINT64_MAX
  127|  3.16k|    : (uint64_t(1) << shift) - 1;
  128|  3.16k|  const uint64_t halfway
  129|  3.16k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 3.16k]
  ------------------
  130|  3.16k|    ? 0
  131|  3.16k|    : uint64_t(1) << (shift - 1);
  132|  3.16k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  3.16k|  bool is_above = truncated_bits > halfway;
  134|  3.16k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  3.16k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 3.16k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  3.16k|  } else {
  140|  3.16k|    am.mantissa >>= shift;
  141|  3.16k|  }
  142|  3.16k|  am.power2 += shift;
  143|       |
  144|  3.16k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  3.16k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  3.16k|}
_ZZZN10fast_float19positive_digit_compIdEENS_17adjusted_mantissaERNS_6bigintEiENKUlRS1_iE_clES4_iENKUlbbbE_clEbbb:
  330|  3.16k|    round_nearest_tie_even(a, shift, [truncated](bool is_odd, bool is_halfway, bool is_above) -> bool {
  331|  3.16k|      return is_above || (is_halfway && truncated) || (is_odd && is_halfway);
  ------------------
  |  Branch (331:14): [True: 478, False: 2.68k]
  |  Branch (331:27): [True: 2.06k, False: 627]
  |  Branch (331:41): [True: 695, False: 1.36k]
  |  Branch (331:56): [True: 272, False: 1.72k]
  |  Branch (331:66): [True: 60, False: 212]
  ------------------
  332|  3.16k|    });
_ZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_i:
  345|  27.6k|adjusted_mantissa negative_digit_comp(bigint& bigmant, adjusted_mantissa am, int32_t exponent) noexcept {
  346|  27.6k|  bigint& real_digits = bigmant;
  347|  27.6k|  int32_t real_exp = exponent;
  348|       |
  349|       |  // get the value of `b`, rounded down, and get a bigint representation of b+h
  350|  27.6k|  adjusted_mantissa am_b = am;
  351|       |  // gcc7 buf: use a lambda to remove the noexcept qualifier bug with -Wnoexcept-type.
  352|  27.6k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
  353|  27.6k|  T b;
  354|  27.6k|  to_float(false, am_b, b);
  355|  27.6k|  adjusted_mantissa theor = to_extended_halfway(b);
  356|  27.6k|  bigint theor_digits(theor.mantissa);
  357|  27.6k|  int32_t theor_exp = theor.power2;
  358|       |
  359|       |  // scale real digits and theor digits to be same power.
  360|  27.6k|  int32_t pow2_exp = theor_exp - real_exp;
  361|  27.6k|  uint32_t pow5_exp = uint32_t(-real_exp);
  362|  27.6k|  if (pow5_exp != 0) {
  ------------------
  |  Branch (362:7): [True: 27.6k, False: 0]
  ------------------
  363|  27.6k|    FASTFLOAT_ASSERT(theor_digits.pow5(pow5_exp));
  ------------------
  |  |  170|  27.6k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  364|  27.6k|  }
  365|  27.6k|  if (pow2_exp > 0) {
  ------------------
  |  Branch (365:7): [True: 2.52k, False: 25.1k]
  ------------------
  366|  2.52k|    FASTFLOAT_ASSERT(theor_digits.pow2(uint32_t(pow2_exp)));
  ------------------
  |  |  170|  2.52k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  367|  25.1k|  } else if (pow2_exp < 0) {
  ------------------
  |  Branch (367:14): [True: 25.0k, False: 74]
  ------------------
  368|  25.0k|    FASTFLOAT_ASSERT(real_digits.pow2(uint32_t(-pow2_exp)));
  ------------------
  |  |  170|  25.0k|#define FASTFLOAT_ASSERT(x)  { ((void)(x)); }
  ------------------
  369|  25.0k|  }
  370|       |
  371|       |  // compare digits, and use it to director rounding
  372|  27.6k|  int ord = real_digits.compare(theor_digits);
  373|  27.6k|  adjusted_mantissa answer = am;
  374|  27.6k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  27.6k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  27.6k|      (void)_;  // not needed, since we've done our comparison
  377|  27.6k|      (void)__; // not needed, since we've done our comparison
  378|  27.6k|      if (ord > 0) {
  379|  27.6k|        return true;
  380|  27.6k|      } else if (ord < 0) {
  381|  27.6k|        return false;
  382|  27.6k|      } else {
  383|  27.6k|        return is_odd;
  384|  27.6k|      }
  385|  27.6k|    });
  386|  27.6k|  });
  387|       |
  388|  27.6k|  return answer;
  389|  27.6k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE_EEvS5_T0_:
   93|  27.6k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  27.6k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  27.6k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 104, False: 27.5k]
  ------------------
   96|       |    // have a denormal float
   97|    104|    int32_t shift = -am.power2 + 1;
   98|    104|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    104|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 104, False: 0]
  ------------------
  101|    104|    return;
  102|    104|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  27.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  27.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 0, False: 27.5k]
  ------------------
  109|      0|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|      0|    am.power2++;
  111|      0|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  27.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  27.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 27.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  27.5k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE_clES4_i:
  352|  27.6k|  round<T>(am_b, [](adjusted_mantissa&a, int32_t shift) { round_down(a, shift); });
_ZN10fast_float19to_extended_halfwayIdEENS_17adjusted_mantissaET_:
   82|  27.6k|adjusted_mantissa to_extended_halfway(T value) noexcept {
   83|  27.6k|  adjusted_mantissa am = to_extended(value);
   84|  27.6k|  am.mantissa <<= 1;
   85|  27.6k|  am.mantissa += 1;
   86|  27.6k|  am.power2 -= 1;
   87|  27.6k|  return am;
   88|  27.6k|}
_ZN10fast_float11to_extendedIdEENS_17adjusted_mantissaET_:
   49|  27.6k|adjusted_mantissa to_extended(T value) noexcept {
   50|  27.6k|  using equiv_uint = typename binary_format<T>::equiv_uint;
   51|  27.6k|  constexpr equiv_uint exponent_mask = binary_format<T>::exponent_mask();
   52|  27.6k|  constexpr equiv_uint mantissa_mask = binary_format<T>::mantissa_mask();
   53|  27.6k|  constexpr equiv_uint hidden_bit_mask = binary_format<T>::hidden_bit_mask();
   54|       |
   55|  27.6k|  adjusted_mantissa am;
   56|  27.6k|  int32_t bias = binary_format<T>::mantissa_explicit_bits() - binary_format<T>::minimum_exponent();
   57|  27.6k|  equiv_uint bits;
   58|       |#if FASTFLOAT_HAS_BIT_CAST
   59|       |  bits = std::bit_cast<equiv_uint>(value);
   60|       |#else
   61|  27.6k|  ::memcpy(&bits, &value, sizeof(T));
   62|  27.6k|#endif
   63|  27.6k|  if ((bits & exponent_mask) == 0) {
  ------------------
  |  Branch (63:7): [True: 104, False: 27.5k]
  ------------------
   64|       |    // denormal
   65|    104|    am.power2 = 1 - bias;
   66|    104|    am.mantissa = bits & mantissa_mask;
   67|  27.5k|  } else {
   68|       |    // normal
   69|  27.5k|    am.power2 = int32_t((bits & exponent_mask) >> binary_format<T>::mantissa_explicit_bits());
   70|  27.5k|    am.power2 -= bias;
   71|  27.5k|    am.mantissa = (bits & mantissa_mask) | hidden_bit_mask;
   72|  27.5k|  }
   73|       |
   74|  27.6k|  return am;
   75|  27.6k|}
_ZN10fast_float5roundIdZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iEUlRS2_iE0_EEvS5_T0_:
   93|  27.6k|void round(adjusted_mantissa& am, callback cb) noexcept {
   94|  27.6k|  int32_t mantissa_shift = 64 - binary_format<T>::mantissa_explicit_bits() - 1;
   95|  27.6k|  if (-am.power2 >= mantissa_shift) {
  ------------------
  |  Branch (95:7): [True: 104, False: 27.5k]
  ------------------
   96|       |    // have a denormal float
   97|    104|    int32_t shift = -am.power2 + 1;
   98|    104|    cb(am, std::min<int32_t>(shift, 64));
   99|       |    // check for round-up: if rounding-nearest carried us to the hidden bit.
  100|    104|    am.power2 = (am.mantissa < (uint64_t(1) << binary_format<T>::mantissa_explicit_bits())) ? 0 : 1;
  ------------------
  |  Branch (100:17): [True: 104, False: 0]
  ------------------
  101|    104|    return;
  102|    104|  }
  103|       |
  104|       |  // have a normal float, use the default shift.
  105|  27.5k|  cb(am, mantissa_shift);
  106|       |
  107|       |  // check for carry
  108|  27.5k|  if (am.mantissa >= (uint64_t(2) << binary_format<T>::mantissa_explicit_bits())) {
  ------------------
  |  Branch (108:7): [True: 74, False: 27.5k]
  ------------------
  109|     74|    am.mantissa = (uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  110|     74|    am.power2++;
  111|     74|  }
  112|       |
  113|       |  // check for infinite: we could have carried to an infinite power
  114|  27.5k|  am.mantissa &= ~(uint64_t(1) << binary_format<T>::mantissa_explicit_bits());
  115|  27.5k|  if (am.power2 >= binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (115:7): [True: 0, False: 27.5k]
  ------------------
  116|      0|    am.power2 = binary_format<T>::infinite_power();
  117|      0|    am.mantissa = 0;
  118|      0|  }
  119|  27.5k|}
_ZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_i:
  374|  27.6k|  round<T>(answer, [ord](adjusted_mantissa& a, int32_t shift) {
  375|  27.6k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  27.6k|      (void)_;  // not needed, since we've done our comparison
  377|  27.6k|      (void)__; // not needed, since we've done our comparison
  378|  27.6k|      if (ord > 0) {
  379|  27.6k|        return true;
  380|  27.6k|      } else if (ord < 0) {
  381|  27.6k|        return false;
  382|  27.6k|      } else {
  383|  27.6k|        return is_odd;
  384|  27.6k|      }
  385|  27.6k|    });
  386|  27.6k|  });
_ZN10fast_float22round_nearest_tie_evenIZZNS_19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES2_iENKUlRS2_iE0_clES5_iEUlbbbE_EEvS5_iT_:
  123|  27.6k|void round_nearest_tie_even(adjusted_mantissa& am, int32_t shift, callback cb) noexcept {
  124|  27.6k|  const uint64_t mask
  125|  27.6k|  = (shift == 64)
  ------------------
  |  Branch (125:5): [True: 0, False: 27.6k]
  ------------------
  126|  27.6k|    ? UINT64_MAX
  127|  27.6k|    : (uint64_t(1) << shift) - 1;
  128|  27.6k|  const uint64_t halfway
  129|  27.6k|  = (shift == 0)
  ------------------
  |  Branch (129:5): [True: 0, False: 27.6k]
  ------------------
  130|  27.6k|    ? 0
  131|  27.6k|    : uint64_t(1) << (shift - 1);
  132|  27.6k|  uint64_t truncated_bits = am.mantissa & mask;
  133|  27.6k|  bool is_above = truncated_bits > halfway;
  134|  27.6k|  bool is_halfway = truncated_bits == halfway;
  135|       |
  136|       |  // shift digits into position
  137|  27.6k|  if (shift == 64) {
  ------------------
  |  Branch (137:7): [True: 0, False: 27.6k]
  ------------------
  138|      0|    am.mantissa = 0;
  139|  27.6k|  } else {
  140|  27.6k|    am.mantissa >>= shift;
  141|  27.6k|  }
  142|  27.6k|  am.power2 += shift;
  143|       |
  144|  27.6k|  bool is_odd = (am.mantissa & 1) == 1;
  145|  27.6k|  am.mantissa += uint64_t(cb(is_odd, is_halfway, is_above));
  146|  27.6k|}
_ZZZN10fast_float19negative_digit_compIdEENS_17adjusted_mantissaERNS_6bigintES1_iENKUlRS1_iE0_clES4_iENKUlbbbE_clEbbb:
  375|  27.6k|    round_nearest_tie_even(a, shift, [ord](bool is_odd, bool _, bool __) -> bool {
  376|  27.6k|      (void)_;  // not needed, since we've done our comparison
  377|  27.6k|      (void)__; // not needed, since we've done our comparison
  378|  27.6k|      if (ord > 0) {
  ------------------
  |  Branch (378:11): [True: 11.6k, False: 16.0k]
  ------------------
  379|  11.6k|        return true;
  380|  16.0k|      } else if (ord < 0) {
  ------------------
  |  Branch (380:18): [True: 15.5k, False: 488]
  ------------------
  381|  15.5k|        return false;
  382|  15.5k|      } else {
  383|    488|        return is_odd;
  384|    488|      }
  385|  27.6k|    });
_ZN10fast_float10digit_compIdDiEENS_17adjusted_mantissaERNS_22parsed_number_string_tIT0_EES1_:
  406|     72|adjusted_mantissa digit_comp(parsed_number_string_t<UC>& num, adjusted_mantissa am) noexcept {
  407|       |  // remove the invalid exponent bias
  408|     72|  am.power2 -= invalid_am_bias;
  409|       |
  410|     72|  int32_t sci_exp = scientific_exponent(num);
  411|     72|  size_t max_digits = binary_format<T>::max_digits();
  412|     72|  size_t digits = 0;
  413|     72|  bigint bigmant;
  414|     72|  parse_mantissa(bigmant, num, max_digits, digits);
  415|       |  // can't underflow, since digits is at most max_digits.
  416|     72|  int32_t exponent = sci_exp + 1 - int32_t(digits);
  417|     72|  if (exponent >= 0) {
  ------------------
  |  Branch (417:7): [True: 0, False: 72]
  ------------------
  418|      0|    return positive_digit_comp<T>(bigmant, exponent);
  419|     72|  } else {
  420|     72|    return negative_digit_comp<T>(bigmant, am, exponent);
  421|     72|  }
  422|     72|}

_ZN10fast_float4spanIKcEC2Ev:
  235|  1.84M|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKcEC2EPS1_m:
  234|  1.09M|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKcE3lenEv:
  237|   362k|  constexpr size_t len() const noexcept {
  238|   362k|    return length;
  239|   362k|  }
_ZN10fast_float13binary_formatIfE22min_exponent_fast_pathEv:
  464|   631k|template <> inline constexpr int binary_format<float>::min_exponent_fast_path() {
  465|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  466|       |  return 0;
  467|       |#else
  468|   631k|  return -10;
  469|   631k|#endif
  470|   631k|}
_ZN10fast_float13binary_formatIfE22max_exponent_fast_pathEv:
  515|   591k|template <> inline constexpr int binary_format<float>::max_exponent_fast_path() {
  516|   591k|  return 10;
  517|   591k|}
_ZN10fast_float13binary_formatIfE22max_mantissa_fast_pathEv:
  529|   523k|template <> inline constexpr uint64_t binary_format<float>::max_mantissa_fast_path() {
  530|   523k|  return uint64_t(2) << mantissa_explicit_bits();
  531|   523k|}
_ZN10fast_float13binary_formatIfE22mantissa_explicit_bitsEv:
  475|  1.46M|template <> inline constexpr int binary_format<float>::mantissa_explicit_bits() {
  476|  1.46M|  return 23;
  477|  1.46M|}
_ZN10fast_float13binary_formatIfE18exact_power_of_tenEl:
  546|   500k|inline constexpr float binary_format<float>::exact_power_of_ten(int64_t power) {
  547|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  548|   500k|  return (void)powers_of_ten[0], powers_of_ten[power];
  549|   500k|}
_ZN10fast_float17adjusted_mantissaC2Ev:
  347|   496k|  adjusted_mantissa() = default;
_ZN10fast_float13binary_formatIfE21smallest_power_of_tenEv:
  566|   201k|inline constexpr int binary_format<float>::smallest_power_of_ten() {
  567|   201k|  return -65;
  568|   201k|}
_ZN10fast_float13binary_formatIfE20largest_power_of_tenEv:
  557|   200k|inline constexpr int binary_format<float>::largest_power_of_ten() {
  558|   200k|  return 38;
  559|   200k|}
_ZN10fast_float14leading_zeroesEm:
  268|   432k|int leading_zeroes(uint64_t input_num) {
  269|   432k|  assert(input_num > 0);
  270|   432k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (270:7): [Folded - Ignored]
  ------------------
  271|      0|    return leading_zeroes_generic(input_num);
  272|      0|  }
  273|       |#ifdef FASTFLOAT_VISUAL_STUDIO
  274|       |  #if defined(_M_X64) || defined(_M_ARM64)
  275|       |  unsigned long leading_zero = 0;
  276|       |  // Search the mask data from most significant bit (MSB)
  277|       |  // to least significant bit (LSB) for a set bit (1).
  278|       |  _BitScanReverse64(&leading_zero, input_num);
  279|       |  return (int)(63 - leading_zero);
  280|       |  #else
  281|       |  return leading_zeroes_generic(input_num);
  282|       |  #endif
  283|       |#else
  284|   432k|  return __builtin_clzll(input_num);
  285|   432k|#endif
  286|   432k|}
_ZN10fast_float19full_multiplicationEmm:
  320|   549k|value128 full_multiplication(uint64_t a, uint64_t b) {
  321|   549k|  if (cpp20_and_in_constexpr()) {
  ------------------
  |  Branch (321:7): [Folded - Ignored]
  ------------------
  322|      0|    value128 answer;
  323|      0|    answer.low = umul128_generic(a, b, &answer.high);
  324|      0|    return answer;
  325|      0|  }
  326|   549k|  value128 answer;
  327|       |#if defined(_M_ARM64) && !defined(__MINGW32__)
  328|       |  // ARM64 has native support for 64-bit multiplications, no need to emulate
  329|       |  // But MinGW on ARM64 doesn't have native support for 64-bit multiplications
  330|       |  answer.high = __umulh(a, b);
  331|       |  answer.low = a * b;
  332|       |#elif defined(FASTFLOAT_32BIT) || (defined(_WIN64) && !defined(__clang__))
  333|       |  answer.low = _umul128(a, b, &answer.high); // _umul128 not available on ARM64
  334|       |#elif defined(FASTFLOAT_64BIT) && defined(__SIZEOF_INT128__)
  335|       |  __uint128_t r = ((__uint128_t)a) * b;
  336|   549k|  answer.low = uint64_t(r);
  337|   549k|  answer.high = uint64_t(r >> 64);
  338|       |#else
  339|       |  answer.low = umul128_generic(a, b, &answer.high);
  340|       |#endif
  341|   549k|  return answer;
  342|   549k|}
_ZN10fast_float8value128C2Ev:
  251|   549k|  constexpr value128() : low(0), high(0) {}
_ZN10fast_float13binary_formatIfE16minimum_exponentEv:
  498|   235k|template <> inline constexpr int binary_format<float>::minimum_exponent() {
  499|   235k|  return -127;
  500|   235k|}
_ZN10fast_float13binary_formatIfE26min_exponent_round_to_evenEv:
  491|  65.8k|template <> inline constexpr int binary_format<float>::min_exponent_round_to_even() {
  492|  65.8k|  return -17;
  493|  65.8k|}
_ZN10fast_float13binary_formatIfE26max_exponent_round_to_evenEv:
  483|  64.0k|template <> inline constexpr int binary_format<float>::max_exponent_round_to_even() {
  484|  64.0k|  return 10;
  485|  64.0k|}
_ZNK10fast_float17adjusted_mantissaneERKS0_:
  351|   151k|  constexpr bool operator!=(const adjusted_mantissa &o) const {
  352|   151k|    return mantissa != o.mantissa || power2 != o.power2;
  ------------------
  |  Branch (352:12): [True: 52.0k, False: 99.7k]
  |  Branch (352:38): [True: 0, False: 99.7k]
  ------------------
  353|   151k|  }
_ZN10fast_float13binary_formatIfE10max_digitsEv:
  573|  21.1k|template <> inline constexpr size_t binary_format<float>::max_digits() {
  574|  21.1k|  return 114;
  575|  21.1k|}
impl.cpp:_ZN10fast_floatL11int_cmp_lenIcEEiv:
  649|  86.5k|{
  650|  86.5k|    return sizeof(uint64_t) / sizeof(UC);
  651|  86.5k|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIcEEmv:
  643|  34.9k|{
  644|  34.9k|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|  34.9k|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|  34.9k|}
_ZN10fast_float4spanImEC2EPKmm:
  234|  71.9k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanImE3lenEv:
  237|   212k|  constexpr size_t len() const noexcept {
  238|   212k|    return length;
  239|   212k|  }
_ZNK10fast_float4spanImEixEm:
  241|   116k|  FASTFLOAT_CONSTEXPR14 const T& operator[](size_t index) const noexcept {
  242|   116k|    FASTFLOAT_DEBUG_ASSERT(index < length);
  ------------------
  |  |  174|   116k|#define FASTFLOAT_DEBUG_ASSERT(x) { ((void)(x)); }
  ------------------
  243|   116k|    return ptr[index];
  244|   116k|  }
_ZN10fast_float8to_floatIfEEvbNS_17adjusted_mantissaERT_:
  606|   151k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   151k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   151k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   151k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   151k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   151k|  ::memcpy(&value, &word, sizeof(T));
  615|   151k|#endif
  616|   151k|}
_ZN10fast_float13binary_formatIfE10sign_indexEv:
  510|   151k|template <> inline constexpr int binary_format<float>::sign_index() { return 31; }
_ZN10fast_float13binary_formatIfE14infinite_powerEv:
  505|   371k|template <> inline constexpr int binary_format<float>::infinite_power() {
  506|   371k|  return 0xFF;
  507|   371k|}
_ZN10fast_float15parse_options_tIcEC2ENS_12chars_formatEc:
   46|   923k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float4spanIKDiEC2Ev:
  235|   784k|  constexpr span() : ptr(nullptr), length(0) {}
_ZN10fast_float4spanIKDiEC2EPS1_m:
  234|   394k|  constexpr span(const T* _ptr, size_t _length) : ptr(_ptr), length(_length) {}
_ZNK10fast_float4spanIKDiE3lenEv:
  237|  1.66k|  constexpr size_t len() const noexcept {
  238|  1.66k|    return length;
  239|  1.66k|  }
impl.cpp:_ZN10fast_floatL11int_cmp_lenIDiEEiv:
  649|     72|{
  650|     72|    return sizeof(uint64_t) / sizeof(UC);
  651|     72|}
impl.cpp:_ZN10fast_floatL13int_cmp_zerosIDiEEmv:
  643|     72|{
  644|     72|    static_assert((sizeof(UC) == 1) || (sizeof(UC) == 2) || (sizeof(UC) == 4), "Unsupported character size");
  645|     72|    return (sizeof(UC) == 1) ? 0x3030303030303030 : (sizeof(UC) == 2) ? (uint64_t(UC('0')) << 48 | uint64_t(UC('0')) << 32 | uint64_t(UC('0')) << 16 | UC('0')) : (uint64_t(UC('0')) << 32 | UC('0'));
  ------------------
  |  Branch (645:12): [Folded - Ignored]
  |  Branch (645:53): [Folded - Ignored]
  ------------------
  646|     72|}
_ZN10fast_float15parse_options_tIDiEC2ENS_12chars_formatEDi:
   46|   392k|    : format(fmt), decimal_point(dot) {}
_ZN10fast_float13binary_formatIdE22min_exponent_fast_pathEv:
  456|   684k|template <> inline constexpr int binary_format<double>::min_exponent_fast_path() {
  457|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
  458|       |  return 0;
  459|       |#else
  460|   684k|  return -22;
  461|   684k|#endif
  462|   684k|}
_ZN10fast_float13binary_formatIdE22max_exponent_fast_pathEv:
  512|   677k|template <> inline constexpr int binary_format<double>::max_exponent_fast_path() {
  513|   677k|  return 22;
  514|   677k|}
_ZN10fast_float13binary_formatIdE22max_mantissa_fast_pathEv:
  519|   578k|template <> inline constexpr uint64_t binary_format<double>::max_mantissa_fast_path() {
  520|   578k|  return uint64_t(2) << mantissa_explicit_bits();
  521|   578k|}
_ZN10fast_float13binary_formatIdE22mantissa_explicit_bitsEv:
  472|  1.53M|template <> inline constexpr int binary_format<double>::mantissa_explicit_bits() {
  473|  1.53M|  return 52;
  474|  1.53M|}
_ZN10fast_float13binary_formatIdE18exact_power_of_tenEl:
  541|   574k|inline constexpr double binary_format<double>::exact_power_of_ten(int64_t power) {
  542|       |  // Work around clang bug https://godbolt.org/z/zedh7rrhc
  543|   574k|  return (void)powers_of_ten[0], powers_of_ten[power];
  544|   574k|}
_ZN10fast_float13binary_formatIdE21smallest_power_of_tenEv:
  562|   183k|inline constexpr int binary_format<double>::smallest_power_of_ten() {
  563|   183k|  return -342;
  564|   183k|}
_ZN10fast_float13binary_formatIdE20largest_power_of_tenEv:
  553|   183k|inline constexpr int binary_format<double>::largest_power_of_ten() {
  554|   183k|  return 308;
  555|   183k|}
_ZN10fast_float13binary_formatIdE16minimum_exponentEv:
  495|   241k|template <> inline constexpr int binary_format<double>::minimum_exponent() {
  496|   241k|  return -1023;
  497|   241k|}
_ZN10fast_float13binary_formatIdE26min_exponent_round_to_evenEv:
  487|  53.2k|template <> inline constexpr int binary_format<double>::min_exponent_round_to_even() {
  488|  53.2k|  return -4;
  489|  53.2k|}
_ZN10fast_float13binary_formatIdE26max_exponent_round_to_evenEv:
  479|  29.7k|template <> inline constexpr int binary_format<double>::max_exponent_round_to_even() {
  480|  29.7k|  return 23;
  481|  29.7k|}
_ZN10fast_float13binary_formatIdE10max_digitsEv:
  570|  30.8k|template <> inline constexpr size_t binary_format<double>::max_digits() {
  571|  30.8k|  return 769;
  572|  30.8k|}
_ZN10fast_float8to_floatIdEEvbNS_17adjusted_mantissaERT_:
  606|   137k|void to_float(bool negative, adjusted_mantissa am, T &value) {
  607|   137k|  using fastfloat_uint = typename binary_format<T>::equiv_uint;
  608|   137k|  fastfloat_uint word = (fastfloat_uint)am.mantissa;
  609|   137k|  word |= fastfloat_uint(am.power2) << binary_format<T>::mantissa_explicit_bits();
  610|   137k|  word |= fastfloat_uint(negative) << binary_format<T>::sign_index();
  611|       |#if FASTFLOAT_HAS_BIT_CAST
  612|       |  value = std::bit_cast<T>(word);
  613|       |#else
  614|   137k|  ::memcpy(&value, &word, sizeof(T));
  615|   137k|#endif
  616|   137k|}
_ZN10fast_float13binary_formatIdE10sign_indexEv:
  509|   137k|template <> inline constexpr int binary_format<double>::sign_index() { return 63; }
_ZN10fast_float13binary_formatIdE14infinite_powerEv:
  502|   349k|template <> inline constexpr int binary_format<double>::infinite_power() {
  503|   349k|  return 0x7FF;
  504|   349k|}

_ZN10fast_float10from_charsIfciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   453k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   453k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   453k|}
_ZN10fast_float17from_chars_callerIfE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   453k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   453k|    return from_chars_advanced(first, last, value, options);
  143|   453k|  }
_ZN10fast_float19from_chars_advancedIfcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   453k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   453k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   453k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   453k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   453k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 453k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   453k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   453k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 453k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   453k|  answer.ec = std::errc(); // be optimistic
  221|   453k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   453k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 415k, False: 37.9k]
  |  Branch (227:69): [True: 391k, False: 23.8k]
  |  Branch (227:131): [True: 350k, False: 41.1k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   350k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 350k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   350k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 327k, False: 22.6k]
  ------------------
  239|   327k|        value = T(pns.mantissa);
  240|   327k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 7.35k, False: 320k]
  ------------------
  241|   320k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   327k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 327k]
  ------------------
  243|   327k|        return answer;
  244|   327k|      }
  245|   350k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   350k|  }
  262|   125k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   125k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 74.3k, False: 51.2k]
  |  Branch (263:29): [True: 74.3k, False: 0]
  ------------------
  264|  74.3k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 21.1k, False: 53.1k]
  ------------------
  265|  21.1k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  21.1k|    }
  267|  74.3k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   125k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 21.1k, False: 104k]
  ------------------
  271|   125k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   125k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 122k, False: 3.31k]
  |  Branch (273:29): [True: 13.6k, False: 108k]
  |  Branch (273:49): [True: 749, False: 12.9k]
  |  Branch (273:68): [True: 4.02k, False: 120k]
  ------------------
  274|  4.77k|    answer.ec = std::errc::result_out_of_range;
  275|  4.77k|  }
  276|   125k|  return answer;
  277|   453k|}
_ZN10fast_float6detail17rounds_to_nearestEv:
   74|  1.10M|fastfloat_really_inline bool rounds_to_nearest() noexcept {
   75|       |  // https://lemire.me/blog/2020/06/26/gcc-not-nearest/
   76|       |#if (FLT_EVAL_METHOD != 1) && (FLT_EVAL_METHOD != 0)
   77|       |  return false;
   78|       |#endif
   79|       |  // See
   80|       |  // A fast function to check your floating-point rounding mode
   81|       |  // https://lemire.me/blog/2022/11/16/a-fast-function-to-check-your-floating-point-rounding-mode/
   82|       |  //
   83|       |  // This function is meant to be equivalent to :
   84|       |  // prior: #include <cfenv>
   85|       |  //  return fegetround() == FE_TONEAREST;
   86|       |  // However, it is expected to be much faster than the fegetround()
   87|       |  // function call.
   88|       |  //
   89|       |  // The volatile keywoard prevents the compiler from computing the function
   90|       |  // at compile-time.
   91|       |  // There might be other ways to prevent compile-time optimizations (e.g., asm).
   92|       |  // The value does not need to be std::numeric_limits<float>::min(), any small
   93|       |  // value so that 1 + x should round to 1 would do (after accounting for excess
   94|       |  // precision, as in 387 instructions).
   95|  1.10M|  static volatile float fmin = std::numeric_limits<float>::min();
   96|  1.10M|  float fmini = fmin; // we copy it so that it gets loaded at most once.
   97|       |  //
   98|       |  // Explanation:
   99|       |  // Only when fegetround() == FE_TONEAREST do we have that
  100|       |  // fmin + 1.0f == 1.0f - fmin.
  101|       |  //
  102|       |  // FE_UPWARD:
  103|       |  //  fmin + 1.0f > 1
  104|       |  //  1.0f - fmin == 1
  105|       |  //
  106|       |  // FE_DOWNWARD or  FE_TOWARDZERO:
  107|       |  //  fmin + 1.0f == 1
  108|       |  //  1.0f - fmin < 1
  109|       |  //
  110|       |  // Note: This may fail to be accurate if fast-math has been
  111|       |  // enabled, as rounding conventions may not apply.
  112|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  113|       |  #   pragma warning(push)
  114|       |  //  todo: is there a VS warning?
  115|       |  //  see https://stackoverflow.com/questions/46079446/is-there-a-warning-for-floating-point-equality-checking-in-visual-studio-2013
  116|       |  #elif defined(__clang__)
  117|       |  #   pragma clang diagnostic push
  118|  1.10M|  #   pragma clang diagnostic ignored "-Wfloat-equal"
  119|       |  #elif defined(__GNUC__)
  120|       |  #   pragma GCC diagnostic push
  121|       |  #   pragma GCC diagnostic ignored "-Wfloat-equal"
  122|       |  #endif
  123|  1.10M|  return (fmini + 1.0f == 1.0f - fmini);
  124|       |  #ifdef FASTFLOAT_VISUAL_STUDIO
  125|       |  #   pragma warning(pop)
  126|       |  #elif defined(__clang__)
  127|       |  #   pragma clang diagnostic pop
  128|       |  #elif defined(__GNUC__)
  129|       |  #   pragma GCC diagnostic pop
  130|       |  #endif
  131|  1.10M|}
_ZN10fast_float10from_charsIfDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   178k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   178k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   178k|}
_ZN10fast_float17from_chars_callerIfE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RfNS_15parse_options_tIS4_EE:
  141|   178k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   178k|    return from_chars_advanced(first, last, value, options);
  143|   178k|  }
_ZN10fast_float19from_chars_advancedIfDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   178k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   178k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   178k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   178k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   178k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 178k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   178k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   178k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 178k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   178k|  answer.ec = std::errc(); // be optimistic
  221|   178k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   178k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 176k, False: 1.25k]
  |  Branch (227:69): [True: 173k, False: 3.07k]
  |  Branch (227:131): [True: 173k, False: 210]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   173k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 173k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   173k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 173k, False: 462]
  ------------------
  239|   173k|        value = T(pns.mantissa);
  240|   173k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 434, False: 172k]
  ------------------
  241|   172k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   173k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 173k]
  ------------------
  243|   173k|        return answer;
  244|   173k|      }
  245|   173k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   173k|  }
  262|  5.00k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  5.00k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 496, False: 4.50k]
  |  Branch (263:29): [True: 496, False: 0]
  ------------------
  264|    496|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 0, False: 496]
  ------------------
  265|      0|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|      0|    }
  267|    496|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  5.00k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 0, False: 5.00k]
  ------------------
  271|  5.00k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  5.00k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 4.59k, False: 404]
  |  Branch (273:29): [True: 3.30k, False: 1.29k]
  |  Branch (273:49): [True: 776, False: 2.52k]
  |  Branch (273:68): [True: 2.52k, False: 1.69k]
  ------------------
  274|  3.30k|    answer.ec = std::errc::result_out_of_range;
  275|  3.30k|  }
  276|  5.00k|  return answer;
  277|   178k|}
_ZN10fast_float10from_charsIdciEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   470k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   470k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   470k|}
_ZN10fast_float17from_chars_callerIdE4callIcEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   470k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   470k|    return from_chars_advanced(first, last, value, options);
  143|   470k|  }
_ZN10fast_float19from_chars_advancedIdcEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   470k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   470k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   470k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   470k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   470k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 470k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   470k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   470k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 470k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   470k|  answer.ec = std::errc(); // be optimistic
  221|   470k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   470k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 464k, False: 5.44k]
  |  Branch (227:69): [True: 441k, False: 22.9k]
  |  Branch (227:131): [True: 370k, False: 71.5k]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   370k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 370k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   370k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 366k, False: 4.35k]
  ------------------
  239|   366k|        value = T(pns.mantissa);
  240|   366k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 19.3k, False: 346k]
  ------------------
  241|   346k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   366k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 366k]
  ------------------
  243|   366k|        return answer;
  244|   366k|      }
  245|   370k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   370k|  }
  262|   104k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|   104k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 76.4k, False: 27.8k]
  |  Branch (263:29): [True: 76.4k, False: 0]
  ------------------
  264|  76.4k|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 30.7k, False: 45.6k]
  ------------------
  265|  30.7k|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|  30.7k|    }
  267|  76.4k|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|   104k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 30.7k, False: 73.5k]
  ------------------
  271|   104k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|   104k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 101k, False: 3.02k]
  |  Branch (273:29): [True: 8.69k, False: 92.5k]
  |  Branch (273:49): [True: 193, False: 8.50k]
  |  Branch (273:68): [True: 2.05k, False: 102k]
  ------------------
  274|  2.25k|    answer.ec = std::errc::result_out_of_range;
  275|  2.25k|  }
  276|   104k|  return answer;
  277|   470k|}
_ZN10fast_float10from_charsIdDiiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_12chars_formatE:
  186|   214k|                             T &value, chars_format fmt /*= chars_format::general*/)  noexcept  {
  187|   214k|  return from_chars_caller<T>::call(first, last, value, parse_options_t<UC>(fmt));
  188|   214k|}
_ZN10fast_float17from_chars_callerIdE4callIDiEENS_19from_chars_result_tIT_EEPKS4_S7_RdNS_15parse_options_tIS4_EE:
  141|   214k|                                      T &value, parse_options_t<UC> options)  noexcept {
  142|   214k|    return from_chars_advanced(first, last, value, options);
  143|   214k|  }
_ZN10fast_float19from_chars_advancedIdDiEENS_19from_chars_result_tIT0_EEPKS2_S5_RT_NS_15parse_options_tIS2_EE:
  193|   214k|                                      T &value, parse_options_t<UC> options)  noexcept  {
  194|       |
  195|   214k|  static_assert (is_supported_float_type<T>(), "only some floating-point types are supported");
  196|   214k|  static_assert (is_supported_char_type<UC>(), "only char, wchar_t, char16_t and char32_t are supported");
  197|       |
  198|   214k|  from_chars_result_t<UC> answer;
  199|       |#ifdef FASTFLOAT_SKIP_WHITE_SPACE  // disabled by default
  200|       |  while ((first != last) && fast_float::is_space(uint8_t(*first))) {
  201|       |    first++;
  202|       |  }
  203|       |#endif
  204|   214k|  if (first == last) {
  ------------------
  |  Branch (204:7): [True: 0, False: 214k]
  ------------------
  205|      0|    answer.ec = std::errc::invalid_argument;
  206|      0|    answer.ptr = first;
  207|      0|    return answer;
  208|      0|  }
  209|   214k|  parsed_number_string_t<UC> pns = parse_number_string<UC>(first, last, options);
  210|   214k|  if (!pns.valid) {
  ------------------
  |  Branch (210:7): [True: 0, False: 214k]
  ------------------
  211|      0|    if (options.format & chars_format::no_infnan) {
  ------------------
  |  Branch (211:9): [True: 0, False: 0]
  ------------------
  212|      0|      answer.ec = std::errc::invalid_argument;
  213|      0|      answer.ptr = first;
  214|      0|      return answer;
  215|      0|    } else {
  216|      0|      return detail::parse_infnan(first, last, value);
  217|      0|    }
  218|      0|  }
  219|       |
  220|   214k|  answer.ec = std::errc(); // be optimistic
  221|   214k|  answer.ptr = pns.lastmatch;
  222|       |  // The implementation of the Clinger's fast path is convoluted because
  223|       |  // we want round-to-nearest in all cases, irrespective of the rounding mode
  224|       |  // selected on the thread.
  225|       |  // We proceed optimistically, assuming that detail::rounds_to_nearest() returns
  226|       |  // true.
  227|   214k|  if (binary_format<T>::min_exponent_fast_path() <= pns.exponent && pns.exponent <= binary_format<T>::max_exponent_fast_path() && !pns.too_many_digits) {
  ------------------
  |  Branch (227:7): [True: 212k, False: 1.58k]
  |  Branch (227:69): [True: 208k, False: 3.75k]
  |  Branch (227:131): [True: 208k, False: 378]
  ------------------
  228|       |    // Unfortunately, the conventional Clinger's fast path is only possible
  229|       |    // when the system rounds to the nearest float.
  230|       |    //
  231|       |    // We expect the next branch to almost always be selected.
  232|       |    // We could check it first (before the previous branch), but
  233|       |    // there might be performance advantages at having the check
  234|       |    // be last.
  235|   208k|    if(!cpp20_and_in_constexpr() && detail::rounds_to_nearest())  {
  ------------------
  |  Branch (235:8): [Folded - Ignored]
  |  Branch (235:37): [True: 208k, False: 0]
  ------------------
  236|       |      // We have that fegetround() == FE_TONEAREST.
  237|       |      // Next is Clinger's fast path.
  238|   208k|      if (pns.mantissa <=binary_format<T>::max_mantissa_fast_path()) {
  ------------------
  |  Branch (238:11): [True: 208k, False: 126]
  ------------------
  239|   208k|        value = T(pns.mantissa);
  240|   208k|        if (pns.exponent < 0) { value = value / binary_format<T>::exact_power_of_ten(-pns.exponent); }
  ------------------
  |  Branch (240:13): [True: 630, False: 207k]
  ------------------
  241|   207k|        else { value = value * binary_format<T>::exact_power_of_ten(pns.exponent); }
  242|   208k|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (242:13): [True: 0, False: 208k]
  ------------------
  243|   208k|        return answer;
  244|   208k|      }
  245|   208k|    } else {
  246|       |      // We do not have that fegetround() == FE_TONEAREST.
  247|       |      // Next is a modified Clinger's fast path, inspired by Jakub Jelínek's proposal
  248|      0|      if (pns.exponent >= 0 && pns.mantissa <=binary_format<T>::max_mantissa_fast_path(pns.exponent)) {
  ------------------
  |  Branch (248:11): [True: 0, False: 0]
  |  Branch (248:32): [True: 0, False: 0]
  ------------------
  249|      0|#if defined(__clang__) || defined(FASTFLOAT_32BIT)
  250|       |        // Clang may map 0 to -0.0 when fegetround() == FE_DOWNWARD
  251|      0|        if(pns.mantissa == 0) {
  ------------------
  |  Branch (251:12): [True: 0, False: 0]
  ------------------
  252|      0|          value = pns.negative ? T(-0.) : T(0.);
  ------------------
  |  Branch (252:19): [True: 0, False: 0]
  ------------------
  253|      0|          return answer;
  254|      0|        }
  255|      0|#endif
  256|      0|        value = T(pns.mantissa) * binary_format<T>::exact_power_of_ten(pns.exponent);
  257|      0|        if (pns.negative) { value = -value; }
  ------------------
  |  Branch (257:13): [True: 0, False: 0]
  ------------------
  258|      0|        return answer;
  259|      0|      }
  260|      0|    }
  261|   208k|  }
  262|  5.84k|  adjusted_mantissa am = compute_float<binary_format<T>>(pns.exponent, pns.mantissa);
  263|  5.84k|  if(pns.too_many_digits && am.power2 >= 0) {
  ------------------
  |  Branch (263:6): [True: 496, False: 5.34k]
  |  Branch (263:29): [True: 496, False: 0]
  ------------------
  264|    496|    if(am != compute_float<binary_format<T>>(pns.exponent, pns.mantissa + 1)) {
  ------------------
  |  Branch (264:8): [True: 72, False: 424]
  ------------------
  265|     72|      am = compute_error<binary_format<T>>(pns.exponent, pns.mantissa);
  266|     72|    }
  267|    496|  }
  268|       |  // If we called compute_float<binary_format<T>>(pns.exponent, pns.mantissa) and we have an invalid power (am.power2 < 0),
  269|       |  // then we need to go the long way around again. This is very uncommon.
  270|  5.84k|  if(am.power2 < 0) { am = digit_comp<T>(pns, am); }
  ------------------
  |  Branch (270:6): [True: 72, False: 5.76k]
  ------------------
  271|  5.84k|  to_float(pns.negative, am, value);
  272|       |  // Test for over/underflow.
  273|  5.84k|  if ((pns.mantissa != 0 && am.mantissa == 0 && am.power2 == 0) || am.power2 == binary_format<T>::infinite_power()) {
  ------------------
  |  Branch (273:8): [True: 5.40k, False: 432]
  |  Branch (273:29): [True: 1.57k, False: 3.83k]
  |  Branch (273:49): [True: 170, False: 1.40k]
  |  Branch (273:68): [True: 1.40k, False: 4.26k]
  ------------------
  274|  1.57k|    answer.ec = std::errc::result_out_of_range;
  275|  1.57k|  }
  276|  5.84k|  return answer;
  277|   214k|}

_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
  859|  3.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
  859|  1.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
  859|  1.63M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  3.03M|{
 3803|  3.03M|    if constexpr (sizeof(U) == 1) {
 3804|  3.03M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|  3.03M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  3.03M|{
 3767|  3.03M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  3.03M|    SCN_GCC_COMPAT_PUSH
 3770|  3.03M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  3.03M|    constexpr char lengths[] =
 3772|  3.03M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  3.03M|        "\1\1\1\1\1\1\1\1"
 3774|  3.03M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  3.03M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  3.03M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  3.03M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  3.03M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  3.03M|    SCN_GCC_COMPAT_POP
 3781|  3.03M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  2.76M|{
 4009|  2.76M|    if constexpr (sizeof(CharT) == 1) {
 4010|  2.76M|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|  2.76M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  2.76M|{
 3822|  2.76M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  2.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  2.76M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  2.76M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  2.76M|    };
 3827|       |
 3828|  2.76M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 2.70M, False: 59.2k]
  ------------------
 3829|  2.70M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 716, False: 2.70M]
  ------------------
 3830|    716|            SCN_UNLIKELY_ATTR
 3831|    716|            return invalid_code_point;
 3832|    716|        }
 3833|  2.70M|        return static_cast<char32_t>(input[0]);
 3834|  2.70M|    }
 3835|       |
 3836|  59.2k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 54.1k, False: 5.08k]
  ------------------
 3837|  54.1k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 152, False: 53.9k]
  ------------------
 3838|    152|            SCN_UNLIKELY_ATTR
 3839|    152|            return invalid_code_point;
 3840|    152|        }
 3841|  53.9k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 5.07k, False: 48.9k]
  ------------------
 3842|  5.07k|            SCN_UNLIKELY_ATTR
 3843|  5.07k|            return invalid_code_point;
 3844|  5.07k|        }
 3845|       |
 3846|  48.9k|        char32_t cp{};
 3847|  48.9k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|  48.9k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|  48.9k|        return cp;
 3850|  53.9k|    }
 3851|       |
 3852|  5.08k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 2.70k, False: 2.38k]
  ------------------
 3853|  2.70k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 113, False: 2.58k]
  ------------------
 3854|    113|            SCN_UNLIKELY_ATTR
 3855|    113|            return invalid_code_point;
 3856|    113|        }
 3857|  2.58k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 1.10k, False: 1.48k]
  ------------------
 3858|  2.58k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 596, False: 888]
  ------------------
 3859|  1.69k|            SCN_UNLIKELY_ATTR
 3860|  1.69k|            return invalid_code_point;
 3861|  1.69k|        }
 3862|       |
 3863|    888|        char32_t cp{};
 3864|    888|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|    888|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|    888|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|    888|        return cp;
 3868|  2.58k|    }
 3869|       |
 3870|  2.38k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 2.38k, False: 0]
  ------------------
 3871|  2.38k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 2.38k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  2.38k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 534, False: 1.85k]
  ------------------
 3876|    534|            SCN_UNLIKELY_ATTR
 3877|    534|            return invalid_code_point;
 3878|    534|        }
 3879|  1.85k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 466, False: 1.38k]
  ------------------
 3880|  1.85k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 554, False: 833]
  ------------------
 3881|  1.85k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 542, False: 291]
  ------------------
 3882|  1.56k|            SCN_UNLIKELY_ATTR
 3883|  1.56k|            return invalid_code_point;
 3884|  1.56k|        }
 3885|       |
 3886|    291|        char32_t cp{};
 3887|    291|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|    291|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|    291|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|    291|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|    291|        return cp;
 3892|  1.85k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|  62.1k|    const auto is_trailing_code_unit = [](char ch) {
 3825|  62.1k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  62.1k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  4.64M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  4.64M|    else {
 3701|  4.64M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  4.64M|                                       to_address(first), to_address(last)))};
 3703|  4.64M|    }
 3704|  4.64M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  14.1M|{
  326|  14.1M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  14.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  14.1M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  21.6M|{
  304|  21.6M|    return p;
  305|  21.6M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  7.39M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  7.39M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  7.39M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  7.39M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  7.39M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  7.39M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  88.7k|    {
 2724|  88.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  88.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  88.7k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  88.7k|    {
 2705|  88.7k|        return decay_copy(t.begin());
 2706|  88.7k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  10.6M|{
 1949|  10.6M|    return SCN_FWD(t);
  ------------------
  |  |  930|  10.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  10.6M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.01M|    {
 2781|  2.01M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.01M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.01M|    {
 2763|  2.01M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.01M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|   147k|{
 8878|   147k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   147k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   147k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   147k|    static_cast<    \
  |  |  929|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   147k|    static_cast<    \
  |  |  929|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   147k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJfEEEDav:
 5405|   632k|{
 5406|   632k|    detail::check_scan_arg_types<Args...>();
 5407|   632k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   632k|}
_ZN3scn2v36detail20check_scan_arg_typesIJfEEEvv:
 5144|  1.04M|{
 5145|  1.04M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.04M|                  "Scan argument types must be default constructible");
 5147|  1.04M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.04M|                  "Scan argument types must be Destructible");
 5149|  1.04M|    static_assert(
 5150|  1.04M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.04M|        "Scan argument types must not be references");
 5152|  1.04M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEEC2Ev:
 5357|   632k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   632k|    {
 5359|   632k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   632k|    {
 5370|   632k|        return {detail::make_arg<
 5371|   632k|            kind, Context,
 5372|   632k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   632k|                                 typename Context::char_type>::value>(args)...};
 5374|   632k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE16EfvEEPvRT2_:
 5179|   632k|{
 5180|   632k|    return make_value<Context>(value).ref_value;
 5181|   632k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEfEEDaRT0_:
 5129|   699k|{
 5130|   699k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   699k|                                  needs_context_tag>) {
 5134|   699k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   699k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   699k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERf:
 4968|   699k|    {                                                                        \
 4969|   699k|        return val;                                                          \
 4970|   699k|    }
_ZN3scn2v36detail15make_value_implIRfEEDaOT_:
 5098|  1.04M|{
 5099|  1.04M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.04M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.04M|    constexpr bool scannable_char =
 5103|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.04M|    static_assert(scannable_char,
 5105|  1.04M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.04M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.04M|    constexpr bool scannable_const =
 5109|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.04M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.04M|    constexpr bool scannable_disabled =
 5113|  1.04M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.04M|    static_assert(scannable_disabled,
 5115|  1.04M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.04M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.04M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.04M|    static_assert(
 5120|  1.04M|        scannable,
 5121|  1.04M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.04M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.04M|    return arg_value{arg};
 5125|  1.04M|}
_ZN3scn2v36detail9arg_valueC2IfEERT_:
 4909|  1.04M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.04M|    {
 4911|  1.04M|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|   453k|{
 8665|   453k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|   453k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|   453k|{
 8602|   453k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   453k|    auto result = vscan_impl(buffer, format, args);
 8605|   453k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.9k, False: 413k]
  |  |  ------------------
  ------------------
 8606|  39.9k|        return unexpected(result.error());
 8607|  39.9k|    }
 8608|   413k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   413k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   453k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4728|  1.00M|{
 4729|  1.00M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  1.00M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  1.00M|                  "\n"
 4733|  1.00M|                  "Unsupported range type given as input to a scanning "
 4734|  1.00M|                  "function.\n"
 4735|  1.00M|                  "A range needs to have a character type (value type) "
 4736|  1.00M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  1.00M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  1.00M|                  "to be included.\n"
 4739|  1.00M|                  "See the scnlib documentation for more details.");
 4740|  1.00M|    static_assert(
 4741|  1.00M|        !std::is_same_v<T, custom_char_traits>,
 4742|  1.00M|        "\n"
 4743|  1.00M|        "Unsupported range type given as input to a scanning "
 4744|  1.00M|        "function.\n"
 4745|  1.00M|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  1.00M|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  1.00M|        "not supported.");
 4748|  1.00M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  1.00M|                  "\n"
 4750|  1.00M|                  "Unsupported range type given as input to a scanning "
 4751|  1.00M|                  "function.\n"
 4752|  1.00M|                  "file_marker_found cannot be used as an "
 4753|  1.00M|                  "source range type to scn::scan.\n"
 4754|  1.00M|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  1.00M|                  "and do not provide an explicit source range, "
 4756|  1.00M|                  "or use scn::scan with a FILE* directly.");
 4757|  1.00M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  1.00M|                  "\n"
 4759|  1.00M|                  "Unsupported range type given as input to a scanning "
 4760|  1.00M|                  "function.\n"
 4761|  1.00M|                  "In order to be scannable, a range needs to satisfy "
 4762|  1.00M|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  1.00M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  1.00M|                  "\n"
 4765|  1.00M|                  "Unsupported range type given as input to a scanning "
 4766|  1.00M|                  "function.\n"
 4767|  1.00M|                  "A range needs to model forward_range and have a valid "
 4768|  1.00M|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  1.00M|                  "Examples of scannable ranges are std::string, "
 4770|  1.00M|                  "std::string_view, "
 4771|  1.00M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  1.00M|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  1.00M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  1.00M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|  1.00M|{
 4668|  1.00M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|  1.00M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|  1.00M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.00M|    {
 2855|  1.00M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.00M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.00M|    {
 2836|  1.00M|        return t.data();
 2837|  1.00M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3228|  1.00M|    {
 3229|  1.00M|        return detail::to_address(ranges::begin(derived()));
 3230|  1.00M|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  7.55M|{
  326|  7.55M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  7.55M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  7.55M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.92M|    {
 2724|  1.92M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.92M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.92M|    {
 2705|  1.92M|        return decay_copy(t.begin());
 2706|  1.92M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  24.2M|    {
 3326|  24.2M|        return m_iterator;
 3327|  24.2M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|  1.00M|    {
 3185|  1.00M|        return static_cast<const D&>(*this);
 3186|  1.00M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.00M|    {
 2930|  1.00M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.00M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.00M|    {
 2896|  1.00M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.00M|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  4.32M|{
 1949|  4.32M|    return SCN_FWD(t);
  ------------------
  |  |  930|  4.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  4.32M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  5.55M|    {
 3342|  5.55M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  5.55M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  10.7M|    {
 1598|  10.7M|        return has_value();
 1599|  10.7M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  21.2M|    {
  485|  21.2M|        return m_has_value;
  486|  21.2M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   787k|    {
 1604|   787k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   787k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   787k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   787k|        return this->get_unexpected().error();
 1606|   787k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   787k|    {
  468|   787k|        return m_unexpected;
  469|   787k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  6.07M|    {
  361|  6.07M|        return m_unexpected;
  362|  6.07M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  2.97M|        : m_unexpected(std::forward<Err>(e))
  346|  2.97M|    {
  347|  2.97M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  2.97M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  2.97M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  86.5k|        : base(unexpect, std::move(e.error())),
 1474|  86.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  86.5k|    {
 1476|  86.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  86.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  86.5k|          m_has_value(false)
  446|  86.5k|    {
  447|  86.5k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  6.59M|        : m_unexpected(std::forward<Args>(args)...)
  355|  6.59M|    {
  356|  6.59M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  6.59M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  6.59M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.00M|    {
 1177|  1.00M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   920k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   920k|                      ranges::iterator_t<SourceRange>>) {
 5935|   920k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   920k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  5.70M|    {
 2724|  5.70M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  5.70M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  5.70M|    {
 2705|  5.70M|        return decay_copy(t.begin());
 2706|  5.70M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5919|   920k|{
 5920|   920k|    return ranges::end(source);
 5921|   920k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   920k|    {
 2781|   920k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   920k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   920k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   920k|    {
 2763|   920k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   920k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   920k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  11.8M|    {
 3330|  11.8M|        return m_sentinel;
 3331|  11.8M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  4.20M|    {
 1653|  4.20M|        return value();
 1654|  4.20M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  9.72M|    {
 1627|  9.72M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  9.72M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.72M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  9.72M|        return this->get_value();
 1629|  9.72M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  9.72M|    {
  451|  9.72M|        return m_value;
  452|  9.72M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   920k|        : base(std::in_place, std::forward<U>(val)),
 1428|   920k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   920k|    {
 1430|   920k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   920k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   920k|    {
  437|   920k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|   294k|    {
 7986|   294k|        return m_str;
 7987|   294k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   632k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   632k|    {
 5436|   632k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE12arg_pointersEv:
 5388|   632k|    {
 5389|   632k|        return m_argptrs;
 5390|   632k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|  1.95M|        : m_desc(desc), m_builtin_values(data)
 5487|  1.95M|    {
 5488|  1.95M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   294k|{
 8831|   294k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.6k, False: 268k]
  |  |  ------------------
  ------------------
 8832|  26.6k|        return unexpected(result.error());
 8833|  26.6k|    }
 8834|   268k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   268k|    static_cast<    \
  |  |  929|   268k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   268k|    static_cast<    \
  |  |  929|   268k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   294k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.00M|    {
 1598|  1.00M|        return has_value();
 1599|  1.00M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.01M|    {
  485|  2.01M|        return m_has_value;
  486|  2.01M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  86.5k|    {
 1604|  86.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  86.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  86.5k|        return this->get_unexpected().error();
 1606|  86.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  86.5k|    {
  468|  86.5k|        return m_unexpected;
  469|  86.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  28.8k|        : base(unexpect, std::move(e.error())),
 1474|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  28.8k|    {
 1476|  28.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  28.8k|          m_has_value(false)
  446|  28.8k|    {
  447|  28.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   327k|    {
 1177|   327k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   827k|    {
 1653|   827k|        return value();
 1654|   827k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   920k|    {
 1627|   920k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   920k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   920k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   920k|        return this->get_value();
 1629|   920k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   920k|    {
  451|   920k|        return m_value;
  452|   920k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5838|   298k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   298k|    static_cast<    \
  |  |  929|   298k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   298k|    static_cast<    \
  |  |  929|   298k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   298k|    {
 5840|   298k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|   920k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   920k|    static_cast<    \
  |  |  929|   920k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   920k|    {
 5691|   920k|    }
_ZN3scn2v36detail25scan_result_value_storageIJfEEC2EONSt3__15tupleIJfEEE:
 5624|   870k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   870k|    static_cast<    \
  |  |  929|   870k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   870k|    {
 5626|   870k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   298k|        : base(std::in_place, std::forward<U>(val)),
 1428|   298k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   298k|    {
 1430|   298k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   298k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   298k|    {
  437|   298k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJfEE4argsEv:
 5383|   632k|    {
 5384|   632k|        return m_args;
 5385|   632k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  9.44M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  9.44M|    static_cast<    \
  |  |  929|  9.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  9.44M|    static_cast<    \
  |  |  929|  9.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  9.44M|    {
 3312|  9.44M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7701|  1.95M|{
 7702|  1.95M|    return s;
 7703|  1.95M|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7678|  1.95M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   294k|        : m_str(r.str)
 7981|   294k|    {
 7982|   294k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   327k|    {
 1598|   327k|        return has_value();
 1599|   327k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   625k|    {
  485|   625k|        return m_has_value;
  486|   625k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   298k|    {
 1673|   298k|        return &value();
 1674|   298k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   298k|    {
 1627|   298k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   298k|        return this->get_value();
 1629|   298k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   298k|    {
  451|   298k|        return m_value;
  452|   298k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5707|   920k|    {
 5708|   920k|        return ranges::begin(m_range);
 5709|   920k|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|   147k|{
 8945|   147k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   147k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   147k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   147k|    static_cast<    \
  |  |  929|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   147k|    static_cast<    \
  |  |  929|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   147k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|   453k|{
 8683|   453k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   453k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|   453k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|   453k|{
 8618|   453k|#if !SCN_DISABLE_LOCALE
 8619|   453k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   453k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   453k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   453k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   453k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.9k, False: 413k]
  |  |  ------------------
  ------------------
 8626|  39.9k|        return unexpected(result.error());
 8627|  39.9k|    }
 8628|   413k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   413k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   453k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  32.0k|{
 8984|  32.0k|    T value;
 8985|  32.0k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  32.0k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  32.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  32.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  32.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.21k, False: 29.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.21k|    }                                                  \
  |  |  |  | 3667|  32.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  29.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.8k|    static_cast<    \
  |  |  929|  29.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.8k|    static_cast<    \
  |  |  929|  29.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  32.0k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEfEENS0_14basic_scan_argIT_EERT0_:
 5164|  66.8k|{
 5165|  66.8k|    check_scan_arg_types<T>();
 5166|       |
 5167|  66.8k|    basic_scan_arg<Context> arg;
 5168|  66.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  66.8k|    arg.m_value = make_value<Context>(value);
 5170|  66.8k|    return arg;
 5171|  66.8k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|  2.16M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|  3.27M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  99.5k|{
 8696|  99.5k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  99.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  99.5k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  99.5k|{
 8642|  99.5k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  99.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  99.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  99.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.65k, False: 92.8k]
  |  |  ------------------
  ------------------
 8646|  6.65k|        return unexpected(result.error());
 8647|  6.65k|    }
 8648|  92.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  92.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  99.5k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  92.8k|    {
 1663|  92.8k|        return std::move(value());
 1664|  92.8k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|   152k|{
 8878|   152k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   152k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   152k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   152k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJdEEEDav:
 5405|   656k|{
 5406|   656k|    detail::check_scan_arg_types<Args...>();
 5407|   656k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   656k|}
_ZN3scn2v36detail20check_scan_arg_typesIJdEEEvv:
 5144|  1.10M|{
 5145|  1.10M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.10M|                  "Scan argument types must be default constructible");
 5147|  1.10M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.10M|                  "Scan argument types must be Destructible");
 5149|  1.10M|    static_assert(
 5150|  1.10M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.10M|        "Scan argument types must not be references");
 5152|  1.10M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEEC2Ev:
 5357|   656k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   656k|    {
 5359|   656k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   656k|    {
 5370|   656k|        return {detail::make_arg<
 5371|   656k|            kind, Context,
 5372|   656k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   656k|                                 typename Context::char_type>::value>(args)...};
 5374|   656k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|   656k|{
 5180|   656k|    return make_value<Context>(value).ref_value;
 5181|   656k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEdEEDaRT0_:
 5129|   725k|{
 5130|   725k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   725k|                                  needs_context_tag>) {
 5134|   725k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   725k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   725k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERd:
 4968|   725k|    {                                                                        \
 4969|   725k|        return val;                                                          \
 4970|   725k|    }
_ZN3scn2v36detail15make_value_implIRdEEDaOT_:
 5098|  1.10M|{
 5099|  1.10M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.10M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.10M|    constexpr bool scannable_char =
 5103|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.10M|    static_assert(scannable_char,
 5105|  1.10M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.10M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.10M|    constexpr bool scannable_const =
 5109|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.10M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.10M|    constexpr bool scannable_disabled =
 5113|  1.10M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.10M|    static_assert(scannable_disabled,
 5115|  1.10M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.10M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.10M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.10M|    static_assert(
 5120|  1.10M|        scannable,
 5121|  1.10M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.10M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.10M|    return arg_value{arg};
 5125|  1.10M|}
_ZN3scn2v36detail9arg_valueC2IdEERT_:
 4909|  1.10M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.10M|    {
 4911|  1.10M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|   304k|    {
 7986|   304k|        return m_str;
 7987|   304k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   656k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   656k|    {
 5436|   656k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE12arg_pointersEv:
 5388|   656k|    {
 5389|   656k|        return m_argptrs;
 5390|   656k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   304k|{
 8831|   304k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.6k, False: 277k]
  |  |  ------------------
  ------------------
 8832|  26.6k|        return unexpected(result.error());
 8833|  26.6k|    }
 8834|   277k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   277k|    static_cast<    \
  |  |  929|   277k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   277k|    static_cast<    \
  |  |  929|   277k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   304k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  28.8k|        : base(unexpect, std::move(e.error())),
 1474|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  28.8k|    {
 1476|  28.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  28.8k|          m_has_value(false)
  446|  28.8k|    {
  447|  28.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   337k|    {
 1177|   337k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5838|   308k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   308k|    static_cast<    \
  |  |  929|   308k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   308k|    static_cast<    \
  |  |  929|   308k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   308k|    {
 5840|   308k|    }
_ZN3scn2v36detail25scan_result_value_storageIJdEEC2EONSt3__15tupleIJdEEE:
 5624|   934k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   934k|    static_cast<    \
  |  |  929|   934k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   934k|    {
 5626|   934k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   308k|        : base(std::in_place, std::forward<U>(val)),
 1428|   308k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   308k|    {
 1430|   308k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   308k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   308k|    {
  437|   308k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJdEE4argsEv:
 5383|   656k|    {
 5384|   656k|        return m_args;
 5385|   656k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   304k|        : m_str(r.str)
 7981|   304k|    {
 7982|   304k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   337k|    {
 1598|   337k|        return has_value();
 1599|   337k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   645k|    {
  485|   645k|        return m_has_value;
  486|   645k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   308k|    {
 1673|   308k|        return &value();
 1674|   308k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   308k|    {
 1627|   308k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   308k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   308k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   308k|        return this->get_value();
 1629|   308k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   308k|    {
  451|   308k|        return m_value;
  452|   308k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|   152k|{
 8945|   152k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   152k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   152k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   152k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  33.3k|{
 8984|  33.3k|    T value;
 8985|  33.3k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  33.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  33.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  33.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  33.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.21k, False: 31.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.21k|    }                                                  \
  |  |  |  | 3667|  33.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  31.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.1k|    static_cast<    \
  |  |  929|  31.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.1k|    static_cast<    \
  |  |  929|  31.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  33.3k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEdEENS0_14basic_scan_argIT_EERT0_:
 5164|  69.9k|{
 5165|  69.9k|    check_scan_arg_types<T>();
 5166|       |
 5167|  69.9k|    basic_scan_arg<Context> arg;
 5168|  69.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  69.9k|    arg.m_value = make_value<Context>(value);
 5170|  69.9k|    return arg;
 5171|  69.9k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 8877|   154k|{
 8878|   154k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   154k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   154k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   154k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJeEEEDav:
 5405|   665k|{
 5406|   665k|    detail::check_scan_arg_types<Args...>();
 5407|   665k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   665k|}
_ZN3scn2v36detail20check_scan_arg_typesIJeEEEvv:
 5144|  1.12M|{
 5145|  1.12M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.12M|                  "Scan argument types must be default constructible");
 5147|  1.12M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.12M|                  "Scan argument types must be Destructible");
 5149|  1.12M|    static_assert(
 5150|  1.12M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.12M|        "Scan argument types must not be references");
 5152|  1.12M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEEC2Ev:
 5357|   665k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   665k|    {
 5359|   665k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   665k|    {
 5370|   665k|        return {detail::make_arg<
 5371|   665k|            kind, Context,
 5372|   665k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   665k|                                 typename Context::char_type>::value>(args)...};
 5374|   665k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE18EevEEPvRT2_:
 5179|   665k|{
 5180|   665k|    return make_value<Context>(value).ref_value;
 5181|   665k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEEeEEDaRT0_:
 5129|   736k|{
 5130|   736k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   736k|                                  needs_context_tag>) {
 5134|   736k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   736k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   736k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERe:
 4968|   736k|    {                                                                        \
 4969|   736k|        return val;                                                          \
 4970|   736k|    }
_ZN3scn2v36detail15make_value_implIReEEDaOT_:
 5098|  1.12M|{
 5099|  1.12M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.12M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.12M|    constexpr bool scannable_char =
 5103|  1.12M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.12M|    static_assert(scannable_char,
 5105|  1.12M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.12M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.12M|    constexpr bool scannable_const =
 5109|  1.12M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.12M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.12M|    constexpr bool scannable_disabled =
 5113|  1.12M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.12M|    static_assert(scannable_disabled,
 5115|  1.12M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.12M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.12M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.12M|    static_assert(
 5120|  1.12M|        scannable,
 5121|  1.12M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.12M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.12M|    return arg_value{arg};
 5125|  1.12M|}
_ZN3scn2v36detail9arg_valueC2IeEERT_:
 4909|  1.12M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.12M|    {
 4911|  1.12M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 7985|   308k|    {
 7986|   308k|        return m_str;
 7987|   308k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   665k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   665k|    {
 5436|   665k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE12arg_pointersEv:
 5388|   665k|    {
 5389|   665k|        return m_argptrs;
 5390|   665k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   308k|{
 8831|   308k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.6k, False: 282k]
  |  |  ------------------
  ------------------
 8832|  26.6k|        return unexpected(result.error());
 8833|  26.6k|    }
 8834|   282k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   282k|    static_cast<    \
  |  |  929|   282k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   282k|    static_cast<    \
  |  |  929|   282k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   308k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  28.8k|        : base(unexpect, std::move(e.error())),
 1474|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  28.8k|    {
 1476|  28.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  28.8k|          m_has_value(false)
  446|  28.8k|    {
  447|  28.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   342k|    {
 1177|   342k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5838|   314k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   314k|    static_cast<    \
  |  |  929|   314k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   314k|    static_cast<    \
  |  |  929|   314k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   314k|    {
 5840|   314k|    }
_ZN3scn2v36detail25scan_result_value_storageIJeEEC2EONSt3__15tupleIJeEEE:
 5624|   951k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   951k|    static_cast<    \
  |  |  929|   951k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   951k|    {
 5626|   951k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   314k|        : base(std::in_place, std::forward<U>(val)),
 1428|   314k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   314k|    {
 1430|   314k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   314k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   314k|    {
  437|   314k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJeEE4argsEv:
 5383|   665k|    {
 5384|   665k|        return m_args;
 5385|   665k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   308k|        : m_str(r.str)
 7981|   308k|    {
 7982|   308k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   342k|    {
 1598|   342k|        return has_value();
 1599|   342k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   657k|    {
  485|   657k|        return m_has_value;
  486|   657k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   314k|    {
 1673|   314k|        return &value();
 1674|   314k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   314k|    {
 1627|   314k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   314k|        return this->get_value();
 1629|   314k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   314k|    {
  451|   314k|        return m_value;
  452|   314k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 8944|   154k|{
 8945|   154k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   154k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   154k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   154k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   154k|    static_cast<    \
  |  |  929|   154k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   154k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
 8983|  34.1k|{
 8984|  34.1k|    T value;
 8985|  34.1k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  34.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  34.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  34.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  34.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.21k, False: 31.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.21k|    }                                                  \
  |  |  |  | 3667|  34.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  31.8k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.8k|    static_cast<    \
  |  |  929|  31.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  31.8k|    static_cast<    \
  |  |  929|  31.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  34.1k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEEeEENS0_14basic_scan_argIT_EERT0_:
 5164|  71.2k|{
 5165|  71.2k|    check_scan_arg_types<T>();
 5166|       |
 5167|  71.2k|    basic_scan_arg<Context> arg;
 5168|  71.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  71.2k|    arg.m_value = make_value<Context>(value);
 5170|  71.2k|    return arg;
 5171|  71.2k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  86.5k|    {
 2724|  86.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  86.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  86.5k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  86.5k|    {
 2705|  86.5k|        return decay_copy(t.begin());
 2706|  86.5k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  49.5M|{
 1949|  49.5M|    return SCN_FWD(t);
  ------------------
  |  |  930|  49.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  49.5M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.31M|    {
 2781|  2.31M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.31M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.31M|    {
 2763|  2.31M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.31M|    }
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|   168k|{
 8878|   168k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   168k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   168k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   168k|    static_cast<    \
  |  |  929|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   168k|    static_cast<    \
  |  |  929|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   168k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|   523k|{
 8665|   523k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   523k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|   523k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|   523k|{
 8602|   523k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   523k|    auto result = vscan_impl(buffer, format, args);
 8605|   523k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   523k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.9k, False: 483k]
  |  |  ------------------
  ------------------
 8606|  39.9k|        return unexpected(result.error());
 8607|  39.9k|    }
 8608|   483k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   483k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   523k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4728|  1.15M|{
 4729|  1.15M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  1.15M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  1.15M|                  "\n"
 4733|  1.15M|                  "Unsupported range type given as input to a scanning "
 4734|  1.15M|                  "function.\n"
 4735|  1.15M|                  "A range needs to have a character type (value type) "
 4736|  1.15M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  1.15M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  1.15M|                  "to be included.\n"
 4739|  1.15M|                  "See the scnlib documentation for more details.");
 4740|  1.15M|    static_assert(
 4741|  1.15M|        !std::is_same_v<T, custom_char_traits>,
 4742|  1.15M|        "\n"
 4743|  1.15M|        "Unsupported range type given as input to a scanning "
 4744|  1.15M|        "function.\n"
 4745|  1.15M|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  1.15M|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  1.15M|        "not supported.");
 4748|  1.15M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  1.15M|                  "\n"
 4750|  1.15M|                  "Unsupported range type given as input to a scanning "
 4751|  1.15M|                  "function.\n"
 4752|  1.15M|                  "file_marker_found cannot be used as an "
 4753|  1.15M|                  "source range type to scn::scan.\n"
 4754|  1.15M|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  1.15M|                  "and do not provide an explicit source range, "
 4756|  1.15M|                  "or use scn::scan with a FILE* directly.");
 4757|  1.15M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  1.15M|                  "\n"
 4759|  1.15M|                  "Unsupported range type given as input to a scanning "
 4760|  1.15M|                  "function.\n"
 4761|  1.15M|                  "In order to be scannable, a range needs to satisfy "
 4762|  1.15M|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  1.15M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  1.15M|                  "\n"
 4765|  1.15M|                  "Unsupported range type given as input to a scanning "
 4766|  1.15M|                  "function.\n"
 4767|  1.15M|                  "A range needs to model forward_range and have a valid "
 4768|  1.15M|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  1.15M|                  "Examples of scannable ranges are std::string, "
 4770|  1.15M|                  "std::string_view, "
 4771|  1.15M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  1.15M|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  1.15M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  1.15M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|  1.15M|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|  1.15M|    else {
 4714|  1.15M|        return make_forward_scan_buffer(r);
 4715|  1.15M|    }
 4716|  1.15M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4532|  1.15M|{
 4533|  1.15M|    return basic_scan_forward_buffer_impl(range);
 4534|  1.15M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|  1.15M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|  1.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|  1.15M|          m_cursor(ranges::begin(*m_range))
 4419|  1.15M|    {
 4420|  1.15M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4389|  1.15M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|  1.15M|    {
 4391|  1.15M|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4157|  1.15M|        : m_current_view(sv), m_is_contiguous(false)
 4158|  1.15M|    {
 4159|  1.15M|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4073|  1.15M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.22M|    {
 2724|  2.22M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.22M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.22M|    {
 2705|  2.22M|        return decay_copy(t.begin());
 2706|  2.22M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|  3.29M|    {
 3326|  3.29M|        return m_iterator;
 3327|  3.29M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4423|  14.4M|    {
 4424|  14.4M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 284k, False: 14.1M]
  ------------------
 4425|   284k|            return false;
 4426|   284k|        }
 4427|  14.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  14.1M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  14.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  14.1M|        }
 4430|  14.1M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 13.0M, False: 1.13M]
  ------------------
 4431|  13.0M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  13.0M|                                          this->m_current_view.begin(),
 4433|  13.0M|                                          this->m_current_view.end());
 4434|  13.0M|        }
 4435|  14.1M|        m_latest = *m_cursor;
 4436|  14.1M|        ++m_cursor;
 4437|  14.1M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  14.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  14.1M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  14.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  14.1M|        }
 4441|  14.1M|        return true;
 4442|  14.4M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  42.8M|    {
 2781|  42.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  42.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  42.8M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  42.8M|    {
 2763|  42.8M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  42.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  42.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  43.9M|    {
 3330|  43.9M|        return m_sentinel;
 3331|  43.9M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4078|  1.15M|    {
 4079|  1.15M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  1.15M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|  1.15M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  86.5k|        : base(unexpect, std::move(e.error())),
 1474|  86.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  86.5k|    {
 1476|  86.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  86.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  86.5k|          m_has_value(false)
  446|  86.5k|    {
  447|  86.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.15M|    {
 1177|  1.15M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|  1.06M|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  1.06M|                      ranges::iterator_t<SourceRange>>) {
 5935|  1.06M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  1.06M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.06M|    {
 2724|  1.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.06M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.06M|    {
 2705|  1.06M|        return decay_copy(t.begin());
 2706|  1.06M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5919|  1.06M|{
 5920|  1.06M|    return ranges::end(source);
 5921|  1.06M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.06M|    {
 2781|  1.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.06M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.06M|    {
 2763|  1.06M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.06M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  1.06M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.06M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.06M|    {
 1430|  1.06M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  1.06M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.06M|    {
  437|  1.06M|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|   337k|    {
 7986|   337k|        return m_str;
 7987|   337k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   337k|{
 8831|   337k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.6k, False: 311k]
  |  |  ------------------
  ------------------
 8832|  26.6k|        return unexpected(result.error());
 8833|  26.6k|    }
 8834|   311k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   311k|    static_cast<    \
  |  |  929|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   311k|    static_cast<    \
  |  |  929|   311k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   337k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  1.15M|    {
 1598|  1.15M|        return has_value();
 1599|  1.15M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.31M|    {
  485|  2.31M|        return m_has_value;
  486|  2.31M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  86.5k|    {
 1604|  86.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  86.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  86.5k|        return this->get_unexpected().error();
 1606|  86.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  86.5k|    {
  468|  86.5k|        return m_unexpected;
  469|  86.5k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  28.8k|        : base(unexpect, std::move(e.error())),
 1474|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  28.8k|    {
 1476|  28.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  28.8k|          m_has_value(false)
  446|  28.8k|    {
  447|  28.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   372k|    {
 1177|   372k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   966k|    {
 1653|   966k|        return value();
 1654|   966k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  1.06M|    {
 1627|  1.06M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.06M|        return this->get_value();
 1629|  1.06M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.06M|    {
  451|  1.06M|        return m_value;
  452|  1.06M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5838|   343k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   343k|    static_cast<    \
  |  |  929|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   343k|    static_cast<    \
  |  |  929|   343k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   343k|    {
 5840|   343k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5689|  1.06M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.06M|    static_cast<    \
  |  |  929|  1.06M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  1.06M|    {
 5691|  1.06M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   343k|        : base(std::in_place, std::forward<U>(val)),
 1428|   343k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   343k|    {
 1430|   343k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   343k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   343k|    {
  437|   343k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|  2.22M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.22M|    static_cast<    \
  |  |  929|  2.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.22M|    static_cast<    \
  |  |  929|  2.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  2.22M|    {
 3312|  2.22M|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   337k|        : m_str(r.str)
 7981|   337k|    {
 7982|   337k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   372k|    {
 1598|   372k|        return has_value();
 1599|   372k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   716k|    {
  485|   716k|        return m_has_value;
  486|   716k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   343k|    {
 1673|   343k|        return &value();
 1674|   343k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   343k|    {
 1627|   343k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   343k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   343k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   343k|        return this->get_value();
 1629|   343k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   343k|    {
  451|   343k|        return m_value;
  452|   343k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5707|  1.06M|    {
 5708|  1.06M|        return ranges::begin(m_range);
 5709|  1.06M|    }
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|   168k|{
 8945|   168k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   168k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   168k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   168k|    static_cast<    \
  |  |  929|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   168k|    static_cast<    \
  |  |  929|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   168k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|   523k|{
 8683|   523k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   523k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|   523k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|   523k|{
 8618|   523k|#if !SCN_DISABLE_LOCALE
 8619|   523k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   523k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   523k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   523k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   523k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   523k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.9k, False: 483k]
  |  |  ------------------
  ------------------
 8626|  39.9k|        return unexpected(result.error());
 8627|  39.9k|    }
 8628|   483k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   483k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   523k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  34.8k|{
 8984|  34.8k|    T value;
 8985|  34.8k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  34.8k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  34.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  34.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  34.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.21k, False: 32.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.21k|    }                                                  \
  |  |  |  | 3667|  34.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  32.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.5k|    static_cast<    \
  |  |  929|  32.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.5k|    static_cast<    \
  |  |  929|  32.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  34.8k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|   108k|{
 8696|   108k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|   108k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|   108k|{
 8642|   108k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|   108k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|   108k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   108k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.65k, False: 101k]
  |  |  ------------------
  ------------------
 8646|  6.65k|        return unexpected(result.error());
 8647|  6.65k|    }
 8648|   101k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|   108k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|   101k|    {
 1663|   101k|        return std::move(value());
 1664|   101k|    }
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|   176k|{
 8878|   176k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   176k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   176k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   176k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|   352k|    {
 7986|   352k|        return m_str;
 7987|   352k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   352k|{
 8831|   352k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   352k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.6k, False: 325k]
  |  |  ------------------
  ------------------
 8832|  26.6k|        return unexpected(result.error());
 8833|  26.6k|    }
 8834|   325k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   325k|    static_cast<    \
  |  |  929|   325k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   325k|    static_cast<    \
  |  |  929|   325k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   352k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  28.8k|        : base(unexpect, std::move(e.error())),
 1474|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  28.8k|    {
 1476|  28.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  28.8k|          m_has_value(false)
  446|  28.8k|    {
  447|  28.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   388k|    {
 1177|   388k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5838|   359k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   359k|    static_cast<    \
  |  |  929|   359k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   359k|    static_cast<    \
  |  |  929|   359k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   359k|    {
 5840|   359k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   359k|        : base(std::in_place, std::forward<U>(val)),
 1428|   359k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   359k|    {
 1430|   359k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   359k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   359k|    {
  437|   359k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   352k|        : m_str(r.str)
 7981|   352k|    {
 7982|   352k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   388k|    {
 1598|   388k|        return has_value();
 1599|   388k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   748k|    {
  485|   748k|        return m_has_value;
  486|   748k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   359k|    {
 1673|   359k|        return &value();
 1674|   359k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   359k|    {
 1627|   359k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   359k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   359k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   359k|        return this->get_value();
 1629|   359k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   359k|    {
  451|   359k|        return m_value;
  452|   359k|    }
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|   176k|{
 8945|   176k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   176k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   176k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   176k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  36.5k|{
 8984|  36.5k|    T value;
 8985|  36.5k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  36.5k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  36.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  36.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  36.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.21k, False: 34.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.21k|    }                                                  \
  |  |  |  | 3667|  36.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  34.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.3k|    static_cast<    \
  |  |  929|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.3k|    static_cast<    \
  |  |  929|  34.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  36.5k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 8877|   178k|{
 8878|   178k|    auto args = make_scan_args<scan_context, Args...>();
 8879|   178k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|   178k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   178k|    static_cast<    \
  |  |  929|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   178k|    static_cast<    \
  |  |  929|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|   178k|}
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 7985|   356k|    {
 7986|   356k|        return m_str;
 7987|   356k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   356k|{
 8831|   356k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.6k, False: 330k]
  |  |  ------------------
  ------------------
 8832|  26.6k|        return unexpected(result.error());
 8833|  26.6k|    }
 8834|   330k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   330k|    static_cast<    \
  |  |  929|   330k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   330k|    static_cast<    \
  |  |  929|   330k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   356k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  28.8k|        : base(unexpect, std::move(e.error())),
 1474|  28.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  28.8k|    {
 1476|  28.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  28.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  28.8k|          m_has_value(false)
  446|  28.8k|    {
  447|  28.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   393k|    {
 1177|   393k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5838|   365k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   365k|    static_cast<    \
  |  |  929|   365k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   365k|    {
 5840|   365k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   365k|        : base(std::in_place, std::forward<U>(val)),
 1428|   365k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   365k|    {
 1430|   365k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   365k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   365k|    {
  437|   365k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   356k|        : m_str(r.str)
 7981|   356k|    {
 7982|   356k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   393k|    {
 1598|   393k|        return has_value();
 1599|   393k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   758k|    {
  485|   758k|        return m_has_value;
  486|   758k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   365k|    {
 1673|   365k|        return &value();
 1674|   365k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   365k|    {
 1627|   365k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   365k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   365k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   365k|        return this->get_value();
 1629|   365k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   365k|    {
  451|   365k|        return m_value;
  452|   365k|    }
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 8944|   178k|{
 8945|   178k|    auto args = make_scan_args<scan_context, Args...>();
 8946|   178k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|   178k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   178k|    static_cast<    \
  |  |  929|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   178k|    static_cast<    \
  |  |  929|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   178k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
 8983|  37.1k|{
 8984|  37.1k|    T value;
 8985|  37.1k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  37.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  37.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  37.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  37.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  37.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.21k, False: 34.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.21k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.21k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.21k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.21k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.21k|    }                                                  \
  |  |  |  | 3667|  37.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  34.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.9k|    static_cast<    \
  |  |  929|  34.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.9k|    static_cast<    \
  |  |  929|  34.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  37.1k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   177k|    {
 2724|   177k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   177k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   177k|    {
 2705|   177k|        return decay_copy(t.begin());
 2706|   177k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  3.68M|{
 1949|  3.68M|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.68M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.11M|    {
 2781|  1.11M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.11M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.11M|    {
 2763|  1.11M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.11M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJfEEEDav:
 5405|   315k|{
 5406|   315k|    detail::check_scan_arg_types<Args...>();
 5407|   315k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   315k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEEC2Ev:
 5357|   315k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   315k|    {
 5359|   315k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   315k|    {
 5370|   315k|        return {detail::make_arg<
 5371|   315k|            kind, Context,
 5372|   315k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   315k|                                 typename Context::char_type>::value>(args)...};
 5374|   315k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE16EfvEEPvRT2_:
 5179|   315k|{
 5180|   315k|    return make_value<Context>(value).ref_value;
 5181|   315k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEfEEDaRT0_:
 5129|   344k|{
 5130|   344k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   344k|                                  needs_context_tag>) {
 5134|   344k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   344k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERf:
 4968|   344k|    {                                                                        \
 4969|   344k|        return val;                                                          \
 4970|   344k|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|   253k|{
 8602|   253k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   253k|    auto result = vscan_impl(buffer, format, args);
 8605|   253k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.8k, False: 174k]
  |  |  ------------------
  ------------------
 8606|  79.8k|        return unexpected(result.error());
 8607|  79.8k|    }
 8608|   174k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   253k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4728|   557k|{
 4729|   557k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   557k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   557k|                  "\n"
 4733|   557k|                  "Unsupported range type given as input to a scanning "
 4734|   557k|                  "function.\n"
 4735|   557k|                  "A range needs to have a character type (value type) "
 4736|   557k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   557k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   557k|                  "to be included.\n"
 4739|   557k|                  "See the scnlib documentation for more details.");
 4740|   557k|    static_assert(
 4741|   557k|        !std::is_same_v<T, custom_char_traits>,
 4742|   557k|        "\n"
 4743|   557k|        "Unsupported range type given as input to a scanning "
 4744|   557k|        "function.\n"
 4745|   557k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   557k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   557k|        "not supported.");
 4748|   557k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   557k|                  "\n"
 4750|   557k|                  "Unsupported range type given as input to a scanning "
 4751|   557k|                  "function.\n"
 4752|   557k|                  "file_marker_found cannot be used as an "
 4753|   557k|                  "source range type to scn::scan.\n"
 4754|   557k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   557k|                  "and do not provide an explicit source range, "
 4756|   557k|                  "or use scn::scan with a FILE* directly.");
 4757|   557k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   557k|                  "\n"
 4759|   557k|                  "Unsupported range type given as input to a scanning "
 4760|   557k|                  "function.\n"
 4761|   557k|                  "In order to be scannable, a range needs to satisfy "
 4762|   557k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   557k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   557k|                  "\n"
 4765|   557k|                  "Unsupported range type given as input to a scanning "
 4766|   557k|                  "function.\n"
 4767|   557k|                  "A range needs to model forward_range and have a valid "
 4768|   557k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   557k|                  "Examples of scannable ranges are std::string, "
 4770|   557k|                  "std::string_view, "
 4771|   557k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   557k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   557k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   557k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   557k|{
 4668|   557k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   557k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   557k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   557k|    {
 2855|   557k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   557k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   557k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   557k|    {
 2836|   557k|        return t.data();
 2837|   557k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3228|   557k|    {
 3229|   557k|        return detail::to_address(ranges::begin(derived()));
 3230|   557k|    }
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  1.80M|{
  326|  1.80M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.80M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  1.80M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  1.80M|{
  304|  1.80M|    return p;
  305|  1.80M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   941k|    {
 2724|   941k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   941k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   941k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   941k|    {
 2705|   941k|        return decay_copy(t.begin());
 2706|   941k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|  19.5M|    {
 3326|  19.5M|        return m_iterator;
 3327|  19.5M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|   557k|    {
 3185|   557k|        return static_cast<const D&>(*this);
 3186|   557k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   557k|    {
 2930|   557k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   557k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   557k|    {
 2896|   557k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   557k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   557k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  2.49M|    {
 3342|  2.49M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  2.49M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   173k|        : base(unexpect, std::move(e.error())),
 1474|   173k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   173k|    {
 1476|   173k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   173k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   173k|          m_has_value(false)
  446|   173k|    {
  447|   173k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   557k|    {
 1177|   557k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   384k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   384k|                      ranges::iterator_t<SourceRange>>) {
 5935|   384k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   384k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.06M|    {
 2724|  1.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.06M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.06M|    {
 2705|  1.06M|        return decay_copy(t.begin());
 2706|  1.06M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5919|   384k|{
 5920|   384k|    return ranges::end(source);
 5921|   384k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   384k|    {
 2781|   384k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   384k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   384k|    {
 2763|   384k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   384k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|  11.2M|    {
 3330|  11.2M|        return m_sentinel;
 3331|  11.2M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   384k|        : base(std::in_place, std::forward<U>(val)),
 1428|   384k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   384k|    {
 1430|   384k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   384k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   384k|    {
  437|   384k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|   157k|    {
 7986|   157k|        return m_str;
 7987|   157k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJfEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   315k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   315k|    {
 5436|   315k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE12arg_pointersEv:
 5388|   315k|    {
 5389|   315k|        return m_argptrs;
 5390|   315k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|  1.01M|        : m_desc(desc), m_builtin_values(data)
 5487|  1.01M|    {
 5488|  1.01M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   157k|{
 8831|   157k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.2k, False: 104k]
  |  |  ------------------
  ------------------
 8832|  53.2k|        return unexpected(result.error());
 8833|  53.2k|    }
 8834|   104k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   104k|    static_cast<    \
  |  |  929|   104k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   104k|    static_cast<    \
  |  |  929|   104k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   157k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|   557k|    {
 1598|   557k|        return has_value();
 1599|   557k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.11M|    {
  485|  1.11M|        return m_has_value;
  486|  1.11M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   173k|    {
 1604|   173k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   173k|        return this->get_unexpected().error();
 1606|   173k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   173k|    {
  468|   173k|        return m_unexpected;
  469|   173k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  57.6k|        : base(unexpect, std::move(e.error())),
 1474|  57.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  57.6k|    {
 1476|  57.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  57.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  57.6k|          m_has_value(false)
  446|  57.6k|    {
  447|  57.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   172k|    {
 1177|   172k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   348k|    {
 1653|   348k|        return value();
 1654|   348k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   384k|    {
 1627|   384k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   384k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   384k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   384k|        return this->get_value();
 1629|   384k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   384k|    {
  451|   384k|        return m_value;
  452|   384k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ES8_ONSt3__15tupleIJfEEE:
 5838|   114k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   114k|    {
 5840|   114k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|   384k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   384k|    static_cast<    \
  |  |  929|   384k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   384k|    {
 5691|   384k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   114k|        : base(std::in_place, std::forward<U>(val)),
 1428|   114k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   114k|    {
 1430|   114k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   114k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   114k|    {
  437|   114k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJfEE4argsEv:
 5383|   315k|    {
 5384|   315k|        return m_args;
 5385|   315k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  6.98M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  6.98M|    static_cast<    \
  |  |  929|  6.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  6.98M|    static_cast<    \
  |  |  929|  6.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  6.98M|    {
 3312|  6.98M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7706|  1.01M|{
 7707|  1.01M|    return s;
 7708|  1.01M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7678|  1.01M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   157k|        : m_str(r.str)
 7981|   157k|    {
 7982|   157k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   172k|    {
 1598|   172k|        return has_value();
 1599|   172k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   286k|    {
  485|   286k|        return m_has_value;
  486|   286k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1672|   114k|    {
 1673|   114k|        return &value();
 1674|   114k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   114k|    {
 1627|   114k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   114k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   114k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   114k|        return this->get_value();
 1629|   114k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   114k|    {
  451|   114k|        return m_value;
  452|   114k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5707|   384k|    {
 5708|   384k|        return ranges::begin(m_range);
 5709|   384k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|   253k|{
 8618|   253k|#if !SCN_DISABLE_LOCALE
 8619|   253k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   253k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   253k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   253k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   253k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.8k, False: 174k]
  |  |  ------------------
  ------------------
 8626|  79.8k|        return unexpected(result.error());
 8627|  79.8k|    }
 8628|   174k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   253k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEfEENS0_14basic_scan_argIT_EERT0_:
 5164|  28.9k|{
 5165|  28.9k|    check_scan_arg_types<T>();
 5166|       |
 5167|  28.9k|    basic_scan_arg<Context> arg;
 5168|  28.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  28.9k|    arg.m_value = make_value<Context>(value);
 5170|  28.9k|    return arg;
 5171|  28.9k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|  1.11M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  49.3k|{
 8642|  49.3k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  49.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  49.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  49.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.3k, False: 35.9k]
  |  |  ------------------
  ------------------
 8646|  13.3k|        return unexpected(result.error());
 8647|  13.3k|    }
 8648|  35.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  35.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  49.3k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  35.9k|    {
 1663|  35.9k|        return std::move(value());
 1664|  35.9k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJdEEEDav:
 5405|   347k|{
 5406|   347k|    detail::check_scan_arg_types<Args...>();
 5407|   347k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   347k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEEC2Ev:
 5357|   347k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   347k|    {
 5359|   347k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   347k|    {
 5370|   347k|        return {detail::make_arg<
 5371|   347k|            kind, Context,
 5372|   347k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   347k|                                 typename Context::char_type>::value>(args)...};
 5374|   347k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE17EdvEEPvRT2_:
 5179|   347k|{
 5180|   347k|    return make_value<Context>(value).ref_value;
 5181|   347k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEdEEDaRT0_:
 5129|   381k|{
 5130|   381k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   381k|                                  needs_context_tag>) {
 5134|   381k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   381k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   381k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERd:
 4968|   381k|    {                                                                        \
 4969|   381k|        return val;                                                          \
 4970|   381k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|   173k|    {
 7986|   173k|        return m_str;
 7987|   173k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJdEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   347k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   347k|    {
 5436|   347k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE12arg_pointersEv:
 5388|   347k|    {
 5389|   347k|        return m_argptrs;
 5390|   347k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   173k|{
 8831|   173k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.2k, False: 120k]
  |  |  ------------------
  ------------------
 8832|  53.2k|        return unexpected(result.error());
 8833|  53.2k|    }
 8834|   120k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   173k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  57.6k|        : base(unexpect, std::move(e.error())),
 1474|  57.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  57.6k|    {
 1476|  57.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  57.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  57.6k|          m_has_value(false)
  446|  57.6k|    {
  447|  57.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   190k|    {
 1177|   190k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ES8_ONSt3__15tupleIJdEEE:
 5838|   133k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   133k|    static_cast<    \
  |  |  929|   133k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   133k|    static_cast<    \
  |  |  929|   133k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   133k|    {
 5840|   133k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   133k|        : base(std::in_place, std::forward<U>(val)),
 1428|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   133k|    {
 1430|   133k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   133k|    {
  437|   133k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJdEE4argsEv:
 5383|   347k|    {
 5384|   347k|        return m_args;
 5385|   347k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   173k|        : m_str(r.str)
 7981|   173k|    {
 7982|   173k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   190k|    {
 1598|   190k|        return has_value();
 1599|   190k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   324k|    {
  485|   324k|        return m_has_value;
  486|   324k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1672|   133k|    {
 1673|   133k|        return &value();
 1674|   133k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   133k|    {
 1627|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   133k|        return this->get_value();
 1629|   133k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   133k|    {
  451|   133k|        return m_value;
  452|   133k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEdEENS0_14basic_scan_argIT_EERT0_:
 5164|  34.3k|{
 5165|  34.3k|    check_scan_arg_types<T>();
 5166|       |
 5167|  34.3k|    basic_scan_arg<Context> arg;
 5168|  34.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  34.3k|    arg.m_value = make_value<Context>(value);
 5170|  34.3k|    return arg;
 5171|  34.3k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJeEEEDav:
 5405|   352k|{
 5406|   352k|    detail::check_scan_arg_types<Args...>();
 5407|   352k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   352k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEEC2Ev:
 5357|   352k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   352k|    {
 5359|   352k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 5369|   352k|    {
 5370|   352k|        return {detail::make_arg<
 5371|   352k|            kind, Context,
 5372|   352k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   352k|                                 typename Context::char_type>::value>(args)...};
 5374|   352k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE18EevEEPvRT2_:
 5179|   352k|{
 5180|   352k|    return make_value<Context>(value).ref_value;
 5181|   352k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEEeEEDaRT0_:
 5129|   388k|{
 5130|   388k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   388k|                                  needs_context_tag>) {
 5134|   388k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   388k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERe:
 4968|   388k|    {                                                                        \
 4969|   388k|        return val;                                                          \
 4970|   388k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 7985|   176k|    {
 7986|   176k|        return m_str;
 7987|   176k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJeEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   352k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   352k|    {
 5436|   352k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE12arg_pointersEv:
 5388|   352k|    {
 5389|   352k|        return m_argptrs;
 5390|   352k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONS9_ISB_EEONSt3__15tupleIJSD_EEE:
 8830|   176k|{
 8831|   176k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.2k, False: 123k]
  |  |  ------------------
  ------------------
 8832|  53.2k|        return unexpected(result.error());
 8833|  53.2k|    }
 8834|   123k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   123k|    static_cast<    \
  |  |  929|   123k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   123k|    static_cast<    \
  |  |  929|   123k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   176k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1473|  57.6k|        : base(unexpect, std::move(e.error())),
 1474|  57.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  57.6k|    {
 1476|  57.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  444|  57.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  57.6k|          m_has_value(false)
  446|  57.6k|    {
  447|  57.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   194k|    {
 1177|   194k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ES8_ONSt3__15tupleIJeEEE:
 5838|   136k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   136k|    {
 5840|   136k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   136k|        : base(std::in_place, std::forward<U>(val)),
 1428|   136k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   136k|    {
 1430|   136k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSB_EvEENSt3__110in_place_tEDpOT_:
  435|   136k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   136k|    {
  437|   136k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJeEE4argsEv:
 5383|   352k|    {
 5384|   352k|        return m_args;
 5385|   352k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   176k|        : m_str(r.str)
 7981|   176k|    {
 7982|   176k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   194k|    {
 1598|   194k|        return has_value();
 1599|   194k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   330k|    {
  485|   330k|        return m_has_value;
  486|   330k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1672|   136k|    {
 1673|   136k|        return &value();
 1674|   136k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1626|   136k|    {
 1627|   136k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   136k|        return this->get_value();
 1629|   136k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   136k|    {
  451|   136k|        return m_value;
  452|   136k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEEeEENS0_14basic_scan_argIT_EERT0_:
 5164|  35.2k|{
 5165|  35.2k|    check_scan_arg_types<T>();
 5166|       |
 5167|  35.2k|    basic_scan_arg<Context> arg;
 5168|  35.2k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  35.2k|    arg.m_value = make_value<Context>(value);
 5170|  35.2k|    return arg;
 5171|  35.2k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   173k|    {
 2724|   173k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   173k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   173k|    {
 2705|   173k|        return decay_copy(t.begin());
 2706|   173k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  11.0M|{
 1949|  11.0M|    return SCN_FWD(t);
  ------------------
  |  |  930|  11.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  11.0M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.11M|    {
 2781|  1.11M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.11M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.11M|    {
 2763|  1.11M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.11M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|   253k|{
 8602|   253k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   253k|    auto result = vscan_impl(buffer, format, args);
 8605|   253k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.8k, False: 173k]
  |  |  ------------------
  ------------------
 8606|  79.8k|        return unexpected(result.error());
 8607|  79.8k|    }
 8608|   173k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   253k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4728|   556k|{
 4729|   556k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   556k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   556k|                  "\n"
 4733|   556k|                  "Unsupported range type given as input to a scanning "
 4734|   556k|                  "function.\n"
 4735|   556k|                  "A range needs to have a character type (value type) "
 4736|   556k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   556k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   556k|                  "to be included.\n"
 4739|   556k|                  "See the scnlib documentation for more details.");
 4740|   556k|    static_assert(
 4741|   556k|        !std::is_same_v<T, custom_char_traits>,
 4742|   556k|        "\n"
 4743|   556k|        "Unsupported range type given as input to a scanning "
 4744|   556k|        "function.\n"
 4745|   556k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   556k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   556k|        "not supported.");
 4748|   556k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   556k|                  "\n"
 4750|   556k|                  "Unsupported range type given as input to a scanning "
 4751|   556k|                  "function.\n"
 4752|   556k|                  "file_marker_found cannot be used as an "
 4753|   556k|                  "source range type to scn::scan.\n"
 4754|   556k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   556k|                  "and do not provide an explicit source range, "
 4756|   556k|                  "or use scn::scan with a FILE* directly.");
 4757|   556k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   556k|                  "\n"
 4759|   556k|                  "Unsupported range type given as input to a scanning "
 4760|   556k|                  "function.\n"
 4761|   556k|                  "In order to be scannable, a range needs to satisfy "
 4762|   556k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   556k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   556k|                  "\n"
 4765|   556k|                  "Unsupported range type given as input to a scanning "
 4766|   556k|                  "function.\n"
 4767|   556k|                  "A range needs to model forward_range and have a valid "
 4768|   556k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   556k|                  "Examples of scannable ranges are std::string, "
 4770|   556k|                  "std::string_view, "
 4771|   556k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   556k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   556k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   556k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   556k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   556k|    else {
 4714|   556k|        return make_forward_scan_buffer(r);
 4715|   556k|    }
 4716|   556k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4532|   556k|{
 4533|   556k|    return basic_scan_forward_buffer_impl(range);
 4534|   556k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   556k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   556k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   556k|          m_cursor(ranges::begin(*m_range))
 4419|   556k|    {
 4420|   556k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4389|   556k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   556k|    {
 4391|   556k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4157|   556k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   556k|    {
 4159|   556k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4073|   556k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   940k|    {
 2724|   940k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   940k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   940k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   940k|    {
 2705|   940k|        return decay_copy(t.begin());
 2706|   940k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|  1.32M|    {
 3326|  1.32M|        return m_iterator;
 3327|  1.32M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4423|  2.79M|    {
 4424|  2.79M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 178k, False: 2.61M]
  ------------------
 4425|   178k|            return false;
 4426|   178k|        }
 4427|  2.61M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  2.61M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  2.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  2.61M|        }
 4430|  2.61M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 2.05M, False: 555k]
  ------------------
 4431|  2.05M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  2.05M|                                          this->m_current_view.begin(),
 4433|  2.05M|                                          this->m_current_view.end());
 4434|  2.05M|        }
 4435|  2.61M|        m_latest = *m_cursor;
 4436|  2.61M|        ++m_cursor;
 4437|  2.61M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  2.61M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  2.61M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  2.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  2.61M|        }
 4441|  2.61M|        return true;
 4442|  2.79M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  8.02M|    {
 2781|  8.02M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  8.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  8.02M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  8.02M|    {
 2763|  8.02M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  8.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  8.02M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|  8.40M|    {
 3330|  8.40M|        return m_sentinel;
 3331|  8.40M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4078|   556k|    {
 4079|   556k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   556k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   556k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|   173k|        : base(unexpect, std::move(e.error())),
 1474|   173k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   173k|    {
 1476|   173k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|   173k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   173k|          m_has_value(false)
  446|   173k|    {
  447|   173k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   556k|    {
 1177|   556k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   383k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   383k|                      ranges::iterator_t<SourceRange>>) {
 5935|   383k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   383k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   383k|    {
 2724|   383k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   383k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   383k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   383k|    {
 2705|   383k|        return decay_copy(t.begin());
 2706|   383k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5919|   383k|{
 5920|   383k|    return ranges::end(source);
 5921|   383k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   383k|    {
 2781|   383k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   383k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   383k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   383k|    {
 2763|   383k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   383k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   383k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   383k|        : base(std::in_place, std::forward<U>(val)),
 1428|   383k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   383k|    {
 1430|   383k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   383k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   383k|    {
  437|   383k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|   157k|    {
 7986|   157k|        return m_str;
 7987|   157k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   157k|{
 8831|   157k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.2k, False: 104k]
  |  |  ------------------
  ------------------
 8832|  53.2k|        return unexpected(result.error());
 8833|  53.2k|    }
 8834|   104k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   104k|    static_cast<    \
  |  |  929|   104k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   104k|    static_cast<    \
  |  |  929|   104k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   157k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   556k|    {
 1598|   556k|        return has_value();
 1599|   556k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.11M|    {
  485|  1.11M|        return m_has_value;
  486|  1.11M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|   173k|    {
 1604|   173k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   173k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   173k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   173k|        return this->get_unexpected().error();
 1606|   173k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   173k|    {
  468|   173k|        return m_unexpected;
  469|   173k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  57.6k|        : base(unexpect, std::move(e.error())),
 1474|  57.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  57.6k|    {
 1476|  57.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  57.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  57.6k|          m_has_value(false)
  446|  57.6k|    {
  447|  57.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   172k|    {
 1177|   172k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   347k|    {
 1653|   347k|        return value();
 1654|   347k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   383k|    {
 1627|   383k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   383k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   383k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   383k|        return this->get_value();
 1629|   383k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   383k|    {
  451|   383k|        return m_value;
  452|   383k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ESE_ONS6_5tupleIJfEEE:
 5838|   114k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   114k|    static_cast<    \
  |  |  929|   114k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   114k|    {
 5840|   114k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5689|   383k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   383k|    static_cast<    \
  |  |  929|   383k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   383k|    {
 5691|   383k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   114k|        : base(std::in_place, std::forward<U>(val)),
 1428|   114k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   114k|    {
 1430|   114k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   114k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   114k|    {
  437|   114k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|   940k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   940k|    static_cast<    \
  |  |  929|   940k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   940k|    static_cast<    \
  |  |  929|   940k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   940k|    {
 3312|   940k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   157k|        : m_str(r.str)
 7981|   157k|    {
 7982|   157k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1597|   172k|    {
 1598|   172k|        return has_value();
 1599|   172k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   286k|    {
  485|   286k|        return m_has_value;
  486|   286k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1672|   114k|    {
 1673|   114k|        return &value();
 1674|   114k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   114k|    {
 1627|   114k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   114k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   114k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   114k|        return this->get_value();
 1629|   114k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   114k|    {
  451|   114k|        return m_value;
  452|   114k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5707|   383k|    {
 5708|   383k|        return ranges::begin(m_range);
 5709|   383k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|   253k|{
 8618|   253k|#if !SCN_DISABLE_LOCALE
 8619|   253k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   253k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   253k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   253k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   253k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 79.8k, False: 173k]
  |  |  ------------------
  ------------------
 8626|  79.8k|        return unexpected(result.error());
 8627|  79.8k|    }
 8628|   173k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   253k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  49.2k|{
 8642|  49.2k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  49.2k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  49.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.3k, False: 35.9k]
  |  |  ------------------
  ------------------
 8646|  13.3k|        return unexpected(result.error());
 8647|  13.3k|    }
 8648|  35.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  35.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  49.2k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  35.9k|    {
 1663|  35.9k|        return std::move(value());
 1664|  35.9k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|   173k|    {
 7986|   173k|        return m_str;
 7987|   173k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   173k|{
 8831|   173k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.2k, False: 120k]
  |  |  ------------------
  ------------------
 8832|  53.2k|        return unexpected(result.error());
 8833|  53.2k|    }
 8834|   120k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   173k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  57.6k|        : base(unexpect, std::move(e.error())),
 1474|  57.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  57.6k|    {
 1476|  57.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  57.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  57.6k|          m_has_value(false)
  446|  57.6k|    {
  447|  57.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   190k|    {
 1177|   190k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ESE_ONS6_5tupleIJdEEE:
 5838|   133k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   133k|    static_cast<    \
  |  |  929|   133k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   133k|    static_cast<    \
  |  |  929|   133k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   133k|    {
 5840|   133k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   133k|        : base(std::in_place, std::forward<U>(val)),
 1428|   133k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   133k|    {
 1430|   133k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   133k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   133k|    {
  437|   133k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   173k|        : m_str(r.str)
 7981|   173k|    {
 7982|   173k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1597|   190k|    {
 1598|   190k|        return has_value();
 1599|   190k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   324k|    {
  485|   324k|        return m_has_value;
  486|   324k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1672|   133k|    {
 1673|   133k|        return &value();
 1674|   133k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   133k|    {
 1627|   133k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   133k|        return this->get_value();
 1629|   133k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   133k|    {
  451|   133k|        return m_value;
  452|   133k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 7985|   176k|    {
 7986|   176k|        return m_str;
 7987|   176k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSF_ISH_EEONS6_5tupleIJSJ_EEE:
 8830|   176k|{
 8831|   176k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 53.2k, False: 123k]
  |  |  ------------------
  ------------------
 8832|  53.2k|        return unexpected(result.error());
 8833|  53.2k|    }
 8834|   123k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   123k|    static_cast<    \
  |  |  929|   123k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   123k|    static_cast<    \
  |  |  929|   123k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   176k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1473|  57.6k|        : base(unexpect, std::move(e.error())),
 1474|  57.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  57.6k|    {
 1476|  57.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  444|  57.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  57.6k|          m_has_value(false)
  446|  57.6k|    {
  447|  57.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   193k|    {
 1177|   193k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ESE_ONS6_5tupleIJeEEE:
 5838|   136k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   136k|    static_cast<    \
  |  |  929|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   136k|    {
 5840|   136k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISG_vEEOT_:
 1427|   136k|        : base(std::in_place, std::forward<U>(val)),
 1428|   136k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   136k|    {
 1430|   136k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSH_EvEENS8_10in_place_tEDpOT_:
  435|   136k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   136k|    {
  437|   136k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   176k|        : m_str(r.str)
 7981|   176k|    {
 7982|   176k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1597|   193k|    {
 1598|   193k|        return has_value();
 1599|   193k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   330k|    {
  485|   330k|        return m_has_value;
  486|   330k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1672|   136k|    {
 1673|   136k|        return &value();
 1674|   136k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1626|   136k|    {
 1627|   136k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   136k|        return this->get_value();
 1629|   136k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   136k|    {
  451|   136k|        return m_value;
  452|   136k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|  3.63M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|  3.63M|    {
 3564|  3.63M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  3.63M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|  3.63M|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  15.0M|    {
 3570|  15.0M|        return m_code == good;
 3571|  15.0M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   399k|    {
 3581|   399k|        return m_code;
 3582|   399k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  52.0M|    {
 3326|  52.0M|        return m_iterator;
 3327|  52.0M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  23.2M|    {
 3326|  23.2M|        return m_iterator;
 3327|  23.2M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|  2.35M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6313|  1.72M|    {
 6314|  1.72M|        m_specs.type = type;
 6315|  1.72M|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6386|  2.35M|    {
 6387|  2.35M|        return static_cast<bool>(m_error);
 6388|  2.35M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   399k|{
 3605|   399k|    return a.code() == b;
 3606|   399k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   399k|{
 3609|   399k|    return !(a == b);
 3610|   399k|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|  4.76M|{
 4043|       |    // Pattern_White_Space property
 4044|  4.76M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 4.55M, False: 202k]
  |  Branch (4044:27): [True: 875k, False: 3.68M]
  ------------------
 4045|  4.76M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 54.4k, False: 3.83M]
  ------------------
 4046|  4.76M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 47.1k, False: 3.78M]
  ------------------
 4047|  4.76M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 3.93k, False: 3.78M]
  ------------------
 4048|  4.76M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 19.7k, False: 3.76M]
  ------------------
 4049|  4.76M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 911k, False: 2.84M]
  ------------------
 4050|  4.76M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 154, False: 2.84M]
  ------------------
 4051|  4.76M|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7073|   633k|{
 7074|   633k|    switch (type) {
 7075|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 633k]
  ------------------
 7076|      0|            return arg_type_category::none;
 7077|       |
 7078|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 633k]
  ------------------
 7079|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 633k]
  ------------------
 7080|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7080:9): [True: 0, False: 633k]
  ------------------
 7081|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 633k]
  ------------------
 7082|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7082:9): [True: 0, False: 633k]
  ------------------
 7083|      0|            return arg_type_category::integer;
 7084|       |
 7085|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 633k]
  ------------------
 7086|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 633k]
  ------------------
 7087|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 633k]
  ------------------
 7088|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 633k]
  ------------------
 7089|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7089:9): [True: 0, False: 633k]
  ------------------
 7090|      0|            return arg_type_category::unsigned_integer;
 7091|       |
 7092|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 633k]
  ------------------
 7093|      0|            return arg_type_category::pointer;
 7094|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7094:9): [True: 0, False: 633k]
  ------------------
 7095|      0|            return arg_type_category::boolean;
 7096|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 633k]
  ------------------
 7097|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 633k]
  ------------------
 7098|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 633k]
  ------------------
 7099|      0|            return arg_type_category::character;
 7100|       |
 7101|   197k|        case arg_type::float_type:
  ------------------
  |  Branch (7101:9): [True: 197k, False: 436k]
  ------------------
 7102|   413k|        case arg_type::double_type:
  ------------------
  |  Branch (7102:9): [True: 215k, False: 418k]
  ------------------
 7103|   633k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7103:9): [True: 220k, False: 413k]
  ------------------
 7104|   633k|            return arg_type_category::floating;
 7105|       |
 7106|      0|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7106:9): [True: 0, False: 633k]
  ------------------
 7107|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7107:9): [True: 0, False: 633k]
  ------------------
 7108|      0|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7108:9): [True: 0, False: 633k]
  ------------------
 7109|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7109:9): [True: 0, False: 633k]
  ------------------
 7110|      0|            return arg_type_category::string;
 7111|       |
 7112|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7112:9): [True: 0, False: 633k]
  ------------------
 7113|      0|            return arg_type_category::custom;
 7114|       |
 7115|      0|            SCN_CLANG_PUSH
 7116|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7117|      0|        default:
  ------------------
  |  Branch (7117:9): [True: 0, False: 633k]
  ------------------
 7118|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|   633k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7120|   633k|            SCN_CLANG_POP
 7121|   633k|    }
 7122|       |
 7123|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7124|   633k|}
_ZN3scn2v36ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  2.75M|    {
 2896|  2.75M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  2.75M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 2929|  2.75M|    {
 2930|  2.75M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  2.75M|    }
_ZN3scn2v36ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 2952|  2.75M|    {
 2953|  2.75M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 2954|  2.75M|    }
_ZNK3scn2v36ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 2961|  2.75M|    {
 2962|  2.75M|        return fn::impl(std::forward<T>(t));
 2963|  2.75M|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA20_KcEEEDaDpOT_:
 3649|    994|{
 3650|    994|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|    994|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|    994|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  2.47k|{
 3650|  2.47k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  2.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  2.47k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA38_KcEEEDaDpOT_:
 3649|  28.7k|{
 3650|  28.7k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  28.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  28.7k|}
_ZN3scn2v36detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7203|  2.35M|{
 7204|  2.35M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (7204:9): [True: 1.72M, False: 633k]
  ------------------
 7205|  2.35M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (7205:10): [True: 0, False: 1.72M]
  ------------------
 7206|  1.72M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (7206:10): [True: 0, False: 1.72M]
  ------------------
 7207|      0|        SCN_UNLIKELY_ATTR
 7208|      0|        return handler.on_error("Invalid type specifier for float type");
 7209|      0|    }
 7210|  2.35M|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4202|   328M|    {
 4203|   328M|        assert(m_begin);
 4204|   328M|        return m_end == nullptr;
 4205|   328M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   871k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   871k|    else {
 3716|   871k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   871k|    }
 3718|   871k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4219|  4.34M|    {
 4220|  4.34M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 4.34M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  4.34M|        return parent()->get_segment_starting_at(position());
 4226|  4.34M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4213|   182M|    {
 4214|   182M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   182M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   182M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|   182M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|   182M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4108|  4.34M|    {
 4109|  4.34M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  4.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.88M, False: 2.46M]
  |  |  ------------------
  ------------------
 4110|  4.34M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|  1.88M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|  1.88M|        }
 4113|  2.46M|        const auto start = pos - m_putback_buffer.size();
 4114|  2.46M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  2.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|  2.46M|        return m_current_view.substr(start);
 4116|  2.46M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4208|  3.03M|    {
 4209|  3.03M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  3.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|  3.03M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|  3.03M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4197|  7.97M|    {
 4198|  7.97M|        return m_position;
 4199|  7.97M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4130|  3.46M|    {
 4131|  3.46M|        return m_is_contiguous;
 4132|  3.46M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4202|  74.6M|    {
 4203|  74.6M|        assert(m_begin);
 4204|  74.6M|        return m_end == nullptr;
 4205|  74.6M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   373k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   373k|    else {
 3716|   373k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   373k|    }
 3718|   373k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4219|  1.32M|    {
 4220|  1.32M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 1.32M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  1.32M|        return parent()->get_segment_starting_at(position());
 4226|  1.32M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4213|  39.9M|    {
 4214|  39.9M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  39.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  39.9M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  39.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4108|  1.32M|    {
 4109|  1.32M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 758k, False: 571k]
  |  |  ------------------
  ------------------
 4110|  1.32M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|   758k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|   758k|        }
 4113|   571k|        const auto start = pos - m_putback_buffer.size();
 4114|   571k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   571k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   571k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   571k|        return m_current_view.substr(start);
 4116|   571k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4208|  1.45M|    {
 4209|  1.45M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4210|  1.45M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4211|  1.45M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4197|  2.92M|    {
 4198|  2.92M|        return m_position;
 4199|  2.92M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4130|  1.67M|    {
 4131|  1.67M|        return m_is_contiguous;
 4132|  1.67M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  4.51M|    {
 3180|  4.51M|        return static_cast<D&>(*this);
 3181|  4.51M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  4.51M|    {
 3221|  4.51M|        return detail::to_address(ranges::begin(derived()));
 3222|  4.51M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|   475k|    {
 3180|   475k|        return static_cast<D&>(*this);
 3181|   475k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|   475k|    {
 3221|   475k|        return detail::to_address(ranges::begin(derived()));
 3222|   475k|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8179|   829k|    {
 8180|   829k|        return ranges::subrange{begin(), end()};
 8181|   829k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8163|  2.42M|    {
 8164|  2.42M|        return m_current;
 8165|  2.42M|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8171|   829k|    {
 8172|   829k|        return ranges::default_sentinel;
 8173|   829k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  12.6M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  12.6M|    static_cast<    \
  |  |  929|  12.6M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  12.6M|    static_cast<    \
  |  |  929|  12.6M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  12.6M|    {
 3312|  12.6M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8001|  5.01M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.15M|    {
 1837|  1.15M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.15M|                                            std::forward<F>(f));
 1839|  1.15M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.15M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.15M|    else {
 1333|  1.15M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.15M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.15M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.13M, False: 19.0k]
  |  |  ------------------
  ------------------
 1335|  1.15M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.15M|                   : result(unexpect,
 1337|  19.0k|                            trivial_invoke(std::forward<F>(f),
 1338|  19.0k|                                           std::forward<Exp>(exp).error()));
 1339|  1.15M|    }
 1340|  1.15M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  12.2M|    {
  485|  12.2M|        return m_has_value;
  486|  12.2M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  4.13M|    {
 1663|  4.13M|        return std::move(value());
 1664|  4.13M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  4.74M|    {
 1627|  4.74M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.74M|        return this->get_value();
 1629|  4.74M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  4.74M|    {
  451|  4.74M|        return m_value;
  452|  4.74M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  5.10M|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.10M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.10M|    {
 1430|  5.10M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  5.10M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.10M|    {
  437|  5.10M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.52M|    {
 1177|  6.52M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  41.9k|{
 1211|  41.9k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  41.9k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  54.3k|    {
 1614|  54.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  54.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  54.3k|        return std::move(this->get_unexpected().error());
 1616|  54.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  73.4k|    {
  468|  73.4k|        return m_unexpected;
  469|  73.4k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|   423k|    {
  361|   423k|        return m_unexpected;
  362|   423k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  1.14M|        : base(unexpect, std::forward<Args>(args)...),
 1484|  1.14M|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  1.14M|    {
 1486|  1.14M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.36M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.36M|          m_has_value(false)
  446|  1.36M|    {
  447|  1.36M|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8179|   409k|    {
 8180|   409k|        return ranges::subrange{begin(), end()};
 8181|   409k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8163|  1.09M|    {
 8164|  1.09M|        return m_current;
 8165|  1.09M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8171|   409k|    {
 8172|   409k|        return ranges::default_sentinel;
 8173|   409k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  5.65M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.65M|    static_cast<    \
  |  |  929|  5.65M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.65M|    static_cast<    \
  |  |  929|  5.65M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  5.65M|    {
 3312|  5.65M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   556k|    {
 1837|   556k|        return detail::transform_error_impl(std::move(*this),
 1838|   556k|                                            std::forward<F>(f));
 1839|   556k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   556k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   556k|    else {
 1333|   556k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   556k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   556k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 553k, False: 3.60k]
  |  |  ------------------
  ------------------
 1335|   556k|                   ? result(*std::forward<Exp>(exp))
 1336|   556k|                   : result(unexpect,
 1337|  3.60k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.60k|                                           std::forward<Exp>(exp).error()));
 1339|   556k|    }
 1340|   556k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  5.33M|    {
  485|  5.33M|        return m_has_value;
  486|  5.33M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  1.95M|    {
 1663|  1.95M|        return std::move(value());
 1664|  1.95M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  1.97M|    {
 1627|  1.97M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.97M|        return this->get_value();
 1629|  1.97M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.97M|    {
  451|  1.97M|        return m_value;
  452|  1.97M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  1.98M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.98M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.98M|    {
 1430|  1.98M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.98M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.98M|    {
  437|  1.98M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.17M|    {
 1177|  3.17M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  57.4k|    {
 1614|  57.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  57.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  57.4k|        return std::move(this->get_unexpected().error());
 1616|  57.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  59.4k|    {
  468|  59.4k|        return m_unexpected;
  469|  59.4k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|   720k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   720k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   720k|    {
 1486|   720k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.19M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.19M|          m_has_value(false)
  446|  1.19M|    {
  447|  1.19M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|   152k|        : m_unexpected(std::forward<Err>(e))
  346|   152k|    {
  347|   152k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   152k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   152k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   191k|        : base(unexpect, std::move(e.error())),
 1474|   191k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   191k|    {
 1476|   191k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.16M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.16M|          m_has_value(false)
  446|  1.16M|    {
  447|  1.16M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.67M|    {
 1177|  5.67M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  4.45M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.45M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.45M|    {
 1430|  4.45M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  4.45M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.45M|    {
  437|  4.45M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  6.65M|    {
 1598|  6.65M|        return has_value();
 1599|  6.65M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  10.4M|    {
  485|  10.4M|        return m_has_value;
  486|  10.4M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|   229k|    {
 1604|   229k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   229k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   229k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   229k|        return this->get_unexpected().error();
 1606|   229k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   229k|    {
  468|   229k|        return m_unexpected;
  469|   229k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  2.86M|    {
 1663|  2.86M|        return std::move(value());
 1664|  2.86M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  3.55M|    {
 1627|  3.55M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.55M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.55M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.55M|        return this->get_value();
 1629|  3.55M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.55M|    {
  451|  3.55M|        return m_value;
  452|  3.55M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   384k|        : base(unexpect, std::move(e.error())),
 1474|   384k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   384k|    {
 1476|   384k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  1.01M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.01M|          m_has_value(false)
  446|  1.01M|    {
  447|  1.01M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.18M|    {
 1177|  3.18M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  2.16M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.16M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.16M|    {
 1430|  2.16M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.16M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.16M|    {
  437|  2.16M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  3.73M|    {
 1598|  3.73M|        return has_value();
 1599|  3.73M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  5.88M|    {
  485|  5.88M|        return m_has_value;
  486|  5.88M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   463k|    {
 1604|   463k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   463k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   463k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   463k|        return this->get_unexpected().error();
 1606|   463k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   463k|    {
  468|   463k|        return m_unexpected;
  469|   463k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  1.41M|    {
 1663|  1.41M|        return std::move(value());
 1664|  1.41M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  1.68M|    {
 1627|  1.68M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.68M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.68M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.68M|        return this->get_value();
 1629|  1.68M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.68M|    {
  451|  1.68M|        return m_value;
  452|  1.68M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.00M|    {
 1837|  1.00M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.00M|                                            std::forward<F>(f));
 1839|  1.00M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.00M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.00M|    else {
 1333|  1.00M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.00M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.00M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 991k, False: 15.7k]
  |  |  ------------------
  ------------------
 1335|  1.00M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.00M|                   : result(unexpect,
 1337|  15.7k|                            trivial_invoke(std::forward<F>(f),
 1338|  15.7k|                                           std::forward<Exp>(exp).error()));
 1339|  1.00M|    }
 1340|  1.00M|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.82M|    {
  485|  3.82M|        return m_has_value;
  486|  3.82M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   991k|    {
 1663|   991k|        return std::move(value());
 1664|   991k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.31M|    {
 1627|  1.31M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.31M|        return this->get_value();
 1629|  1.31M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.31M|    {
  451|  1.31M|        return m_value;
  452|  1.31M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  15.7k|    {
 1614|  15.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  15.7k|        return std::move(this->get_unexpected().error());
 1616|  15.7k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  20.5k|    {
  468|  20.5k|        return m_unexpected;
  469|  20.5k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|   972k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   972k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   972k|    {
 1486|   972k|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  10.3M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   215k|        : base(unexpect, std::move(e.error())),
 1474|   215k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   215k|    {
 1476|   215k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  10.1M|    {
 4289|  10.1M|        return x.is_at_end();
 4290|  10.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4332|  24.8M|    {
 4333|  24.8M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 24.8M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  24.8M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 24.8M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  24.8M|        return !read_at_position();
 4340|  24.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4312|   107M|    {
 4313|   107M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   107M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   107M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|   107M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 107M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|   107M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   107M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 92.7M, False: 14.4M]
  |  |  ------------------
  ------------------
 4320|  92.7M|            return true;
 4321|  92.7M|        }
 4322|       |
 4323|  28.6M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 14.4M, False: 14.1M]
  ------------------
 4324|  14.4M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 284k, False: 14.1M]
  ------------------
 4325|   284k|                return false;
 4326|   284k|            }
 4327|  14.4M|        }
 4328|  14.1M|        return true;
 4329|  14.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4088|   138M|    {
 4089|   138M|        return m_putback_buffer.size() + m_current_view.size();
 4090|   138M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4247|  27.8M|    {
 4248|  27.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  27.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  27.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 27.8M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  27.8M|        auto res = read_at_position();
 4257|  27.8M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  27.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  27.8M|        return parent()->get_character_at(m_position);
 4259|  27.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4119|  27.8M|    {
 4120|  27.8M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  27.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.5M, False: 10.2M]
  |  |  ------------------
  ------------------
 4121|  27.8M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  17.5M|            return m_putback_buffer[pos];
 4123|  17.5M|        }
 4124|  10.2M|        const auto start = pos - m_putback_buffer.size();
 4125|  10.2M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  10.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  10.2M|        return m_current_view[start];
 4127|  10.2M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  7.37M|        : base(std::in_place, std::forward<U>(val)),
 1428|  7.37M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  7.37M|    {
 1430|  7.37M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  7.37M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  7.37M|    {
  437|  7.37M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.44M|    {
 1177|  7.44M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  345|   143k|        : m_unexpected(std::forward<Err>(e))
  346|   143k|    {
  347|   143k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   143k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   143k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  73.4k|        : base(unexpect, std::move(e.error())),
 1474|  73.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  73.4k|    {
 1476|  73.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  73.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  73.4k|          m_has_value(false)
  446|  73.4k|    {
  447|  73.4k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|   211k|        : m_unexpected(std::forward<Args>(args)...)
  355|   211k|    {
  356|   211k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   211k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   211k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  3.25M|    {
 1598|  3.25M|        return has_value();
 1599|  3.25M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   608k|    {
 1653|   608k|        return value();
 1654|   608k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4282|  26.2M|    {
 4283|  26.2M|        return !(lhs == rhs);
 4284|  26.2M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4277|  29.2M|    {
 4278|  29.2M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 29.2M, False: 0]
  |  Branch (4278:46): [True: 3.81M, False: 25.3M]
  ------------------
 4279|  29.2M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4233|  54.5M|    {
 4234|  54.5M|        ++m_position;
 4235|  54.5M|        (void)read_at_position();
 4236|  54.5M|        return *this;
 4237|  54.5M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  68.3k|        : m_unexpected(std::forward<Err>(e))
  346|  68.3k|    {
  347|  68.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  68.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  68.3k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  14.4k|        : base(unexpect, std::move(e.error())),
 1474|  14.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.4k|    {
 1476|  14.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  14.4k|          m_has_value(false)
  446|  14.4k|    {
  447|  14.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.58M|    {
 1177|  1.58M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.56M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.56M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.56M|    {
 1430|  1.56M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|  1.56M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.56M|    {
  437|  1.56M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  1.58M|    {
 1598|  1.58M|        return has_value();
 1599|  1.58M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.16M|    {
  485|  3.16M|        return m_has_value;
  486|  3.16M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  14.4k|    {
 1604|  14.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  14.4k|        return this->get_unexpected().error();
 1606|  14.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  14.4k|    {
  468|  14.4k|        return m_unexpected;
  469|  14.4k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  1.56M|    {
 1663|  1.56M|        return std::move(value());
 1664|  1.56M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.56M|    {
 1627|  1.56M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.56M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.56M|        return this->get_value();
 1629|  1.56M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.56M|    {
  451|  1.56M|        return m_value;
  452|  1.56M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  35.5M|    {
 3330|  35.5M|        return m_sentinel;
 3331|  35.5M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  345|  61.7k|        : m_unexpected(std::forward<Err>(e))
  346|  61.7k|    {
  347|  61.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  61.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  61.7k|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_errorEE5errorEv:
  360|  13.0M|    {
  361|  13.0M|        return m_unexpected;
  362|  13.0M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  3.56M|        : m_unexpected(std::forward<Args>(args)...)
  355|  3.56M|    {
  356|  3.56M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.56M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  3.56M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  345|  15.8M|        : m_unexpected(std::forward<Err>(e))
  346|  15.8M|    {
  347|  15.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  15.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  15.8M|    }
_ZNR3scn2v310unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  360|  15.8M|    {
  361|  15.8M|        return m_unexpected;
  362|  15.8M|    }
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  354|  15.8M|        : m_unexpected(std::forward<Args>(args)...)
  355|  15.8M|    {
  356|  15.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  15.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  15.8M|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|   143k|{
 1211|   143k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|   143k|}
_ZN3scn2v310unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  345|  3.35M|        : m_unexpected(std::forward<Err>(e))
  346|  3.35M|    {
  347|  3.35M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  3.35M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  3.35M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  19.0k|    {
 1604|  19.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  19.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  19.0k|        return this->get_unexpected().error();
 1606|  19.0k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  1.17M|        : base(unexpect, std::move(e.error())),
 1474|  1.17M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.17M|    {
 1476|  1.17M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  1.21M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.21M|          m_has_value(false)
  446|  1.21M|    {
  447|  1.21M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  12.6M|    {
 1177|  12.6M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|   613k|        : base(std::in_place, std::forward<U>(val)),
 1428|   613k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   613k|    {
 1430|   613k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|   613k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   613k|    {
  437|   613k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  6.42M|        : base(unexpect, std::move(e.error())),
 1474|  6.42M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  6.42M|    {
 1476|  6.42M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  6.42M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  6.42M|          m_has_value(false)
  446|  6.42M|    {
  447|  6.42M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  13.8M|    {
 1598|  13.8M|        return has_value();
 1599|  13.8M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  24.4M|    {
  485|  24.4M|        return m_has_value;
  486|  24.4M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  3.23M|    {
 1604|  3.23M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.23M|        return this->get_unexpected().error();
 1606|  3.23M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  3.23M|    {
  468|  3.23M|        return m_unexpected;
  469|  3.23M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|  1.24M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.24M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.24M|    {
 1430|  1.24M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  1.24M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.24M|    {
  437|  1.24M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.24M|    {
 1177|  1.24M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|    290|        : base(unexpect, std::move(e.error())),
 1474|    290|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    290|    {
 1476|    290|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|    290|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    290|          m_has_value(false)
  446|    290|    {
  447|    290|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  3.24M|    {
 1653|  3.24M|        return value();
 1654|  3.24M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  6.24M|    {
 1627|  6.24M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  6.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  6.24M|        return this->get_value();
 1629|  6.24M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  6.24M|    {
  451|  6.24M|        return m_value;
  452|  6.24M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|   113k|    {
 1598|   113k|        return has_value();
 1599|   113k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  2.49M|    {
  485|  2.49M|        return m_has_value;
  486|  2.49M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.13M|    {
 1663|  1.13M|        return std::move(value());
 1664|  1.13M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.24M|    {
 1627|  1.24M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.24M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.24M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.24M|        return this->get_value();
 1629|  1.24M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|  1.24M|    {
  451|  1.24M|        return m_value;
  452|  1.24M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  3.03M|    {
 1837|  3.03M|        return detail::transform_error_impl(std::move(*this),
 1838|  3.03M|                                            std::forward<F>(f));
 1839|  3.03M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  3.03M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  3.03M|    else {
 1333|  3.03M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  3.03M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  3.03M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.00M, False: 35.3k]
  |  |  ------------------
  ------------------
 1335|  3.03M|                   ? result(*std::forward<Exp>(exp))
 1336|  3.03M|                   : result(unexpect,
 1337|  35.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  35.3k|                                           std::forward<Exp>(exp).error()));
 1339|  3.03M|    }
 1340|  3.03M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  4.42M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.42M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.42M|    {
 1430|  4.42M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  4.42M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.42M|    {
  437|  4.42M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  35.3k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  35.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  35.3k|    {
 1486|  35.3k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  3.00M|    {
 1663|  3.00M|        return std::move(value());
 1664|  3.00M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|  1.31M|    {
 3326|  1.31M|        return m_iterator;
 3327|  1.31M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|  1.31M|    {
 3330|  1.31M|        return m_sentinel;
 3331|  1.31M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  7.64M|    {
 1598|  7.64M|        return has_value();
 1599|  7.64M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  12.0M|    {
  485|  12.0M|        return m_has_value;
  486|  12.0M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   284k|    {
 1604|   284k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   284k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   284k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   284k|        return this->get_unexpected().error();
 1606|   284k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   284k|    {
  468|   284k|        return m_unexpected;
  469|   284k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  3.27M|    {
 1663|  3.27M|        return std::move(value());
 1664|  3.27M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  4.08M|    {
 1627|  4.08M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.08M|        return this->get_value();
 1629|  4.08M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.08M|    {
  451|  4.08M|        return m_value;
  452|  4.08M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|  1.01M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.01M|    static_cast<    \
  |  |  929|  1.01M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.01M|    static_cast<    \
  |  |  929|  1.01M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.01M|    {
 3312|  1.01M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  14.7M|    {
 4300|  14.7M|        return !x.is_at_end();
 4301|  14.7M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  20.5k|        : base(unexpect, std::move(e.error())),
 1474|  20.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  20.5k|    {
 1476|  20.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  20.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  20.5k|          m_has_value(false)
  446|  20.5k|    {
  447|  20.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.48M|    {
 1177|  2.48M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  2.46M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.46M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.46M|    {
 1430|  2.46M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.46M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.46M|    {
  437|  2.46M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1597|  1.48M|    {
 1598|  1.48M|        return has_value();
 1599|  1.48M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   324k|    {
 1653|   324k|        return value();
 1654|   324k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  11.3k|        : base(unexpect, std::move(e.error())),
 1474|  11.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.3k|    {
 1476|  11.3k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  11.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  11.3k|          m_has_value(false)
  446|  11.3k|    {
  447|  11.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.34M|    {
 1177|  1.34M|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  1.32M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.32M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.32M|    {
 1430|  1.32M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  1.32M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.32M|    {
  437|  1.32M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|  1.34M|    {
 1598|  1.34M|        return has_value();
 1599|  1.34M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.68M|    {
  485|  2.68M|        return m_has_value;
  486|  2.68M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  11.3k|    {
 1604|  11.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  11.3k|        return this->get_unexpected().error();
 1606|  11.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  11.3k|    {
  468|  11.3k|        return m_unexpected;
  469|  11.3k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.32M|    {
 1663|  1.32M|        return std::move(value());
 1664|  1.32M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.32M|    {
 1627|  1.32M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.32M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.32M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.32M|        return this->get_value();
 1629|  1.32M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.32M|    {
  451|  1.32M|        return m_value;
  452|  1.32M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1603|  4.75k|    {
 1604|  4.75k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.75k|        return this->get_unexpected().error();
 1606|  4.75k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  1.02M|        : base(unexpect, std::move(e.error())),
 1474|  1.02M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.02M|    {
 1476|  1.02M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  1.02M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.02M|          m_has_value(false)
  446|  1.02M|    {
  447|  1.02M|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.66M|    {
 1177|  5.66M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|   329k|        : base(std::in_place, std::forward<U>(val)),
 1428|   329k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   329k|    {
 1430|   329k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|   329k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   329k|    {
  437|   329k|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  3.88M|        : base(unexpect, std::move(e.error())),
 1474|  3.88M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.88M|    {
 1476|  3.88M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  3.88M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.88M|          m_has_value(false)
  446|  3.88M|    {
  447|  3.88M|    }
_ZNK3scn2v38expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1597|  6.65M|    {
 1598|  6.65M|        return has_value();
 1599|  6.65M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  11.3M|    {
  485|  11.3M|        return m_has_value;
  486|  11.3M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1603|  2.70M|    {
 1604|  2.70M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.70M|        return this->get_unexpected().error();
 1606|  2.70M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  2.70M|    {
  468|  2.70M|        return m_unexpected;
  469|  2.70M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|  1.01M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.01M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.01M|    {
 1430|  1.01M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|  1.01M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.01M|    {
  437|  1.01M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.01M|    {
 1177|  1.01M|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|     96|        : base(unexpect, std::move(e.error())),
 1474|     96|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     96|    {
 1476|     96|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|     96|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     96|          m_has_value(false)
  446|     96|    {
  447|     96|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  1.05M|    {
 1653|  1.05M|        return value();
 1654|  1.05M|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.05M|    {
 1627|  1.05M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.05M|        return this->get_value();
 1629|  1.05M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.05M|    {
  451|  1.05M|        return m_value;
  452|  1.05M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  27.2k|    {
 1598|  27.2k|        return has_value();
 1599|  27.2k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  2.03M|    {
  485|  2.03M|        return m_has_value;
  486|  2.03M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   991k|    {
 1663|   991k|        return std::move(value());
 1664|   991k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  1.01M|    {
 1627|  1.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.01M|        return this->get_value();
 1629|  1.01M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|  1.01M|    {
  451|  1.01M|        return m_value;
  452|  1.01M|    }
_ZN3scn2v38expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|   427k|        : base(std::in_place, std::forward<U>(val)),
 1428|   427k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   427k|    {
 1430|   427k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   427k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   427k|    {
  437|   427k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.90M|    {
 2855|  1.90M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.90M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.90M|    {
 2836|  1.90M|        return t.data();
 2837|  1.90M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   787k|        : base(unexpect, std::move(e.error())),
 1474|   787k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   787k|    {
 1476|   787k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   787k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   787k|          m_has_value(false)
  446|   787k|    {
  447|   787k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.05M|    {
 1177|  9.05M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  8.16M|        : base(std::in_place, std::forward<U>(val)),
 1428|  8.16M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  8.16M|    {
 1430|  8.16M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  8.16M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  8.16M|    {
  437|  8.16M|    }
_ZNO3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1662|  5.51M|    {
 1663|  5.51M|        return std::move(value());
 1664|  5.51M|    }
_ZN3scn2v36detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1210|  3.42M|{
 1211|  3.42M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  3.42M|}
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|  1.13M|    {
 1837|  1.13M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.13M|                                            std::forward<F>(f));
 1839|  1.13M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|  1.13M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.13M|    else {
 1333|  1.13M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.13M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.13M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.13M, False: 0]
  |  |  ------------------
  ------------------
 1335|  1.13M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.13M|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|  1.13M|    }
 1340|  1.13M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|  1.13M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.13M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.13M|    {
 1430|  1.13M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|  1.13M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.13M|    {
  437|  1.13M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.13M|    {
 1177|  1.13M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|  1.13M|    {
 1598|  1.13M|        return has_value();
 1599|  1.13M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.27M|    {
  485|  2.27M|        return m_has_value;
  486|  2.27M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|  1.13M|    {
 1663|  1.13M|        return std::move(value());
 1664|  1.13M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|  1.13M|    {
 1627|  1.13M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.13M|        return this->get_value();
 1629|  1.13M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.13M|    {
  451|  1.13M|        return m_value;
  452|  1.13M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|  1.12M|    {
 1823|  1.12M|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|  1.12M|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|  1.12M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.12M|    else {
 1333|  1.12M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.12M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.12M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.12M]
  |  |  ------------------
  ------------------
 1335|  1.12M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.12M|                   : result(unexpect,
 1337|  1.12M|                            trivial_invoke(std::forward<F>(f),
 1338|  1.12M|                                           std::forward<Exp>(exp).error()));
 1339|  1.12M|    }
 1340|  1.12M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1427|  59.3k|        : base(std::in_place, std::forward<U>(val)),
 1428|  59.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  59.3k|    {
 1430|  59.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  59.3k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  59.3k|    {
  437|  59.3k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   809k|    {
 1653|   809k|        return value();
 1654|   809k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|   270k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|   113k|    {
 1673|   113k|        return &value();
 1674|   113k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   806k|    {
 2724|   806k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   806k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   806k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   806k|    {
 2705|   806k|        return decay_copy(t.begin());
 2706|   806k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   806k|{
 1949|   806k|    return SCN_FWD(t);
  ------------------
  |  |  930|   806k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   806k|}
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|   494k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   991k|    {
 1837|   991k|        return detail::transform_error_impl(std::move(*this),
 1838|   991k|                                            std::forward<F>(f));
 1839|   991k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|   991k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   991k|    else {
 1333|   991k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   991k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   991k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 991k, False: 0]
  |  |  ------------------
  ------------------
 1335|   991k|                   ? result(*std::forward<Exp>(exp))
 1336|   991k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   991k|    }
 1340|   991k|}
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   991k|        : base(std::in_place, std::forward<U>(val)),
 1428|   991k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   991k|    {
 1430|   991k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   991k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   991k|    {
  437|   991k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   991k|    {
 1177|   991k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   991k|    {
 1598|   991k|        return has_value();
 1599|   991k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.98M|    {
  485|  1.98M|        return m_has_value;
  486|  1.98M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   991k|    {
 1663|   991k|        return std::move(value());
 1664|   991k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   991k|    {
 1627|   991k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   991k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   991k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   991k|        return this->get_value();
 1629|   991k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   991k|    {
  451|   991k|        return m_value;
  452|   991k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1822|   956k|    {
 1823|   956k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   956k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   956k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   956k|    else {
 1333|   956k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   956k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   956k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 956k]
  |  |  ------------------
  ------------------
 1335|   956k|                   ? result(*std::forward<Exp>(exp))
 1336|   956k|                   : result(unexpect,
 1337|   956k|                            trivial_invoke(std::forward<F>(f),
 1338|   956k|                                           std::forward<Exp>(exp).error()));
 1339|   956k|    }
 1340|   956k|}
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1427|  57.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  57.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  57.9k|    {
 1430|  57.9k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  57.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  57.9k|    {
  437|  57.9k|    }
_ZN3scn2v313scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|   956k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   956k|    static_cast<    \
  |  |  929|   956k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   956k|    {
 3644|   956k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   687k|    {
 1653|   687k|        return value();
 1654|   687k|    }
_ZN3scn2v38expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  27.1k|    {
 1673|  27.1k|        return &value();
 1674|  27.1k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|  1.12M|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|  1.12M|    static_cast<    \
  |  |  929|  1.12M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|  1.12M|    {
 3644|  1.12M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|   473k|        : base(unexpect, std::move(e.error())),
 1474|   473k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   473k|    {
 1476|   473k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  4.66M|    {
 4289|  4.66M|        return x.is_at_end();
 4290|  4.66M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4332|  7.34M|    {
 4333|  7.34M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 7.34M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  7.34M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 7.34M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  7.34M|        return !read_at_position();
 4340|  7.34M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4312|  23.1M|    {
 4313|  23.1M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  23.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  23.1M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 23.1M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  23.1M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  23.1M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 20.3M, False: 2.79M]
  |  |  ------------------
  ------------------
 4320|  20.3M|            return true;
 4321|  20.3M|        }
 4322|       |
 4323|  5.40M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 2.79M, False: 2.61M]
  ------------------
 4324|  2.79M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 178k, False: 2.61M]
  ------------------
 4325|   178k|                return false;
 4326|   178k|            }
 4327|  2.79M|        }
 4328|  2.61M|        return true;
 4329|  2.79M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4088|  30.0M|    {
 4089|  30.0M|        return m_putback_buffer.size() + m_current_view.size();
 4090|  30.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4247|  7.25M|    {
 4248|  7.25M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  7.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  7.25M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 7.25M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  7.25M|        auto res = read_at_position();
 4257|  7.25M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  7.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  7.25M|        return parent()->get_character_at(m_position);
 4259|  7.25M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4119|  7.25M|    {
 4120|  7.25M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  7.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.15M, False: 1.09M]
  |  |  ------------------
  ------------------
 4121|  7.25M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  6.15M|            return m_putback_buffer[pos];
 4123|  6.15M|        }
 4124|  1.09M|        const auto start = pos - m_putback_buffer.size();
 4125|  1.09M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  1.09M|        return m_current_view[start];
 4127|  1.09M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|  2.59M|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|  2.59M|    else {
 3810|       |        // utf-32
 3811|  2.59M|        static_assert(sizeof(U) == 4);
 3812|  2.59M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  2.59M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|  2.59M|        return 1;
 3814|  2.59M|    }
 3815|  2.59M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  3.24M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.24M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.24M|    {
 1430|  3.24M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  3.24M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.24M|    {
  437|  3.24M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.30M|    {
 1177|  3.30M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  59.4k|        : base(unexpect, std::move(e.error())),
 1474|  59.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  59.4k|    {
 1476|  59.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  59.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  59.4k|          m_has_value(false)
  446|  59.4k|    {
  447|  59.4k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1597|  1.28M|    {
 1598|  1.28M|        return has_value();
 1599|  1.28M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|  18.2k|    {
 1653|  18.2k|        return value();
 1654|  18.2k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4282|  3.49M|    {
 4283|  3.49M|        return !(lhs == rhs);
 4284|  3.49M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4277|  4.75M|    {
 4278|  4.75M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 4.75M, False: 0]
  |  Branch (4278:46): [True: 1.53M, False: 3.22M]
  ------------------
 4279|  4.75M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4233|  8.57M|    {
 4234|  8.57M|        ++m_position;
 4235|  8.57M|        (void)read_at_position();
 4236|  8.57M|        return *this;
 4237|  8.57M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  2.59M|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|  2.59M|    else {
 4016|  2.59M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  2.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|  2.59M|        auto cp = static_cast<char32_t>(input.front());
 4018|  2.59M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  2.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 175k, False: 2.41M]
  |  |  ------------------
  ------------------
 4019|   175k|            return invalid_code_point;
 4020|   175k|        }
 4021|  2.41M|        return cp;
 4022|  2.59M|    }
 4023|  2.59M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  2.68k|        : base(unexpect, std::move(e.error())),
 1474|  2.68k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.68k|    {
 1476|  2.68k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  2.68k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.68k|          m_has_value(false)
  446|  2.68k|    {
  447|  2.68k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   683k|    {
 1177|   683k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   681k|        : base(std::in_place, std::forward<U>(val)),
 1428|   681k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   681k|    {
 1430|   681k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   681k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   681k|    {
  437|   681k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   683k|    {
 1598|   683k|        return has_value();
 1599|   683k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.36M|    {
  485|  1.36M|        return m_has_value;
  486|  1.36M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.68k|    {
 1604|  2.68k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.68k|        return this->get_unexpected().error();
 1606|  2.68k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.68k|    {
  468|  2.68k|        return m_unexpected;
  469|  2.68k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   681k|    {
 1663|   681k|        return std::move(value());
 1664|   681k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   681k|    {
 1627|   681k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   681k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   681k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   681k|        return this->get_value();
 1629|   681k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   681k|    {
  451|   681k|        return m_value;
  452|   681k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  12.0M|    {
 3330|  12.0M|        return m_sentinel;
 3331|  12.0M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1603|  2.00k|    {
 1604|  2.00k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.00k|        return this->get_unexpected().error();
 1606|  2.00k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|   609k|        : base(unexpect, std::move(e.error())),
 1474|   609k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   609k|    {
 1476|   609k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|   662k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   662k|          m_has_value(false)
  446|   662k|    {
  447|   662k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.71M|    {
 1177|  5.71M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1427|  18.2k|        : base(std::in_place, std::forward<U>(val)),
 1428|  18.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  18.2k|    {
 1430|  18.2k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  435|  18.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  18.2k|    {
  437|  18.2k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  3.22M|        : base(unexpect, std::move(e.error())),
 1474|  3.22M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.22M|    {
 1476|  3.22M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  3.22M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.22M|          m_has_value(false)
  446|  3.22M|    {
  447|  3.22M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1597|  6.26M|    {
 1598|  6.26M|        return has_value();
 1599|  6.26M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  11.0M|    {
  485|  11.0M|        return m_has_value;
  486|  11.0M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1603|  1.88M|    {
 1604|  1.88M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.88M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.88M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.88M|        return this->get_unexpected().error();
 1606|  1.88M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.88M|    {
  468|  1.88M|        return m_unexpected;
  469|  1.88M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1427|   564k|        : base(std::in_place, std::forward<U>(val)),
 1428|   564k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   564k|    {
 1430|   564k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   564k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   564k|    {
  437|   564k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   564k|    {
 1177|   564k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1473|     70|        : base(unexpect, std::move(e.error())),
 1474|     70|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     70|    {
 1476|     70|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  444|     70|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     70|          m_has_value(false)
  446|     70|    {
  447|     70|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1652|   811k|    {
 1653|   811k|        return value();
 1654|   811k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.21M|    {
 1627|  2.21M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.21M|        return this->get_value();
 1629|  2.21M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  2.21M|    {
  451|  2.21M|        return m_value;
  452|  2.21M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1597|  11.0k|    {
 1598|  11.0k|        return has_value();
 1599|  11.0k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  484|  1.12M|    {
  485|  1.12M|        return m_has_value;
  486|  1.12M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   553k|    {
 1663|   553k|        return std::move(value());
 1664|   553k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   564k|    {
 1627|   564k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   564k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   564k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   564k|        return this->get_value();
 1629|   564k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  450|   564k|    {
  451|   564k|        return m_value;
  452|   564k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.45M|    {
 1837|  1.45M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.45M|                                            std::forward<F>(f));
 1839|  1.45M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.45M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.45M|    else {
 1333|  1.45M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.45M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.45M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.40M, False: 53.7k]
  |  |  ------------------
  ------------------
 1335|  1.45M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.45M|                   : result(unexpect,
 1337|  53.7k|                            trivial_invoke(std::forward<F>(f),
 1338|  53.7k|                                           std::forward<Exp>(exp).error()));
 1339|  1.45M|    }
 1340|  1.45M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1427|  1.80M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.80M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.80M|    {
 1430|  1.80M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.80M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.80M|    {
  437|  1.80M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1483|  53.7k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  53.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  53.7k|    {
 1486|  53.7k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  1.40M|    {
 1663|  1.40M|        return std::move(value());
 1664|  1.40M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|   413k|    {
 3326|   413k|        return m_iterator;
 3327|   413k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|   413k|    {
 3330|   413k|        return m_sentinel;
 3331|   413k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  3.73M|    {
 1598|  3.73M|        return has_value();
 1599|  3.73M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.97M|    {
  485|  5.97M|        return m_has_value;
  486|  5.97M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|   640k|    {
 1604|   640k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   640k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   640k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   640k|        return this->get_unexpected().error();
 1606|   640k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   640k|    {
  468|   640k|        return m_unexpected;
  469|   640k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.32M|    {
 1663|  1.32M|        return std::move(value());
 1664|  1.32M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.59M|    {
 1627|  1.59M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.59M|        return this->get_value();
 1629|  1.59M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.59M|    {
  451|  1.59M|        return m_value;
  452|  1.59M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   386k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   386k|    static_cast<    \
  |  |  929|   386k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   386k|    static_cast<    \
  |  |  929|   386k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   386k|    {
 3312|   386k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  2.68M|    {
 4300|  2.68M|        return !x.is_at_end();
 4301|  2.68M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  58.0k|        : base(unexpect, std::move(e.error())),
 1474|  58.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  58.0k|    {
 1476|  58.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  58.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  58.0k|          m_has_value(false)
  446|  58.0k|    {
  447|  58.0k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.77M|    {
 1177|  2.77M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  2.71M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.71M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.71M|    {
 1430|  2.71M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.71M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.71M|    {
  437|  2.71M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1597|   757k|    {
 1598|   757k|        return has_value();
 1599|   757k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  4.79M|    {
  485|  4.79M|        return m_has_value;
  486|  4.79M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|  7.79k|    {
 1653|  7.79k|        return value();
 1654|  7.79k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.96M|    {
 1627|  1.96M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.96M|        return this->get_value();
 1629|  1.96M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.96M|    {
  451|  1.96M|        return m_value;
  452|  1.96M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.68k|        : base(unexpect, std::move(e.error())),
 1474|  2.68k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.68k|    {
 1476|  2.68k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  2.68k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.68k|          m_has_value(false)
  446|  2.68k|    {
  447|  2.68k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   684k|    {
 1177|   684k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   681k|        : base(std::in_place, std::forward<U>(val)),
 1428|   681k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   681k|    {
 1430|   681k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   681k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   681k|    {
  437|   681k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   557k|    {
 1837|   557k|        return detail::transform_error_impl(std::move(*this),
 1838|   557k|                                            std::forward<F>(f));
 1839|   557k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   557k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   557k|    else {
 1333|   557k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   557k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   557k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 553k, False: 3.60k]
  |  |  ------------------
  ------------------
 1335|   557k|                   ? result(*std::forward<Exp>(exp))
 1336|   557k|                   : result(unexpect,
 1337|  3.60k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.60k|                                           std::forward<Exp>(exp).error()));
 1339|   557k|    }
 1340|   557k|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.95M|    {
 1663|  1.95M|        return std::move(value());
 1664|  1.95M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  57.5k|    {
 1614|  57.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  57.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  57.5k|        return std::move(this->get_unexpected().error());
 1616|  57.5k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  58.0k|    {
  468|  58.0k|        return m_unexpected;
  469|  58.0k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|   631k|        : base(unexpect, std::forward<Args>(args)...),
 1484|   631k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|   631k|    {
 1486|   631k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|   684k|    {
 1598|   684k|        return has_value();
 1599|   684k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.36M|    {
  485|  1.36M|        return m_has_value;
  486|  1.36M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.68k|    {
 1604|  2.68k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.68k|        return this->get_unexpected().error();
 1606|  2.68k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.68k|    {
  468|  2.68k|        return m_unexpected;
  469|  2.68k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   681k|    {
 1663|   681k|        return std::move(value());
 1664|   681k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   681k|    {
 1627|   681k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   681k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   681k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   681k|        return this->get_value();
 1629|   681k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|   681k|    {
  451|   681k|        return m_value;
  452|   681k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1603|    516|    {
 1604|    516|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    516|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    516|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    516|        return this->get_unexpected().error();
 1606|    516|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|   608k|        : base(unexpect, std::move(e.error())),
 1474|   608k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   608k|    {
 1476|   608k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|   661k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   661k|          m_has_value(false)
  446|   661k|    {
  447|   661k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.56M|    {
 1177|  4.56M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1427|  7.79k|        : base(std::in_place, std::forward<U>(val)),
 1428|  7.79k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  7.79k|    {
 1430|  7.79k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  435|  7.79k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  7.79k|    {
  437|  7.79k|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.35M|        : base(unexpect, std::move(e.error())),
 1474|  2.35M|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.35M|    {
 1476|  2.35M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  444|  2.35M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.35M|          m_has_value(false)
  446|  2.35M|    {
  447|  2.35M|    }
_ZNK3scn2v38expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1597|  5.11M|    {
 1598|  5.11M|        return has_value();
 1599|  5.11M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  484|  9.20M|    {
  485|  9.20M|        return m_has_value;
  486|  9.20M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1603|  1.78M|    {
 1604|  1.78M|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.78M|        return this->get_unexpected().error();
 1606|  1.78M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  467|  1.78M|    {
  468|  1.78M|        return m_unexpected;
  469|  1.78M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1427|   557k|        : base(std::in_place, std::forward<U>(val)),
 1428|   557k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   557k|    {
 1430|   557k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   557k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   557k|    {
  437|   557k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   557k|    {
 1177|   557k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|     24|        : base(unexpect, std::move(e.error())),
 1474|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|     24|    {
 1476|     24|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|     24|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|     24|          m_has_value(false)
  446|     24|    {
  447|     24|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1652|   268k|    {
 1653|   268k|        return value();
 1654|   268k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.67M|    {
 1627|  1.67M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.67M|        return this->get_value();
 1629|  1.67M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  450|  1.67M|    {
  451|  1.67M|        return m_value;
  452|  1.67M|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1597|  3.78k|    {
 1598|  3.78k|        return has_value();
 1599|  3.78k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  484|  1.11M|    {
  485|  1.11M|        return m_has_value;
  486|  1.11M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   553k|    {
 1663|   553k|        return std::move(value());
 1664|   553k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   557k|    {
 1627|   557k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   557k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   557k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   557k|        return this->get_value();
 1629|   557k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  450|   557k|    {
  451|   557k|        return m_value;
  452|   557k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.45M|    {
 1837|  1.45M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.45M|                                            std::forward<F>(f));
 1839|  1.45M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.45M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.45M|    else {
 1333|  1.45M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.45M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.45M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.40M, False: 53.9k]
  |  |  ------------------
  ------------------
 1335|  1.45M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.45M|                   : result(unexpect,
 1337|  53.9k|                            trivial_invoke(std::forward<F>(f),
 1338|  53.9k|                                           std::forward<Exp>(exp).error()));
 1339|  1.45M|    }
 1340|  1.45M|}
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1427|  1.53M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.53M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.53M|    {
 1430|  1.53M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.53M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.53M|    {
  437|  1.53M|    }
_ZN3scn2v38expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1483|  53.9k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  53.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  53.9k|    {
 1486|  53.9k|    }
_ZNO3scn2v38expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.40M|    {
 1663|  1.40M|        return std::move(value());
 1664|  1.40M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   475k|    {
 2855|   475k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   475k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   475k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   475k|    {
 2836|   475k|        return t.data();
 2837|   475k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1836|   553k|    {
 1837|   553k|        return detail::transform_error_impl(std::move(*this),
 1838|   553k|                                            std::forward<F>(f));
 1839|   553k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1322|   553k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   553k|    else {
 1333|   553k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   553k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   553k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 553k, False: 0]
  |  |  ------------------
  ------------------
 1335|   553k|                   ? result(*std::forward<Exp>(exp))
 1336|   553k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   553k|    }
 1340|   553k|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1427|   553k|        : base(std::in_place, std::forward<U>(val)),
 1428|   553k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   553k|    {
 1430|   553k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  435|   553k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   553k|    {
  437|   553k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   553k|    {
 1177|   553k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   553k|    {
 1598|   553k|        return has_value();
 1599|   553k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.10M|    {
  485|  1.10M|        return m_has_value;
  486|  1.10M|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1662|   553k|    {
 1663|   553k|        return std::move(value());
 1664|   553k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1626|   553k|    {
 1627|   553k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   553k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   553k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   553k|        return this->get_value();
 1629|   553k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   553k|    {
  451|   553k|        return m_value;
  452|   553k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1822|   716k|    {
 1823|   716k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   716k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1322|   716k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   716k|    else {
 1333|   716k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   716k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   716k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 716k]
  |  |  ------------------
  ------------------
 1335|   716k|                   ? result(*std::forward<Exp>(exp))
 1336|   716k|                   : result(unexpect,
 1337|   716k|                            trivial_invoke(std::forward<F>(f),
 1338|   716k|                                           std::forward<Exp>(exp).error()));
 1339|   716k|    }
 1340|   716k|}
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   275k|    {
 1653|   275k|        return value();
 1654|   275k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3663|   106k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1672|  10.9k|    {
 1673|  10.9k|        return &value();
 1674|  10.9k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2723|   446k|    {
 2724|   446k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   446k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   446k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2704|   446k|    {
 2705|   446k|        return decay_copy(t.begin());
 2706|   446k|    }
_ZN3scn2v36ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 1948|   446k|{
 1949|   446k|    return SCN_FWD(t);
  ------------------
  |  |  930|   446k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   446k|}
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3663|   244k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1836|   553k|    {
 1837|   553k|        return detail::transform_error_impl(std::move(*this),
 1838|   553k|                                            std::forward<F>(f));
 1839|   553k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1322|   553k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   553k|    else {
 1333|   553k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   553k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   553k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 553k, False: 0]
  |  |  ------------------
  ------------------
 1335|   553k|                   ? result(*std::forward<Exp>(exp))
 1336|   553k|                   : result(unexpect,
 1337|      0|                            trivial_invoke(std::forward<F>(f),
 1338|      0|                                           std::forward<Exp>(exp).error()));
 1339|   553k|    }
 1340|   553k|}
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   553k|        : base(std::in_place, std::forward<U>(val)),
 1428|   553k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   553k|    {
 1430|   553k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  435|   553k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   553k|    {
  437|   553k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   553k|    {
 1177|   553k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1597|   553k|    {
 1598|   553k|        return has_value();
 1599|   553k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.10M|    {
  485|  1.10M|        return m_has_value;
  486|  1.10M|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   553k|    {
 1663|   553k|        return std::move(value());
 1664|   553k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   553k|    {
 1627|   553k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   553k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   553k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   553k|        return this->get_value();
 1629|   553k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   553k|    {
  451|   553k|        return m_value;
  452|   553k|    }
_ZNR3scn2v38expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1822|   628k|    {
 1823|   628k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1824|   628k|    }
_ZN3scn2v36detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1322|   628k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   628k|    else {
 1333|   628k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   628k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   628k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 628k]
  |  |  ------------------
  ------------------
 1335|   628k|                   ? result(*std::forward<Exp>(exp))
 1336|   628k|                   : result(unexpect,
 1337|   628k|                            trivial_invoke(std::forward<F>(f),
 1338|   628k|                                           std::forward<Exp>(exp).error()));
 1339|   628k|    }
 1340|   628k|}
_ZN3scn2v313scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3642|   628k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   628k|    static_cast<    \
  |  |  929|   628k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   628k|    {
 3644|   628k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   276k|    {
 1653|   276k|        return value();
 1654|   276k|    }
_ZN3scn2v38expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1672|  3.76k|    {
 1673|  3.76k|        return &value();
 1674|  3.76k|    }
_ZN3scn2v313scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3642|   716k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  |  928|   716k|    static_cast<    \
  |  |  929|   716k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3643|   716k|    {
 3644|   716k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IivEEOT_:
 1427|   110k|        : base(std::in_place, std::forward<U>(val)),
 1428|   110k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   110k|    {
 1430|   110k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJiEvEENSt3__110in_place_tEDpOT_:
  435|   110k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   110k|    {
  437|   110k|    }
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA29_KcEEEDaDpOT_:
 3649|   120k|{
 3650|   120k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|   120k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   910k|    {
 2855|   910k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   910k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   910k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   910k|    {
 2836|   910k|        return t.data();
 2837|   910k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|  1.95M|    {
 5476|  1.95M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.95M]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|  1.95M|        return static_cast<std::size_t>(m_desc &
 5481|  1.95M|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|  1.95M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|  3.90M|    {
 5501|  3.90M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  3.90M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|  1.95M|    {
 5444|  1.95M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.95M]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  1.95M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.95M]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|  1.95M|        const auto t = type(id);
 5456|  1.95M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.95M]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|  1.95M|        basic_scan_arg<Context> arg;
 5461|  1.95M|        arg.m_type = t;
 5462|  1.95M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 1.95M, False: 0]
  ------------------
 5463|  1.95M|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  1.95M|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  1.95M|        return arg;
 5469|  1.95M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|  1.95M|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  1.95M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  1.95M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  1.95M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  1.95M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|  1.95M|    {
 5505|  1.95M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  1.95M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|  3.70M|    {
 5257|  3.70M|        return m_type != detail::arg_type::none_type;
 5258|  3.70M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   298k|{
 8428|   298k|#define SCN_VISIT(Type)                                         \
 8429|   298k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   298k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   298k|    }                                                           \
 8432|   298k|    else {                                                      \
 8433|   298k|        return vis(monostate_val);                              \
 8434|   298k|    }
 8435|       |
 8436|   298k|    monostate monostate_val{};
 8437|       |
 8438|   298k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 298k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 298k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 298k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 298k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 298k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 298k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 298k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 298k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 298k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 298k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 298k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 298k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 298k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 298k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 298k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|  96.2k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 96.2k, False: 202k]
  ------------------
 8470|  96.2k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  96.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  96.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  96.2k|    }                                                           \
  |  | 8432|  96.2k|    else {                                                      \
  |  | 8433|  96.2k|        return vis(monostate_val);                              \
  |  | 8434|  96.2k|    }
  ------------------
 8471|   196k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 100k, False: 198k]
  ------------------
 8472|   196k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   196k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   196k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   196k|    }                                                           \
  |  | 8432|   196k|    else {                                                      \
  |  | 8433|   196k|        return vis(monostate_val);                              \
  |  | 8434|   196k|    }
  ------------------
 8473|   298k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 102k, False: 196k]
  ------------------
 8474|   298k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   298k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   298k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   298k|    }                                                           \
  |  | 8432|   298k|    else {                                                      \
  |  | 8433|   298k|        return vis(monostate_val);                              \
  |  | 8434|   298k|    }
  ------------------
 8475|   298k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 298k]
  ------------------
 8476|   298k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   298k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   298k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   298k|    }                                                           \
  |  | 8432|   298k|    else {                                                      \
  |  | 8433|   298k|        return vis(monostate_val);                              \
  |  | 8434|   298k|    }
  ------------------
 8477|   298k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 298k]
  ------------------
 8478|   298k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   298k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   298k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   298k|    }                                                           \
  |  | 8432|   298k|    else {                                                      \
  |  | 8433|   298k|        return vis(monostate_val);                              \
  |  | 8434|   298k|    }
  ------------------
 8479|   298k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 298k]
  ------------------
 8480|   298k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   298k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   298k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   298k|    }                                                           \
  |  | 8432|   298k|    else {                                                      \
  |  | 8433|   298k|        return vis(monostate_val);                              \
  |  | 8434|   298k|    }
  ------------------
 8481|   298k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 298k]
  ------------------
 8482|   298k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   298k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   298k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   298k|    }                                                           \
  |  | 8432|   298k|    else {                                                      \
  |  | 8433|   298k|        return vis(monostate_val);                              \
  |  | 8434|   298k|    }
  ------------------
 8483|   298k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 298k]
  ------------------
 8484|   298k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   298k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   298k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   298k|    }                                                           \
  |  | 8432|   298k|    else {                                                      \
  |  | 8433|   298k|        return vis(monostate_val);                              \
  |  | 8434|   298k|    }
  ------------------
 8485|   298k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 298k]
  ------------------
 8486|   298k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   298k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   298k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   298k|    }                                                           \
  |  | 8432|   298k|    else {                                                      \
  |  | 8433|   298k|        return vis(monostate_val);                              \
  |  | 8434|   298k|    }
  ------------------
 8487|       |
 8488|   298k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 298k]
  ------------------
 8489|   298k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   298k|            return vis(
 8491|   298k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 298k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 298k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   298k|            SCN_CLANG_POP
 8506|   298k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|  1.53M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|  1.53M|    {
 5555|  1.53M|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   829k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   829k|    static_cast<    \
  |  |  929|   829k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   829k|    {
 8149|   829k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8065|  1.53M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.53M|    static_cast<    \
  |  |  929|  1.53M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.53M|    static_cast<    \
  |  |  929|  1.53M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|  1.53M|    {
 8067|  1.53M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4352|  1.15M|{
 4353|  1.15M|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 1.15M]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|  1.15M|    return ranges::subrange{forward_iterator{this, 0},
 4358|  1.15M|                            ranges::default_sentinel};
 4359|  1.15M|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4183|  1.15M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|  1.15M|    {
 4185|  1.15M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|  1.15M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  1.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|  1.15M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   325k|{
 8428|   325k|#define SCN_VISIT(Type)                                         \
 8429|   325k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   325k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   325k|    }                                                           \
 8432|   325k|    else {                                                      \
 8433|   325k|        return vis(monostate_val);                              \
 8434|   325k|    }
 8435|       |
 8436|   325k|    monostate monostate_val{};
 8437|       |
 8438|   325k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 325k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 325k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 325k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 325k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 325k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 325k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 325k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 325k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 325k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 325k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 325k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 325k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 325k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 325k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 325k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|   104k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 104k, False: 221k]
  ------------------
 8470|   104k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   104k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   104k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   104k|    }                                                           \
  |  | 8432|   104k|    else {                                                      \
  |  | 8433|   104k|        return vis(monostate_val);                              \
  |  | 8434|   104k|    }
  ------------------
 8471|   214k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 109k, False: 215k]
  ------------------
 8472|   214k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   214k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   214k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   214k|    }                                                           \
  |  | 8432|   214k|    else {                                                      \
  |  | 8433|   214k|        return vis(monostate_val);                              \
  |  | 8434|   214k|    }
  ------------------
 8473|   325k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 111k, False: 214k]
  ------------------
 8474|   325k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   325k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   325k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   325k|    }                                                           \
  |  | 8432|   325k|    else {                                                      \
  |  | 8433|   325k|        return vis(monostate_val);                              \
  |  | 8434|   325k|    }
  ------------------
 8475|   325k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 325k]
  ------------------
 8476|   325k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   325k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   325k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   325k|    }                                                           \
  |  | 8432|   325k|    else {                                                      \
  |  | 8433|   325k|        return vis(monostate_val);                              \
  |  | 8434|   325k|    }
  ------------------
 8477|   325k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 325k]
  ------------------
 8478|   325k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   325k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   325k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   325k|    }                                                           \
  |  | 8432|   325k|    else {                                                      \
  |  | 8433|   325k|        return vis(monostate_val);                              \
  |  | 8434|   325k|    }
  ------------------
 8479|   325k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 325k]
  ------------------
 8480|   325k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   325k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   325k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   325k|    }                                                           \
  |  | 8432|   325k|    else {                                                      \
  |  | 8433|   325k|        return vis(monostate_val);                              \
  |  | 8434|   325k|    }
  ------------------
 8481|   325k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 325k]
  ------------------
 8482|   325k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   325k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   325k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   325k|    }                                                           \
  |  | 8432|   325k|    else {                                                      \
  |  | 8433|   325k|        return vis(monostate_val);                              \
  |  | 8434|   325k|    }
  ------------------
 8483|   325k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 325k]
  ------------------
 8484|   325k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   325k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   325k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   325k|    }                                                           \
  |  | 8432|   325k|    else {                                                      \
  |  | 8433|   325k|        return vis(monostate_val);                              \
  |  | 8434|   325k|    }
  ------------------
 8485|   325k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 325k]
  ------------------
 8486|   325k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   325k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   325k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   325k|    }                                                           \
  |  | 8432|   325k|    else {                                                      \
  |  | 8433|   325k|        return vis(monostate_val);                              \
  |  | 8434|   325k|    }
  ------------------
 8487|       |
 8488|   325k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 325k]
  ------------------
 8489|   325k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   325k|            return vis(
 8491|   325k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 325k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 325k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   325k|            SCN_CLANG_POP
 8506|   325k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   708k|{
 7055|   708k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   708k|    handler.check_args_exhausted();
 7057|   708k|    return handler.get_error();
 7058|   708k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   708k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   708k|    auto begin = format.data();
 7024|   708k|    auto it = begin;
 7025|   708k|    const auto end = format.data() + format.size();
 7026|       |
 7027|  1.35M|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 708k, False: 642k]
  ------------------
 7028|   708k|        const auto ch = *it++;
 7029|   708k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 708k, False: 0]
  ------------------
 7030|   708k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   708k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   708k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 66.5k, False: 642k]
  ------------------
 7034|  66.5k|                return;
 7035|  66.5k|            }
 7036|   708k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   708k|    }
 7047|       |
 7048|   642k|    handler.on_literal_text(begin, end);
 7049|   642k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6952|   708k|{
 6953|   708k|    struct id_adapter {
 6954|   708k|        constexpr void operator()()
 6955|   708k|        {
 6956|   708k|            arg_id = handler.on_arg_id();
 6957|   708k|        }
 6958|   708k|        constexpr void operator()(std::size_t id)
 6959|   708k|        {
 6960|   708k|            arg_id = handler.on_arg_id(id);
 6961|   708k|        }
 6962|       |
 6963|   708k|        constexpr void on_error(const char* msg)
 6964|   708k|        {
 6965|   708k|            SCN_UNLIKELY_ATTR
 6966|   708k|            handler.on_error(msg);
 6967|   708k|        }
 6968|       |
 6969|   708k|        Handler& handler;
 6970|   708k|        std::size_t arg_id;
 6971|   708k|    };
 6972|       |
 6973|   708k|    ++begin;
 6974|   708k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 708k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   708k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 708k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   708k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 708k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   708k|    else {
 6986|   708k|        auto adapter = id_adapter{handler, 0};
 6987|   708k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   708k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 708k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   708k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 708k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   708k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 708k, False: 0]
  ------------------
 6998|   708k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 708k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   708k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   708k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 708k]
  |  |  |  Branch (859:45): [True: 0, False: 708k]
  |  |  |  Branch (859:45): [True: 0, False: 708k]
  |  |  ------------------
  ------------------
 7004|      0|                handler.on_error("Unknown format specifier");
 7005|      0|                return begin;
 7006|      0|            }
 7007|   708k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   708k|    }
 7014|   708k|    return begin + 1;
 7015|   708k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8049|  1.53M|    {
 8050|  1.53M|        return m_args.get(id);
 8051|  1.53M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8059|  1.53M|    {
 8060|  1.53M|        return m_locale;
 8061|  1.53M|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|  1.53M|    {
 5576|  1.53M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|  1.53M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  1.53M|        do_check_arg_id(id);
 5584|  1.53M|        return id;
 5585|  1.53M|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|  1.53M|{
 6064|  1.53M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  1.53M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  1.53M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   708k|{
 6454|   708k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   708k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   708k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   708k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 708k, False: 0]
  |  Branch (6455:26): [True: 0, False: 708k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   708k|    handler();
 6460|   708k|    return begin;
 6461|   708k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   708k|        {
 6956|   708k|            arg_id = handler.on_arg_id();
 6957|   708k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|  3.07M|    {
 5262|  3.07M|        return m_type;
 5263|  3.07M|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|  1.53M|    {
 5571|  1.53M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  1.53M|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|  3.07M|    {
 5560|  3.07M|        return m_format.data();
 5561|  3.07M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   708k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   708k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   708k|    {
 7133|   708k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   708k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   708k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   708k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6868|   708k|{
 6869|   708k|    auto do_presentation = [&]() -> const CharT* {
 6870|   708k|        if (*begin == CharT{'['}) {
 6871|   708k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   708k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   708k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   708k|                return begin;
 6877|   708k|            }
 6878|   708k|            handler.on_character_set_string(set);
 6879|   708k|            return begin;
 6880|   708k|        }
 6881|   708k|        if (*begin == CharT{'/'}) {
 6882|   708k|            return parse_presentation_regex(begin, end, handler);
 6883|   708k|        }
 6884|   708k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   708k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   708k|            handler.on_error("Invalid type specifier in format string");
 6887|   708k|            return begin;
 6888|   708k|        }
 6889|   708k|        handler.on_type(type);
 6890|   708k|        return begin;
 6891|   708k|    };
 6892|       |
 6893|   708k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 708k, False: 0]
  |  Branch (6893:28): [True: 708k, False: 0]
  ------------------
 6894|   708k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 708k, False: 0]
  |  Branch (6894:36): [True: 509k, False: 199k]
  ------------------
 6895|   509k|        return do_presentation();
 6896|   509k|    }
 6897|       |
 6898|   199k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|   199k|    begin = parse_align(begin, end, handler);
 6904|   199k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|   199k|    begin = parse_width(begin, end, handler);
 6910|   199k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|   199k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 199k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|   199k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 199k, False: 0]
  ------------------
 6929|   199k|        handler.on_localized();
 6930|   199k|        ++begin;
 6931|   199k|    }
 6932|   199k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|   199k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 199k, False: 0]
  |  Branch (6937:25): [True: 0, False: 199k]
  ------------------
 6938|      0|        do_presentation();
 6939|      0|    }
 6940|   199k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|   199k|    return begin;
 6946|   199k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6517|  1.53M|{
 6518|  1.53M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 1.10M, False: 436k]
  |  Branch (6518:33): [True: 1.10M, False: 0]
  ------------------
 6519|  1.53M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 436k, False: 0]
  |  Branch (6519:33): [True: 436k, False: 0]
  ------------------
 6520|  1.53M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   509k|    auto do_presentation = [&]() -> const CharT* {
 6870|   509k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 509k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   509k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 509k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   509k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   509k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   509k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 509k]
  |  |  ------------------
  ------------------
 6886|      0|            handler.on_error("Invalid type specifier in format string");
 6887|      0|            return begin;
 6888|      0|        }
 6889|   509k|        handler.on_type(type);
 6890|   509k|        return begin;
 6891|   509k|    };
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6465|  1.10M|{
 6466|  1.10M|    switch (type) {
 6467|      0|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.10M]
  ------------------
 6468|      0|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 0, False: 1.10M]
  ------------------
 6469|      0|            return presentation_type::int_binary;
 6470|      0|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 0, False: 1.10M]
  ------------------
 6471|      0|            return presentation_type::int_decimal;
 6472|      0|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 0, False: 1.10M]
  ------------------
 6473|      0|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 1.10M]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|      0|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 0, False: 1.10M]
  ------------------
 6477|      0|            return presentation_type::int_octal;
 6478|      0|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 0, False: 1.10M]
  ------------------
 6479|      0|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 1.10M]
  ------------------
 6480|      0|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 1.10M]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 1.10M]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|   474k|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 474k, False: 627k]
  ------------------
 6485|   474k|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 1.10M]
  ------------------
 6486|   474k|            return presentation_type::float_hex;
 6487|  41.7k|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 41.7k, False: 1.05M]
  ------------------
 6488|  41.7k|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 1.10M]
  ------------------
 6489|  41.7k|            return presentation_type::float_scientific;
 6490|   222k|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 222k, False: 878k]
  ------------------
 6491|   222k|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 1.10M]
  ------------------
 6492|   222k|            return presentation_type::float_fixed;
 6493|   363k|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 363k, False: 738k]
  ------------------
 6494|   363k|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 1.10M]
  ------------------
 6495|   363k|            return presentation_type::float_general;
 6496|      0|        case 's':
  ------------------
  |  Branch (6496:9): [True: 0, False: 1.10M]
  ------------------
 6497|      0|            return presentation_type::string;
 6498|      0|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 0, False: 1.10M]
  ------------------
 6499|      0|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 1.10M]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 1.10M]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 1.10M]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 1.10M]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|      0|        default:
  ------------------
  |  Branch (6510:9): [True: 0, False: 1.10M]
  ------------------
 6511|      0|            return presentation_type::none;
 6512|  1.10M|    }
 6513|  1.10M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6542|   199k|{
 6543|   199k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|   199k|    auto check_align = [](wchar_t ch) {
 6546|   199k|        switch (ch) {
 6547|   199k|            case L'<':
 6548|   199k|                return align_type::left;
 6549|   199k|            case L'>':
 6550|   199k|                return align_type::right;
 6551|   199k|            case L'^':
 6552|   199k|                return align_type::center;
 6553|   199k|            default:
 6554|   199k|                return align_type::none;
 6555|   199k|        }
 6556|   199k|    };
 6557|       |
 6558|   199k|    auto potential_fill_len = code_point_length(begin, end);
 6559|   199k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   398k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  |  Branch (859:45): [True: 0, False: 199k]
  |  |  |  Branch (859:45): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 6560|   199k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|   199k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|   199k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|   199k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|   199k|    const auto begin_before_fill = begin;
 6570|   199k|    begin += potential_fill_len;
 6571|       |
 6572|   199k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 199k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|   199k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|   199k|    const auto begin_after_fill = begin;
 6578|   199k|    ++begin;
 6579|       |
 6580|   199k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 199k, False: 0]
  ------------------
 6581|   199k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   199k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 199k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|   199k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 199k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|   199k|    }
 6589|       |
 6590|   199k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 199k, False: 0]
  ------------------
 6591|   199k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 199k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|   199k|        return begin_before_fill;
 6596|   199k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|   199k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6524|   436k|{
 6525|   436k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   436k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   436k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|       |    if constexpr (sizeof(CharT) != 1) {
 6527|       |        return 1;
 6528|       |    }
 6529|   436k|    else {
 6530|   436k|        const auto lengths =
 6531|   436k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|   436k|            "\3\4";
 6533|   436k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|   436k|        return len;
 6535|   436k|    }
 6536|   436k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|   398k|    auto check_align = [](wchar_t ch) {
 6546|   398k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 398k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 398k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 398k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   398k|            default:
  ------------------
  |  Branch (6553:13): [True: 398k, False: 0]
  ------------------
 6554|   398k|                return align_type::none;
 6555|   398k|        }
 6556|   398k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6607|   199k|{
 6608|   199k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   199k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   199k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|   199k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 199k, False: 0]
  |  Branch (6610:33): [True: 0, False: 199k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|   199k|    return begin;
 6621|   199k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7137|   199k|    {
 7138|   199k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|   199k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 199k, False: 0]
  ------------------
 7140|   199k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 199k, False: 0]
  ------------------
 7141|   199k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 199k]
  ------------------
 7142|   199k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|   199k|        Handler::on_localized();
 7150|   199k|    }
_ZN3scn2v36detail12specs_setter12on_localizedILb1EEEvv:
 6282|   633k|    {
 6283|   633k|        if constexpr (!SCN_DISABLE_LOCALE) {
 6284|   633k|            m_specs.localized = true;
 6285|       |        }
 6286|       |        else {
 6287|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 6288|       |        }
 6289|   633k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   708k|{
 8428|   708k|#define SCN_VISIT(Type)                                         \
 8429|   708k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   708k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   708k|    }                                                           \
 8432|   708k|    else {                                                      \
 8433|   708k|        return vis(monostate_val);                              \
 8434|   708k|    }
 8435|       |
 8436|   708k|    monostate monostate_val{};
 8437|       |
 8438|   708k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 708k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 708k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 708k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 708k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 708k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 708k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 708k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 708k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 708k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 708k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 708k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 708k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 708k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 708k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 708k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|   230k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 230k, False: 477k]
  ------------------
 8470|   230k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   230k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   230k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   230k|    }                                                           \
  |  | 8432|   230k|    else {                                                      \
  |  | 8433|   230k|        return vis(monostate_val);                              \
  |  | 8434|   230k|    }
  ------------------
 8471|   468k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 237k, False: 471k]
  ------------------
 8472|   468k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   468k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   468k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   468k|    }                                                           \
  |  | 8432|   468k|    else {                                                      \
  |  | 8433|   468k|        return vis(monostate_val);                              \
  |  | 8434|   468k|    }
  ------------------
 8473|   708k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 240k, False: 468k]
  ------------------
 8474|   708k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   708k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   708k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   708k|    }                                                           \
  |  | 8432|   708k|    else {                                                      \
  |  | 8433|   708k|        return vis(monostate_val);                              \
  |  | 8434|   708k|    }
  ------------------
 8475|   708k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 708k]
  ------------------
 8476|   708k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   708k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   708k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   708k|    }                                                           \
  |  | 8432|   708k|    else {                                                      \
  |  | 8433|   708k|        return vis(monostate_val);                              \
  |  | 8434|   708k|    }
  ------------------
 8477|   708k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 708k]
  ------------------
 8478|   708k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   708k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   708k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   708k|    }                                                           \
  |  | 8432|   708k|    else {                                                      \
  |  | 8433|   708k|        return vis(monostate_val);                              \
  |  | 8434|   708k|    }
  ------------------
 8479|   708k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 708k]
  ------------------
 8480|   708k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   708k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   708k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   708k|    }                                                           \
  |  | 8432|   708k|    else {                                                      \
  |  | 8433|   708k|        return vis(monostate_val);                              \
  |  | 8434|   708k|    }
  ------------------
 8481|   708k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 708k]
  ------------------
 8482|   708k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   708k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   708k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   708k|    }                                                           \
  |  | 8432|   708k|    else {                                                      \
  |  | 8433|   708k|        return vis(monostate_val);                              \
  |  | 8434|   708k|    }
  ------------------
 8483|   708k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 708k]
  ------------------
 8484|   708k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   708k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   708k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   708k|    }                                                           \
  |  | 8432|   708k|    else {                                                      \
  |  | 8433|   708k|        return vis(monostate_val);                              \
  |  | 8434|   708k|    }
  ------------------
 8485|   708k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 708k]
  ------------------
 8486|   708k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   708k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   708k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   708k|    }                                                           \
  |  | 8432|   708k|    else {                                                      \
  |  | 8433|   708k|        return vis(monostate_val);                              \
  |  | 8434|   708k|    }
  ------------------
 8487|       |
 8488|   708k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 708k]
  ------------------
 8489|   708k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   708k|            return vis(
 8491|   708k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 708k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 708k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   708k|            SCN_CLANG_POP
 8506|   708k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   829k|{
 7055|   829k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   829k|    handler.check_args_exhausted();
 7057|   829k|    return handler.get_error();
 7058|   829k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   829k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   829k|    auto begin = format.data();
 7024|   829k|    auto it = begin;
 7025|   829k|    const auto end = format.data() + format.size();
 7026|       |
 7027|  1.59M|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 829k, False: 762k]
  ------------------
 7028|   829k|        const auto ch = *it++;
 7029|   829k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 829k, False: 0]
  ------------------
 7030|   829k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   829k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   829k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 66.5k, False: 762k]
  ------------------
 7034|  66.5k|                return;
 7035|  66.5k|            }
 7036|   829k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   829k|    }
 7047|       |
 7048|   762k|    handler.on_literal_text(begin, end);
 7049|   762k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8185|   762k|    {
 8186|   762k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   762k|    static_cast<    \
  |  |  929|   762k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|   762k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6952|   829k|{
 6953|   829k|    struct id_adapter {
 6954|   829k|        constexpr void operator()()
 6955|   829k|        {
 6956|   829k|            arg_id = handler.on_arg_id();
 6957|   829k|        }
 6958|   829k|        constexpr void operator()(std::size_t id)
 6959|   829k|        {
 6960|   829k|            arg_id = handler.on_arg_id(id);
 6961|   829k|        }
 6962|       |
 6963|   829k|        constexpr void on_error(const char* msg)
 6964|   829k|        {
 6965|   829k|            SCN_UNLIKELY_ATTR
 6966|   829k|            handler.on_error(msg);
 6967|   829k|        }
 6968|       |
 6969|   829k|        Handler& handler;
 6970|   829k|        std::size_t arg_id;
 6971|   829k|    };
 6972|       |
 6973|   829k|    ++begin;
 6974|   829k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   829k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 829k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   829k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 829k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   829k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 829k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   829k|    else {
 6986|   829k|        auto adapter = id_adapter{handler, 0};
 6987|   829k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   829k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   829k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 829k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   829k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 829k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   829k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 829k, False: 0]
  ------------------
 6998|   829k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   829k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 829k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   829k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   829k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 829k]
  |  |  |  Branch (859:45): [True: 0, False: 829k]
  |  |  |  Branch (859:45): [True: 0, False: 829k]
  |  |  ------------------
  ------------------
 7004|      0|                handler.on_error("Unknown format specifier");
 7005|      0|                return begin;
 7006|      0|            }
 7007|   829k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   829k|    }
 7014|   829k|    return begin + 1;
 7015|   829k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   829k|{
 6454|   829k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   829k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   829k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   829k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 829k, False: 0]
  |  Branch (6455:26): [True: 0, False: 829k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   829k|    handler();
 6460|   829k|    return begin;
 6461|   829k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   829k|        {
 6956|   829k|            arg_id = handler.on_arg_id();
 6957|   829k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   829k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   829k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   829k|    {
 7133|   829k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   829k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   829k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   829k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6868|   829k|{
 6869|   829k|    auto do_presentation = [&]() -> const CharT* {
 6870|   829k|        if (*begin == CharT{'['}) {
 6871|   829k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   829k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   829k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   829k|                return begin;
 6877|   829k|            }
 6878|   829k|            handler.on_character_set_string(set);
 6879|   829k|            return begin;
 6880|   829k|        }
 6881|   829k|        if (*begin == CharT{'/'}) {
 6882|   829k|            return parse_presentation_regex(begin, end, handler);
 6883|   829k|        }
 6884|   829k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   829k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   829k|            handler.on_error("Invalid type specifier in format string");
 6887|   829k|            return begin;
 6888|   829k|        }
 6889|   829k|        handler.on_type(type);
 6890|   829k|        return begin;
 6891|   829k|    };
 6892|       |
 6893|   829k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 829k, False: 0]
  |  Branch (6893:28): [True: 829k, False: 0]
  ------------------
 6894|   829k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 829k, False: 0]
  |  Branch (6894:36): [True: 591k, False: 237k]
  ------------------
 6895|   591k|        return do_presentation();
 6896|   591k|    }
 6897|       |
 6898|   237k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 237k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|   237k|    begin = parse_align(begin, end, handler);
 6904|   237k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 237k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|   237k|    begin = parse_width(begin, end, handler);
 6910|   237k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 237k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|   237k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 237k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|   237k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 237k, False: 0]
  ------------------
 6929|   237k|        handler.on_localized();
 6930|   237k|        ++begin;
 6931|   237k|    }
 6932|   237k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 237k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|   237k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 237k, False: 0]
  |  Branch (6937:25): [True: 0, False: 237k]
  ------------------
 6938|      0|        do_presentation();
 6939|      0|    }
 6940|   237k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 237k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|   237k|    return begin;
 6946|   237k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   591k|    auto do_presentation = [&]() -> const CharT* {
 6870|   591k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 591k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   591k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 591k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   591k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   591k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   591k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 591k]
  |  |  ------------------
  ------------------
 6886|      0|            handler.on_error("Invalid type specifier in format string");
 6887|      0|            return begin;
 6888|      0|        }
 6889|   591k|        handler.on_type(type);
 6890|   591k|        return begin;
 6891|   591k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6542|   237k|{
 6543|   237k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   237k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   237k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|   237k|    auto check_align = [](wchar_t ch) {
 6546|   237k|        switch (ch) {
 6547|   237k|            case L'<':
 6548|   237k|                return align_type::left;
 6549|   237k|            case L'>':
 6550|   237k|                return align_type::right;
 6551|   237k|            case L'^':
 6552|   237k|                return align_type::center;
 6553|   237k|            default:
 6554|   237k|                return align_type::none;
 6555|   237k|        }
 6556|   237k|    };
 6557|       |
 6558|   237k|    auto potential_fill_len = code_point_length(begin, end);
 6559|   237k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   475k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 237k]
  |  |  |  Branch (859:45): [True: 0, False: 237k]
  |  |  |  Branch (859:45): [True: 0, False: 237k]
  |  |  ------------------
  ------------------
 6560|   237k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|   237k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|   237k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|   237k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|   237k|    const auto begin_before_fill = begin;
 6570|   237k|    begin += potential_fill_len;
 6571|       |
 6572|   237k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 237k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|   237k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|   237k|    const auto begin_after_fill = begin;
 6578|   237k|    ++begin;
 6579|       |
 6580|   237k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 237k, False: 0]
  ------------------
 6581|   237k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 237k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|   237k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 237k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|   237k|    }
 6589|       |
 6590|   237k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 237k, False: 0]
  ------------------
 6591|   237k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 237k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|   237k|        return begin_before_fill;
 6596|   237k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|   237k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|   475k|    auto check_align = [](wchar_t ch) {
 6546|   475k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 475k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 475k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 475k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   475k|            default:
  ------------------
  |  Branch (6553:13): [True: 475k, False: 0]
  ------------------
 6554|   475k|                return align_type::none;
 6555|   475k|        }
 6556|   475k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6607|   237k|{
 6608|   237k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   237k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   237k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|   237k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 237k, False: 0]
  |  Branch (6610:33): [True: 0, False: 237k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|   237k|    return begin;
 6621|   237k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7137|   237k|    {
 7138|   237k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|   237k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 237k, False: 0]
  ------------------
 7140|   237k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 237k, False: 0]
  ------------------
 7141|   237k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 237k]
  ------------------
 7142|   237k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|   237k|        Handler::on_localized();
 7150|   237k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   829k|{
 8428|   829k|#define SCN_VISIT(Type)                                         \
 8429|   829k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   829k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   829k|    }                                                           \
 8432|   829k|    else {                                                      \
 8433|   829k|        return vis(monostate_val);                              \
 8434|   829k|    }
 8435|       |
 8436|   829k|    monostate monostate_val{};
 8437|       |
 8438|   829k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 829k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 829k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 829k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 829k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 829k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 829k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 829k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 829k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 829k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 829k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 829k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 829k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 829k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 829k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 829k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|   268k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 268k, False: 561k]
  ------------------
 8470|   268k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   268k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   268k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   268k|    }                                                           \
  |  | 8432|   268k|    else {                                                      \
  |  | 8433|   268k|        return vis(monostate_val);                              \
  |  | 8434|   268k|    }
  ------------------
 8471|   547k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 278k, False: 550k]
  ------------------
 8472|   547k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   547k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   547k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   547k|    }                                                           \
  |  | 8432|   547k|    else {                                                      \
  |  | 8433|   547k|        return vis(monostate_val);                              \
  |  | 8434|   547k|    }
  ------------------
 8473|   829k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 282k, False: 547k]
  ------------------
 8474|   829k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   829k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   829k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   829k|    }                                                           \
  |  | 8432|   829k|    else {                                                      \
  |  | 8433|   829k|        return vis(monostate_val);                              \
  |  | 8434|   829k|    }
  ------------------
 8475|   829k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 829k]
  ------------------
 8476|   829k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   829k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   829k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   829k|    }                                                           \
  |  | 8432|   829k|    else {                                                      \
  |  | 8433|   829k|        return vis(monostate_val);                              \
  |  | 8434|   829k|    }
  ------------------
 8477|   829k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 829k]
  ------------------
 8478|   829k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   829k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   829k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   829k|    }                                                           \
  |  | 8432|   829k|    else {                                                      \
  |  | 8433|   829k|        return vis(monostate_val);                              \
  |  | 8434|   829k|    }
  ------------------
 8479|   829k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 829k]
  ------------------
 8480|   829k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   829k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   829k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   829k|    }                                                           \
  |  | 8432|   829k|    else {                                                      \
  |  | 8433|   829k|        return vis(monostate_val);                              \
  |  | 8434|   829k|    }
  ------------------
 8481|   829k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 829k]
  ------------------
 8482|   829k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   829k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   829k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   829k|    }                                                           \
  |  | 8432|   829k|    else {                                                      \
  |  | 8433|   829k|        return vis(monostate_val);                              \
  |  | 8434|   829k|    }
  ------------------
 8483|   829k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 829k]
  ------------------
 8484|   829k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   829k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   829k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   829k|    }                                                           \
  |  | 8432|   829k|    else {                                                      \
  |  | 8433|   829k|        return vis(monostate_val);                              \
  |  | 8434|   829k|    }
  ------------------
 8485|   829k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 829k]
  ------------------
 8486|   829k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   829k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   829k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   829k|    }                                                           \
  |  | 8432|   829k|    else {                                                      \
  |  | 8433|   829k|        return vis(monostate_val);                              \
  |  | 8434|   829k|    }
  ------------------
 8487|       |
 8488|   829k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 829k]
  ------------------
 8489|   829k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   829k|            return vis(
 8491|   829k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 829k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 829k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   829k|            SCN_CLANG_POP
 8506|   829k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4083|  86.5k|    {
 4084|  86.5k|        sync(0);
 4085|  86.5k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|  1.01M|    {
 5476|  1.01M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.01M]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|  1.01M|        return static_cast<std::size_t>(m_desc &
 5481|  1.01M|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|  1.01M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|  2.03M|    {
 5501|  2.03M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  2.03M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|  1.01M|    {
 5444|  1.01M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.01M]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  1.01M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.01M]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|  1.01M|        const auto t = type(id);
 5456|  1.01M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.01M]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|  1.01M|        basic_scan_arg<Context> arg;
 5461|  1.01M|        arg.m_type = t;
 5462|  1.01M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 1.01M, False: 0]
  ------------------
 5463|  1.01M|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  1.01M|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  1.01M|        return arg;
 5469|  1.01M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|  1.01M|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  1.01M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  1.01M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  1.01M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  1.01M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|  1.01M|    {
 5505|  1.01M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  1.01M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|  1.93M|    {
 5257|  1.93M|        return m_type != detail::arg_type::none_type;
 5258|  1.93M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   147k|{
 8428|   147k|#define SCN_VISIT(Type)                                         \
 8429|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   147k|    }                                                           \
 8432|   147k|    else {                                                      \
 8433|   147k|        return vis(monostate_val);                              \
 8434|   147k|    }
 8435|       |
 8436|   147k|    monostate monostate_val{};
 8437|       |
 8438|   147k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 147k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 147k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 147k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 147k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 147k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 147k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 147k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 147k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 147k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 147k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 147k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 147k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 147k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 147k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 147k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|  43.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 43.4k, False: 104k]
  ------------------
 8470|  43.4k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  43.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  43.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  43.4k|    }                                                           \
  |  | 8432|  43.4k|    else {                                                      \
  |  | 8433|  43.4k|        return vis(monostate_val);                              \
  |  | 8434|  43.4k|    }
  ------------------
 8471|  95.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 51.5k, False: 96.3k]
  ------------------
 8472|  95.0k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  95.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  95.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  95.0k|    }                                                           \
  |  | 8432|  95.0k|    else {                                                      \
  |  | 8433|  95.0k|        return vis(monostate_val);                              \
  |  | 8434|  95.0k|    }
  ------------------
 8473|   147k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 52.8k, False: 95.0k]
  ------------------
 8474|   147k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   147k|    }                                                           \
  |  | 8432|   147k|    else {                                                      \
  |  | 8433|   147k|        return vis(monostate_val);                              \
  |  | 8434|   147k|    }
  ------------------
 8475|   147k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 147k]
  ------------------
 8476|   147k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   147k|    }                                                           \
  |  | 8432|   147k|    else {                                                      \
  |  | 8433|   147k|        return vis(monostate_val);                              \
  |  | 8434|   147k|    }
  ------------------
 8477|   147k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 147k]
  ------------------
 8478|   147k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   147k|    }                                                           \
  |  | 8432|   147k|    else {                                                      \
  |  | 8433|   147k|        return vis(monostate_val);                              \
  |  | 8434|   147k|    }
  ------------------
 8479|   147k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 147k]
  ------------------
 8480|   147k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   147k|    }                                                           \
  |  | 8432|   147k|    else {                                                      \
  |  | 8433|   147k|        return vis(monostate_val);                              \
  |  | 8434|   147k|    }
  ------------------
 8481|   147k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 147k]
  ------------------
 8482|   147k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   147k|    }                                                           \
  |  | 8432|   147k|    else {                                                      \
  |  | 8433|   147k|        return vis(monostate_val);                              \
  |  | 8434|   147k|    }
  ------------------
 8483|   147k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 147k]
  ------------------
 8484|   147k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   147k|    }                                                           \
  |  | 8432|   147k|    else {                                                      \
  |  | 8433|   147k|        return vis(monostate_val);                              \
  |  | 8434|   147k|    }
  ------------------
 8485|   147k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 147k]
  ------------------
 8486|   147k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   147k|    }                                                           \
  |  | 8432|   147k|    else {                                                      \
  |  | 8433|   147k|        return vis(monostate_val);                              \
  |  | 8434|   147k|    }
  ------------------
 8487|       |
 8488|   147k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 147k]
  ------------------
 8489|   147k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   147k|            return vis(
 8491|   147k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 147k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 147k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   147k|            SCN_CLANG_POP
 8506|   147k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|   818k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   818k|    {
 5555|   818k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   409k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   409k|    static_cast<    \
  |  |  929|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   409k|    {
 8149|   409k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8065|   818k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   818k|    static_cast<    \
  |  |  929|   818k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   818k|    static_cast<    \
  |  |  929|   818k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   818k|    {
 8067|   818k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   409k|{
 7055|   409k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   409k|    handler.check_args_exhausted();
 7057|   409k|    return handler.get_error();
 7058|   409k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   409k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   409k|    auto begin = format.data();
 7024|   409k|    auto it = begin;
 7025|   409k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   685k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 409k, False: 276k]
  ------------------
 7028|   409k|        const auto ch = *it++;
 7029|   409k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 409k, False: 0]
  ------------------
 7030|   409k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   409k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   409k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 133k, False: 276k]
  ------------------
 7034|   133k|                return;
 7035|   133k|            }
 7036|   409k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   409k|    }
 7047|       |
 7048|   276k|    handler.on_literal_text(begin, end);
 7049|   276k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6952|   409k|{
 6953|   409k|    struct id_adapter {
 6954|   409k|        constexpr void operator()()
 6955|   409k|        {
 6956|   409k|            arg_id = handler.on_arg_id();
 6957|   409k|        }
 6958|   409k|        constexpr void operator()(std::size_t id)
 6959|   409k|        {
 6960|   409k|            arg_id = handler.on_arg_id(id);
 6961|   409k|        }
 6962|       |
 6963|   409k|        constexpr void on_error(const char* msg)
 6964|   409k|        {
 6965|   409k|            SCN_UNLIKELY_ATTR
 6966|   409k|            handler.on_error(msg);
 6967|   409k|        }
 6968|       |
 6969|   409k|        Handler& handler;
 6970|   409k|        std::size_t arg_id;
 6971|   409k|    };
 6972|       |
 6973|   409k|    ++begin;
 6974|   409k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   409k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 409k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   409k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 409k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   409k|    else {
 6986|   409k|        auto adapter = id_adapter{handler, 0};
 6987|   409k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   409k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   409k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 409k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   409k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 409k, False: 0]
  ------------------
 6998|   409k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   409k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   409k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   818k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 409k]
  |  |  |  Branch (859:45): [True: 0, False: 409k]
  |  |  |  Branch (859:45): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 7004|      0|                handler.on_error("Unknown format specifier");
 7005|      0|                return begin;
 7006|      0|            }
 7007|   409k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   409k|    }
 7014|   409k|    return begin + 1;
 7015|   409k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8049|   818k|    {
 8050|   818k|        return m_args.get(id);
 8051|   818k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8059|   818k|    {
 8060|   818k|        return m_locale;
 8061|   818k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|   818k|    {
 5576|   818k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   818k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 818k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   818k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   818k|        do_check_arg_id(id);
 5584|   818k|        return id;
 5585|   818k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|   818k|{
 6064|   818k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   818k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   818k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   409k|{
 6454|   409k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   409k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   409k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   409k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 409k, False: 0]
  |  Branch (6455:26): [True: 0, False: 409k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   409k|    handler();
 6460|   409k|    return begin;
 6461|   409k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   409k|        {
 6956|   409k|            arg_id = handler.on_arg_id();
 6957|   409k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|  1.63M|    {
 5262|  1.63M|        return m_type;
 5263|  1.63M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|   818k|    {
 5571|   818k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   818k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4352|   556k|{
 4353|   556k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 556k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   556k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   556k|                            ranges::default_sentinel};
 4359|   556k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4183|   556k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   556k|    {
 4185|   556k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   556k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   556k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   556k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   556k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   556k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   556k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|  1.63M|    {
 5560|  1.63M|        return m_format.data();
 5561|  1.63M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   409k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   409k|    {
 7133|   409k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   409k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   409k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   409k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6868|   409k|{
 6869|   409k|    auto do_presentation = [&]() -> const CharT* {
 6870|   409k|        if (*begin == CharT{'['}) {
 6871|   409k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   409k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   409k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   409k|                return begin;
 6877|   409k|            }
 6878|   409k|            handler.on_character_set_string(set);
 6879|   409k|            return begin;
 6880|   409k|        }
 6881|   409k|        if (*begin == CharT{'/'}) {
 6882|   409k|            return parse_presentation_regex(begin, end, handler);
 6883|   409k|        }
 6884|   409k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   409k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   409k|            handler.on_error("Invalid type specifier in format string");
 6887|   409k|            return begin;
 6888|   409k|        }
 6889|   409k|        handler.on_type(type);
 6890|   409k|        return begin;
 6891|   409k|    };
 6892|       |
 6893|   409k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 409k, False: 0]
  |  Branch (6893:28): [True: 409k, False: 0]
  ------------------
 6894|   409k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 409k, False: 0]
  |  Branch (6894:36): [True: 310k, False: 98.6k]
  ------------------
 6895|   310k|        return do_presentation();
 6896|   310k|    }
 6897|       |
 6898|  98.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.6k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  98.6k|    begin = parse_align(begin, end, handler);
 6904|  98.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.6k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  98.6k|    begin = parse_width(begin, end, handler);
 6910|  98.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.6k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  98.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 98.6k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  98.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 98.6k, False: 0]
  ------------------
 6929|  98.6k|        handler.on_localized();
 6930|  98.6k|        ++begin;
 6931|  98.6k|    }
 6932|  98.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.6k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  98.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 98.6k, False: 0]
  |  Branch (6937:25): [True: 0, False: 98.6k]
  ------------------
 6938|      0|        do_presentation();
 6939|      0|    }
 6940|  98.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.6k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  98.6k|    return begin;
 6946|  98.6k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6517|   818k|{
 6518|   818k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 621k, False: 197k]
  |  Branch (6518:33): [True: 621k, False: 0]
  ------------------
 6519|   818k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 197k, False: 0]
  |  Branch (6519:33): [True: 197k, False: 0]
  ------------------
 6520|   818k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   310k|    auto do_presentation = [&]() -> const CharT* {
 6870|   310k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 310k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   310k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 310k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   310k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   310k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 310k]
  |  |  ------------------
  ------------------
 6886|      0|            handler.on_error("Invalid type specifier in format string");
 6887|      0|            return begin;
 6888|      0|        }
 6889|   310k|        handler.on_type(type);
 6890|   310k|        return begin;
 6891|   310k|    };
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6465|   621k|{
 6466|   621k|    switch (type) {
 6467|      0|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 0, False: 621k]
  ------------------
 6468|      0|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 0, False: 621k]
  ------------------
 6469|      0|            return presentation_type::int_binary;
 6470|      0|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 0, False: 621k]
  ------------------
 6471|      0|            return presentation_type::int_decimal;
 6472|      0|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 0, False: 621k]
  ------------------
 6473|      0|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 621k]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|      0|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 0, False: 621k]
  ------------------
 6477|      0|            return presentation_type::int_octal;
 6478|      0|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 0, False: 621k]
  ------------------
 6479|      0|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 621k]
  ------------------
 6480|      0|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 621k]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 621k]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|   214k|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 214k, False: 406k]
  ------------------
 6485|   214k|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 621k]
  ------------------
 6486|   214k|            return presentation_type::float_hex;
 6487|  54.5k|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 54.5k, False: 566k]
  ------------------
 6488|  54.5k|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 621k]
  ------------------
 6489|  54.5k|            return presentation_type::float_scientific;
 6490|   162k|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 162k, False: 458k]
  ------------------
 6491|   162k|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 621k]
  ------------------
 6492|   162k|            return presentation_type::float_fixed;
 6493|   189k|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 189k, False: 431k]
  ------------------
 6494|   189k|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 621k]
  ------------------
 6495|   189k|            return presentation_type::float_general;
 6496|      0|        case 's':
  ------------------
  |  Branch (6496:9): [True: 0, False: 621k]
  ------------------
 6497|      0|            return presentation_type::string;
 6498|      0|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 0, False: 621k]
  ------------------
 6499|      0|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 621k]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 621k]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 621k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 621k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|      0|        default:
  ------------------
  |  Branch (6510:9): [True: 0, False: 621k]
  ------------------
 6511|      0|            return presentation_type::none;
 6512|   621k|    }
 6513|   621k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6542|  98.6k|{
 6543|  98.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  98.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  98.6k|    auto check_align = [](wchar_t ch) {
 6546|  98.6k|        switch (ch) {
 6547|  98.6k|            case L'<':
 6548|  98.6k|                return align_type::left;
 6549|  98.6k|            case L'>':
 6550|  98.6k|                return align_type::right;
 6551|  98.6k|            case L'^':
 6552|  98.6k|                return align_type::center;
 6553|  98.6k|            default:
 6554|  98.6k|                return align_type::none;
 6555|  98.6k|        }
 6556|  98.6k|    };
 6557|       |
 6558|  98.6k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  98.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.6k]
  |  |  |  Branch (859:45): [True: 0, False: 98.6k]
  |  |  |  Branch (859:45): [True: 0, False: 98.6k]
  |  |  ------------------
  ------------------
 6560|  98.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  98.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  98.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  98.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  98.6k|    const auto begin_before_fill = begin;
 6570|  98.6k|    begin += potential_fill_len;
 6571|       |
 6572|  98.6k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 98.6k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  98.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  98.6k|    const auto begin_after_fill = begin;
 6578|  98.6k|    ++begin;
 6579|       |
 6580|  98.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 98.6k, False: 0]
  ------------------
 6581|  98.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  98.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.6k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  98.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 98.6k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  98.6k|    }
 6589|       |
 6590|  98.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 98.6k, False: 0]
  ------------------
 6591|  98.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 98.6k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  98.6k|        return begin_before_fill;
 6596|  98.6k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  98.6k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6524|   197k|{
 6525|   197k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   197k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   197k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|   197k|    if constexpr (sizeof(CharT) != 1) {
 6527|   197k|        return 1;
 6528|       |    }
 6529|       |    else {
 6530|       |        const auto lengths =
 6531|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|       |            "\3\4";
 6533|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|       |        return len;
 6535|       |    }
 6536|   197k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|   197k|    auto check_align = [](wchar_t ch) {
 6546|   197k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 197k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 197k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 197k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   197k|            default:
  ------------------
  |  Branch (6553:13): [True: 197k, False: 0]
  ------------------
 6554|   197k|                return align_type::none;
 6555|   197k|        }
 6556|   197k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6607|  98.6k|{
 6608|  98.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  98.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  98.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 98.6k, False: 0]
  |  Branch (6610:33): [True: 0, False: 98.6k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  98.6k|    return begin;
 6621|  98.6k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7137|  98.6k|    {
 7138|  98.6k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  98.6k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 98.6k, False: 0]
  ------------------
 7140|  98.6k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 98.6k, False: 0]
  ------------------
 7141|  98.6k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 98.6k]
  ------------------
 7142|  98.6k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  98.6k|        Handler::on_localized();
 7150|  98.6k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   409k|{
 8428|   409k|#define SCN_VISIT(Type)                                         \
 8429|   409k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   409k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   409k|    }                                                           \
 8432|   409k|    else {                                                      \
 8433|   409k|        return vis(monostate_val);                              \
 8434|   409k|    }
 8435|       |
 8436|   409k|    monostate monostate_val{};
 8437|       |
 8438|   409k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 409k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 409k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 409k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 409k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 409k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 409k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 409k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 409k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 409k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 409k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 409k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 409k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 409k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 409k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 409k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|   128k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 128k, False: 280k]
  ------------------
 8470|   128k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   128k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   128k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   128k|    }                                                           \
  |  | 8432|   128k|    else {                                                      \
  |  | 8433|   128k|        return vis(monostate_val);                              \
  |  | 8434|   128k|    }
  ------------------
 8471|   268k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 139k, False: 269k]
  ------------------
 8472|   268k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   268k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   268k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   268k|    }                                                           \
  |  | 8432|   268k|    else {                                                      \
  |  | 8433|   268k|        return vis(monostate_val);                              \
  |  | 8434|   268k|    }
  ------------------
 8473|   409k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 141k, False: 268k]
  ------------------
 8474|   409k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   409k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   409k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   409k|    }                                                           \
  |  | 8432|   409k|    else {                                                      \
  |  | 8433|   409k|        return vis(monostate_val);                              \
  |  | 8434|   409k|    }
  ------------------
 8475|   409k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 409k]
  ------------------
 8476|   409k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   409k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   409k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   409k|    }                                                           \
  |  | 8432|   409k|    else {                                                      \
  |  | 8433|   409k|        return vis(monostate_val);                              \
  |  | 8434|   409k|    }
  ------------------
 8477|   409k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 409k]
  ------------------
 8478|   409k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   409k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   409k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   409k|    }                                                           \
  |  | 8432|   409k|    else {                                                      \
  |  | 8433|   409k|        return vis(monostate_val);                              \
  |  | 8434|   409k|    }
  ------------------
 8479|   409k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 409k]
  ------------------
 8480|   409k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   409k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   409k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   409k|    }                                                           \
  |  | 8432|   409k|    else {                                                      \
  |  | 8433|   409k|        return vis(monostate_val);                              \
  |  | 8434|   409k|    }
  ------------------
 8481|   409k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 409k]
  ------------------
 8482|   409k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   409k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   409k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   409k|    }                                                           \
  |  | 8432|   409k|    else {                                                      \
  |  | 8433|   409k|        return vis(monostate_val);                              \
  |  | 8434|   409k|    }
  ------------------
 8483|   409k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 409k]
  ------------------
 8484|   409k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   409k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   409k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   409k|    }                                                           \
  |  | 8432|   409k|    else {                                                      \
  |  | 8433|   409k|        return vis(monostate_val);                              \
  |  | 8434|   409k|    }
  ------------------
 8485|   409k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 409k]
  ------------------
 8486|   409k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   409k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   409k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   409k|    }                                                           \
  |  | 8432|   409k|    else {                                                      \
  |  | 8433|   409k|        return vis(monostate_val);                              \
  |  | 8434|   409k|    }
  ------------------
 8487|       |
 8488|   409k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 409k]
  ------------------
 8489|   409k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   409k|            return vis(
 8491|   409k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 409k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 409k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   409k|            SCN_CLANG_POP
 8506|   409k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   147k|{
 8428|   147k|#define SCN_VISIT(Type)                                         \
 8429|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   147k|    }                                                           \
 8432|   147k|    else {                                                      \
 8433|   147k|        return vis(monostate_val);                              \
 8434|   147k|    }
 8435|       |
 8436|   147k|    monostate monostate_val{};
 8437|       |
 8438|   147k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 147k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 147k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 147k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 147k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 147k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 147k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 147k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 147k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 147k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 147k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 147k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 147k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 147k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 147k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 147k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|  43.4k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 43.4k, False: 104k]
  ------------------
 8470|  43.4k|            SCN_VISIT(float);
  ------------------
  |  | 8429|  43.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  43.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  43.4k|    }                                                           \
  |  | 8432|  43.4k|    else {                                                      \
  |  | 8433|  43.4k|        return vis(monostate_val);                              \
  |  | 8434|  43.4k|    }
  ------------------
 8471|  94.9k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 51.5k, False: 96.2k]
  ------------------
 8472|  94.9k|            SCN_VISIT(double);
  ------------------
  |  | 8429|  94.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  94.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  94.9k|    }                                                           \
  |  | 8432|  94.9k|    else {                                                      \
  |  | 8433|  94.9k|        return vis(monostate_val);                              \
  |  | 8434|  94.9k|    }
  ------------------
 8473|   147k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 52.8k, False: 94.9k]
  ------------------
 8474|   147k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   147k|    }                                                           \
  |  | 8432|   147k|    else {                                                      \
  |  | 8433|   147k|        return vis(monostate_val);                              \
  |  | 8434|   147k|    }
  ------------------
 8475|   147k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 147k]
  ------------------
 8476|   147k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   147k|    }                                                           \
  |  | 8432|   147k|    else {                                                      \
  |  | 8433|   147k|        return vis(monostate_val);                              \
  |  | 8434|   147k|    }
  ------------------
 8477|   147k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 147k]
  ------------------
 8478|   147k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   147k|    }                                                           \
  |  | 8432|   147k|    else {                                                      \
  |  | 8433|   147k|        return vis(monostate_val);                              \
  |  | 8434|   147k|    }
  ------------------
 8479|   147k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 147k]
  ------------------
 8480|   147k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   147k|    }                                                           \
  |  | 8432|   147k|    else {                                                      \
  |  | 8433|   147k|        return vis(monostate_val);                              \
  |  | 8434|   147k|    }
  ------------------
 8481|   147k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 147k]
  ------------------
 8482|   147k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   147k|    }                                                           \
  |  | 8432|   147k|    else {                                                      \
  |  | 8433|   147k|        return vis(monostate_val);                              \
  |  | 8434|   147k|    }
  ------------------
 8483|   147k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 147k]
  ------------------
 8484|   147k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   147k|    }                                                           \
  |  | 8432|   147k|    else {                                                      \
  |  | 8433|   147k|        return vis(monostate_val);                              \
  |  | 8434|   147k|    }
  ------------------
 8485|   147k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 147k]
  ------------------
 8486|   147k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   147k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   147k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   147k|    }                                                           \
  |  | 8432|   147k|    else {                                                      \
  |  | 8433|   147k|        return vis(monostate_val);                              \
  |  | 8434|   147k|    }
  ------------------
 8487|       |
 8488|   147k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 147k]
  ------------------
 8489|   147k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   147k|            return vis(
 8491|   147k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 147k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 147k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   147k|            SCN_CLANG_POP
 8506|   147k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   409k|{
 7055|   409k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   409k|    handler.check_args_exhausted();
 7057|   409k|    return handler.get_error();
 7058|   409k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   409k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   409k|    auto begin = format.data();
 7024|   409k|    auto it = begin;
 7025|   409k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   684k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 409k, False: 275k]
  ------------------
 7028|   409k|        const auto ch = *it++;
 7029|   409k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 409k, False: 0]
  ------------------
 7030|   409k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   409k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   409k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 133k, False: 275k]
  ------------------
 7034|   133k|                return;
 7035|   133k|            }
 7036|   409k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   409k|    }
 7047|       |
 7048|   275k|    handler.on_literal_text(begin, end);
 7049|   275k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8185|   275k|    {
 8186|   275k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   275k|    static_cast<    \
  |  |  929|   275k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|   275k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6952|   409k|{
 6953|   409k|    struct id_adapter {
 6954|   409k|        constexpr void operator()()
 6955|   409k|        {
 6956|   409k|            arg_id = handler.on_arg_id();
 6957|   409k|        }
 6958|   409k|        constexpr void operator()(std::size_t id)
 6959|   409k|        {
 6960|   409k|            arg_id = handler.on_arg_id(id);
 6961|   409k|        }
 6962|       |
 6963|   409k|        constexpr void on_error(const char* msg)
 6964|   409k|        {
 6965|   409k|            SCN_UNLIKELY_ATTR
 6966|   409k|            handler.on_error(msg);
 6967|   409k|        }
 6968|       |
 6969|   409k|        Handler& handler;
 6970|   409k|        std::size_t arg_id;
 6971|   409k|    };
 6972|       |
 6973|   409k|    ++begin;
 6974|   409k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   409k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 409k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   409k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 409k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   409k|    else {
 6986|   409k|        auto adapter = id_adapter{handler, 0};
 6987|   409k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   409k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   409k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 409k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   409k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 409k, False: 0]
  ------------------
 6998|   409k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   409k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   409k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   818k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 409k]
  |  |  |  Branch (859:45): [True: 0, False: 409k]
  |  |  |  Branch (859:45): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 7004|      0|                handler.on_error("Unknown format specifier");
 7005|      0|                return begin;
 7006|      0|            }
 7007|   409k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   409k|    }
 7014|   409k|    return begin + 1;
 7015|   409k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   409k|{
 6454|   409k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   409k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   409k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   409k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 409k, False: 0]
  |  Branch (6455:26): [True: 0, False: 409k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   409k|    handler();
 6460|   409k|    return begin;
 6461|   409k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   409k|        {
 6956|   409k|            arg_id = handler.on_arg_id();
 6957|   409k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   409k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   409k|    {
 7133|   409k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   409k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   409k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   409k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6868|   409k|{
 6869|   409k|    auto do_presentation = [&]() -> const CharT* {
 6870|   409k|        if (*begin == CharT{'['}) {
 6871|   409k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   409k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   409k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   409k|                return begin;
 6877|   409k|            }
 6878|   409k|            handler.on_character_set_string(set);
 6879|   409k|            return begin;
 6880|   409k|        }
 6881|   409k|        if (*begin == CharT{'/'}) {
 6882|   409k|            return parse_presentation_regex(begin, end, handler);
 6883|   409k|        }
 6884|   409k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   409k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   409k|            handler.on_error("Invalid type specifier in format string");
 6887|   409k|            return begin;
 6888|   409k|        }
 6889|   409k|        handler.on_type(type);
 6890|   409k|        return begin;
 6891|   409k|    };
 6892|       |
 6893|   409k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 409k, False: 0]
  |  Branch (6893:28): [True: 409k, False: 0]
  ------------------
 6894|   409k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 409k, False: 0]
  |  Branch (6894:36): [True: 310k, False: 98.5k]
  ------------------
 6895|   310k|        return do_presentation();
 6896|   310k|    }
 6897|       |
 6898|  98.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.5k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  98.5k|    begin = parse_align(begin, end, handler);
 6904|  98.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.5k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  98.5k|    begin = parse_width(begin, end, handler);
 6910|  98.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.5k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  98.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 98.5k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  98.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 98.5k, False: 0]
  ------------------
 6929|  98.5k|        handler.on_localized();
 6930|  98.5k|        ++begin;
 6931|  98.5k|    }
 6932|  98.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.5k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  98.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 98.5k, False: 0]
  |  Branch (6937:25): [True: 0, False: 98.5k]
  ------------------
 6938|      0|        do_presentation();
 6939|      0|    }
 6940|  98.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.5k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  98.5k|    return begin;
 6946|  98.5k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   310k|    auto do_presentation = [&]() -> const CharT* {
 6870|   310k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 310k]
  ------------------
 6871|      0|            auto set = parse_presentation_set(begin, end, handler);
 6872|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|      0|            handler.on_character_set_string(set);
 6879|      0|            return begin;
 6880|      0|        }
 6881|   310k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 310k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   310k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   310k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 310k]
  |  |  ------------------
  ------------------
 6886|      0|            handler.on_error("Invalid type specifier in format string");
 6887|      0|            return begin;
 6888|      0|        }
 6889|   310k|        handler.on_type(type);
 6890|   310k|        return begin;
 6891|   310k|    };
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6542|  98.5k|{
 6543|  98.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  98.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  98.5k|    auto check_align = [](wchar_t ch) {
 6546|  98.5k|        switch (ch) {
 6547|  98.5k|            case L'<':
 6548|  98.5k|                return align_type::left;
 6549|  98.5k|            case L'>':
 6550|  98.5k|                return align_type::right;
 6551|  98.5k|            case L'^':
 6552|  98.5k|                return align_type::center;
 6553|  98.5k|            default:
 6554|  98.5k|                return align_type::none;
 6555|  98.5k|        }
 6556|  98.5k|    };
 6557|       |
 6558|  98.5k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  98.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.5k]
  |  |  |  Branch (859:45): [True: 0, False: 98.5k]
  |  |  |  Branch (859:45): [True: 0, False: 98.5k]
  |  |  ------------------
  ------------------
 6560|  98.5k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  98.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  98.5k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  98.5k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  98.5k|    const auto begin_before_fill = begin;
 6570|  98.5k|    begin += potential_fill_len;
 6571|       |
 6572|  98.5k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 98.5k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  98.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  98.5k|    const auto begin_after_fill = begin;
 6578|  98.5k|    ++begin;
 6579|       |
 6580|  98.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 98.5k, False: 0]
  ------------------
 6581|  98.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  98.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98.5k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  98.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 0, False: 98.5k]
  ------------------
 6586|      0|            return begin_before_fill;
 6587|      0|        }
 6588|  98.5k|    }
 6589|       |
 6590|  98.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 98.5k, False: 0]
  ------------------
 6591|  98.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 98.5k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  98.5k|        return begin_before_fill;
 6596|  98.5k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  98.5k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|   197k|    auto check_align = [](wchar_t ch) {
 6546|   197k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 197k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 197k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 197k]
  ------------------
 6552|      0|                return align_type::center;
 6553|   197k|            default:
  ------------------
  |  Branch (6553:13): [True: 197k, False: 0]
  ------------------
 6554|   197k|                return align_type::none;
 6555|   197k|        }
 6556|   197k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6607|  98.5k|{
 6608|  98.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  98.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  98.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  98.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 98.5k, False: 0]
  |  Branch (6610:33): [True: 0, False: 98.5k]
  ------------------
 6611|      0|        int width = parse_simple_int(begin, end);
 6612|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6613|      0|            handler.on_width(width);
 6614|      0|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|      0|    }
 6620|  98.5k|    return begin;
 6621|  98.5k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7137|  98.5k|    {
 7138|  98.5k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  98.5k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 98.5k, False: 0]
  ------------------
 7140|  98.5k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 98.5k, False: 0]
  ------------------
 7141|  98.5k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 0, False: 98.5k]
  ------------------
 7142|  98.5k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 0, False: 0]
  ------------------
 7143|      0|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|      0|        }
 7148|       |
 7149|  98.5k|        Handler::on_localized();
 7150|  98.5k|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   409k|{
 8428|   409k|#define SCN_VISIT(Type)                                         \
 8429|   409k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   409k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   409k|    }                                                           \
 8432|   409k|    else {                                                      \
 8433|   409k|        return vis(monostate_val);                              \
 8434|   409k|    }
 8435|       |
 8436|   409k|    monostate monostate_val{};
 8437|       |
 8438|   409k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 409k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 409k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 409k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 409k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 409k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 409k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 409k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 409k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 409k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 409k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 409k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 409k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 409k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 409k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 409k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|   128k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 128k, False: 280k]
  ------------------
 8470|   128k|            SCN_VISIT(float);
  ------------------
  |  | 8429|   128k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   128k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   128k|    }                                                           \
  |  | 8432|   128k|    else {                                                      \
  |  | 8433|   128k|        return vis(monostate_val);                              \
  |  | 8434|   128k|    }
  ------------------
 8471|   267k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 139k, False: 269k]
  ------------------
 8472|   267k|            SCN_VISIT(double);
  ------------------
  |  | 8429|   267k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   267k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   267k|    }                                                           \
  |  | 8432|   267k|    else {                                                      \
  |  | 8433|   267k|        return vis(monostate_val);                              \
  |  | 8434|   267k|    }
  ------------------
 8473|   409k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 141k, False: 267k]
  ------------------
 8474|   409k|            SCN_VISIT(long double);
  ------------------
  |  | 8429|   409k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   409k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   409k|    }                                                           \
  |  | 8432|   409k|    else {                                                      \
  |  | 8433|   409k|        return vis(monostate_val);                              \
  |  | 8434|   409k|    }
  ------------------
 8475|   409k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 409k]
  ------------------
 8476|   409k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|   409k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   409k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   409k|    }                                                           \
  |  | 8432|   409k|    else {                                                      \
  |  | 8433|   409k|        return vis(monostate_val);                              \
  |  | 8434|   409k|    }
  ------------------
 8477|   409k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 409k]
  ------------------
 8478|   409k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   409k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   409k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   409k|    }                                                           \
  |  | 8432|   409k|    else {                                                      \
  |  | 8433|   409k|        return vis(monostate_val);                              \
  |  | 8434|   409k|    }
  ------------------
 8479|   409k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 409k]
  ------------------
 8480|   409k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   409k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   409k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   409k|    }                                                           \
  |  | 8432|   409k|    else {                                                      \
  |  | 8433|   409k|        return vis(monostate_val);                              \
  |  | 8434|   409k|    }
  ------------------
 8481|   409k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 409k]
  ------------------
 8482|   409k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   409k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   409k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   409k|    }                                                           \
  |  | 8432|   409k|    else {                                                      \
  |  | 8433|   409k|        return vis(monostate_val);                              \
  |  | 8434|   409k|    }
  ------------------
 8483|   409k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 409k]
  ------------------
 8484|   409k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   409k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   409k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   409k|    }                                                           \
  |  | 8432|   409k|    else {                                                      \
  |  | 8433|   409k|        return vis(monostate_val);                              \
  |  | 8434|   409k|    }
  ------------------
 8485|   409k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 409k]
  ------------------
 8486|   409k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   409k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   409k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   409k|    }                                                           \
  |  | 8432|   409k|    else {                                                      \
  |  | 8433|   409k|        return vis(monostate_val);                              \
  |  | 8434|   409k|    }
  ------------------
 8487|       |
 8488|   409k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 409k]
  ------------------
 8489|   409k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   409k|            return vis(
 8491|   409k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 409k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 409k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   409k|            SCN_CLANG_POP
 8506|   409k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4083|   173k|    {
 4084|   173k|        sync(0);
 4085|   173k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5429|   208k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5429|  98.5k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  78.8k|{
   89|  78.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  78.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  78.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  78.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.8k|    static_cast<    \
  |  |  929|  78.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.8k|    static_cast<    \
  |  |  929|  78.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  78.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   253k|{
   44|   253k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   253k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  78.8k|{
  127|  78.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  78.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  78.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  78.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.8k|    static_cast<    \
  |  |  929|  78.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.8k|    static_cast<    \
  |  |  929|  78.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  78.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   253k|{
   60|   253k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   253k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  14.4k|{
  163|  14.4k|    T value;
  164|  14.4k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  14.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.43k, False: 10.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.43k|    }                                                  \
  |  |  |  | 3667|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  10.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  10.0k|    static_cast<    \
  |  |  929|  10.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  10.0k|    static_cast<    \
  |  |  929|  10.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  14.4k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  49.3k|{
   72|  49.3k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  49.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  49.3k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  86.8k|{
   89|  86.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  86.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  86.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  86.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  86.8k|    static_cast<    \
  |  |  929|  86.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  86.8k|    static_cast<    \
  |  |  929|  86.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  86.8k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  86.8k|{
  127|  86.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  86.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  86.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  86.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  86.8k|    static_cast<    \
  |  |  929|  86.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  86.8k|    static_cast<    \
  |  |  929|  86.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  86.8k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  17.1k|{
  163|  17.1k|    T value;
  164|  17.1k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  17.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  17.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.43k, False: 12.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.43k|    }                                                  \
  |  |  |  | 3667|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  12.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.7k|    static_cast<    \
  |  |  929|  12.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.7k|    static_cast<    \
  |  |  929|  12.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  17.1k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  88.2k|{
   89|  88.2k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  88.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  88.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  88.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  88.2k|    static_cast<    \
  |  |  929|  88.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  88.2k|    static_cast<    \
  |  |  929|  88.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  88.2k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  126|  88.2k|{
  127|  88.2k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  88.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  88.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  88.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  88.2k|    static_cast<    \
  |  |  929|  88.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  88.2k|    static_cast<    \
  |  |  929|  88.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  88.2k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  162|  17.6k|{
  163|  17.6k|    T value;
  164|  17.6k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  17.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.43k, False: 13.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.43k|    }                                                  \
  |  |  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  13.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  13.1k|    static_cast<    \
  |  |  929|  13.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  13.1k|    static_cast<    \
  |  |  929|  13.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  17.6k|}
_ZN3scn2v34scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  78.7k|{
   89|  78.7k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  78.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  78.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  78.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.7k|    static_cast<    \
  |  |  929|  78.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.7k|    static_cast<    \
  |  |  929|  78.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  78.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   253k|{
   44|   253k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   253k|}
_ZN3scn2v34scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  78.7k|{
  127|  78.7k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  78.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  78.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  78.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.7k|    static_cast<    \
  |  |  929|  78.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.7k|    static_cast<    \
  |  |  929|  78.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  78.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   253k|{
   60|   253k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   253k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   253k|}
_ZN3scn2v310scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  14.4k|{
  163|  14.4k|    T value;
  164|  14.4k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  14.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  14.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.43k, False: 10.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.43k|    }                                                  \
  |  |  |  | 3667|  14.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  10.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  10.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  10.0k|    static_cast<    \
  |  |  929|  10.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  10.0k|    static_cast<    \
  |  |  929|  10.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  14.4k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  49.2k|{
   72|  49.2k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  49.2k|}
_ZN3scn2v34scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  86.8k|{
   89|  86.8k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  86.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  86.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  86.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  86.8k|    static_cast<    \
  |  |  929|  86.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  86.8k|    static_cast<    \
  |  |  929|  86.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  86.8k|}
_ZN3scn2v34scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  86.8k|{
  127|  86.8k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  86.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  86.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  86.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  86.8k|    static_cast<    \
  |  |  929|  86.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  86.8k|    static_cast<    \
  |  |  929|  86.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  86.8k|}
_ZN3scn2v310scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  17.1k|{
  163|  17.1k|    T value;
  164|  17.1k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  17.1k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  17.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.43k, False: 12.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.43k|    }                                                  \
  |  |  |  | 3667|  17.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  12.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  12.7k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.7k|    static_cast<    \
  |  |  929|  12.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  12.7k|    static_cast<    \
  |  |  929|  12.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  17.1k|}
_ZN3scn2v34scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  88.1k|{
   89|  88.1k|    auto args = make_scan_args<wscan_context, Args...>();
   90|  88.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  88.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  88.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  88.1k|    static_cast<    \
  |  |  929|  88.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  88.1k|    static_cast<    \
  |  |  929|  88.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  88.1k|}
_ZN3scn2v34scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  126|  88.1k|{
  127|  88.1k|    auto args = make_scan_args<wscan_context, Args...>();
  128|  88.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  88.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  88.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  88.1k|    static_cast<    \
  |  |  929|  88.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  88.1k|    static_cast<    \
  |  |  929|  88.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  88.1k|}
_ZN3scn2v310scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  162|  17.6k|{
  163|  17.6k|    T value;
  164|  17.6k|    auto arg = detail::make_arg<wscan_context>(value);
  165|  17.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  17.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  17.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  17.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  17.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.43k, False: 13.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.43k|    }                                                  \
  |  |  |  | 3667|  17.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  13.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  13.1k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  13.1k|    static_cast<    \
  |  |  929|  13.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  13.1k|    static_cast<    \
  |  |  929|  13.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  17.6k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  1.48M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  653|  1.48M|{
  654|  1.48M|    static_assert(std::is_same_v<Locale, std::locale>);
  655|  1.48M|}
_ZNK3scn2v36detail10locale_ref3getINSt3__16localeEEET_v:
  659|   625k|{
  660|   625k|    static_assert(std::is_same_v<Locale, std::locale>);
  661|   625k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (661:12): [True: 312k, False: 312k]
  ------------------
  662|   625k|                    : std::locale{};
  663|   625k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1221|   657k|{
 1222|   657k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1223|   657k|                                  m_nan_payload_buffer, value);
 1224|   657k|    value = this->setsign(value);
 1225|   657k|    return n;
 1226|   657k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1221|   261k|{
 1222|   261k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1223|   261k|                                  m_nan_payload_buffer, value);
 1224|   261k|    value = this->setsign(value);
 1225|   261k|    return n;
 1226|   261k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1221|   681k|{
 1222|   681k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1223|   681k|                                  m_nan_payload_buffer, value);
 1224|   681k|    value = this->setsign(value);
 1225|   681k|    return n;
 1226|   681k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1221|   297k|{
 1222|   297k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1223|   297k|                                  m_nan_payload_buffer, value);
 1224|   297k|    value = this->setsign(value);
 1225|   297k|    return n;
 1226|   297k|}
_ZN3scn2v34impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1221|   690k|{
 1222|   690k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1223|   690k|                                  m_nan_payload_buffer, value);
 1224|   690k|    value = this->setsign(value);
 1225|   690k|    return n;
 1226|   690k|}
_ZN3scn2v34impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1221|   302k|{
 1222|   302k|    auto n = dispatch_impl<CharT>({this->m_buffer, m_kind, m_options},
 1223|   302k|                                  m_nan_payload_buffer, value);
 1224|   302k|    value = this->setsign(value);
 1225|   302k|    return n;
 1226|   302k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2184|   453k|{
 2185|   453k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2186|   453k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2192|   523k|{
 2193|   523k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2194|   523k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   523k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 483k, False: 39.9k]
  |  |  ------------------
  ------------------
 2195|   483k|        source.sync(*n);
 2196|   483k|    }
 2197|  39.9k|    else {
 2198|  39.9k|        source.sync_all();
 2199|  39.9k|    }
 2200|   523k|    return n;
 2201|   523k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2208|   253k|{
 2209|   253k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2210|   253k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2216|   253k|{
 2217|   253k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2218|   253k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   253k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 173k, False: 79.8k]
  |  |  ------------------
  ------------------
 2219|   173k|        source.sync(*n);
 2220|   173k|    }
 2221|  79.8k|    else {
 2222|  79.8k|        source.sync_all();
 2223|  79.8k|    }
 2224|   253k|    return n;
 2225|   253k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  194|   910k|{
  195|   910k|    return find_classic_impl(
  196|   910k|        source, [](char ch) { return is_ascii_space(ch); },
  197|   910k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  198|   910k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  202|  2.15M|{
  203|  2.15M|    return find_classic_impl(
  204|  2.15M|        source, [](char ch) { return !is_ascii_space(ch); },
  205|  2.15M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  206|  2.15M|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2141|   453k|{
 2142|   453k|    return vscan_internal(source, format, args);
 2143|   453k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2147|   523k|{
 2148|   523k|    auto n = vscan_internal(source, format, args);
 2149|   523k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   523k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 483k, False: 39.9k]
  |  |  ------------------
  ------------------
 2150|   483k|        source.sync(*n);
 2151|   483k|    }
 2152|  39.9k|    else {
 2153|  39.9k|        source.sync_all();
 2154|  39.9k|    }
 2155|   523k|    return n;
 2156|   523k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2161|   253k|{
 2162|   253k|    return vscan_internal(source, format, args);
 2163|   253k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2167|   253k|{
 2168|   253k|    auto n = vscan_internal(source, format, args);
 2169|   253k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   253k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 173k, False: 79.8k]
  |  |  ------------------
  ------------------
 2170|   173k|        source.sync(*n);
 2171|   173k|    }
 2172|  79.8k|    else {
 2173|  79.8k|        source.sync_all();
 2174|  79.8k|    }
 2175|   253k|    return n;
 2176|   253k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2251|  99.5k|{
 2252|  99.5k|    return vscan_value_internal(source, arg);
 2253|  99.5k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2256|   108k|{
 2257|   108k|    auto n = vscan_value_internal(source, arg);
 2258|   108k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   108k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 101k, False: 6.65k]
  |  |  ------------------
  ------------------
 2259|   101k|        source.sync(*n);
 2260|   101k|    }
 2261|  6.65k|    else {
 2262|  6.65k|        source.sync_all();
 2263|  6.65k|    }
 2264|   108k|    return n;
 2265|   108k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2270|  49.3k|{
 2271|  49.3k|    return vscan_value_internal(source, arg);
 2272|  49.3k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2276|  49.2k|{
 2277|  49.2k|    auto n = vscan_value_internal(source, arg);
 2278|  49.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  49.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 35.9k, False: 13.3k]
  |  |  ------------------
  ------------------
 2279|  35.9k|        source.sync(*n);
 2280|  35.9k|    }
 2281|  13.3k|    else {
 2282|  13.3k|        source.sync_all();
 2283|  13.3k|    }
 2284|  49.2k|    return n;
 2285|  49.2k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  118|   910k|{
  119|   910k|    auto it = source.begin();
  120|       |
  121|  2.99M|    while (it != source.end()) {
  ------------------
  |  Branch (121:12): [True: 2.40M, False: 584k]
  ------------------
  122|  2.40M|        auto sv =
  123|  2.40M|            detail::make_string_view_from_iterators<char>(it, source.end())
  124|  2.40M|                .substr(0, 8);
  125|       |
  126|  2.40M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (126:13): [True: 2.35M, False: 55.0k]
  ------------------
  127|  2.35M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  128|  2.35M|            it = detail::make_string_view_iterator(source, tmp_it);
  129|  2.35M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (129:17): [True: 303k, False: 2.04M]
  ------------------
  130|   303k|                break;
  131|   303k|            }
  132|  2.04M|            continue;
  133|  2.35M|        }
  134|       |
  135|   180k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (135:28): [True: 148k, False: 32.4k]
  ------------------
  136|   148k|            auto tmp =
  137|   148k|                detail::make_string_view_from_iterators<char>(it, source.end());
  138|   148k|            auto res = get_next_code_point(tmp);
  139|   148k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (139:17): [True: 22.5k, False: 125k]
  ------------------
  140|  22.5k|                return it;
  141|  22.5k|            }
  142|   125k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  143|   125k|            it = detail::make_string_view_iterator(source, res.iterator);
  144|   125k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   125k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   125k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  145|   125k|        }
  146|  55.0k|    }
  147|       |
  148|   888k|    return detail::make_string_view_iterator(source, it);
  149|   910k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  105|  3.73M|{
  106|  3.73M|    static_assert(sizeof(*source.data()) == 1);
  107|  3.73M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  3.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  108|  3.73M|    uint64_t word{};
  109|  3.73M|    std::memcpy(&word, source.data(), source.size());
  110|       |
  111|  3.73M|    return has_byte_greater(word, 127) != 0;
  112|  3.73M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  196|  14.3M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  197|   148k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  118|  2.15M|{
  119|  2.15M|    auto it = source.begin();
  120|       |
  121|  2.35M|    while (it != source.end()) {
  ------------------
  |  Branch (121:12): [True: 1.32M, False: 1.02M]
  ------------------
  122|  1.32M|        auto sv =
  123|  1.32M|            detail::make_string_view_from_iterators<char>(it, source.end())
  124|  1.32M|                .substr(0, 8);
  125|       |
  126|  1.32M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (126:13): [True: 1.24M, False: 76.9k]
  ------------------
  127|  1.24M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  128|  1.24M|            it = detail::make_string_view_iterator(source, tmp_it);
  129|  1.24M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (129:17): [True: 1.05M, False: 190k]
  ------------------
  130|  1.05M|                break;
  131|  1.05M|            }
  132|   190k|            continue;
  133|  1.24M|        }
  134|       |
  135|   145k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (135:28): [True: 138k, False: 7.46k]
  ------------------
  136|   138k|            auto tmp =
  137|   138k|                detail::make_string_view_from_iterators<char>(it, source.end());
  138|   138k|            auto res = get_next_code_point(tmp);
  139|   138k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (139:17): [True: 69.4k, False: 68.5k]
  ------------------
  140|  69.4k|                return it;
  141|  69.4k|            }
  142|  68.5k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  143|  68.5k|            it = detail::make_string_view_iterator(source, res.iterator);
  144|  68.5k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  68.5k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  68.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  145|  68.5k|        }
  146|  76.9k|    }
  147|       |
  148|  2.08M|    return detail::make_string_view_iterator(source, it);
  149|  2.15M|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  204|  1.90M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  205|   138k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1138|   657k|{
 1139|   657k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1139:9): [True: 3.53k, False: 653k]
  ------------------
 1140|  3.53k|        value = std::numeric_limits<T>::infinity();
 1141|  3.53k|        return 3;
 1142|  3.53k|    }
 1143|   653k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1143:9): [True: 3.29k, False: 650k]
  ------------------
 1144|  3.29k|        value = std::numeric_limits<T>::infinity();
 1145|  3.29k|        return 8;
 1146|  3.29k|    }
 1147|   650k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1147:9): [True: 29.0k, False: 621k]
  ------------------
 1148|  29.0k|        value = std::numeric_limits<T>::quiet_NaN();
 1149|  29.0k|        return 3;
 1150|  29.0k|    }
 1151|   621k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1151:9): [True: 984, False: 620k]
  ------------------
 1152|    984|        value = std::numeric_limits<T>::quiet_NaN();
 1153|       |
 1154|       |        // TODO: use payload
 1155|       |#if 0
 1156|       |                    {
 1157|       |                        auto reader = integer_reader<CharT>{
 1158|       |                            integer_reader_base::only_unsigned, 0};
 1159|       |                        if (auto r = reader.read_source(
 1160|       |                                detail::tag_type<unsigned long long>{},
 1161|       |                                nan_payload.view());
 1162|       |                            SCN_UNLIKELY(!r)) {
 1163|       |                            return unexpected(r.error());
 1164|       |                        }
 1165|       |
 1166|       |                        unsigned long long payload;
 1167|       |                        if (auto r = reader.parse_value(payload);
 1168|       |                            SCN_UNLIKELY(!r)) {
 1169|       |                            return unexpected(r.error());
 1170|       |                        }
 1171|       |
 1172|       |                        constexpr auto mantissa_payload_len =
 1173|       |                            std::numeric_limits<T>::digits - 2;
 1174|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1175|       |
 1176|       |
 1177|       |                    }
 1178|       |#endif
 1179|    984|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|    984|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1180|       |
 1181|    984|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1182|    984|    }
 1183|       |
 1184|   620k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   620k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   620k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1185|   620k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1185:9): [True: 133k, False: 486k]
  ------------------
 1186|   133k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.70k, False: 131k]
  |  |  ------------------
  ------------------
 1187|  2.70k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1188|  2.70k|                                         "Invalid floating-point digit");
 1189|  2.70k|        }
 1190|   133k|    }
 1191|   617k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   617k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.25k, False: 610k]
  |  |  ------------------
  ------------------
 1192|  7.25k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1193|  7.25k|                                     "Invalid floating-point digit");
 1194|  7.25k|    }
 1195|       |
 1196|       |    if constexpr (std::is_same_v<T, long double>) {
 1197|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1198|       |            // If double == long double (true on Windows),
 1199|       |            // use fast_float with double
 1200|       |            double tmp{};
 1201|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1202|       |            value = tmp;
 1203|       |            return ret;
 1204|       |        }
 1205|       |        else {
 1206|       |            // long doubles aren't supported by fast_float ->
 1207|       |            // fall back to from_chars or strtod
 1208|       |            return fast_float_fallback(data, value);
 1209|       |        }
 1210|       |    }
 1211|   610k|    else {
 1212|       |        // Default to fast_float
 1213|   610k|        return fast_float_impl<CharT, T>{data}(value);
 1214|   610k|    }
 1215|   610k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEC2ENS2_14impl_init_dataIcEE:
 1077|   610k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1078|   610k|    {
 1079|   610k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIcE4baseEv:
  712|  2.21M|    {
  713|  2.21M|        return {kind, options};
  714|  2.21M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfEclERf:
 1082|   610k|    {
 1083|   610k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1083:13): [True: 130k, False: 479k]
  ------------------
 1084|   610k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1084:13): [True: 26.6k, False: 453k]
  ------------------
 1085|       |            // fast_float doesn't support hexfloats
 1086|   157k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1087|   157k|                                              value);
 1088|   157k|        }
 1089|       |
 1090|   453k|        const auto flags = get_flags();
 1091|   453k|        const auto view = get_view();
 1092|   453k|        const auto result = fast_float::from_chars(
 1093|   453k|            view.data(), view.data() + view.size(), value, flags);
 1094|       |
 1095|   453k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 453k]
  |  |  ------------------
  ------------------
 1096|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1097|      0|                                         "fast_float: invalid_argument");
 1098|      0|        }
 1099|   453k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   453k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.77k, False: 448k]
  |  |  ------------------
  ------------------
 1100|       |            // may just be very large: fall back
 1101|  4.77k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1102|  4.77k|                                              value);
 1103|  4.77k|        }
 1104|       |
 1105|   448k|        return result.ptr - view.data();
 1106|   453k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1041|   162k|{
 1042|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1043|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1044|       |        return from_chars_impl<T>{data}(value);
 1045|       |    }
 1046|       |    else
 1047|       |#endif
 1048|   162k|    {
 1049|   162k|#if !SCN_DISABLE_STRTOD
 1050|   162k|        return strtod_impl<CharT, T>{data}(value);
 1051|       |#else
 1052|       |        return unexpected_scan_error(
 1053|       |            scan_error::invalid_scanned_value,
 1054|       |            "fast_float failed, and fallbacks are disabled");
 1055|       |#endif
 1056|   162k|    }
 1057|   162k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEC2ENS2_14impl_init_dataIcEE:
  893|   162k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  894|   162k|    {
  895|   162k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfEC2ENS2_9impl_baseE:
  726|   219k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfEclERf:
  898|   162k|    {
  899|   162k|        return this->parse(value, this->get_null_terminated_source(m_input),
  900|   162k|                           generic_strtod);
  901|   162k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  732|   162k|    {
  733|   162k|        CharT* end{};
  734|   162k|        errno = 0;
  735|   162k|        value = strtod_cb(src, &end);
  736|   162k|        const auto saved_errno = errno;
  737|   162k|        auto chars_read = end - src;
  738|       |
  739|   162k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  740|   162k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.59k, False: 156k]
  |  |  ------------------
  ------------------
  741|  5.59k|            return unexpected(e);
  742|  5.59k|        }
  743|       |
  744|   156k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (744:13): [True: 130k, False: 26.4k]
  ------------------
  745|   156k|            chars_read >= 2) {
  ------------------
  |  Branch (745:13): [True: 130k, False: 0]
  ------------------
  746|   130k|            chars_read -= 2;
  747|   130k|        }
  748|       |
  749|   156k|        return chars_read;
  750|   162k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  778|   219k|    {
  779|   219k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (779:13): [True: 84.2k, False: 135k]
  |  Branch (779:37): [True: 0, False: 84.2k]
  ------------------
  780|      0|            SCN_UNLIKELY_ATTR
  781|      0|            return {scan_error::invalid_scanned_value,
  782|      0|                    "strtod failed: No conversion"};
  783|      0|        }
  784|       |
  785|   219k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (785:13): [True: 26.9k, False: 192k]
  ------------------
  786|   219k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (786:13): [True: 0, False: 26.9k]
  ------------------
  787|      0|            SCN_UNLIKELY_ATTR
  788|      0|            return {scan_error::invalid_scanned_value,
  789|      0|                    "Hexfloats disallowed by format string"};
  790|      0|        }
  791|       |
  792|   219k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (792:13): [True: 8.98k, False: 210k]
  |  Branch (792:34): [True: 1.66k, False: 7.31k]
  ------------------
  793|  1.66k|            SCN_UNLIKELY_ATTR
  794|  1.66k|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  795|  1.66k|        }
  796|       |
  797|   217k|        SCN_GCC_COMPAT_PUSH
  798|   217k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  799|       |
  800|   217k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (800:13): [True: 217k, False: 0]
  ------------------
  801|   217k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (801:13): [True: 217k, False: 0]
  ------------------
  802|   217k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (802:13): [True: 7.29k, False: 210k]
  ------------------
  803|  7.29k|            SCN_UNLIKELY_ATTR
  804|  7.29k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  805|  7.29k|        }
  806|       |
  807|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  808|       |
  809|   210k|            return {};
  810|   217k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEf:
  687|   228k|{
  688|   228k|    return f == 0.0f || f == -0.0f;
  ------------------
  |  Branch (688:12): [True: 85.8k, False: 142k]
  |  Branch (688:25): [True: 0, False: 142k]
  ------------------
  689|   228k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  755|   162k|    {
  756|   162k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (756:13): [True: 158k, False: 4.01k]
  ------------------
  757|       |            // TODO: call float_reader::read_source?
  758|   158k|            auto first_space = read_until_classic_space(input.view());
  759|   158k|            input.assign(
  760|   158k|                std::basic_string<CharT>{input.view().begin(), first_space});
  761|   158k|        }
  762|       |
  763|   162k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (763:13): [True: 130k, False: 31.3k]
  ------------------
  764|   130k|            if constexpr (std::is_same_v<CharT, char>) {
  765|   130k|                input.get_allocated_string().insert(0, "0x");
  766|       |            }
  767|       |            else {
  768|       |                input.get_allocated_string().insert(0, L"0x");
  769|       |            }
  770|   130k|        }
  771|       |
  772|   162k|        return input.get_allocated_string().c_str();
  773|   162k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
  905|   162k|    {
  906|   162k|        if constexpr (std::is_same_v<CharT, char>) {
  907|   162k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  908|       |        }
  909|       |        else {
  910|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  911|       |        }
  912|   162k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  813|   162k|    {
  814|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  815|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  816|       |        if constexpr (std::is_same_v<T, float>) {
  817|       |            return ::strtof_l(str, str_end, cloc);
  818|       |        }
  819|       |        else if constexpr (std::is_same_v<T, double>) {
  820|       |            return ::strtod_l(str, str_end, cloc);
  821|       |        }
  822|       |        else if constexpr (std::is_same_v<T, long double>) {
  823|       |            return ::strtold_l(str, str_end, cloc);
  824|       |        }
  825|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  826|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  827|       |        if constexpr (std::is_same_v<T, float>) {
  828|       |            return ::_strtof_l(str, str_end, cloc);
  829|       |        }
  830|       |        else if constexpr (std::is_same_v<T, double>) {
  831|       |            return ::_strtod_l(str, str_end, cloc);
  832|       |        }
  833|       |        else if constexpr (std::is_same_v<T, long double>) {
  834|       |            return ::_strtold_l(str, str_end, cloc);
  835|       |        }
  836|       |#else
  837|   162k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  838|   162k|        if constexpr (std::is_same_v<T, float>) {
  839|   162k|            return std::strtof(str, str_end);
  840|       |        }
  841|       |        else if constexpr (std::is_same_v<T, double>) {
  842|       |            return std::strtod(str, str_end);
  843|       |        }
  844|       |        else if constexpr (std::is_same_v<T, long double>) {
  845|       |            return std::strtold(str, str_end);
  846|       |        }
  847|   162k|#endif
  848|   162k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_120fast_float_impl_base9get_flagsEv:
 1061|  1.31M|    {
 1062|  1.31M|        unsigned format_flags{};
 1063|  1.31M|        if ((m_options & float_reader_base::allow_fixed) != 0) {
  ------------------
  |  Branch (1063:13): [True: 1.30M, False: 10.3k]
  ------------------
 1064|  1.30M|            format_flags |= fast_float::fixed;
 1065|  1.30M|        }
 1066|  1.31M|        if ((m_options & float_reader_base::allow_scientific) != 0) {
  ------------------
  |  Branch (1066:13): [True: 1.11M, False: 199k]
  ------------------
 1067|  1.11M|            format_flags |= fast_float::scientific;
 1068|  1.11M|        }
 1069|       |
 1070|  1.31M|        return static_cast<fast_float::chars_format>(format_flags);
 1071|  1.31M|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcfE8get_viewEv:
 1110|   453k|    {
 1111|   453k|        if constexpr (sizeof(CharT) == 1) {
 1112|   453k|            return m_input.view();
 1113|       |        }
 1114|       |        else if constexpr (sizeof(CharT) == 2) {
 1115|       |            return std::u16string_view{
 1116|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1117|       |                m_input.view().size()};
 1118|       |        }
 1119|       |        else {
 1120|       |            return std::u32string_view{
 1121|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1122|       |                m_input.view().size()};
 1123|       |        }
 1124|   453k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1138|   261k|{
 1139|   261k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1139:9): [True: 0, False: 261k]
  ------------------
 1140|      0|        value = std::numeric_limits<T>::infinity();
 1141|      0|        return 3;
 1142|      0|    }
 1143|   261k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1143:9): [True: 0, False: 261k]
  ------------------
 1144|      0|        value = std::numeric_limits<T>::infinity();
 1145|      0|        return 8;
 1146|      0|    }
 1147|   261k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1147:9): [True: 0, False: 261k]
  ------------------
 1148|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1149|      0|        return 3;
 1150|      0|    }
 1151|   261k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1151:9): [True: 0, False: 261k]
  ------------------
 1152|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1153|       |
 1154|       |        // TODO: use payload
 1155|       |#if 0
 1156|       |                    {
 1157|       |                        auto reader = integer_reader<CharT>{
 1158|       |                            integer_reader_base::only_unsigned, 0};
 1159|       |                        if (auto r = reader.read_source(
 1160|       |                                detail::tag_type<unsigned long long>{},
 1161|       |                                nan_payload.view());
 1162|       |                            SCN_UNLIKELY(!r)) {
 1163|       |                            return unexpected(r.error());
 1164|       |                        }
 1165|       |
 1166|       |                        unsigned long long payload;
 1167|       |                        if (auto r = reader.parse_value(payload);
 1168|       |                            SCN_UNLIKELY(!r)) {
 1169|       |                            return unexpected(r.error());
 1170|       |                        }
 1171|       |
 1172|       |                        constexpr auto mantissa_payload_len =
 1173|       |                            std::numeric_limits<T>::digits - 2;
 1174|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1175|       |
 1176|       |
 1177|       |                    }
 1178|       |#endif
 1179|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1180|       |
 1181|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1182|      0|    }
 1183|       |
 1184|   261k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1185|   261k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1185:9): [True: 62.2k, False: 198k]
  ------------------
 1186|  62.2k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.51k, False: 53.7k]
  |  |  ------------------
  ------------------
 1187|  8.51k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1188|  8.51k|                                         "Invalid floating-point digit");
 1189|  8.51k|        }
 1190|  62.2k|    }
 1191|   252k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.6k, False: 232k]
  |  |  ------------------
  ------------------
 1192|  20.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1193|  20.6k|                                     "Invalid floating-point digit");
 1194|  20.6k|    }
 1195|       |
 1196|       |    if constexpr (std::is_same_v<T, long double>) {
 1197|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1198|       |            // If double == long double (true on Windows),
 1199|       |            // use fast_float with double
 1200|       |            double tmp{};
 1201|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1202|       |            value = tmp;
 1203|       |            return ret;
 1204|       |        }
 1205|       |        else {
 1206|       |            // long doubles aren't supported by fast_float ->
 1207|       |            // fall back to from_chars or strtod
 1208|       |            return fast_float_fallback(data, value);
 1209|       |        }
 1210|       |    }
 1211|   232k|    else {
 1212|       |        // Default to fast_float
 1213|   232k|        return fast_float_impl<CharT, T>{data}(value);
 1214|   232k|    }
 1215|   232k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEC2ENS2_14impl_init_dataIwEE:
 1077|   232k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1078|   232k|    {
 1079|   232k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_114impl_init_dataIwE4baseEv:
  712|   886k|    {
  713|   886k|        return {kind, options};
  714|   886k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfEclERf:
 1082|   232k|    {
 1083|   232k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1083:13): [True: 53.6k, False: 178k]
  ------------------
 1084|   232k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1084:13): [True: 354, False: 178k]
  ------------------
 1085|       |            // fast_float doesn't support hexfloats
 1086|  54.0k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1087|  54.0k|                                              value);
 1088|  54.0k|        }
 1089|       |
 1090|   178k|        const auto flags = get_flags();
 1091|   178k|        const auto view = get_view();
 1092|   178k|        const auto result = fast_float::from_chars(
 1093|   178k|            view.data(), view.data() + view.size(), value, flags);
 1094|       |
 1095|   178k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 178k]
  |  |  ------------------
  ------------------
 1096|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1097|      0|                                         "fast_float: invalid_argument");
 1098|      0|        }
 1099|   178k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.30k, False: 174k]
  |  |  ------------------
  ------------------
 1100|       |            // may just be very large: fall back
 1101|  3.30k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1102|  3.30k|                                              value);
 1103|  3.30k|        }
 1104|       |
 1105|   174k|        return result.ptr - view.data();
 1106|   178k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1041|  57.3k|{
 1042|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1043|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1044|       |        return from_chars_impl<T>{data}(value);
 1045|       |    }
 1046|       |    else
 1047|       |#endif
 1048|  57.3k|    {
 1049|  57.3k|#if !SCN_DISABLE_STRTOD
 1050|  57.3k|        return strtod_impl<CharT, T>{data}(value);
 1051|       |#else
 1052|       |        return unexpected_scan_error(
 1053|       |            scan_error::invalid_scanned_value,
 1054|       |            "fast_float failed, and fallbacks are disabled");
 1055|       |#endif
 1056|  57.3k|    }
 1057|  57.3k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEC2ENS2_14impl_init_dataIwEE:
  893|  57.3k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  894|  57.3k|    {
  895|  57.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfEclERf:
  898|  57.3k|    {
  899|  57.3k|        return this->parse(value, this->get_null_terminated_source(m_input),
  900|  57.3k|                           generic_strtod);
  901|  57.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  732|  57.3k|    {
  733|  57.3k|        CharT* end{};
  734|  57.3k|        errno = 0;
  735|  57.3k|        value = strtod_cb(src, &end);
  736|  57.3k|        const auto saved_errno = errno;
  737|  57.3k|        auto chars_read = end - src;
  738|       |
  739|  57.3k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  740|  57.3k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  57.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.36k, False: 53.9k]
  |  |  ------------------
  ------------------
  741|  3.36k|            return unexpected(e);
  742|  3.36k|        }
  743|       |
  744|  53.9k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (744:13): [True: 53.6k, False: 354]
  ------------------
  745|  53.9k|            chars_read >= 2) {
  ------------------
  |  Branch (745:13): [True: 53.6k, False: 0]
  ------------------
  746|  53.6k|            chars_read -= 2;
  747|  53.6k|        }
  748|       |
  749|  53.9k|        return chars_read;
  750|  57.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  755|  57.3k|    {
  756|  57.3k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (756:13): [True: 55.2k, False: 2.05k]
  ------------------
  757|       |            // TODO: call float_reader::read_source?
  758|  55.2k|            auto first_space = read_until_classic_space(input.view());
  759|  55.2k|            input.assign(
  760|  55.2k|                std::basic_string<CharT>{input.view().begin(), first_space});
  761|  55.2k|        }
  762|       |
  763|  57.3k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (763:13): [True: 53.6k, False: 3.65k]
  ------------------
  764|       |            if constexpr (std::is_same_v<CharT, char>) {
  765|       |                input.get_allocated_string().insert(0, "0x");
  766|       |            }
  767|  53.6k|            else {
  768|  53.6k|                input.get_allocated_string().insert(0, L"0x");
  769|  53.6k|            }
  770|  53.6k|        }
  771|       |
  772|  57.3k|        return input.get_allocated_string().c_str();
  773|  57.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
  905|  57.3k|    {
  906|       |        if constexpr (std::is_same_v<CharT, char>) {
  907|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  908|       |        }
  909|  57.3k|        else {
  910|  57.3k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  911|  57.3k|        }
  912|  57.3k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
  851|  57.3k|    {
  852|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  853|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  854|       |        if constexpr (std::is_same_v<T, float>) {
  855|       |            return ::wcstof_l(str, str_end, cloc);
  856|       |        }
  857|       |        else if constexpr (std::is_same_v<T, double>) {
  858|       |            return ::wcstod_l(str, str_end, cloc);
  859|       |        }
  860|       |        else if constexpr (std::is_same_v<T, long double>) {
  861|       |            return ::wcstold_l(str, str_end, cloc);
  862|       |        }
  863|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  864|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  865|       |        if constexpr (std::is_same_v<T, float>) {
  866|       |            return ::_wcstof_l(str, str_end, cloc);
  867|       |        }
  868|       |        else if constexpr (std::is_same_v<T, double>) {
  869|       |            return ::_wcstod_l(str, str_end, cloc);
  870|       |        }
  871|       |        else if constexpr (std::is_same_v<T, long double>) {
  872|       |            return ::_wcstold_l(str, str_end, cloc);
  873|       |        }
  874|       |#else
  875|  57.3k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  876|  57.3k|        if constexpr (std::is_same_v<T, float>) {
  877|  57.3k|            return std::wcstof(str, str_end);
  878|       |        }
  879|       |        else if constexpr (std::is_same_v<T, double>) {
  880|       |            return std::wcstod(str, str_end);
  881|       |        }
  882|       |        else if constexpr (std::is_same_v<T, long double>) {
  883|       |            return std::wcstold(str, str_end);
  884|       |        }
  885|  57.3k|#endif
  886|  57.3k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwfE8get_viewEv:
 1110|   178k|    {
 1111|       |        if constexpr (sizeof(CharT) == 1) {
 1112|       |            return m_input.view();
 1113|       |        }
 1114|       |        else if constexpr (sizeof(CharT) == 2) {
 1115|       |            return std::u16string_view{
 1116|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1117|       |                m_input.view().size()};
 1118|       |        }
 1119|   178k|        else {
 1120|   178k|            return std::u32string_view{
 1121|   178k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1122|   178k|                m_input.view().size()};
 1123|   178k|        }
 1124|   178k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1138|   681k|{
 1139|   681k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1139:9): [True: 3.89k, False: 677k]
  ------------------
 1140|  3.89k|        value = std::numeric_limits<T>::infinity();
 1141|  3.89k|        return 3;
 1142|  3.89k|    }
 1143|   677k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1143:9): [True: 3.53k, False: 673k]
  ------------------
 1144|  3.53k|        value = std::numeric_limits<T>::infinity();
 1145|  3.53k|        return 8;
 1146|  3.53k|    }
 1147|   673k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1147:9): [True: 29.7k, False: 644k]
  ------------------
 1148|  29.7k|        value = std::numeric_limits<T>::quiet_NaN();
 1149|  29.7k|        return 3;
 1150|  29.7k|    }
 1151|   644k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1151:9): [True: 1.08k, False: 643k]
  ------------------
 1152|  1.08k|        value = std::numeric_limits<T>::quiet_NaN();
 1153|       |
 1154|       |        // TODO: use payload
 1155|       |#if 0
 1156|       |                    {
 1157|       |                        auto reader = integer_reader<CharT>{
 1158|       |                            integer_reader_base::only_unsigned, 0};
 1159|       |                        if (auto r = reader.read_source(
 1160|       |                                detail::tag_type<unsigned long long>{},
 1161|       |                                nan_payload.view());
 1162|       |                            SCN_UNLIKELY(!r)) {
 1163|       |                            return unexpected(r.error());
 1164|       |                        }
 1165|       |
 1166|       |                        unsigned long long payload;
 1167|       |                        if (auto r = reader.parse_value(payload);
 1168|       |                            SCN_UNLIKELY(!r)) {
 1169|       |                            return unexpected(r.error());
 1170|       |                        }
 1171|       |
 1172|       |                        constexpr auto mantissa_payload_len =
 1173|       |                            std::numeric_limits<T>::digits - 2;
 1174|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1175|       |
 1176|       |
 1177|       |                    }
 1178|       |#endif
 1179|  1.08k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.08k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1180|       |
 1181|  1.08k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1182|  1.08k|    }
 1183|       |
 1184|   643k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   643k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   643k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1185|   643k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1185:9): [True: 136k, False: 506k]
  ------------------
 1186|   136k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.77k, False: 133k]
  |  |  ------------------
  ------------------
 1187|  2.77k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1188|  2.77k|                                         "Invalid floating-point digit");
 1189|  2.77k|        }
 1190|   136k|    }
 1191|   640k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   640k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.69k, False: 632k]
  |  |  ------------------
  ------------------
 1192|  7.69k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1193|  7.69k|                                     "Invalid floating-point digit");
 1194|  7.69k|    }
 1195|       |
 1196|       |    if constexpr (std::is_same_v<T, long double>) {
 1197|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1198|       |            // If double == long double (true on Windows),
 1199|       |            // use fast_float with double
 1200|       |            double tmp{};
 1201|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1202|       |            value = tmp;
 1203|       |            return ret;
 1204|       |        }
 1205|       |        else {
 1206|       |            // long doubles aren't supported by fast_float ->
 1207|       |            // fall back to from_chars or strtod
 1208|       |            return fast_float_fallback(data, value);
 1209|       |        }
 1210|       |    }
 1211|   632k|    else {
 1212|       |        // Default to fast_float
 1213|   632k|        return fast_float_impl<CharT, T>{data}(value);
 1214|   632k|    }
 1215|   632k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEC2ENS2_14impl_init_dataIcEE:
 1077|   632k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1078|   632k|    {
 1079|   632k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdEclERd:
 1082|   632k|    {
 1083|   632k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1083:13): [True: 133k, False: 498k]
  ------------------
 1084|   632k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1084:13): [True: 28.5k, False: 470k]
  ------------------
 1085|       |            // fast_float doesn't support hexfloats
 1086|   162k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1087|   162k|                                              value);
 1088|   162k|        }
 1089|       |
 1090|   470k|        const auto flags = get_flags();
 1091|   470k|        const auto view = get_view();
 1092|   470k|        const auto result = fast_float::from_chars(
 1093|   470k|            view.data(), view.data() + view.size(), value, flags);
 1094|       |
 1095|   470k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   470k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 470k]
  |  |  ------------------
  ------------------
 1096|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1097|      0|                                         "fast_float: invalid_argument");
 1098|      0|        }
 1099|   470k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   470k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.25k, False: 468k]
  |  |  ------------------
  ------------------
 1100|       |            // may just be very large: fall back
 1101|  2.25k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1102|  2.25k|                                              value);
 1103|  2.25k|        }
 1104|       |
 1105|   468k|        return result.ptr - view.data();
 1106|   470k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1041|   164k|{
 1042|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1043|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1044|       |        return from_chars_impl<T>{data}(value);
 1045|       |    }
 1046|       |    else
 1047|       |#endif
 1048|   164k|    {
 1049|   164k|#if !SCN_DISABLE_STRTOD
 1050|   164k|        return strtod_impl<CharT, T>{data}(value);
 1051|       |#else
 1052|       |        return unexpected_scan_error(
 1053|       |            scan_error::invalid_scanned_value,
 1054|       |            "fast_float failed, and fallbacks are disabled");
 1055|       |#endif
 1056|   164k|    }
 1057|   164k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEC2ENS2_14impl_init_dataIcEE:
  893|   164k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  894|   164k|    {
  895|   164k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdEC2ENS2_9impl_baseE:
  726|   220k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdEclERd:
  898|   164k|    {
  899|   164k|        return this->parse(value, this->get_null_terminated_source(m_input),
  900|   164k|                           generic_strtod);
  901|   164k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  732|   164k|    {
  733|   164k|        CharT* end{};
  734|   164k|        errno = 0;
  735|   164k|        value = strtod_cb(src, &end);
  736|   164k|        const auto saved_errno = errno;
  737|   164k|        auto chars_read = end - src;
  738|       |
  739|   164k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  740|   164k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   164k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.67k, False: 161k]
  |  |  ------------------
  ------------------
  741|  2.67k|            return unexpected(e);
  742|  2.67k|        }
  743|       |
  744|   161k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (744:13): [True: 133k, False: 28.5k]
  ------------------
  745|   161k|            chars_read >= 2) {
  ------------------
  |  Branch (745:13): [True: 133k, False: 0]
  ------------------
  746|   133k|            chars_read -= 2;
  747|   133k|        }
  748|       |
  749|   161k|        return chars_read;
  750|   164k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  778|   220k|    {
  779|   220k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (779:13): [True: 83.5k, False: 136k]
  |  Branch (779:37): [True: 0, False: 83.5k]
  ------------------
  780|      0|            SCN_UNLIKELY_ATTR
  781|      0|            return {scan_error::invalid_scanned_value,
  782|      0|                    "strtod failed: No conversion"};
  783|      0|        }
  784|       |
  785|   220k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (785:13): [True: 28.9k, False: 191k]
  ------------------
  786|   220k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (786:13): [True: 0, False: 28.9k]
  ------------------
  787|      0|            SCN_UNLIKELY_ATTR
  788|      0|            return {scan_error::invalid_scanned_value,
  789|      0|                    "Hexfloats disallowed by format string"};
  790|      0|        }
  791|       |
  792|   220k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (792:13): [True: 4.31k, False: 215k]
  |  Branch (792:34): [True: 443, False: 3.86k]
  ------------------
  793|    443|            SCN_UNLIKELY_ATTR
  794|    443|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  795|    443|        }
  796|       |
  797|   219k|        SCN_GCC_COMPAT_PUSH
  798|   219k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  799|       |
  800|   219k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (800:13): [True: 219k, False: 0]
  ------------------
  801|   219k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (801:13): [True: 219k, False: 0]
  ------------------
  802|   219k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (802:13): [True: 3.86k, False: 215k]
  ------------------
  803|  3.86k|            SCN_UNLIKELY_ATTR
  804|  3.86k|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  805|  3.86k|        }
  806|       |
  807|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  808|       |
  809|   215k|            return {};
  810|   219k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEd:
  691|   224k|{
  692|   224k|    return d == 0.0 || d == -0.0;
  ------------------
  |  Branch (692:12): [True: 83.9k, False: 140k]
  |  Branch (692:24): [True: 0, False: 140k]
  ------------------
  693|   224k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  755|   164k|    {
  756|   164k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (756:13): [True: 161k, False: 2.93k]
  ------------------
  757|       |            // TODO: call float_reader::read_source?
  758|   161k|            auto first_space = read_until_classic_space(input.view());
  759|   161k|            input.assign(
  760|   161k|                std::basic_string<CharT>{input.view().begin(), first_space});
  761|   161k|        }
  762|       |
  763|   164k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (763:13): [True: 133k, False: 30.8k]
  ------------------
  764|   133k|            if constexpr (std::is_same_v<CharT, char>) {
  765|   133k|                input.get_allocated_string().insert(0, "0x");
  766|       |            }
  767|       |            else {
  768|       |                input.get_allocated_string().insert(0, L"0x");
  769|       |            }
  770|   133k|        }
  771|       |
  772|   164k|        return input.get_allocated_string().c_str();
  773|   164k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
  905|   164k|    {
  906|   164k|        if constexpr (std::is_same_v<CharT, char>) {
  907|   164k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  908|       |        }
  909|       |        else {
  910|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  911|       |        }
  912|   164k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  813|   164k|    {
  814|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  815|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  816|       |        if constexpr (std::is_same_v<T, float>) {
  817|       |            return ::strtof_l(str, str_end, cloc);
  818|       |        }
  819|       |        else if constexpr (std::is_same_v<T, double>) {
  820|       |            return ::strtod_l(str, str_end, cloc);
  821|       |        }
  822|       |        else if constexpr (std::is_same_v<T, long double>) {
  823|       |            return ::strtold_l(str, str_end, cloc);
  824|       |        }
  825|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  826|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  827|       |        if constexpr (std::is_same_v<T, float>) {
  828|       |            return ::_strtof_l(str, str_end, cloc);
  829|       |        }
  830|       |        else if constexpr (std::is_same_v<T, double>) {
  831|       |            return ::_strtod_l(str, str_end, cloc);
  832|       |        }
  833|       |        else if constexpr (std::is_same_v<T, long double>) {
  834|       |            return ::_strtold_l(str, str_end, cloc);
  835|       |        }
  836|       |#else
  837|   164k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  838|       |        if constexpr (std::is_same_v<T, float>) {
  839|       |            return std::strtof(str, str_end);
  840|       |        }
  841|   164k|        else if constexpr (std::is_same_v<T, double>) {
  842|   164k|            return std::strtod(str, str_end);
  843|       |        }
  844|       |        else if constexpr (std::is_same_v<T, long double>) {
  845|       |            return std::strtold(str, str_end);
  846|       |        }
  847|   164k|#endif
  848|   164k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIcdE8get_viewEv:
 1110|   470k|    {
 1111|   470k|        if constexpr (sizeof(CharT) == 1) {
 1112|   470k|            return m_input.view();
 1113|       |        }
 1114|       |        else if constexpr (sizeof(CharT) == 2) {
 1115|       |            return std::u16string_view{
 1116|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1117|       |                m_input.view().size()};
 1118|       |        }
 1119|       |        else {
 1120|       |            return std::u32string_view{
 1121|       |                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1122|       |                m_input.view().size()};
 1123|       |        }
 1124|   470k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1138|   297k|{
 1139|   297k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1139:9): [True: 0, False: 297k]
  ------------------
 1140|      0|        value = std::numeric_limits<T>::infinity();
 1141|      0|        return 3;
 1142|      0|    }
 1143|   297k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1143:9): [True: 0, False: 297k]
  ------------------
 1144|      0|        value = std::numeric_limits<T>::infinity();
 1145|      0|        return 8;
 1146|      0|    }
 1147|   297k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1147:9): [True: 0, False: 297k]
  ------------------
 1148|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1149|      0|        return 3;
 1150|      0|    }
 1151|   297k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1151:9): [True: 0, False: 297k]
  ------------------
 1152|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1153|       |
 1154|       |        // TODO: use payload
 1155|       |#if 0
 1156|       |                    {
 1157|       |                        auto reader = integer_reader<CharT>{
 1158|       |                            integer_reader_base::only_unsigned, 0};
 1159|       |                        if (auto r = reader.read_source(
 1160|       |                                detail::tag_type<unsigned long long>{},
 1161|       |                                nan_payload.view());
 1162|       |                            SCN_UNLIKELY(!r)) {
 1163|       |                            return unexpected(r.error());
 1164|       |                        }
 1165|       |
 1166|       |                        unsigned long long payload;
 1167|       |                        if (auto r = reader.parse_value(payload);
 1168|       |                            SCN_UNLIKELY(!r)) {
 1169|       |                            return unexpected(r.error());
 1170|       |                        }
 1171|       |
 1172|       |                        constexpr auto mantissa_payload_len =
 1173|       |                            std::numeric_limits<T>::digits - 2;
 1174|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1175|       |
 1176|       |
 1177|       |                    }
 1178|       |#endif
 1179|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1180|       |
 1181|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1182|      0|    }
 1183|       |
 1184|   297k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   297k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   297k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1185|   297k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1185:9): [True: 62.2k, False: 235k]
  ------------------
 1186|  62.2k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.51k, False: 53.7k]
  |  |  ------------------
  ------------------
 1187|  8.51k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1188|  8.51k|                                         "Invalid floating-point digit");
 1189|  8.51k|        }
 1190|  62.2k|    }
 1191|   289k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   289k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.1k, False: 268k]
  |  |  ------------------
  ------------------
 1192|  21.1k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1193|  21.1k|                                     "Invalid floating-point digit");
 1194|  21.1k|    }
 1195|       |
 1196|       |    if constexpr (std::is_same_v<T, long double>) {
 1197|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1198|       |            // If double == long double (true on Windows),
 1199|       |            // use fast_float with double
 1200|       |            double tmp{};
 1201|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1202|       |            value = tmp;
 1203|       |            return ret;
 1204|       |        }
 1205|       |        else {
 1206|       |            // long doubles aren't supported by fast_float ->
 1207|       |            // fall back to from_chars or strtod
 1208|       |            return fast_float_fallback(data, value);
 1209|       |        }
 1210|       |    }
 1211|   268k|    else {
 1212|       |        // Default to fast_float
 1213|   268k|        return fast_float_impl<CharT, T>{data}(value);
 1214|   268k|    }
 1215|   268k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEC2ENS2_14impl_init_dataIwEE:
 1077|   268k|        : fast_float_impl_base{data.base()}, m_input(data.input)
 1078|   268k|    {
 1079|   268k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdEclERd:
 1082|   268k|    {
 1083|   268k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix ||
  ------------------
  |  Branch (1083:13): [True: 53.6k, False: 214k]
  ------------------
 1084|   268k|            m_kind == float_reader_base::float_kind::hex_with_prefix) {
  ------------------
  |  Branch (1084:13): [True: 354, False: 214k]
  ------------------
 1085|       |            // fast_float doesn't support hexfloats
 1086|  54.0k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1087|  54.0k|                                              value);
 1088|  54.0k|        }
 1089|       |
 1090|   214k|        const auto flags = get_flags();
 1091|   214k|        const auto view = get_view();
 1092|   214k|        const auto result = fast_float::from_chars(
 1093|   214k|            view.data(), view.data() + view.size(), value, flags);
 1094|       |
 1095|   214k|        if (SCN_UNLIKELY(result.ec == std::errc::invalid_argument)) {
  ------------------
  |  |  859|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 214k]
  |  |  ------------------
  ------------------
 1096|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1097|      0|                                         "fast_float: invalid_argument");
 1098|      0|        }
 1099|   214k|        if (SCN_UNLIKELY(result.ec == std::errc::result_out_of_range)) {
  ------------------
  |  |  859|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.57k, False: 212k]
  |  |  ------------------
  ------------------
 1100|       |            // may just be very large: fall back
 1101|  1.57k|            return fast_float_fallback<CharT>({m_input, m_kind, m_options},
 1102|  1.57k|                                              value);
 1103|  1.57k|        }
 1104|       |
 1105|   212k|        return result.ptr - view.data();
 1106|   214k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1041|  55.6k|{
 1042|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1043|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1044|       |        return from_chars_impl<T>{data}(value);
 1045|       |    }
 1046|       |    else
 1047|       |#endif
 1048|  55.6k|    {
 1049|  55.6k|#if !SCN_DISABLE_STRTOD
 1050|  55.6k|        return strtod_impl<CharT, T>{data}(value);
 1051|       |#else
 1052|       |        return unexpected_scan_error(
 1053|       |            scan_error::invalid_scanned_value,
 1054|       |            "fast_float failed, and fallbacks are disabled");
 1055|       |#endif
 1056|  55.6k|    }
 1057|  55.6k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEC2ENS2_14impl_init_dataIwEE:
  893|  55.6k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  894|  55.6k|    {
  895|  55.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdEclERd:
  898|  55.6k|    {
  899|  55.6k|        return this->parse(value, this->get_null_terminated_source(m_input),
  900|  55.6k|                           generic_strtod);
  901|  55.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  732|  55.6k|    {
  733|  55.6k|        CharT* end{};
  734|  55.6k|        errno = 0;
  735|  55.6k|        value = strtod_cb(src, &end);
  736|  55.6k|        const auto saved_errno = errno;
  737|  55.6k|        auto chars_read = end - src;
  738|       |
  739|  55.6k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  740|  55.6k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  55.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.63k, False: 53.9k]
  |  |  ------------------
  ------------------
  741|  1.63k|            return unexpected(e);
  742|  1.63k|        }
  743|       |
  744|  53.9k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (744:13): [True: 53.6k, False: 354]
  ------------------
  745|  53.9k|            chars_read >= 2) {
  ------------------
  |  Branch (745:13): [True: 53.6k, False: 0]
  ------------------
  746|  53.6k|            chars_read -= 2;
  747|  53.6k|        }
  748|       |
  749|  53.9k|        return chars_read;
  750|  55.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  755|  55.6k|    {
  756|  55.6k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (756:13): [True: 54.4k, False: 1.20k]
  ------------------
  757|       |            // TODO: call float_reader::read_source?
  758|  54.4k|            auto first_space = read_until_classic_space(input.view());
  759|  54.4k|            input.assign(
  760|  54.4k|                std::basic_string<CharT>{input.view().begin(), first_space});
  761|  54.4k|        }
  762|       |
  763|  55.6k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (763:13): [True: 53.6k, False: 1.93k]
  ------------------
  764|       |            if constexpr (std::is_same_v<CharT, char>) {
  765|       |                input.get_allocated_string().insert(0, "0x");
  766|       |            }
  767|  53.6k|            else {
  768|  53.6k|                input.get_allocated_string().insert(0, L"0x");
  769|  53.6k|            }
  770|  53.6k|        }
  771|       |
  772|  55.6k|        return input.get_allocated_string().c_str();
  773|  55.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
  905|  55.6k|    {
  906|       |        if constexpr (std::is_same_v<CharT, char>) {
  907|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  908|       |        }
  909|  55.6k|        else {
  910|  55.6k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  911|  55.6k|        }
  912|  55.6k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
  851|  55.6k|    {
  852|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  853|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  854|       |        if constexpr (std::is_same_v<T, float>) {
  855|       |            return ::wcstof_l(str, str_end, cloc);
  856|       |        }
  857|       |        else if constexpr (std::is_same_v<T, double>) {
  858|       |            return ::wcstod_l(str, str_end, cloc);
  859|       |        }
  860|       |        else if constexpr (std::is_same_v<T, long double>) {
  861|       |            return ::wcstold_l(str, str_end, cloc);
  862|       |        }
  863|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  864|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  865|       |        if constexpr (std::is_same_v<T, float>) {
  866|       |            return ::_wcstof_l(str, str_end, cloc);
  867|       |        }
  868|       |        else if constexpr (std::is_same_v<T, double>) {
  869|       |            return ::_wcstod_l(str, str_end, cloc);
  870|       |        }
  871|       |        else if constexpr (std::is_same_v<T, long double>) {
  872|       |            return ::_wcstold_l(str, str_end, cloc);
  873|       |        }
  874|       |#else
  875|  55.6k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  876|       |        if constexpr (std::is_same_v<T, float>) {
  877|       |            return std::wcstof(str, str_end);
  878|       |        }
  879|  55.6k|        else if constexpr (std::is_same_v<T, double>) {
  880|  55.6k|            return std::wcstod(str, str_end);
  881|       |        }
  882|       |        else if constexpr (std::is_same_v<T, long double>) {
  883|       |            return std::wcstold(str, str_end);
  884|       |        }
  885|  55.6k|#endif
  886|  55.6k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_115fast_float_implIwdE8get_viewEv:
 1110|   214k|    {
 1111|       |        if constexpr (sizeof(CharT) == 1) {
 1112|       |            return m_input.view();
 1113|       |        }
 1114|       |        else if constexpr (sizeof(CharT) == 2) {
 1115|       |            return std::u16string_view{
 1116|       |                reinterpret_cast<const char16_t*>(m_input.view().data()),
 1117|       |                m_input.view().size()};
 1118|       |        }
 1119|   214k|        else {
 1120|   214k|            return std::u32string_view{
 1121|   214k|                reinterpret_cast<const char32_t*>(m_input.view().data()),
 1122|   214k|                m_input.view().size()};
 1123|   214k|        }
 1124|   214k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1138|   690k|{
 1139|   690k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1139:9): [True: 4.02k, False: 686k]
  ------------------
 1140|  4.02k|        value = std::numeric_limits<T>::infinity();
 1141|  4.02k|        return 3;
 1142|  4.02k|    }
 1143|   686k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1143:9): [True: 3.69k, False: 682k]
  ------------------
 1144|  3.69k|        value = std::numeric_limits<T>::infinity();
 1145|  3.69k|        return 8;
 1146|  3.69k|    }
 1147|   682k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1147:9): [True: 30.1k, False: 652k]
  ------------------
 1148|  30.1k|        value = std::numeric_limits<T>::quiet_NaN();
 1149|  30.1k|        return 3;
 1150|  30.1k|    }
 1151|   652k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1151:9): [True: 1.11k, False: 651k]
  ------------------
 1152|  1.11k|        value = std::numeric_limits<T>::quiet_NaN();
 1153|       |
 1154|       |        // TODO: use payload
 1155|       |#if 0
 1156|       |                    {
 1157|       |                        auto reader = integer_reader<CharT>{
 1158|       |                            integer_reader_base::only_unsigned, 0};
 1159|       |                        if (auto r = reader.read_source(
 1160|       |                                detail::tag_type<unsigned long long>{},
 1161|       |                                nan_payload.view());
 1162|       |                            SCN_UNLIKELY(!r)) {
 1163|       |                            return unexpected(r.error());
 1164|       |                        }
 1165|       |
 1166|       |                        unsigned long long payload;
 1167|       |                        if (auto r = reader.parse_value(payload);
 1168|       |                            SCN_UNLIKELY(!r)) {
 1169|       |                            return unexpected(r.error());
 1170|       |                        }
 1171|       |
 1172|       |                        constexpr auto mantissa_payload_len =
 1173|       |                            std::numeric_limits<T>::digits - 2;
 1174|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1175|       |
 1176|       |
 1177|       |                    }
 1178|       |#endif
 1179|  1.11k|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|  1.11k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1180|       |
 1181|  1.11k|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1182|  1.11k|    }
 1183|       |
 1184|   651k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   651k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   651k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1185|   651k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1185:9): [True: 137k, False: 514k]
  ------------------
 1186|   137k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.85k, False: 134k]
  |  |  ------------------
  ------------------
 1187|  2.85k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1188|  2.85k|                                         "Invalid floating-point digit");
 1189|  2.85k|        }
 1190|   137k|    }
 1191|   648k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   648k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.96k, False: 640k]
  |  |  ------------------
  ------------------
 1192|  7.96k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1193|  7.96k|                                     "Invalid floating-point digit");
 1194|  7.96k|    }
 1195|       |
 1196|   640k|    if constexpr (std::is_same_v<T, long double>) {
 1197|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1198|       |            // If double == long double (true on Windows),
 1199|       |            // use fast_float with double
 1200|       |            double tmp{};
 1201|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1202|       |            value = tmp;
 1203|       |            return ret;
 1204|       |        }
 1205|   640k|        else {
 1206|       |            // long doubles aren't supported by fast_float ->
 1207|       |            // fall back to from_chars or strtod
 1208|   640k|            return fast_float_fallback(data, value);
 1209|   640k|        }
 1210|       |    }
 1211|       |    else {
 1212|       |        // Default to fast_float
 1213|       |        return fast_float_impl<CharT, T>{data}(value);
 1214|       |    }
 1215|   640k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1041|   640k|{
 1042|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1043|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1044|       |        return from_chars_impl<T>{data}(value);
 1045|       |    }
 1046|       |    else
 1047|       |#endif
 1048|   640k|    {
 1049|   640k|#if !SCN_DISABLE_STRTOD
 1050|   640k|        return strtod_impl<CharT, T>{data}(value);
 1051|       |#else
 1052|       |        return unexpected_scan_error(
 1053|       |            scan_error::invalid_scanned_value,
 1054|       |            "fast_float failed, and fallbacks are disabled");
 1055|       |#endif
 1056|   640k|    }
 1057|   640k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEC2ENS2_14impl_init_dataIcEE:
  893|   640k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  894|   640k|    {
  895|   640k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeEC2ENS2_9impl_baseE:
  726|   913k|    strtod_impl_base(impl_base base) : impl_base{base} {}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceEclERe:
  898|   640k|    {
  899|   640k|        return this->parse(value, this->get_null_terminated_source(m_input),
  900|   640k|                           generic_strtod);
  901|   640k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  732|   640k|    {
  733|   640k|        CharT* end{};
  734|   640k|        errno = 0;
  735|   640k|        value = strtod_cb(src, &end);
  736|   640k|        const auto saved_errno = errno;
  737|   640k|        auto chars_read = end - src;
  738|       |
  739|   640k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  740|   640k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   640k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 582, False: 640k]
  |  |  ------------------
  ------------------
  741|    582|            return unexpected(e);
  742|    582|        }
  743|       |
  744|   640k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (744:13): [True: 134k, False: 506k]
  ------------------
  745|   640k|            chars_read >= 2) {
  ------------------
  |  Branch (745:13): [True: 134k, False: 0]
  ------------------
  746|   134k|            chars_read -= 2;
  747|   134k|        }
  748|       |
  749|   640k|        return chars_read;
  750|   640k|    }
impl.cpp:_ZNK3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  778|   913k|    {
  779|   913k|        if (is_float_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (779:13): [True: 394k, False: 519k]
  |  Branch (779:37): [True: 0, False: 394k]
  ------------------
  780|      0|            SCN_UNLIKELY_ATTR
  781|      0|            return {scan_error::invalid_scanned_value,
  782|      0|                    "strtod failed: No conversion"};
  783|      0|        }
  784|       |
  785|   913k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (785:13): [True: 28.9k, False: 884k]
  ------------------
  786|   913k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (786:13): [True: 0, False: 28.9k]
  ------------------
  787|      0|            SCN_UNLIKELY_ATTR
  788|      0|            return {scan_error::invalid_scanned_value,
  789|      0|                    "Hexfloats disallowed by format string"};
  790|      0|        }
  791|       |
  792|   913k|        if (c_errno == ERANGE && is_float_zero(value)) {
  ------------------
  |  Branch (792:13): [True: 836, False: 912k]
  |  Branch (792:34): [True: 121, False: 715]
  ------------------
  793|    121|            SCN_UNLIKELY_ATTR
  794|    121|            return {scan_error::value_out_of_range, "strtod failed: underflow"};
  795|    121|        }
  796|       |
  797|   913k|        SCN_GCC_COMPAT_PUSH
  798|   913k|        SCN_GCC_COMPAT_IGNORE("-Wfloat-equal")
  799|       |
  800|   913k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (800:13): [True: 913k, False: 0]
  ------------------
  801|   913k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (801:13): [True: 913k, False: 0]
  ------------------
  802|   913k|            std::abs(value) == std::numeric_limits<T>::infinity()) {
  ------------------
  |  Branch (802:13): [True: 715, False: 912k]
  ------------------
  803|    715|            SCN_UNLIKELY_ATTR
  804|    715|            return {scan_error::value_out_of_range, "strtod failed: overflow"};
  805|    715|        }
  806|       |
  807|       |        SCN_GCC_COMPAT_POP  // -Wfloat-equal
  808|       |
  809|   912k|            return {};
  810|   913k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113is_float_zeroEe:
  695|   914k|{
  696|   914k|    return ld == 0.0L || ld == -0.0L;
  ------------------
  |  Branch (696:12): [True: 394k, False: 520k]
  |  Branch (696:26): [True: 0, False: 520k]
  ------------------
  697|   914k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  755|   640k|    {
  756|   640k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (756:13): [True: 591k, False: 49.6k]
  ------------------
  757|       |            // TODO: call float_reader::read_source?
  758|   591k|            auto first_space = read_until_classic_space(input.view());
  759|   591k|            input.assign(
  760|   591k|                std::basic_string<CharT>{input.view().begin(), first_space});
  761|   591k|        }
  762|       |
  763|   640k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (763:13): [True: 134k, False: 506k]
  ------------------
  764|   134k|            if constexpr (std::is_same_v<CharT, char>) {
  765|   134k|                input.get_allocated_string().insert(0, "0x");
  766|       |            }
  767|       |            else {
  768|       |                input.get_allocated_string().insert(0, L"0x");
  769|       |            }
  770|   134k|        }
  771|       |
  772|   640k|        return input.get_allocated_string().c_str();
  773|   640k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
  905|   640k|    {
  906|   640k|        if constexpr (std::is_same_v<CharT, char>) {
  907|   640k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  908|       |        }
  909|       |        else {
  910|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  911|       |        }
  912|   640k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  813|   640k|    {
  814|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  815|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  816|       |        if constexpr (std::is_same_v<T, float>) {
  817|       |            return ::strtof_l(str, str_end, cloc);
  818|       |        }
  819|       |        else if constexpr (std::is_same_v<T, double>) {
  820|       |            return ::strtod_l(str, str_end, cloc);
  821|       |        }
  822|       |        else if constexpr (std::is_same_v<T, long double>) {
  823|       |            return ::strtold_l(str, str_end, cloc);
  824|       |        }
  825|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  826|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  827|       |        if constexpr (std::is_same_v<T, float>) {
  828|       |            return ::_strtof_l(str, str_end, cloc);
  829|       |        }
  830|       |        else if constexpr (std::is_same_v<T, double>) {
  831|       |            return ::_strtod_l(str, str_end, cloc);
  832|       |        }
  833|       |        else if constexpr (std::is_same_v<T, long double>) {
  834|       |            return ::_strtold_l(str, str_end, cloc);
  835|       |        }
  836|       |#else
  837|   640k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  838|       |        if constexpr (std::is_same_v<T, float>) {
  839|       |            return std::strtof(str, str_end);
  840|       |        }
  841|       |        else if constexpr (std::is_same_v<T, double>) {
  842|       |            return std::strtod(str, str_end);
  843|       |        }
  844|   640k|        else if constexpr (std::is_same_v<T, long double>) {
  845|   640k|            return std::strtold(str, str_end);
  846|   640k|        }
  847|   640k|#endif
  848|   640k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_113dispatch_implIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1138|   302k|{
 1139|   302k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1139:9): [True: 0, False: 302k]
  ------------------
 1140|      0|        value = std::numeric_limits<T>::infinity();
 1141|      0|        return 3;
 1142|      0|    }
 1143|   302k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1143:9): [True: 0, False: 302k]
  ------------------
 1144|      0|        value = std::numeric_limits<T>::infinity();
 1145|      0|        return 8;
 1146|      0|    }
 1147|   302k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1147:9): [True: 0, False: 302k]
  ------------------
 1148|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1149|      0|        return 3;
 1150|      0|    }
 1151|   302k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1151:9): [True: 0, False: 302k]
  ------------------
 1152|      0|        value = std::numeric_limits<T>::quiet_NaN();
 1153|       |
 1154|       |        // TODO: use payload
 1155|       |#if 0
 1156|       |                    {
 1157|       |                        auto reader = integer_reader<CharT>{
 1158|       |                            integer_reader_base::only_unsigned, 0};
 1159|       |                        if (auto r = reader.read_source(
 1160|       |                                detail::tag_type<unsigned long long>{},
 1161|       |                                nan_payload.view());
 1162|       |                            SCN_UNLIKELY(!r)) {
 1163|       |                            return unexpected(r.error());
 1164|       |                        }
 1165|       |
 1166|       |                        unsigned long long payload;
 1167|       |                        if (auto r = reader.parse_value(payload);
 1168|       |                            SCN_UNLIKELY(!r)) {
 1169|       |                            return unexpected(r.error());
 1170|       |                        }
 1171|       |
 1172|       |                        constexpr auto mantissa_payload_len =
 1173|       |                            std::numeric_limits<T>::digits - 2;
 1174|       |                        payload &= ((1ull << mantissa_payload_len) - 1ull);
 1175|       |
 1176|       |
 1177|       |                    }
 1178|       |#endif
 1179|      0|        SCN_UNUSED(nan_payload);
  ------------------
  |  |  909|      0|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1180|       |
 1181|      0|        return static_cast<std::ptrdiff_t>(5 + nan_payload.view().size());
 1182|      0|    }
 1183|       |
 1184|   302k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  |  924|   302k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   302k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1185|   302k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1185:9): [True: 62.2k, False: 240k]
  ------------------
 1186|  62.2k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  |  859|  62.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.52k, False: 53.7k]
  |  |  ------------------
  ------------------
 1187|  8.52k|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 1188|  8.52k|                                         "Invalid floating-point digit");
 1189|  8.52k|        }
 1190|  62.2k|    }
 1191|   294k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.5k, False: 272k]
  |  |  ------------------
  ------------------
 1192|  21.5k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 1193|  21.5k|                                     "Invalid floating-point digit");
 1194|  21.5k|    }
 1195|       |
 1196|   272k|    if constexpr (std::is_same_v<T, long double>) {
 1197|       |        if constexpr (sizeof(double) == sizeof(long double)) {
 1198|       |            // If double == long double (true on Windows),
 1199|       |            // use fast_float with double
 1200|       |            double tmp{};
 1201|       |            auto ret = fast_float_impl<CharT, double>{data}(tmp);
 1202|       |            value = tmp;
 1203|       |            return ret;
 1204|       |        }
 1205|   272k|        else {
 1206|       |            // long doubles aren't supported by fast_float ->
 1207|       |            // fall back to from_chars or strtod
 1208|   272k|            return fast_float_fallback(data, value);
 1209|   272k|        }
 1210|       |    }
 1211|       |    else {
 1212|       |        // Default to fast_float
 1213|       |        return fast_float_impl<CharT, T>{data}(value);
 1214|       |    }
 1215|   272k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_119fast_float_fallbackIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERT0_:
 1041|   272k|{
 1042|       |#if SCN_HAS_FLOAT_CHARCONV && !SCN_DISABLE_FROM_CHARS
 1043|       |    if constexpr (std::is_same_v<CharT, has_charconv_for<T>>) {
 1044|       |        return from_chars_impl<T>{data}(value);
 1045|       |    }
 1046|       |    else
 1047|       |#endif
 1048|   272k|    {
 1049|   272k|#if !SCN_DISABLE_STRTOD
 1050|   272k|        return strtod_impl<CharT, T>{data}(value);
 1051|       |#else
 1052|       |        return unexpected_scan_error(
 1053|       |            scan_error::invalid_scanned_value,
 1054|       |            "fast_float failed, and fallbacks are disabled");
 1055|       |#endif
 1056|   272k|    }
 1057|   272k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEC2ENS2_14impl_init_dataIwEE:
  893|   272k|        : strtod_impl_base<T>(data.base()), m_input(data.input)
  894|   272k|    {
  895|   272k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweEclERe:
  898|   272k|    {
  899|   272k|        return this->parse(value, this->get_null_terminated_source(m_input),
  900|   272k|                           generic_strtod);
  901|   272k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  732|   272k|    {
  733|   272k|        CharT* end{};
  734|   272k|        errno = 0;
  735|   272k|        value = strtod_cb(src, &end);
  736|   272k|        const auto saved_errno = errno;
  737|   272k|        auto chars_read = end - src;
  738|       |
  739|   272k|        if (auto e = this->check_error(chars_read, saved_errno, value);
  740|   272k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   272k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 254, False: 272k]
  |  |  ------------------
  ------------------
  741|    254|            return unexpected(e);
  742|    254|        }
  743|       |
  744|   272k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (744:13): [True: 53.7k, False: 218k]
  ------------------
  745|   272k|            chars_read >= 2) {
  ------------------
  |  Branch (745:13): [True: 53.7k, False: 0]
  ------------------
  746|  53.7k|            chars_read -= 2;
  747|  53.7k|        }
  748|       |
  749|   272k|        return chars_read;
  750|   272k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  755|   272k|    {
  756|   272k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (756:13): [True: 268k, False: 4.82k]
  ------------------
  757|       |            // TODO: call float_reader::read_source?
  758|   268k|            auto first_space = read_until_classic_space(input.view());
  759|   268k|            input.assign(
  760|   268k|                std::basic_string<CharT>{input.view().begin(), first_space});
  761|   268k|        }
  762|       |
  763|   272k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (763:13): [True: 53.7k, False: 219k]
  ------------------
  764|       |            if constexpr (std::is_same_v<CharT, char>) {
  765|       |                input.get_allocated_string().insert(0, "0x");
  766|       |            }
  767|  53.7k|            else {
  768|  53.7k|                input.get_allocated_string().insert(0, L"0x");
  769|  53.7k|            }
  770|  53.7k|        }
  771|       |
  772|   272k|        return input.get_allocated_string().c_str();
  773|   272k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
  905|   272k|    {
  906|       |        if constexpr (std::is_same_v<CharT, char>) {
  907|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
  908|       |        }
  909|   272k|        else {
  910|   272k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
  911|   272k|        }
  912|   272k|    }
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
  851|   272k|    {
  852|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  853|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  854|       |        if constexpr (std::is_same_v<T, float>) {
  855|       |            return ::wcstof_l(str, str_end, cloc);
  856|       |        }
  857|       |        else if constexpr (std::is_same_v<T, double>) {
  858|       |            return ::wcstod_l(str, str_end, cloc);
  859|       |        }
  860|       |        else if constexpr (std::is_same_v<T, long double>) {
  861|       |            return ::wcstold_l(str, str_end, cloc);
  862|       |        }
  863|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  864|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  865|       |        if constexpr (std::is_same_v<T, float>) {
  866|       |            return ::_wcstof_l(str, str_end, cloc);
  867|       |        }
  868|       |        else if constexpr (std::is_same_v<T, double>) {
  869|       |            return ::_wcstod_l(str, str_end, cloc);
  870|       |        }
  871|       |        else if constexpr (std::is_same_v<T, long double>) {
  872|       |            return ::_wcstold_l(str, str_end, cloc);
  873|       |        }
  874|       |#else
  875|   272k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  876|       |        if constexpr (std::is_same_v<T, float>) {
  877|       |            return std::wcstof(str, str_end);
  878|       |        }
  879|       |        else if constexpr (std::is_same_v<T, double>) {
  880|       |            return std::wcstod(str, str_end);
  881|       |        }
  882|   272k|        else if constexpr (std::is_same_v<T, long double>) {
  883|   272k|            return std::wcstold(str, str_end);
  884|   272k|        }
  885|   272k|#endif
  886|   272k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2073|  1.04M|{
 2074|  1.04M|    const auto argcount = args.size();
 2075|  1.04M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2075:9): [True: 217k, False: 829k]
  |  Branch (2075:60): [True: 217k, False: 0]
  ------------------
 2076|   217k|        auto arg = args.get(0);
 2077|   217k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   217k|    static_cast<    \
  |  |  929|   217k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2078|   217k|    }
 2079|       |
 2080|   829k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2080:9): [True: 0, False: 829k]
  ------------------
 2081|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2082|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2084|      0|        return vscan_parse_format_string(format, handler);
 2085|      0|    }
 2086|       |
 2087|   829k|    SCN_UNLIKELY_ATTR
 2088|   829k|    {
 2089|   829k|        auto handler = format_handler<false, CharT>{
 2090|   829k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   829k|    static_cast<    \
  |  |  929|   829k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   829k|    static_cast<    \
  |  |  929|   829k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2091|   829k|        return vscan_parse_format_string(format, handler);
 2092|   829k|    }
 2093|   829k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1625|  1.95M|{
 1626|  1.95M|    if (format.size() != 2) {
  ------------------
  |  Branch (1626:9): [True: 1.53M, False: 416k]
  ------------------
 1627|  1.53M|        return false;
 1628|  1.53M|    }
 1629|   416k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1629:12): [True: 416k, False: 0]
  |  Branch (1629:39): [True: 416k, False: 0]
  ------------------
 1630|  1.95M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1658|   325k|{
 1659|   325k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 325k]
  |  |  ------------------
  ------------------
 1660|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1661|      0|                                     "Argument #0 not found");
 1662|      0|    }
 1663|       |
 1664|   325k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   325k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 325k]
  |  |  ------------------
  ------------------
 1665|      0|        auto reader = impl::default_arg_reader<
 1666|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1667|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1668|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1669|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1670|      0|    }
 1671|       |
 1672|   325k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1673|   325k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   325k|    static_cast<    \
  |  |  929|   325k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1674|   325k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   325k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   325k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   325k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.9k, False: 305k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  19.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  19.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  19.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  19.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  19.9k|    }                                                  \
  |  |  |  | 3667|   325k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1675|   305k|    return it.position();
 1676|   325k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1900|   708k|        : format_handler_base{argcount},
 1901|   708k|          parse_ctx{format},
 1902|   708k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   708k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   708k|    static_cast<    \
  |  |  929|   708k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   708k|    static_cast<    \
  |  |  929|   708k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   708k|    {
 1904|   708k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  2.35M|    format_handler_base(size_t argcount) : args_count(argcount)
 1722|  2.35M|    {
 1723|  2.35M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  2.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.35M]
  |  |  ------------------
  ------------------
 1724|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1725|      0|        }
 1726|  2.35M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   708k|        : contiguous_ctx(source, args, loc)
 1853|   708k|    {
 1854|   708k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   708k|{
 2039|   708k|    const auto beg = handler.get_ctx().begin();
 2040|   708k|    detail::parse_format_string<false>(format, handler);
 2041|   708k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66.5k, False: 642k]
  |  |  ------------------
  ------------------
 2042|  66.5k|        return unexpected(handler.error);
 2043|  66.5k|    }
 2044|   642k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   708k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2022|  4.82M|    {
 2023|  4.82M|        return ctx.get();
 2024|  4.82M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1857|  4.82M|    {
 1858|  4.82M|        return contiguous_ctx;
 1859|  4.82M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1907|  1.35M|    {
 1908|  1.35M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 1.35M]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|  1.35M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1681|   708k|{
 1682|   708k|    auto arg = ctx.arg(id);
 1683|   708k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 708k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   708k|    return arg;
 1687|   708k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1797|  2.35M|    {
 1798|  2.35M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.35M]
  |  |  ------------------
  ------------------
 1799|      0|            on_error("Invalid out-of-range argument ID");
 1800|      0|            return;
 1801|      0|        }
 1802|       |
 1803|  2.35M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  2.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.35M]
  |  |  ------------------
  ------------------
 1804|      0|            return on_error("Argument with this ID has already been scanned");
 1805|      0|        }
 1806|       |
 1807|  2.35M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.35M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.35M, False: 0]
  |  |  ------------------
  ------------------
 1808|  2.35M|            visited_args_lower64 |= (1ull << id);
 1809|  2.35M|            return;
 1810|  2.35M|        }
 1811|       |
 1812|      0|        id -= 64;
 1813|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1814|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1782|  2.35M|    {
 1783|  2.35M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  2.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.35M]
  |  |  ------------------
  ------------------
 1784|      0|            on_error("Invalid out-of-range argument ID");
 1785|      0|            return false;
 1786|      0|        }
 1787|       |
 1788|  2.35M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  2.35M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.35M, False: 0]
  |  |  ------------------
  ------------------
 1789|  2.35M|            return (visited_args_lower64 >> id) & 1ull;
 1790|  2.35M|        }
 1791|       |
 1792|      0|        id -= 64;
 1793|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1794|  2.35M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1766|   399k|    {
 1767|   399k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   399k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 399k, False: 0]
  |  |  ------------------
  ------------------
 1768|   399k|            error = err;
 1769|   399k|        }
 1770|   399k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1944|   708k|    {
 1945|   708k|        return parse_ctx.next_arg_id();
 1946|   708k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1985|   708k|    {
 1986|   708k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   708k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   708k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 708k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   708k|        auto specs = detail::format_specs{};
 1999|   708k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   708k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   708k|            arg.type()};
 2002|       |
 2003|   708k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   708k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 708k]
  |  Branch (2004:29): [True: 0, False: 708k]
  ------------------
 2005|      0|            SCN_UNLIKELY_ATTR
 2006|      0|            on_error("Missing '}' in format string");
 2007|      0|            return parse_ctx.begin();
 2008|      0|        }
 2009|   708k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 708k]
  |  |  ------------------
  ------------------
 2010|      0|            return parse_ctx.begin();
 2011|      0|        }
 2012|   708k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   708k|        on_visit_scan_arg(
 2015|   708k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   708k|                                           get_ctx().locale()},
 2017|   708k|            arg);
 2018|   708k|        return parse_ctx.begin();
 2019|   708k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   708k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   708k|    {
 1702|   708k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1956|   708k|    {
 1957|   708k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 708k]
  |  Branch (1957:23): [True: 0, False: 708k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   708k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   708k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   708k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66.5k, False: 642k]
  |  |  ------------------
  ------------------
 1964|  66.5k|            on_error(r.error());
 1965|  66.5k|        }
 1966|   642k|        else {
 1967|   642k|            get_ctx().advance_to(*r);
 1968|   642k|        }
 1969|   708k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1729|  2.35M|    {
 1730|  2.35M|        {
 1731|  2.35M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1731:45): [True: 0, False: 2.35M]
  ------------------
 1732|  2.35M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1732:35): [True: 0, False: 2.35M]
  ------------------
 1733|  2.35M|                                      ? std::numeric_limits<uint64_t>::max()
 1734|  2.35M|                                      : (1ull << args_count_lower64) - 1;
 1735|       |
 1736|  2.35M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1736:17): [True: 0, False: 2.35M]
  ------------------
 1737|      0|                return on_error("Argument list not exhausted");
 1738|      0|            }
 1739|  2.35M|        }
 1740|       |
 1741|  2.35M|        if (args_count < 64) {
  ------------------
  |  Branch (1741:13): [True: 2.35M, False: 0]
  ------------------
 1742|  2.35M|            return;
 1743|  2.35M|        }
 1744|       |
 1745|      0|        auto last_args_count = args_count - 64;
 1746|      0|        for (auto it = visited_args_upper.begin();
 1747|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1747:14): [True: 0, False: 0]
  ------------------
 1748|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1748:17): [True: 0, False: 0]
  ------------------
 1749|      0|                return on_error("Argument list not exhausted");
 1750|      0|            }
 1751|      0|            last_args_count -= 8;
 1752|      0|        }
 1753|       |
 1754|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1755|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1755:13): [True: 0, False: 0]
  ------------------
 1756|      0|            return on_error("Argument list not exhausted");
 1757|      0|        }
 1758|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1777|  2.35M|    {
 1778|  2.35M|        return error;
 1779|  2.35M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1773|  7.06M|    {
 1774|  7.06M|        return static_cast<bool>(error);
 1775|  7.06M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1900|   829k|        : format_handler_base{argcount},
 1901|   829k|          parse_ctx{format},
 1902|   829k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   829k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   829k|    static_cast<    \
  |  |  929|   829k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   829k|    static_cast<    \
  |  |  929|   829k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   829k|    {
 1904|   829k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|   829k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   829k|    static_cast<    \
  |  |  929|   829k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1830|   829k|    {
 1831|   829k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   829k|{
 2039|   829k|    const auto beg = handler.get_ctx().begin();
 2040|   829k|    detail::parse_format_string<false>(format, handler);
 2041|   829k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   829k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66.5k, False: 762k]
  |  |  ------------------
  ------------------
 2042|  66.5k|        return unexpected(handler.error);
 2043|  66.5k|    }
 2044|   762k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   829k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2022|  5.67M|    {
 2023|  5.67M|        return ctx.get();
 2024|  5.67M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1834|  5.67M|    {
 1835|  5.67M|        return ctx;
 1836|  5.67M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1907|  1.59M|    {
 1908|  1.59M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 1.59M]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|  1.59M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1681|   829k|{
 1682|   829k|    auto arg = ctx.arg(id);
 1683|   829k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   829k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 829k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   829k|    return arg;
 1687|   829k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1944|   829k|    {
 1945|   829k|        return parse_ctx.next_arg_id();
 1946|   829k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1985|   829k|    {
 1986|   829k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   829k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   829k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 829k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   829k|        auto specs = detail::format_specs{};
 1999|   829k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   829k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   829k|            arg.type()};
 2002|       |
 2003|   829k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   829k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 829k]
  |  Branch (2004:29): [True: 0, False: 829k]
  ------------------
 2005|      0|            SCN_UNLIKELY_ATTR
 2006|      0|            on_error("Missing '}' in format string");
 2007|      0|            return parse_ctx.begin();
 2008|      0|        }
 2009|   829k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   829k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 829k]
  |  |  ------------------
  ------------------
 2010|      0|            return parse_ctx.begin();
 2011|      0|        }
 2012|   829k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   829k|        on_visit_scan_arg(
 2015|   829k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   829k|                                           get_ctx().locale()},
 2017|   829k|            arg);
 2018|   829k|        return parse_ctx.begin();
 2019|   829k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|   829k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   829k|    {
 1702|   829k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1956|   829k|    {
 1957|   829k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 829k]
  |  Branch (1957:23): [True: 0, False: 829k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   829k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   829k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   829k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   829k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 66.5k, False: 762k]
  |  |  ------------------
  ------------------
 1964|  66.5k|            on_error(r.error());
 1965|  66.5k|        }
 1966|   762k|        else {
 1967|   762k|            get_ctx().advance_to(*r);
 1968|   762k|        }
 1969|   829k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2053|   907k|{
 2054|   907k|    const auto argcount = args.size();
 2055|   907k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2055:9): [True: 199k, False: 708k]
  |  Branch (2055:60): [True: 199k, False: 0]
  ------------------
 2056|   199k|        auto arg = args.get(0);
 2057|   199k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   199k|    static_cast<    \
  |  |  929|   199k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2058|   199k|    }
 2059|       |
 2060|   708k|    auto handler = format_handler<true, CharT>{
 2061|   708k|        ranges::subrange<const CharT*>{source.data(),
 2062|   708k|                                       source.data() + source.size()},
 2063|   708k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   708k|    static_cast<    \
  |  |  929|   708k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   708k|    static_cast<    \
  |  |  929|   708k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2064|   708k|    return vscan_parse_format_string(format, handler);
 2065|   907k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1638|   298k|{
 1639|   298k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 298k]
  |  |  ------------------
  ------------------
 1640|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1641|      0|                                     "Argument #0 not found");
 1642|      0|    }
 1643|       |
 1644|   298k|    auto reader =
 1645|   298k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1646|   298k|            ranges::subrange<const CharT*>{source.data(),
 1647|   298k|                                           source.data() + source.size()},
 1648|   298k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   298k|    static_cast<    \
  |  |  929|   298k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1649|   298k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   298k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   298k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   298k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 19.9k, False: 278k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  19.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  19.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  19.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  19.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  19.9k|    }                                                  \
  |  |  |  | 3667|   298k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   278k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1650|   278k|    return ranges::distance(source.data(), it);
 1651|   298k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2053|   507k|{
 2054|   507k|    const auto argcount = args.size();
 2055|   507k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2055:9): [True: 98.6k, False: 409k]
  |  Branch (2055:60): [True: 98.6k, False: 0]
  ------------------
 2056|  98.6k|        auto arg = args.get(0);
 2057|  98.6k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  98.6k|    static_cast<    \
  |  |  929|  98.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2058|  98.6k|    }
 2059|       |
 2060|   409k|    auto handler = format_handler<true, CharT>{
 2061|   409k|        ranges::subrange<const CharT*>{source.data(),
 2062|   409k|                                       source.data() + source.size()},
 2063|   409k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   409k|    static_cast<    \
  |  |  929|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   409k|    static_cast<    \
  |  |  929|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2064|   409k|    return vscan_parse_format_string(format, handler);
 2065|   507k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1625|  1.01M|{
 1626|  1.01M|    if (format.size() != 2) {
  ------------------
  |  Branch (1626:9): [True: 818k, False: 197k]
  ------------------
 1627|   818k|        return false;
 1628|   818k|    }
 1629|   197k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1629:12): [True: 197k, False: 0]
  |  Branch (1629:39): [True: 197k, False: 0]
  ------------------
 1630|  1.01M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1638|   147k|{
 1639|   147k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
 1640|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1641|      0|                                     "Argument #0 not found");
 1642|      0|    }
 1643|       |
 1644|   147k|    auto reader =
 1645|   147k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1646|   147k|            ranges::subrange<const CharT*>{source.data(),
 1647|   147k|                                           source.data() + source.size()},
 1648|   147k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   147k|    static_cast<    \
  |  |  929|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1649|   147k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   147k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   147k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   147k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 39.9k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  39.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  39.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  39.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  39.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  39.9k|    }                                                  \
  |  |  |  | 3667|   147k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1650|   107k|    return ranges::distance(source.data(), it);
 1651|   147k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1900|   409k|        : format_handler_base{argcount},
 1901|   409k|          parse_ctx{format},
 1902|   409k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   409k|    static_cast<    \
  |  |  929|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   409k|    static_cast<    \
  |  |  929|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   409k|    {
 1904|   409k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|   409k|        : contiguous_ctx(source, args, loc)
 1853|   409k|    {
 1854|   409k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   409k|{
 2039|   409k|    const auto beg = handler.get_ctx().begin();
 2040|   409k|    detail::parse_format_string<false>(format, handler);
 2041|   409k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 133k, False: 276k]
  |  |  ------------------
  ------------------
 2042|   133k|        return unexpected(handler.error);
 2043|   133k|    }
 2044|   276k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   409k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2022|  2.59M|    {
 2023|  2.59M|        return ctx.get();
 2024|  2.59M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1857|  2.59M|    {
 1858|  2.59M|        return contiguous_ctx;
 1859|  2.59M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1907|   685k|    {
 1908|   685k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 685k]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|   685k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1681|   409k|{
 1682|   409k|    auto arg = ctx.arg(id);
 1683|   409k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   409k|    return arg;
 1687|   409k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1944|   409k|    {
 1945|   409k|        return parse_ctx.next_arg_id();
 1946|   409k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1985|   409k|    {
 1986|   409k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   409k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   409k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 409k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   409k|        auto specs = detail::format_specs{};
 1999|   409k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   409k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   409k|            arg.type()};
 2002|       |
 2003|   409k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   409k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 409k]
  |  Branch (2004:29): [True: 0, False: 409k]
  ------------------
 2005|      0|            SCN_UNLIKELY_ATTR
 2006|      0|            on_error("Missing '}' in format string");
 2007|      0|            return parse_ctx.begin();
 2008|      0|        }
 2009|   409k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 2010|      0|            return parse_ctx.begin();
 2011|      0|        }
 2012|   409k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   409k|        on_visit_scan_arg(
 2015|   409k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   409k|                                           get_ctx().locale()},
 2017|   409k|            arg);
 2018|   409k|        return parse_ctx.begin();
 2019|   409k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|   409k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   409k|    {
 1702|   409k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1956|   409k|    {
 1957|   409k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 409k]
  |  Branch (1957:23): [True: 0, False: 409k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   409k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   409k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 133k, False: 276k]
  |  |  ------------------
  ------------------
 1964|   133k|            on_error(r.error());
 1965|   133k|        }
 1966|   276k|        else {
 1967|   276k|            get_ctx().advance_to(*r);
 1968|   276k|        }
 1969|   409k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2073|   507k|{
 2074|   507k|    const auto argcount = args.size();
 2075|   507k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2075:9): [True: 98.5k, False: 409k]
  |  Branch (2075:60): [True: 98.5k, False: 0]
  ------------------
 2076|  98.5k|        auto arg = args.get(0);
 2077|  98.5k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  98.5k|    static_cast<    \
  |  |  929|  98.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2078|  98.5k|    }
 2079|       |
 2080|   409k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2080:9): [True: 0, False: 409k]
  ------------------
 2081|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2082|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2084|      0|        return vscan_parse_format_string(format, handler);
 2085|      0|    }
 2086|       |
 2087|   409k|    SCN_UNLIKELY_ATTR
 2088|   409k|    {
 2089|   409k|        auto handler = format_handler<false, CharT>{
 2090|   409k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   409k|    static_cast<    \
  |  |  929|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   409k|    static_cast<    \
  |  |  929|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2091|   409k|        return vscan_parse_format_string(format, handler);
 2092|   409k|    }
 2093|   409k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1658|   147k|{
 1659|   147k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
 1660|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1661|      0|                                     "Argument #0 not found");
 1662|      0|    }
 1663|       |
 1664|   147k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   147k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 147k]
  |  |  ------------------
  ------------------
 1665|      0|        auto reader = impl::default_arg_reader<
 1666|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1667|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1668|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1669|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1670|      0|    }
 1671|       |
 1672|   147k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1673|   147k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   147k|    static_cast<    \
  |  |  929|   147k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1674|   147k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   147k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   147k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   147k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 39.9k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  39.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  39.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  39.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  39.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  39.9k|    }                                                  \
  |  |  |  | 3667|   147k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1675|   107k|    return it.position();
 1676|   147k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1900|   409k|        : format_handler_base{argcount},
 1901|   409k|          parse_ctx{format},
 1902|   409k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   409k|    static_cast<    \
  |  |  929|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   409k|    static_cast<    \
  |  |  929|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1903|   409k|    {
 1904|   409k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|   409k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   409k|    static_cast<    \
  |  |  929|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1830|   409k|    {
 1831|   409k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2038|   409k|{
 2039|   409k|    const auto beg = handler.get_ctx().begin();
 2040|   409k|    detail::parse_format_string<false>(format, handler);
 2041|   409k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 133k, False: 275k]
  |  |  ------------------
  ------------------
 2042|   133k|        return unexpected(handler.error);
 2043|   133k|    }
 2044|   275k|    return ranges::distance(beg, handler.get_ctx().begin());
 2045|   409k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2022|  2.59M|    {
 2023|  2.59M|        return ctx.get();
 2024|  2.59M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1834|  2.59M|    {
 1835|  2.59M|        return ctx;
 1836|  2.59M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1907|   684k|    {
 1908|   684k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1908:16): [True: 0, False: 684k]
  ------------------
 1909|      0|            auto it = get_ctx().begin();
 1910|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1910:17): [True: 0, False: 0]
  ------------------
 1911|      0|                SCN_UNLIKELY_ATTR
 1912|      0|                return on_error("Unexpected end of source");
 1913|      0|            }
 1914|       |
 1915|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1916|      0|                    detail::make_string_view_from_pointers(begin, end));
 1917|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1917:17): [True: 0, False: 0]
  ------------------
 1918|      0|                SCN_UNLIKELY_ATTR
 1919|      0|                return on_error("Invalid encoding in format string");
 1920|      0|            }
 1921|      0|            else if (is_space) {
  ------------------
  |  Branch (1921:22): [True: 0, False: 0]
  ------------------
 1922|       |                // Skip all whitespace in input
 1923|      0|                get_ctx().advance_to(
 1924|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1925|       |                // And, skip all whitespace in the format string
 1926|      0|                auto begin_it = impl::read_while_classic_space(
 1927|      0|                    detail::make_string_view_from_pointers(
 1928|      0|                        detail::to_address(after_space_it),
 1929|      0|                        detail::to_address(end)));
 1930|       |                // (-1 because of the for loop ++begin)
 1931|      0|                begin = detail::to_address(begin_it) - 1;
 1932|      0|                continue;
 1933|      0|            }
 1934|       |
 1935|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1935:17): [True: 0, False: 0]
  ------------------
 1936|      0|                SCN_UNLIKELY_ATTR
 1937|      0|                return on_error("Unexpected literal character in source");
 1938|      0|            }
 1939|      0|            get_ctx().advance_to(ranges::next(it));
 1940|      0|        }
 1941|   684k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1681|   409k|{
 1682|   409k|    auto arg = ctx.arg(id);
 1683|   409k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 1684|      0|        handler.on_error("Failed to find argument with ID");
 1685|      0|    }
 1686|   409k|    return arg;
 1687|   409k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1944|   409k|    {
 1945|   409k|        return parse_ctx.next_arg_id();
 1946|   409k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1985|   409k|    {
 1986|   409k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1987|   409k|        set_arg_as_visited(arg_id);
 1988|       |
 1989|   409k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1989:13): [True: 0, False: 409k]
  ------------------
 1990|      0|            parse_ctx.advance_to(begin);
 1991|      0|            on_visit_scan_arg(
 1992|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1993|      0|                    parse_ctx, get_custom_ctx()},
 1994|      0|                arg);
 1995|      0|            return parse_ctx.begin();
 1996|      0|        }
 1997|       |
 1998|   409k|        auto specs = detail::format_specs{};
 1999|   409k|        detail::specs_checker<specs_handler<context_type>> handler{
 2000|   409k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2001|   409k|            arg.type()};
 2002|       |
 2003|   409k|        begin = detail::parse_format_specs(begin, end, handler);
 2004|   409k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2004:13): [True: 0, False: 409k]
  |  Branch (2004:29): [True: 0, False: 409k]
  ------------------
 2005|      0|            SCN_UNLIKELY_ATTR
 2006|      0|            on_error("Missing '}' in format string");
 2007|      0|            return parse_ctx.begin();
 2008|      0|        }
 2009|   409k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 409k]
  |  |  ------------------
  ------------------
 2010|      0|            return parse_ctx.begin();
 2011|      0|        }
 2012|   409k|        parse_ctx.advance_to(begin);
 2013|       |
 2014|   409k|        on_visit_scan_arg(
 2015|   409k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2016|   409k|                                           get_ctx().locale()},
 2017|   409k|            arg);
 2018|   409k|        return parse_ctx.begin();
 2019|   409k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|   409k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1701|   409k|    {
 1702|   409k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1956|   409k|    {
 1957|   409k|        if (!*this || !arg) {
  ------------------
  |  Branch (1957:13): [True: 0, False: 409k]
  |  Branch (1957:23): [True: 0, False: 409k]
  ------------------
 1958|      0|            SCN_UNLIKELY_ATTR
 1959|      0|            return;
 1960|      0|        }
 1961|       |
 1962|   409k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1963|   409k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 133k, False: 275k]
  |  |  ------------------
  ------------------
 1964|   133k|            on_error(r.error());
 1965|   133k|        }
 1966|   275k|        else {
 1967|   275k|            get_ctx().advance_to(*r);
 1968|   275k|        }
 1969|   409k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|  99.5k|{
 2100|  99.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  99.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|  99.5k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|   108k|{
 2100|   108k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|   108k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|  49.3k|{
 2100|  49.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  49.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|  49.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2099|  49.2k|{
 2100|  49.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  49.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2101|  49.2k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|  2.21k|{
 1351|  2.21k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|  2.21k|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|  2.21k|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|  2.21k|            return transcode_to_string_impl_to32(src, dest);
 1362|  2.21k|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|  2.21k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  2.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|  2.21k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|  2.21k|{
 1244|  2.21k|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|  2.21k|    auto it = src.begin();
 1247|   631k|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 629k, False: 2.21k]
  ------------------
 1248|   629k|        auto res = get_next_code_point(
 1249|   629k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|   629k|                                                                 src.end()));
 1251|   629k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.94k, False: 627k]
  |  |  ------------------
  ------------------
 1252|  1.94k|            dest.push_back(DestCharT{0xfffd});
 1253|  1.94k|        }
 1254|   627k|        else {
 1255|   627k|            dest.push_back(res.value);
 1256|   627k|        }
 1257|   629k|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|   629k|    }
 1259|  2.21k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   915k|{
 1169|   915k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   915k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   915k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   915k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   915k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   915k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.3k, False: 891k]
  |  |  ------------------
  ------------------
 1173|  24.3k|        return {get_start_for_next_code_point(input),
 1174|  24.3k|                detail::invalid_code_point};
 1175|  24.3k|    }
 1176|   891k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   891k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.66k, False: 887k]
  |  |  ------------------
  ------------------
 1177|  3.66k|        return {input.end(), detail::invalid_code_point};
 1178|  3.66k|    }
 1179|       |
 1180|   887k|    return {input.begin() + len,
 1181|   887k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   891k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  24.3k|{
 1155|  24.3k|    auto it = input.begin();
 1156|   142k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 135k, False: 6.81k]
  ------------------
 1157|   135k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 17.4k, False: 118k]
  ------------------
 1158|  17.4k|            break;
 1159|  17.4k|        }
 1160|   135k|    }
 1161|  24.3k|    return it;
 1162|  24.3k|}
_ZN3scn2v34impl11parse_errorC2ENS2_4codeE:
  807|  25.7M|    constexpr parse_error(code c) : m_code(c)
  808|  25.7M|    {
  809|  25.7M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|  25.7M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  25.7M|    }
_ZN3scn2v34impleqENS1_11parse_errorES2_:
  822|  9.68M|    {
  823|  9.68M|        return a.m_code == b.m_code;
  824|  9.68M|    }
_ZN3scn2v34impl16clocale_restorerC2Ei:
 1714|  1.35M|    clocale_restorer(int cat) : m_category(cat)
 1715|  1.35M|    {
 1716|  1.35M|        const auto loc = std::setlocale(cat, nullptr);
 1717|  1.35M|        std::strcpy(m_locbuf, loc);
 1718|  1.35M|    }
_ZN3scn2v34impl16clocale_restorerD2Ev:
 1720|  1.35M|    {
 1721|       |        // Restore locale to what it was before
 1722|  1.35M|        std::setlocale(m_category, m_locbuf);
 1723|  1.35M|    }
_ZN3scn2v34impl25set_clocale_classic_guardC2Ei:
 1743|  1.35M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1744|  1.35M|    {
 1745|  1.35M|        std::setlocale(cat, "C");
 1746|  1.35M|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|  2.35M|    {
 2925|  2.35M|        return m_msg == nullptr;
 2926|  2.35M|    }
_ZN3scn2v34impl17float_reader_baseC2Ej:
 3633|  2.32M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  16.2M|{
  458|  16.2M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  16.2M|        static_cast<unsigned char>(ch))];
  460|  16.2M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  73.4k|{
  469|  73.4k|    return static_cast<unsigned char>(ch) <= 127;
  470|  73.4k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  3.73M|{
  539|  3.73M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  3.73M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  10.9M|{
  784|  10.9M|    return e != eof_error::good;
  785|  10.9M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  41.9k|{
  798|  41.9k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  41.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  41.9k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  41.9k|}
_ZN3scn2v34impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   204k|{
  845|   204k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|   204k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   204k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   204k|    return parse_error::eof;
  847|   204k|}
_ZN3scn2v34impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  3.42M|{
  854|  3.42M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 3.42M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  3.42M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 75.6k, False: 3.35M]
  ------------------
  859|  75.6k|        return scan_error{scan_error::end_of_range, "EOF"};
  860|  75.6k|    }
  861|       |
  862|  3.35M|    return scan_error{code, msg};
  863|  3.42M|}
_ZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  3.42M|{
  868|  3.42M|    return [code, msg](parse_error err) {
  869|  3.42M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.42M|    };
  871|  3.42M|}
_ZN3scn2v34impl17fast_streq_nocaseEPKcS3_m:
 2208|  2.60M|{
 2209|  2.60M|    unsigned char running_diff{0};
 2210|  9.79M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2210:24): [True: 7.19M, False: 2.60M]
  ------------------
 2211|  7.19M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2212|  7.19M|    }
 2213|  2.60M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2213:12): [True: 87.4k, False: 2.52M]
  |  Branch (2213:33): [True: 15.8k, False: 2.50M]
  ------------------
 2214|  2.60M|}
_ZN3scn2v34impl11char_to_intEc:
 3111|  18.8M|{
 3112|  18.8M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3113|  18.8M|}
_ZN3scn2v34impl11char_to_intEw:
 3115|  2.96M|{
 3116|  2.96M|#if WCHAR_MIN < 0
 3117|  2.96M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3117:9): [True: 2.95M, False: 13.3k]
  |  Branch (3117:20): [True: 1.83M, False: 1.11M]
  ------------------
 3118|       |#else
 3119|       |    if (ch <= 255) {
 3120|       |#endif
 3121|  1.83M|        return char_to_int(static_cast<char>(ch));
 3122|  1.83M|    }
 3123|  1.12M|    return 255;
 3124|  2.96M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|  1.95M|{
 5997|  1.95M|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 1.95M]
  ------------------
 5998|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 0, False: 0]
  ------------------
 5999|      0|            return {scan_error::invalid_scanned_value,
 6000|      0|                    "Scanned value too narrow, width did not exceed what "
 6001|      0|                    "was specified in the format string"};
 6002|      0|        }
 6003|      0|    }
 6004|  1.95M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 0, False: 1.95M]
  ------------------
 6005|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 0, False: 0]
  ------------------
 6006|      0|            return {scan_error::invalid_scanned_value,
 6007|      0|                    "Scanned value too wide, width exceeded the specified "
 6008|      0|                    "precision"};
 6009|      0|        }
 6010|      0|    }
 6011|  1.95M|    return {};
 6012|  1.95M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.93M|    {
  304|  2.93M|        ranges::advance(x, n);
  305|  2.93M|        return x;
  306|  2.93M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.93M|    {
  268|  2.93M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.93M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.93M|    {
  151|  2.93M|        i += n;
  152|  2.93M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  3.45M|    {
  108|  3.45M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  3.45M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  3.45M|    {
   87|  3.45M|        return s - i;
   88|  3.45M|    }
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.78M|    {
  304|  1.78M|        ranges::advance(x, n);
  305|  1.78M|        return x;
  306|  1.78M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.78M|    {
  268|  1.78M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.78M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.78M|    {
  151|  1.78M|        i += n;
  152|  1.78M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   512k|    {
  108|   512k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   512k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   512k|    {
   87|   512k|        return s - i;
   88|   512k|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  1.15M|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|  1.15M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  1.15M|        auto beg = r.begin();
  990|  1.15M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 1.15M, False: 0]
  ------------------
  991|  1.15M|            return false;
  992|  1.15M|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  1.15M|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  29.4M|    {
  763|  29.4M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  29.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  29.4M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|  3.03M|{
 1845|  3.03M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  3.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|  3.03M|    else {
 1856|  3.03M|        auto it = range.begin();
 1857|  3.03M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 1.87M, False: 1.16M]
  ------------------
 1858|  1.87M|            return ranges::next(it, count);
 1859|  1.87M|        }
 1860|       |
 1861|  4.62M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 3.49M, False: 1.13M]
  ------------------
 1862|  3.49M|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 35.3k, False: 3.45M]
  ------------------
 1863|  35.3k|                return unexpected(eof_error::eof);
 1864|  35.3k|            }
 1865|  3.49M|        }
 1866|       |
 1867|  1.13M|        return it;
 1868|  1.16M|    }
 1869|  3.03M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  3.03M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  3.03M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  3.03M|        else {
 1106|  3.03M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 3.03M, False: 0]
  ------------------
 1107|  3.03M|                return static_cast<size_t>(
 1108|  3.03M|                    r.begin().parent()->chars_available() -
 1109|  3.03M|                    r.begin().position());
 1110|  3.03M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  3.03M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  3.03M|}
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.77M|        : m_fptr([](storage fn,
  743|  2.77M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.77M|              cvref<T> obj = *get<T>(fn);
  745|  2.77M|              if constexpr (std::is_void_v<R>) {
  746|  2.77M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.77M|              }
  748|  2.77M|              else {
  749|  2.77M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.77M|              }
  751|  2.77M|          }),
  752|  2.77M|          m_storage(std::addressof(f))
  753|  2.77M|    {
  754|  2.77M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  14.7M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.7M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.7M|              else {
  749|  14.7M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.7M|              }
  751|  14.7M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  14.7M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.7M|        else if constexpr (std::is_object_v<T>) {
  688|  14.7M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.7M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.77M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.77M|        {
  662|  2.77M|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  8.26M|    {
  763|  8.26M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  8.26M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  8.26M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.12M|        : m_fptr([](storage fn,
  743|  2.12M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.12M|              cvref<T> obj = *get<T>(fn);
  745|  2.12M|              if constexpr (std::is_void_v<R>) {
  746|  2.12M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.12M|              }
  748|  2.12M|              else {
  749|  2.12M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.12M|              }
  751|  2.12M|          }),
  752|  2.12M|          m_storage(std::addressof(f))
  753|  2.12M|    {
  754|  2.12M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  3.78M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.78M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.78M|              else {
  749|  3.78M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.78M|              }
  751|  3.78M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  3.78M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.78M|        else if constexpr (std::is_object_v<T>) {
  688|  3.78M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.78M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.12M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.12M|        {
  662|  2.12M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   829k|    {
 6026|   829k|        const bool need_skipped_width =
 6027|   829k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 829k]
  |  Branch (6027:33): [True: 0, False: 829k]
  ------------------
 6028|   829k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   829k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 829k]
  ------------------
 6032|   829k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 829k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   829k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 829k, False: 0]
  |  Branch (6036:56): [True: 829k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   829k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 829k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  1.64M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   829k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   829k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   829k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   829k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.4k, False: 815k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.4k|    }                                                  \
  |  |  |  | 3667|   829k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   815k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  1.64M|                            make_eof_scan_error));
 6047|       |
 6048|  1.64M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 815k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   815k|            return result_type{it, 0};
 6056|  1.64M|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   829k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  2.22M|{
 1964|  2.22M|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  2.22M|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  2.22M|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  2.22M|    else {
 1949|  2.22M|        auto first = range.begin();
 1950|  11.9M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 11.8M, False: 26.2k]
  ------------------
 1951|  11.8M|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 2.19M, False: 9.70M]
  ------------------
 1952|  2.19M|                return first;
 1953|  2.19M|            }
 1954|  11.8M|        }
 1955|  26.2k|        return first;
 1956|  2.22M|    }
 1957|  2.22M|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.96M|    {
  108|  1.96M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.96M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.96M|    {
   94|  1.96M|        iter_difference_t<I> counter{0};
   95|  19.2M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 17.2M, False: 1.96M]
  ------------------
   96|  17.2M|            ++i;
   97|  17.2M|            ++counter;
   98|  17.2M|        }
   99|  1.96M|        return counter;
  100|  1.96M|    }
_ZZN3scn2v34impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  3.42M|    return [code, msg](parse_error err) {
  869|  3.42M|        return make_scan_error_from_parse_error(err, code, msg);
  870|  3.42M|    };
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1767|   430k|    {
 1768|   430k|        auto stdloc = loc.get<std::locale>();
 1769|   430k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|   430k|        grouping = numpunct.grouping();
 1771|   430k|        thousands_sep =
 1772|   430k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 430k]
  ------------------
 1773|   430k|        decimal_point = numpunct.decimal_point();
 1774|   430k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1704|   430k|{
 1705|   430k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 430k, False: 0]
  ------------------
 1706|   430k|        return std::use_facet<Facet>(stdloc);
 1707|   430k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|   430k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|  3.25M|{
 1834|  3.25M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.0k, False: 3.23M]
  |  |  ------------------
  ------------------
 1835|  19.0k|        return unexpected(e);
 1836|  19.0k|    }
 1837|       |
 1838|  3.23M|    return ranges::next(range.begin());
 1839|  3.25M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  4.73M|{
  950|  4.73M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  4.73M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.0k, False: 4.69M]
  |  |  ------------------
  ------------------
  951|  38.0k|        return eof_error::eof;
  952|  38.0k|    }
  953|  4.69M|    return eof_error::good;
  954|  4.73M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  6.62M|{
  944|  6.62M|    return is_range_eof(r.begin(), r.end());
  945|  6.62M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  6.62M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  6.62M|    {
  937|  6.62M|        return begin == end;
  938|  6.62M|    }
  939|  6.62M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  3.23M|    {
  296|  3.23M|        ++x;
  297|  3.23M|        return x;
  298|  3.23M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|  1.24M|{
 3130|  1.24M|    auto r = read_one_of_code_unit(range, "+-");
 3131|  1.24M|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 947k, False: 301k]
  ------------------
 3132|   947k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 947k, False: 290]
  ------------------
 3133|   947k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   947k|        }
 3135|    290|        return unexpected(eof_error::eof);
 3136|   947k|    }
 3137|       |
 3138|   301k|    auto& it = *r;
 3139|   301k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 126k, False: 175k]
  ------------------
 3140|   126k|        return std::pair{it, sign_type::minus_sign};
 3141|   126k|    }
 3142|   175k|    return std::pair{it, sign_type::plus_sign};
 3143|   301k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|  2.17M|{
 2261|  2.17M|    auto it = read_code_unit(range);
 2262|  2.17M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.0k, False: 2.16M]
  |  |  ------------------
  ------------------
 2263|  11.0k|        return unexpected(make_eof_parse_error(it.error()));
 2264|  11.0k|    }
 2265|       |
 2266|  4.08M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 4.08M, False: 1.75M]
  ------------------
 2267|  4.08M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 415k, False: 3.66M]
  ------------------
 2268|   415k|            return *it;
 2269|   415k|        }
 2270|  4.08M|    }
 2271|       |
 2272|  1.75M|    return unexpected(parse_error::error);
 2273|  2.16M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|  3.03M|{
 2220|  3.03M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  3.03M|    else {
 2233|  3.03M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  3.03M|            if (ch < 'A' || ch > 'Z') {
 2235|  3.03M|                return ch;
 2236|  3.03M|            }
 2237|  3.03M|            return static_cast<char_type>(ch +
 2238|  3.03M|                                          static_cast<char_type>('a' - 'A'));
 2239|  3.03M|        };
 2240|       |
 2241|  3.03M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  3.03M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.03M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.03M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 35.3k, False: 3.00M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  35.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  35.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  35.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  35.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  35.3k|    }                                                  \
  |  |  |  | 3667|  3.03M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  3.00M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  3.00M|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  3.00M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  3.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.89M, False: 108k]
  |  |  ------------------
  ------------------
 2246|  3.00M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  3.00M|                    return ascii_tolower(a) ==
 2248|  3.00M|                           static_cast<detail::char_t<Range>>(b);
 2249|  3.00M|                }))) {
 2250|  2.89M|            return unexpected(parse_error::error);
 2251|  2.89M|        }
 2252|       |
 2253|   108k|        return it;
 2254|  3.00M|    }
 2255|  3.03M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2233|  3.46M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  3.46M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 3.12M, False: 342k]
  |  Branch (2234:29): [True: 286k, False: 55.5k]
  ------------------
 2235|  3.40M|                return ch;
 2236|  3.40M|            }
 2237|  55.5k|            return static_cast<char_type>(ch +
 2238|  55.5k|                                          static_cast<char_type>('a' - 'A'));
 2239|  3.46M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|  1.07M|{
 2135|  1.07M|    auto it = read_code_unit(range);
 2136|  1.07M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.07M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.02k, False: 1.06M]
  |  |  ------------------
  ------------------
 2137|  8.02k|        return unexpected(make_eof_parse_error(it.error()));
 2138|  8.02k|    }
 2139|       |
 2140|  1.06M|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 876k, False: 192k]
  |  |  ------------------
  ------------------
 2141|  1.06M|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   876k|        return unexpected(parse_error::error);
 2143|   876k|    }
 2144|       |
 2145|   192k|    return *it;
 2146|  1.06M|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|  2.21M|{
 1984|  2.21M|    auto it = read_while_code_unit(range, pred);
 1985|  2.21M|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 904k, False: 1.31M]
  ------------------
 1986|   904k|        return unexpected(parse_error::error);
 1987|   904k|    }
 1988|  1.31M|    return it;
 1989|  2.21M|}
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1608|  1.01M|    {
 1609|  1.01M|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|  1.01M|                           ranges::common_range<Range>) {
 1626|  1.01M|            auto beg_seg = range.begin().contiguous_segment();
 1627|  1.01M|            auto end_seg = range.end().contiguous_segment();
 1628|  1.01M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 146k, False: 871k]
  |  |  ------------------
  ------------------
 1629|  1.01M|                             detail::to_address(end_seg.end()))) {
 1630|   146k|                auto& str = m_storage.emplace();
 1631|   146k|                str.reserve(range.end().position() - range.begin().position());
 1632|   146k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|   146k|                m_view = string_view_type{str};
 1634|   146k|                return;
 1635|   146k|            }
 1636|       |
 1637|   871k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   871k|                                                            end_seg.data());
 1639|   871k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|  1.01M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|  6.97M|    {
 1570|  6.97M|        return m_view;
 1571|  6.97M|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|  4.25M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   751k|    {
 6068|   751k|        const bool need_skipped_width =
 6069|   751k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 751k]
  |  Branch (6069:33): [True: 0, False: 751k]
  ------------------
 6070|   751k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   751k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 751k]
  ------------------
 6073|   751k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 751k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   751k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 751k, False: 0]
  ------------------
 6082|   751k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 751k]
  ------------------
 6083|   751k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   751k|        return result_type{rng.begin(), 0};
 6107|   751k|    }
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|  1.48M|{
 1834|  1.48M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.75k, False: 1.47M]
  |  |  ------------------
  ------------------
 1835|  4.75k|        return unexpected(e);
 1836|  4.75k|    }
 1837|       |
 1838|  1.47M|    return ranges::next(range.begin());
 1839|  1.48M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|  2.78M|{
  950|  2.78M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.5k, False: 2.76M]
  |  |  ------------------
  ------------------
  951|  20.5k|        return eof_error::eof;
  952|  20.5k|    }
  953|  2.76M|    return eof_error::good;
  954|  2.78M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|  2.78M|{
  944|  2.78M|    return is_range_eof(r.begin(), r.end());
  945|  2.78M|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|  2.78M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.78M|    {
  937|  2.78M|        return begin == end;
  938|  2.78M|    }
  939|  2.78M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|  1.47M|    {
  296|  1.47M|        ++x;
  297|  1.47M|        return x;
  298|  1.47M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|  1.01M|{
 3130|  1.01M|    auto r = read_one_of_code_unit(range, "+-");
 3131|  1.01M|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 770k, False: 247k]
  ------------------
 3132|   770k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 770k, False: 96]
  ------------------
 3133|   770k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   770k|        }
 3135|     96|        return unexpected(eof_error::eof);
 3136|   770k|    }
 3137|       |
 3138|   247k|    auto& it = *r;
 3139|   247k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 115k, False: 132k]
  ------------------
 3140|   115k|        return std::pair{it, sign_type::minus_sign};
 3141|   115k|    }
 3142|   132k|    return std::pair{it, sign_type::plus_sign};
 3143|   247k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|  1.17M|{
 2261|  1.17M|    auto it = read_code_unit(range);
 2262|  1.17M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.01k, False: 1.17M]
  |  |  ------------------
  ------------------
 2263|  2.01k|        return unexpected(make_eof_parse_error(it.error()));
 2264|  2.01k|    }
 2265|       |
 2266|  2.20M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 2.20M, False: 902k]
  ------------------
 2267|  2.20M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 275k, False: 1.93M]
  ------------------
 2268|   275k|            return *it;
 2269|   275k|        }
 2270|  2.20M|    }
 2271|       |
 2272|   902k|    return unexpected(parse_error::error);
 2273|  1.17M|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  2.64M|{
 2220|  2.64M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|  2.64M|                  std::is_same_v<char_type, char>) {
 2224|  2.64M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2224:13): [True: 35.3k, False: 2.60M]
  ------------------
 2225|  35.3k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|  35.3k|        }
 2227|  2.60M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2227:13): [True: 2.50M, False: 103k]
  ------------------
 2228|  2.50M|            return unexpected(parse_error::error);
 2229|  2.50M|        }
 2230|   103k|        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|       |    else {
 2233|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|       |            if (ch < 'A' || ch > 'Z') {
 2235|       |                return ch;
 2236|       |            }
 2237|       |            return static_cast<char_type>(ch +
 2238|       |                                          static_cast<char_type>('a' - 'A'));
 2239|       |        };
 2240|       |
 2241|       |        SCN_TRY(it, read_exactly_n_code_units(
 2242|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|       |                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|       |        if (SCN_UNLIKELY(!std::equal(
 2246|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|       |                    return ascii_tolower(a) ==
 2248|       |                           static_cast<detail::char_t<Range>>(b);
 2249|       |                }))) {
 2250|       |            return unexpected(parse_error::error);
 2251|       |        }
 2252|       |
 2253|       |        return it;
 2254|       |    }
 2255|  2.64M|}
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|   300k|{
 2135|   300k|    auto it = read_code_unit(range);
 2136|   300k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.74k, False: 297k]
  |  |  ------------------
  ------------------
 2137|  2.74k|        return unexpected(make_eof_parse_error(it.error()));
 2138|  2.74k|    }
 2139|       |
 2140|   297k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 248k, False: 49.6k]
  |  |  ------------------
  ------------------
 2141|   297k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   248k|        return unexpected(parse_error::error);
 2143|   248k|    }
 2144|       |
 2145|  49.6k|    return *it;
 2146|   297k|}
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  3.82M|    {
 1491|  3.82M|        return sv;
 1492|  3.82M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|   554k|{
 1964|   554k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   554k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|   554k|{
 1945|   554k|    if constexpr (ranges::common_range<Range>) {
 1946|   554k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|   554k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|  1.00M|{
 2940|  1.00M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 1.00M, False: 0]
  ------------------
 2941|  1.00M|        auto it = read_while_classic_space(range);
 2942|  1.00M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  1.00M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.8k, False: 991k]
  |  |  ------------------
  ------------------
 2944|  11.8k|            return unexpected(e);
 2945|  11.8k|        }
 2946|       |
 2947|   991k|        return it;
 2948|  1.00M|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  1.00M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|  1.00M|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|  1.00M|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|  1.00M|        auto buf = make_contiguous_buffer(range);
 2109|  1.00M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|  1.00M|        return ranges::next(range.begin(),
 2111|  1.00M|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|  1.00M|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|  1.00M|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  1.00M|                  ranges::sized_range<Range>) {
 1674|  1.00M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  1.00M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|  1.00M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  1.00M|    {
 1478|  1.00M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.07M|    {
  304|  3.07M|        ranges::advance(x, n);
  305|  3.07M|        return x;
  306|  3.07M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  4.09M|    {
  268|  4.09M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  4.09M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  4.09M|    {
  181|  19.1M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 15.0M, False: 4.09M]
  ------------------
  182|  15.0M|            ++i;
  183|  15.0M|        }
  184|  4.09M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|   268k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   268k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   268k|            auto rd = make_reader<T, char_type>();
 6195|   268k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 268k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   268k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 268k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   268k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   268k|                return impl(rd, range, value);
 6202|   268k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   268k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|  1.53M|    {
 3029|  1.53M|        reader_error_handler eh{};
 3030|  1.53M|        get_derived().check_specs_impl(specs, eh);
 3031|  1.53M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.53M]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|  1.53M|        return {};
 3035|  1.53M|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3039|  1.53M|    {
 3040|  1.53M|        return static_cast<Derived&>(*this);
 3041|  1.53M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|  1.53M|    {
 4134|  1.53M|        detail::check_float_type_specs(specs, eh);
 4135|  1.53M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   268k|    {
 6113|   268k|        const bool need_skipped_width =
 6114|   268k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 268k]
  |  Branch (6114:33): [True: 0, False: 268k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   268k|        auto it = rng.begin();
 6118|   268k|        std::ptrdiff_t prefix_width = 0;
 6119|   268k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 268k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   268k|        else {
 6127|   268k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   268k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   268k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   268k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   268k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.34k, False: 263k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.34k|    }                                                  \
  |  |  |  | 3667|   268k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   263k|            std::tie(it, prefix_width) = prefix_result;
 6129|   263k|        }
 6130|   263k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   263k|        std::ptrdiff_t value_width = 0;
 6134|   263k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 263k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   263k|        else {
 6150|   263k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   263k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   263k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.8k, False: 245k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.8k|    }                                                  \
  |  | 3667|   263k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   245k|                                             specs, value, loc));
 6152|       |
 6153|   245k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 245k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   245k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   245k|        std::ptrdiff_t postfix_width = 0;
 6162|   245k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 242k, False: 3.47k]
  ------------------
 6163|   242k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   242k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   242k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   242k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 242k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   242k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   242k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   242k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   242k|                                 value_width));
 6167|   242k|            std::tie(it, postfix_width) = postfix_result;
 6168|   242k|        }
 6169|       |
 6170|   245k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   245k|                                                 value_width, postfix_width);
 6172|   245k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 245k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   245k|        return it;
 6177|   245k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3023|  3.54M|    {
 3024|  3.54M|        return true;
 3025|  3.54M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4205|  1.51M|    {
 4206|  1.51M|        unsigned options{};
 4207|  1.51M|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 430k, False: 1.08M]
  ------------------
 4208|   430k|            options |= float_reader_base::allow_thsep;
 4209|   430k|        }
 4210|       |
 4211|  1.51M|        SCN_GCC_COMPAT_PUSH
 4212|  1.51M|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|  1.51M|        switch (specs.type) {
 4215|   219k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 219k, False: 1.29M]
  ------------------
 4216|   219k|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|  40.0k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 40.0k, False: 1.47M]
  ------------------
 4219|  40.0k|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|   465k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 465k, False: 1.04M]
  ------------------
 4222|   465k|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|   357k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 357k, False: 1.15M]
  ------------------
 4225|   357k|                return options | float_reader_base::allow_scientific |
 4226|   357k|                       float_reader_base::allow_fixed;
 4227|       |
 4228|   430k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 430k, False: 1.08M]
  ------------------
 4229|   430k|                return options | float_reader_base::allow_scientific |
 4230|   430k|                       float_reader_base::allow_fixed |
 4231|   430k|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 1.51M]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|  1.51M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|  1.51M|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|  1.51M|    }
_ZN3scn2v34impl12float_readerIcEC2Ej:
 3648|  1.51M|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIcEC2Ev:
 1758|  2.12M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIcEC2Ev:
 1519|  4.25M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3679|   657k|    {
 3680|   657k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   657k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   657k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   657k|        const std::ptrdiff_t sign_len =
 3683|   657k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 162k, False: 495k]
  ------------------
 3684|       |
 3685|   657k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   657k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   657k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   657k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   657k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 15.5k, False: 641k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  15.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  15.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  15.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  15.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  15.5k|    }                                                  \
  |  |  |  | 3667|   657k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   641k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   641k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   657k|    }
_ZN3scn2v34impl12float_readerIcE17handle_separatorsEv:
 4045|  2.02M|    {
 4046|  2.02M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 2.02M, False: 0]
  ------------------
 4047|  2.02M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 2.02M, False: 0]
  ------------------
 4048|  2.02M|            return;
 4049|  2.02M|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1574|  2.33M|    {
 1575|  2.33M|        return m_storage.has_value();
 1576|  2.33M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1579|  1.36M|    {
 1580|  1.36M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|  1.36M|        return *m_storage;
 1582|  1.36M|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   263k|    {
 4159|   263k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   263k|#if !SCN_DISABLE_LOCALE
 4162|   263k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 74.5k, False: 189k]
  ------------------
 4163|  74.5k|            return read_impl<Range>(
 4164|  74.5k|                range, rd,
 4165|  74.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  74.5k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  74.5k|                },
 4168|  74.5k|                value, loc);
 4169|  74.5k|        }
 4170|   189k|#endif
 4171|       |
 4172|   189k|        return read_impl<Range>(
 4173|   189k|            range, rd,
 4174|   189k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   189k|                return r.read_source(SCN_FWD(args)...);
 4176|   189k|            },
 4177|   189k|            value);
 4178|   263k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   366k|    {
 4195|   366k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   366k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.0k, False: 346k]
  |  |  ------------------
  ------------------
 4197|  20.0k|            return unexpected(r.error());
 4198|  20.0k|        }
 4199|       |
 4200|   346k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   346k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   346k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   346k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   346k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.03k, False: 343k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.03k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.03k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.03k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.03k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.03k|    }                                                  \
  |  |  |  | 3667|   346k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   343k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   343k|        return ranges::next(range.begin(), n);
 4202|   346k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|  1.13M|    {
  763|  1.13M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.13M|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  74.5k|        : m_fptr([](storage fn,
  743|  74.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  74.5k|              cvref<T> obj = *get<T>(fn);
  745|  74.5k|              if constexpr (std::is_void_v<R>) {
  746|  74.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  74.5k|              }
  748|  74.5k|              else {
  749|  74.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  74.5k|              }
  751|  74.5k|          }),
  752|  74.5k|          m_storage(std::addressof(f))
  753|  74.5k|    {
  754|  74.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  74.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  74.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  74.5k|              else {
  749|  74.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  74.5k|              }
  751|  74.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  74.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  74.5k|        else if constexpr (std::is_object_v<T>) {
  688|  74.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  74.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  74.5k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  74.5k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  74.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  74.5k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3667|   233k|    {
 3668|   233k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|   233k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   233k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 233k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|   233k|        return read_source_impl(range);
 3674|   233k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3693|  1.13M|    {
 3694|  1.13M|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|  1.13M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.13M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.13M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.13M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.13M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|  1.13M|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|  1.13M|        auto it = sign_result.first;
 3697|  1.13M|        m_sign = sign_result.second;
 3698|       |
 3699|  1.13M|        auto digits_begin = it;
 3700|  1.13M|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|  1.13M|        else {
 3727|  1.13M|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|  1.13M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.13M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.13M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 62.6k, False: 1.07M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  62.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  62.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  62.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  62.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  62.6k|    }                                                  \
  |  | 3667|  1.13M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|  1.07M|                it,
 3729|  1.07M|                do_read_source_impl(
 3730|  1.07M|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|  1.07M|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|  1.07M|        }
 3733|       |
 3734|  1.13M|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|  1.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|  1.07M|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 1.06M, False: 5.80k]
  |  Branch (3736:48): [True: 1.06M, False: 5.41k]
  ------------------
 3737|  1.07M|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 1.01M, False: 44.8k]
  ------------------
 3738|  1.07M|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 1.01M, False: 1.62k]
  ------------------
 3739|  1.01M|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|  1.01M|        }
 3741|       |
 3742|  1.07M|        handle_separators();
 3743|       |
 3744|  1.07M|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 1.07M]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|  1.07M|        return it;
 3757|  1.07M|    }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3988|  1.13M|    {
 3989|  1.13M|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|  1.13M|        const bool allowed_nonhex =
 3991|  1.13M|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|  1.13M|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|  1.13M|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 1.12M, False: 11.2k]
  |  Branch (3994:45): [True: 0, False: 1.12M]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|  1.13M|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 11.2k, False: 1.12M]
  ------------------
 4000|  11.2k|            return *r;
 4001|  11.2k|        }
 4002|       |
 4003|  1.12M|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 1.07M, False: 46.4k]
  |  Branch (4003:45): [True: 1.26k, False: 1.07M]
  ------------------
 4004|  1.26k|            return unexpected(r.error());
 4005|  1.26k|        }
 4006|  1.12M|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 46.4k, False: 1.07M]
  ------------------
 4007|  46.4k|            return *r;
 4008|  46.4k|        }
 4009|       |
 4010|  1.07M|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 764k, False: 312k]
  |  Branch (4010:28): [True: 240k, False: 524k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   240k|            auto it = range.begin();
 4014|       |
 4015|   240k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 13.2k, False: 226k]
  ------------------
 4016|  13.2k|                m_kind = float_kind::hex_with_prefix;
 4017|  13.2k|                it = *r;
 4018|  13.2k|            }
 4019|   226k|            else {
 4020|   226k|                m_kind = float_kind::hex_without_prefix;
 4021|   226k|            }
 4022|       |
 4023|   240k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   240k|        }
 4025|   836k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 312k, False: 524k]
  |  Branch (4025:29): [True: 312k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   312k|            m_kind = float_kind::generic;
 4029|   312k|            return read_regular_float(range);
 4030|   312k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   524k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 30.6k, False: 494k]
  |  |  ------------------
  ------------------
 4036|  30.6k|            m_kind = float_kind::hex_with_prefix;
 4037|  30.6k|            return read_hex(ranges::subrange{*r, range.end()});
 4038|  30.6k|        }
 4039|       |
 4040|   494k|        m_kind = float_kind::generic;
 4041|   494k|        return read_regular(range);
 4042|   524k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3799|  1.13M|    {
 3800|  1.13M|        auto it = range.begin();
 3801|  1.13M|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 1.12M, False: 11.2k]
  ------------------
 3802|  1.12M|            return unexpected(r.error());
 3803|  1.12M|        }
 3804|  11.2k|        else {
 3805|  11.2k|            it = *r;
 3806|  11.2k|        }
 3807|       |
 3808|  11.2k|        if (auto r = read_matching_string_classic_nocase(
 3809|  11.2k|                ranges::subrange{it, range.end()}, "inity");
 3810|  11.2k|            !r) {
  ------------------
  |  Branch (3810:13): [True: 5.80k, False: 5.41k]
  ------------------
 3811|  5.80k|            m_kind = float_kind::inf_short;
 3812|  5.80k|            return it;
 3813|  5.80k|        }
 3814|  5.41k|        else {
 3815|  5.41k|            m_kind = float_kind::inf_long;
 3816|  5.41k|            return *r;
 3817|  5.41k|        }
 3818|  11.2k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3822|  1.12M|    {
 3823|  1.12M|        auto it = range.begin();
 3824|  1.12M|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 1.07M, False: 47.7k]
  ------------------
 3825|  1.07M|            return r.transform_error(map_parse_error_to_scan_error(
 3826|  1.07M|                scan_error::invalid_scanned_value,
 3827|  1.07M|                "Invalid floating-point NaN value"));
 3828|  1.07M|        }
 3829|  47.7k|        else {
 3830|  47.7k|            it = *r;
 3831|  47.7k|        }
 3832|       |
 3833|  47.7k|        if (auto r =
 3834|  47.7k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|  47.7k|            !r) {
  ------------------
  |  Branch (3835:13): [True: 44.8k, False: 2.89k]
  ------------------
 3836|  44.8k|            m_kind = float_kind::nan_simple;
 3837|  44.8k|            return it;
 3838|  44.8k|        }
 3839|  2.89k|        else {
 3840|  2.89k|            it = *r;
 3841|  2.89k|        }
 3842|       |
 3843|  2.89k|        auto payload_beg_it = it;
 3844|  2.89k|        it = read_while_code_unit(
 3845|  2.89k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|  2.89k|                return is_ascii_char(ch) &&
 3847|  2.89k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|  2.89k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|  2.89k|            });
 3850|  2.89k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|  2.89k|        m_kind = float_kind::nan_with_payload;
 3853|  2.89k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 1.62k, False: 1.26k]
  ------------------
 3854|  2.89k|                                             ')')) {
 3855|  1.62k|            return *r;
 3856|  1.62k|        }
 3857|  1.26k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|  1.26k|                                     "Invalid floating-point NaN payload");
 3859|  2.89k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  2.89k|        : m_fptr([](storage fn,
  743|  2.89k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.89k|              cvref<T> obj = *get<T>(fn);
  745|  2.89k|              if constexpr (std::is_void_v<R>) {
  746|  2.89k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.89k|              }
  748|  2.89k|              else {
  749|  2.89k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.89k|              }
  751|  2.89k|          }),
  752|  2.89k|          m_storage(std::addressof(f))
  753|  2.89k|    {
  754|  2.89k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  39.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  39.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  39.9k|              else {
  749|  39.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  39.9k|              }
  751|  39.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|  39.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  39.9k|        else if constexpr (std::is_object_v<T>) {
  688|  39.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  39.9k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3845|  39.9k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|  39.9k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3846:24): [True: 39.8k, False: 89]
  ------------------
 3847|  39.9k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3847:26): [True: 38.0k, False: 1.82k]
  |  Branch (3847:39): [True: 30.2k, False: 7.82k]
  |  Branch (3847:54): [True: 2.58k, False: 7.07k]
  |  Branch (3847:67): [True: 2.49k, False: 83]
  ------------------
 3848|  39.8k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3848:26): [True: 5.32k, False: 1.82k]
  |  Branch (3848:39): [True: 2.52k, False: 2.80k]
  |  Branch (3848:53): [True: 2.72k, False: 1.91k]
  ------------------
 3849|  39.9k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  2.89k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.89k|        {
  662|  2.89k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3792|   764k|    {
 3793|   764k|        return read_matching_string_classic_nocase(range, "0x");
 3794|   764k|    }
_ZN3scn2v34impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3892|   270k|    {
 3893|   270k|        auto it = range.begin();
 3894|       |
 3895|   270k|        std::ptrdiff_t digits_count = 0;
 3896|   270k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|   270k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.70k, False: 263k]
  |  |  ------------------
  ------------------
 3898|  7.70k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|  7.70k|                scan_error::invalid_scanned_value,
 3900|  7.70k|                "Invalid hexadecimal floating-point value"));
 3901|  7.70k|        }
 3902|   263k|        else {
 3903|   263k|            digits_count += ranges::distance(it, *r);
 3904|   263k|            it = *r;
 3905|   263k|        }
 3906|       |
 3907|   263k|        m_integral_part_length = digits_count;
 3908|   263k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 40.1k, False: 223k]
  ------------------
 3909|   263k|                                             m_locale_options.decimal_point)) {
 3910|  40.1k|            it = *r;
 3911|  40.1k|        }
 3912|       |
 3913|   263k|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 36.5k, False: 226k]
  ------------------
 3914|   263k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|  36.5k|            digits_count += ranges::distance(it, *r);
 3916|  36.5k|            it = *r;
 3917|  36.5k|        }
 3918|       |
 3919|   263k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|   263k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|   263k|        return it;
 3927|   263k|    }
_ZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3777|   534k|    {
 3778|   534k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   534k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 534k]
  |  |  |  Branch (859:45): [True: 0, False: 534k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|   534k|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|   534k|        return read_while1_code_unit(
 3787|   534k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|   534k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   534k|        : m_fptr([](storage fn,
  743|   534k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   534k|              cvref<T> obj = *get<T>(fn);
  745|   534k|              if constexpr (std::is_void_v<R>) {
  746|   534k|                  obj(static_cast<decltype(args)>(args)...);
  747|   534k|              }
  748|   534k|              else {
  749|   534k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   534k|              }
  751|   534k|          }),
  752|   534k|          m_storage(std::addressof(f))
  753|   534k|    {
  754|   534k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  2.78M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.78M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.78M|              else {
  749|  2.78M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.78M|              }
  751|  2.78M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  2.78M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.78M|        else if constexpr (std::is_object_v<T>) {
  688|  2.78M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.78M|    }
_ZZN3scn2v34impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3787|  2.78M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   534k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   534k|        {
  662|   534k|        }
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3864|   927k|    {
 3865|   927k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 113k, False: 813k]
  ------------------
 3866|   113k|            auto beg_exp_it = range.begin();
 3867|   113k|            auto it = *r;
 3868|       |
 3869|   113k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 113k, False: 290]
  ------------------
 3870|   113k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|   113k|                it = r_sign->first;
 3872|   113k|            }
 3873|       |
 3874|   113k|            if (auto r_exp = read_while1_code_unit(
 3875|   113k|                    ranges::subrange{it, range.end()},
 3876|   113k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|   113k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.78k, False: 111k]
  |  |  ------------------
  ------------------
 3878|  1.78k|                it = beg_exp_it;
 3879|  1.78k|            }
 3880|   111k|            else {
 3881|   111k|                it = *r_exp;
 3882|   111k|            }
 3883|       |
 3884|   113k|            return it;
 3885|   113k|        }
 3886|   813k|        return range.begin();
 3887|   927k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|   113k|        : m_fptr([](storage fn,
  743|   113k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   113k|              cvref<T> obj = *get<T>(fn);
  745|   113k|              if constexpr (std::is_void_v<R>) {
  746|   113k|                  obj(static_cast<decltype(args)>(args)...);
  747|   113k|              }
  748|   113k|              else {
  749|   113k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   113k|              }
  751|   113k|          }),
  752|   113k|          m_storage(std::addressof(f))
  753|   113k|    {
  754|   113k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   356k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   356k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   356k|              else {
  749|   356k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   356k|              }
  751|   356k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   356k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   356k|        else if constexpr (std::is_object_v<T>) {
  688|   356k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   356k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3876|   356k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|   113k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   113k|        {
  662|   113k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3932|   806k|    {
 3933|   806k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   806k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 694k, False: 111k]
  |  Branch (3934:50): [True: 19.8k, False: 675k]
  ------------------
 3935|       |
 3936|   806k|        auto it = ranges::begin(range);
 3937|   806k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   806k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   806k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   806k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.4k, False: 763k]
  |  |  ------------------
  ------------------
 3941|  42.4k|            return r.transform_error(
 3942|  42.4k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|  42.4k|                                              "Invalid floating-point value"));
 3944|  42.4k|        }
 3945|   763k|        else {
 3946|   763k|            digits_count += ranges::distance(it, *r);
 3947|   763k|            it = *r;
 3948|   763k|        }
 3949|       |
 3950|   763k|        m_integral_part_length = digits_count;
 3951|   763k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 148k, False: 615k]
  ------------------
 3952|   763k|                                             m_locale_options.decimal_point)) {
 3953|   148k|            it = *r;
 3954|   148k|        }
 3955|       |
 3956|   763k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 137k, False: 626k]
  ------------------
 3957|   763k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|   137k|            digits_count += ranges::distance(it, *r);
 3959|   137k|            it = *r;
 3960|   137k|        }
 3961|       |
 3962|   763k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   763k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 763k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   763k|        auto beg_exp_it = it;
 3968|   763k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 663k, False: 99.7k]
  ------------------
 3969|   663k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|   663k|        }
 3971|   763k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 19.1k, False: 744k]
  |  Branch (3971:29): [True: 11.2k, False: 7.88k]
  ------------------
 3972|  11.2k|            return unexpected_scan_error(
 3973|  11.2k|                scan_error::invalid_scanned_value,
 3974|  11.2k|                "No exponent given to scientific float");
 3975|  11.2k|        }
 3976|       |
 3977|   752k|        m_kind =
 3978|   752k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 641k, False: 111k]
  ------------------
 3979|       |
 3980|   752k|        return it;
 3981|   763k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3762|  1.56M|    {
 3763|  1.56M|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|  1.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.56M]
  |  |  |  Branch (859:45): [True: 0, False: 1.56M]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|  1.56M|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|  1.56M|        return read_while1_code_unit(
 3772|  1.56M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|  1.56M|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  1.56M|        : m_fptr([](storage fn,
  743|  1.56M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.56M|              cvref<T> obj = *get<T>(fn);
  745|  1.56M|              if constexpr (std::is_void_v<R>) {
  746|  1.56M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.56M|              }
  748|  1.56M|              else {
  749|  1.56M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.56M|              }
  751|  1.56M|          }),
  752|  1.56M|          m_storage(std::addressof(f))
  753|  1.56M|    {
  754|  1.56M|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  8.71M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.71M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  8.71M|              else {
  749|  8.71M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.71M|              }
  751|  8.71M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  8.71M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  8.71M|        else if constexpr (std::is_object_v<T>) {
  688|  8.71M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  8.71M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3772|  8.71M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  1.56M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.56M|        {
  662|  1.56M|        }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1564|  1.01M|    {
 1565|  1.01M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|  1.01M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  74.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  74.5k|        {
  662|  74.5k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   189k|        : m_fptr([](storage fn,
  743|   189k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   189k|              cvref<T> obj = *get<T>(fn);
  745|   189k|              if constexpr (std::is_void_v<R>) {
  746|   189k|                  obj(static_cast<decltype(args)>(args)...);
  747|   189k|              }
  748|   189k|              else {
  749|   189k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   189k|              }
  751|   189k|          }),
  752|   189k|          m_storage(std::addressof(f))
  753|   189k|    {
  754|   189k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   189k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   189k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   189k|              else {
  749|   189k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   189k|              }
  751|   189k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   189k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   189k|        else if constexpr (std::is_object_v<T>) {
  688|   189k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   189k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   189k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   189k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   189k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   189k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3653|   902k|    {
 3654|   902k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   902k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 902k]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|   902k|        return read_source_impl(range);
 3660|   902k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   189k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   189k|        {
  662|   189k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   227k|    {
 4159|   227k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   227k|#if !SCN_DISABLE_LOCALE
 4162|   227k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 63.2k, False: 164k]
  ------------------
 4163|  63.2k|            return read_impl<Range>(
 4164|  63.2k|                range, rd,
 4165|  63.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  63.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  63.2k|                },
 4168|  63.2k|                value, loc);
 4169|  63.2k|        }
 4170|   164k|#endif
 4171|       |
 4172|   164k|        return read_impl<Range>(
 4173|   164k|            range, rd,
 4174|   164k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   164k|                return r.read_source(SCN_FWD(args)...);
 4176|   164k|            },
 4177|   164k|            value);
 4178|   227k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   322k|    {
 4195|   322k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   322k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   322k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.5k, False: 310k]
  |  |  ------------------
  ------------------
 4197|  11.5k|            return unexpected(r.error());
 4198|  11.5k|        }
 4199|       |
 4200|   310k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   310k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   310k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   310k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.5k, False: 298k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  12.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  12.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  12.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  12.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  12.5k|    }                                                  \
  |  |  |  | 3667|   310k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   298k|        return ranges::next(range.begin(), n);
 4202|   310k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   991k|    {
  763|   991k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   991k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   991k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  63.2k|        : m_fptr([](storage fn,
  743|  63.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  63.2k|              cvref<T> obj = *get<T>(fn);
  745|  63.2k|              if constexpr (std::is_void_v<R>) {
  746|  63.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  63.2k|              }
  748|  63.2k|              else {
  749|  63.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  63.2k|              }
  751|  63.2k|          }),
  752|  63.2k|          m_storage(std::addressof(f))
  753|  63.2k|    {
  754|  63.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  63.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  63.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  63.2k|              else {
  749|  63.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  63.2k|              }
  751|  63.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  63.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  63.2k|        else if constexpr (std::is_object_v<T>) {
  688|  63.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  63.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  63.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  63.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  63.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  63.2k|                },
_ZN3scn2v34impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|   196k|    {
 3668|   196k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|   196k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|   196k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 196k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|   196k|        return read_source_impl(range);
 3674|   196k|    }
_ZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|   991k|    {
 3694|   991k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   991k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   991k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   991k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   991k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 991k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   991k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   991k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|   991k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|   991k|        auto it = sign_result.first;
 3697|   991k|        m_sign = sign_result.second;
 3698|       |
 3699|   991k|        auto digits_begin = it;
 3700|   991k|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|   991k|                      ranges::sized_range<Range>) {
 3703|   991k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 991k]
  |  |  |  Branch (859:45): [True: 0, False: 991k]
  |  |  |  Branch (859:45): [True: 0, False: 991k]
  |  |  ------------------
  ------------------
 3704|   991k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|   991k|            else {
 3713|   991k|                auto cb = [&](const auto& rr)
 3714|   991k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|   991k|                    auto res = read_all(rr);
 3716|   991k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|   991k|                        return unexpected_scan_error(
 3718|   991k|                            scan_error::invalid_scanned_value,
 3719|   991k|                            "Invalid float value");
 3720|   991k|                    }
 3721|   991k|                    return res;
 3722|   991k|                };
 3723|   991k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|   991k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   991k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   991k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 35.5k, False: 955k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  35.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  35.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  35.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  35.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  35.5k|    }                                                  \
  |  | 3667|   991k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   991k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|   955k|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|   991k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   991k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   991k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|   955k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 950k, False: 5.63k]
  |  Branch (3736:48): [True: 945k, False: 5.10k]
  ------------------
 3737|   955k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 901k, False: 44.0k]
  ------------------
 3738|   955k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 899k, False: 1.55k]
  ------------------
 3739|   899k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|   899k|        }
 3741|       |
 3742|   955k|        handle_separators();
 3743|       |
 3744|   955k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 955k]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|   955k|        return it;
 3757|   955k|    }
_ZN3scn2v34impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|   991k|    {
 3800|   991k|        auto it = range.begin();
 3801|   991k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 980k, False: 10.7k]
  ------------------
 3802|   980k|            return unexpected(r.error());
 3803|   980k|        }
 3804|  10.7k|        else {
 3805|  10.7k|            it = *r;
 3806|  10.7k|        }
 3807|       |
 3808|  10.7k|        if (auto r = read_matching_string_classic_nocase(
 3809|  10.7k|                ranges::subrange{it, range.end()}, "inity");
 3810|  10.7k|            !r) {
  ------------------
  |  Branch (3810:13): [True: 5.63k, False: 5.10k]
  ------------------
 3811|  5.63k|            m_kind = float_kind::inf_short;
 3812|  5.63k|            return it;
 3813|  5.63k|        }
 3814|  5.10k|        else {
 3815|  5.10k|            m_kind = float_kind::inf_long;
 3816|  5.10k|            return *r;
 3817|  5.10k|        }
 3818|  10.7k|    }
_ZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|   980k|    {
 3823|   980k|        auto it = range.begin();
 3824|   980k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 933k, False: 46.8k]
  ------------------
 3825|   933k|            return r.transform_error(map_parse_error_to_scan_error(
 3826|   933k|                scan_error::invalid_scanned_value,
 3827|   933k|                "Invalid floating-point NaN value"));
 3828|   933k|        }
 3829|  46.8k|        else {
 3830|  46.8k|            it = *r;
 3831|  46.8k|        }
 3832|       |
 3833|  46.8k|        if (auto r =
 3834|  46.8k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|  46.8k|            !r) {
  ------------------
  |  Branch (3835:13): [True: 44.0k, False: 2.76k]
  ------------------
 3836|  44.0k|            m_kind = float_kind::nan_simple;
 3837|  44.0k|            return it;
 3838|  44.0k|        }
 3839|  2.76k|        else {
 3840|  2.76k|            it = *r;
 3841|  2.76k|        }
 3842|       |
 3843|  2.76k|        auto payload_beg_it = it;
 3844|  2.76k|        it = read_while_code_unit(
 3845|  2.76k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|  2.76k|                return is_ascii_char(ch) &&
 3847|  2.76k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|  2.76k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|  2.76k|            });
 3850|  2.76k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|  2.76k|        m_kind = float_kind::nan_with_payload;
 3853|  2.76k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 1.55k, False: 1.20k]
  ------------------
 3854|  2.76k|                                             ')')) {
 3855|  1.55k|            return *r;
 3856|  1.55k|        }
 3857|  1.20k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|  1.20k|                                     "Invalid floating-point NaN payload");
 3859|  2.76k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  2.76k|        : m_fptr([](storage fn,
  743|  2.76k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.76k|              cvref<T> obj = *get<T>(fn);
  745|  2.76k|              if constexpr (std::is_void_v<R>) {
  746|  2.76k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.76k|              }
  748|  2.76k|              else {
  749|  2.76k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.76k|              }
  751|  2.76k|          }),
  752|  2.76k|          m_storage(std::addressof(f))
  753|  2.76k|    {
  754|  2.76k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  33.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  33.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  33.4k|              else {
  749|  33.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  33.4k|              }
  751|  33.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|  33.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  33.4k|        else if constexpr (std::is_object_v<T>) {
  688|  33.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  33.4k|    }
_ZZN3scn2v34impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3845|  33.4k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|  33.4k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3846:24): [True: 33.3k, False: 83]
  ------------------
 3847|  33.4k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3847:26): [True: 31.6k, False: 1.71k]
  |  Branch (3847:39): [True: 23.8k, False: 7.80k]
  |  Branch (3847:54): [True: 2.55k, False: 6.95k]
  |  Branch (3847:67): [True: 2.47k, False: 83]
  ------------------
 3848|  33.3k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3848:26): [True: 5.32k, False: 1.71k]
  |  Branch (3848:39): [True: 2.52k, False: 2.80k]
  |  Branch (3848:53): [True: 2.72k, False: 1.79k]
  ------------------
 3849|  33.4k|            });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  2.76k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.76k|        {
  662|  2.76k|        }
_ZN3scn2v34impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|   660k|    {
 3793|   660k|        return read_matching_string_classic_nocase(range, "0x");
 3794|   660k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|   552k|{
 1984|   552k|    auto it = read_while_code_unit(range, pred);
 1985|   552k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 232k, False: 319k]
  ------------------
 1986|   232k|        return unexpected(parse_error::error);
 1987|   232k|    }
 1988|   319k|    return it;
 1989|   552k|}
_ZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3864|   160k|    {
 3865|   160k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 27.2k, False: 133k]
  ------------------
 3866|  27.2k|            auto beg_exp_it = range.begin();
 3867|  27.2k|            auto it = *r;
 3868|       |
 3869|  27.2k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 27.1k, False: 96]
  ------------------
 3870|  27.2k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|  27.1k|                it = r_sign->first;
 3872|  27.1k|            }
 3873|       |
 3874|  27.2k|            if (auto r_exp = read_while1_code_unit(
 3875|  27.2k|                    ranges::subrange{it, range.end()},
 3876|  27.2k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|  27.2k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  27.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 650, False: 26.5k]
  |  |  ------------------
  ------------------
 3878|    650|                it = beg_exp_it;
 3879|    650|            }
 3880|  26.5k|            else {
 3881|  26.5k|                it = *r_exp;
 3882|  26.5k|            }
 3883|       |
 3884|  27.2k|            return it;
 3885|  27.2k|        }
 3886|   133k|        return range.begin();
 3887|   160k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  27.2k|        : m_fptr([](storage fn,
  743|  27.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  27.2k|              cvref<T> obj = *get<T>(fn);
  745|  27.2k|              if constexpr (std::is_void_v<R>) {
  746|  27.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  27.2k|              }
  748|  27.2k|              else {
  749|  27.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  27.2k|              }
  751|  27.2k|          }),
  752|  27.2k|          m_storage(std::addressof(f))
  753|  27.2k|    {
  754|  27.2k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|  77.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  77.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  77.9k|              else {
  749|  77.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  77.9k|              }
  751|  77.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  77.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  77.9k|        else if constexpr (std::is_object_v<T>) {
  688|  77.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  77.9k|    }
_ZZN3scn2v34impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3876|  77.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  27.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  27.2k|        {
  662|  27.2k|        }
_ZN3scn2v34impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|   273k|    {
 3933|   273k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   273k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 171k, False: 102k]
  |  Branch (3934:50): [True: 18.1k, False: 153k]
  ------------------
 3935|       |
 3936|   273k|        auto it = ranges::begin(range);
 3937|   273k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   273k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   273k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.5k, False: 251k]
  |  |  ------------------
  ------------------
 3941|  22.5k|            return r.transform_error(
 3942|  22.5k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|  22.5k|                                              "Invalid floating-point value"));
 3944|  22.5k|        }
 3945|   251k|        else {
 3946|   251k|            digits_count += ranges::distance(it, *r);
 3947|   251k|            it = *r;
 3948|   251k|        }
 3949|       |
 3950|   251k|        m_integral_part_length = digits_count;
 3951|   251k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 45.2k, False: 205k]
  ------------------
 3952|   251k|                                             m_locale_options.decimal_point)) {
 3953|  45.2k|            it = *r;
 3954|  45.2k|        }
 3955|       |
 3956|   251k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 41.4k, False: 209k]
  ------------------
 3957|   251k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|  41.4k|            digits_count += ranges::distance(it, *r);
 3959|  41.4k|            it = *r;
 3960|  41.4k|        }
 3961|       |
 3962|   251k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   251k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 251k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   251k|        auto beg_exp_it = it;
 3968|   251k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 160k, False: 90.4k]
  ------------------
 3969|   160k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|   160k|        }
 3971|   251k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 17.0k, False: 234k]
  |  Branch (3971:29): [True: 10.9k, False: 6.09k]
  ------------------
 3972|  10.9k|            return unexpected_scan_error(
 3973|  10.9k|                scan_error::invalid_scanned_value,
 3974|  10.9k|                "No exponent given to scientific float");
 3975|  10.9k|        }
 3976|       |
 3977|   240k|        m_kind =
 3978|   240k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 213k, False: 26.5k]
  ------------------
 3979|       |
 3980|   240k|        return it;
 3981|   251k|    }
_ZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|   524k|    {
 3763|   524k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   524k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 524k]
  |  |  |  Branch (859:45): [True: 0, False: 524k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|   524k|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|   524k|        return read_while1_code_unit(
 3772|   524k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|   524k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   524k|        : m_fptr([](storage fn,
  743|   524k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   524k|              cvref<T> obj = *get<T>(fn);
  745|   524k|              if constexpr (std::is_void_v<R>) {
  746|   524k|                  obj(static_cast<decltype(args)>(args)...);
  747|   524k|              }
  748|   524k|              else {
  749|   524k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   524k|              }
  751|   524k|          }),
  752|   524k|          m_storage(std::addressof(f))
  753|   524k|    {
  754|   524k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  2.73M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.73M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.73M|              else {
  749|  2.73M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.73M|              }
  751|  2.73M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  2.73M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.73M|        else if constexpr (std::is_object_v<T>) {
  688|  2.73M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.73M|    }
_ZZN3scn2v34impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3772|  2.73M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   524k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   524k|        {
  662|   524k|        }
_ZN3scn2v34impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|   991k|    {
 3989|   991k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|   991k|        const bool allowed_nonhex =
 3991|   991k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|   991k|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|   991k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 980k, False: 10.7k]
  |  Branch (3994:45): [True: 0, False: 980k]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|   991k|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 10.7k, False: 980k]
  ------------------
 4000|  10.7k|            return *r;
 4001|  10.7k|        }
 4002|       |
 4003|   980k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 935k, False: 45.6k]
  |  Branch (4003:45): [True: 1.20k, False: 933k]
  ------------------
 4004|  1.20k|            return unexpected(r.error());
 4005|  1.20k|        }
 4006|   979k|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 45.6k, False: 933k]
  ------------------
 4007|  45.6k|            return *r;
 4008|  45.6k|        }
 4009|       |
 4010|   933k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 660k, False: 273k]
  |  Branch (4010:28): [True: 199k, False: 460k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   199k|            auto it = range.begin();
 4014|       |
 4015|   199k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 11.7k, False: 187k]
  ------------------
 4016|  11.7k|                m_kind = float_kind::hex_with_prefix;
 4017|  11.7k|                it = *r;
 4018|  11.7k|            }
 4019|   187k|            else {
 4020|   187k|                m_kind = float_kind::hex_without_prefix;
 4021|   187k|            }
 4022|       |
 4023|   199k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   199k|        }
 4025|   734k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 273k, False: 460k]
  |  Branch (4025:29): [True: 273k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   273k|            m_kind = float_kind::generic;
 4029|   273k|            return read_regular_float(range);
 4030|   273k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   460k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   460k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.8k, False: 431k]
  |  |  ------------------
  ------------------
 4036|  28.8k|            m_kind = float_kind::hex_with_prefix;
 4037|  28.8k|            return read_hex(ranges::subrange{*r, range.end()});
 4038|  28.8k|        }
 4039|       |
 4040|   431k|        m_kind = float_kind::generic;
 4041|   431k|        return read_regular(range);
 4042|   460k|    }
_ZZN3scn2v34impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|   660k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|   660k|                    auto res = read_all(rr);
 3716|   660k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   660k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 837, False: 659k]
  |  |  ------------------
  ------------------
 3717|    837|                        return unexpected_scan_error(
 3718|    837|                            scan_error::invalid_scanned_value,
 3719|    837|                            "Invalid float value");
 3720|    837|                    }
 3721|   659k|                    return res;
 3722|   660k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|   660k|{
 1827|   660k|    return ranges::next(range.begin(), range.end());
 1828|   660k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   660k|    {
  313|   660k|        ranges::advance(x, bound);
  314|   660k|        return x;
  315|   660k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   660k|    {
  275|   660k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   660k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   660k|    {
  190|   660k|        i = std::move(bound);
  191|   660k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|   902k|    {
 1565|   902k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   902k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   902k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1608|   902k|    {
 1609|   902k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|   902k|                      ranges::sized_range<Range>) {
 1614|   902k|            m_storage.reset();
 1615|   902k|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   902k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  63.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  63.2k|        {
  662|  63.2k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   164k|        : m_fptr([](storage fn,
  743|   164k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   164k|              cvref<T> obj = *get<T>(fn);
  745|   164k|              if constexpr (std::is_void_v<R>) {
  746|   164k|                  obj(static_cast<decltype(args)>(args)...);
  747|   164k|              }
  748|   164k|              else {
  749|   164k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   164k|              }
  751|   164k|          }),
  752|   164k|          m_storage(std::addressof(f))
  753|   164k|    {
  754|   164k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   164k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   164k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   164k|              else {
  749|   164k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   164k|              }
  751|   164k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   164k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   164k|        else if constexpr (std::is_object_v<T>) {
  688|   164k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   164k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   164k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   164k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   164k|            },
_ZN3scn2v34impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|   795k|    {
 3654|   795k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   795k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 795k]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|   795k|        return read_source_impl(range);
 3660|   795k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   164k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   164k|        {
  662|   164k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|   278k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   278k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   278k|            auto rd = make_reader<T, char_type>();
 6195|   278k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 278k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   278k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 278k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   278k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   278k|                return impl(rd, range, value);
 6202|   278k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   278k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   278k|    {
 6113|   278k|        const bool need_skipped_width =
 6114|   278k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 278k]
  |  Branch (6114:33): [True: 0, False: 278k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   278k|        auto it = rng.begin();
 6118|   278k|        std::ptrdiff_t prefix_width = 0;
 6119|   278k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 278k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   278k|        else {
 6127|   278k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   278k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   278k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   278k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   278k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.87k, False: 274k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.87k|    }                                                  \
  |  |  |  | 3667|   278k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   274k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   274k|            std::tie(it, prefix_width) = prefix_result;
 6129|   274k|        }
 6130|   274k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   274k|        std::ptrdiff_t value_width = 0;
 6134|   274k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 274k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   274k|        else {
 6150|   274k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   274k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   274k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   274k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.3k, False: 256k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.3k|    }                                                  \
  |  | 3667|   274k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   274k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   256k|                                             specs, value, loc));
 6152|       |
 6153|   256k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 256k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   256k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   256k|        std::ptrdiff_t postfix_width = 0;
 6162|   256k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 252k, False: 3.89k]
  ------------------
 6163|   252k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   252k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   252k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   252k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   252k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 252k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   252k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   252k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   252k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   252k|                                 value_width));
 6167|   252k|            std::tie(it, postfix_width) = postfix_result;
 6168|   252k|        }
 6169|       |
 6170|   256k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   256k|                                                 value_width, postfix_width);
 6172|   256k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 256k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   256k|        return it;
 6177|   256k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|   681k|    {
 3680|   681k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   681k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   681k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   681k|        const std::ptrdiff_t sign_len =
 3683|   681k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 169k, False: 512k]
  ------------------
 3684|       |
 3685|   681k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   681k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   681k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   681k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   681k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 13.1k, False: 668k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  13.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  13.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  13.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  13.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  13.1k|    }                                                  \
  |  |  |  | 3667|   681k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   668k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   668k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   681k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   274k|    {
 4159|   274k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   274k|#if !SCN_DISABLE_LOCALE
 4162|   274k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 78.9k, False: 195k]
  ------------------
 4163|  78.9k|            return read_impl<Range>(
 4164|  78.9k|                range, rd,
 4165|  78.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  78.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  78.9k|                },
 4168|  78.9k|                value, loc);
 4169|  78.9k|        }
 4170|   195k|#endif
 4171|       |
 4172|   195k|        return read_impl<Range>(
 4173|   195k|            range, rd,
 4174|   195k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   195k|                return r.read_source(SCN_FWD(args)...);
 4176|   195k|            },
 4177|   195k|            value);
 4178|   274k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   382k|    {
 4195|   382k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   382k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   382k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.9k, False: 361k]
  |  |  ------------------
  ------------------
 4197|  20.9k|            return unexpected(r.error());
 4198|  20.9k|        }
 4199|       |
 4200|   361k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   361k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   361k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   361k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.46k, False: 359k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.46k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.46k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.46k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.46k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.46k|    }                                                  \
  |  |  |  | 3667|   361k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   359k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   359k|        return ranges::next(range.begin(), n);
 4202|   361k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  78.9k|        : m_fptr([](storage fn,
  743|  78.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  78.9k|              cvref<T> obj = *get<T>(fn);
  745|  78.9k|              if constexpr (std::is_void_v<R>) {
  746|  78.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  78.9k|              }
  748|  78.9k|              else {
  749|  78.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  78.9k|              }
  751|  78.9k|          }),
  752|  78.9k|          m_storage(std::addressof(f))
  753|  78.9k|    {
  754|  78.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  78.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  78.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  78.9k|              else {
  749|  78.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  78.9k|              }
  751|  78.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  78.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  78.9k|        else if constexpr (std::is_object_v<T>) {
  688|  78.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  78.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  78.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  78.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  78.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  78.9k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  78.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  78.9k|        {
  662|  78.9k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   195k|        : m_fptr([](storage fn,
  743|   195k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   195k|              cvref<T> obj = *get<T>(fn);
  745|   195k|              if constexpr (std::is_void_v<R>) {
  746|   195k|                  obj(static_cast<decltype(args)>(args)...);
  747|   195k|              }
  748|   195k|              else {
  749|   195k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   195k|              }
  751|   195k|          }),
  752|   195k|          m_storage(std::addressof(f))
  753|   195k|    {
  754|   195k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   195k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   195k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   195k|              else {
  749|   195k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   195k|              }
  751|   195k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   195k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   195k|        else if constexpr (std::is_object_v<T>) {
  688|   195k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   195k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   195k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   195k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   195k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   195k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   195k|        {
  662|   195k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   233k|    {
 4159|   233k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   233k|#if !SCN_DISABLE_LOCALE
 4162|   233k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 65.7k, False: 167k]
  ------------------
 4163|  65.7k|            return read_impl<Range>(
 4164|  65.7k|                range, rd,
 4165|  65.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  65.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  65.7k|                },
 4168|  65.7k|                value, loc);
 4169|  65.7k|        }
 4170|   167k|#endif
 4171|       |
 4172|   167k|        return read_impl<Range>(
 4173|   167k|            range, rd,
 4174|   167k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   167k|                return r.read_source(SCN_FWD(args)...);
 4176|   167k|            },
 4177|   167k|            value);
 4178|   233k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   332k|    {
 4195|   332k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   332k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.8k, False: 320k]
  |  |  ------------------
  ------------------
 4197|  11.8k|            return unexpected(r.error());
 4198|  11.8k|        }
 4199|       |
 4200|   320k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   320k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   320k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   320k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   320k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.6k, False: 308k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.6k|    }                                                  \
  |  |  |  | 3667|   320k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   308k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   308k|        return ranges::next(range.begin(), n);
 4202|   320k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  65.7k|        : m_fptr([](storage fn,
  743|  65.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  65.7k|              cvref<T> obj = *get<T>(fn);
  745|  65.7k|              if constexpr (std::is_void_v<R>) {
  746|  65.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  65.7k|              }
  748|  65.7k|              else {
  749|  65.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  65.7k|              }
  751|  65.7k|          }),
  752|  65.7k|          m_storage(std::addressof(f))
  753|  65.7k|    {
  754|  65.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  65.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  65.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  65.7k|              else {
  749|  65.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  65.7k|              }
  751|  65.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  65.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  65.7k|        else if constexpr (std::is_object_v<T>) {
  688|  65.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  65.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  65.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  65.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  65.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  65.7k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  65.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  65.7k|        {
  662|  65.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   167k|        : m_fptr([](storage fn,
  743|   167k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   167k|              cvref<T> obj = *get<T>(fn);
  745|   167k|              if constexpr (std::is_void_v<R>) {
  746|   167k|                  obj(static_cast<decltype(args)>(args)...);
  747|   167k|              }
  748|   167k|              else {
  749|   167k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   167k|              }
  751|   167k|          }),
  752|   167k|          m_storage(std::addressof(f))
  753|   167k|    {
  754|   167k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   167k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   167k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   167k|              else {
  749|   167k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   167k|              }
  751|   167k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   167k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   167k|        else if constexpr (std::is_object_v<T>) {
  688|   167k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   167k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   167k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   167k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   167k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   167k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   167k|        {
  662|   167k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|   282k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   282k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   282k|            auto rd = make_reader<T, char_type>();
 6195|   282k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 282k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   282k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 282k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   282k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   282k|                return impl(rd, range, value);
 6202|   282k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   282k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   282k|    {
 6113|   282k|        const bool need_skipped_width =
 6114|   282k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 282k]
  |  Branch (6114:33): [True: 0, False: 282k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   282k|        auto it = rng.begin();
 6118|   282k|        std::ptrdiff_t prefix_width = 0;
 6119|   282k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 282k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   282k|        else {
 6127|   282k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   282k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   282k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   282k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.18k, False: 277k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.18k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.18k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.18k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.18k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.18k|    }                                                  \
  |  |  |  | 3667|   282k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   277k|            std::tie(it, prefix_width) = prefix_result;
 6129|   277k|        }
 6130|   277k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   277k|        std::ptrdiff_t value_width = 0;
 6134|   277k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 277k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   277k|        else {
 6150|   277k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   277k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   277k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 17.0k, False: 260k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  17.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  17.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  17.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  17.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  17.0k|    }                                                  \
  |  | 3667|   277k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   277k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   260k|                                             specs, value, loc));
 6152|       |
 6153|   260k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 260k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   260k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   260k|        std::ptrdiff_t postfix_width = 0;
 6162|   260k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 256k, False: 4.15k]
  ------------------
 6163|   256k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   256k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   256k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   256k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 256k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   256k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   256k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   256k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   256k|                                 value_width));
 6167|   256k|            std::tie(it, postfix_width) = postfix_result;
 6168|   256k|        }
 6169|       |
 6170|   260k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   260k|                                                 value_width, postfix_width);
 6172|   260k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 260k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   260k|        return it;
 6177|   260k|    }
_ZN3scn2v34impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3679|   690k|    {
 3680|   690k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   690k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   690k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   690k|        const std::ptrdiff_t sign_len =
 3683|   690k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 173k, False: 516k]
  ------------------
 3684|       |
 3685|   690k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   690k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   690k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   690k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   690k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.3k, False: 679k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.3k|    }                                                  \
  |  |  |  | 3667|   690k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   679k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   679k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   690k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   277k|    {
 4159|   277k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   277k|#if !SCN_DISABLE_LOCALE
 4162|   277k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 80.3k, False: 196k]
  ------------------
 4163|  80.3k|            return read_impl<Range>(
 4164|  80.3k|                range, rd,
 4165|  80.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  80.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  80.3k|                },
 4168|  80.3k|                value, loc);
 4169|  80.3k|        }
 4170|   196k|#endif
 4171|       |
 4172|   196k|        return read_impl<Range>(
 4173|   196k|            range, rd,
 4174|   196k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   196k|                return r.read_source(SCN_FWD(args)...);
 4176|   196k|            },
 4177|   196k|            value);
 4178|   277k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   387k|    {
 4195|   387k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   387k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   387k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.5k, False: 365k]
  |  |  ------------------
  ------------------
 4197|  21.5k|            return unexpected(r.error());
 4198|  21.5k|        }
 4199|       |
 4200|   365k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   365k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   365k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   365k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   365k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 390, False: 365k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    390|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    390|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    390|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    390|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    390|    }                                                  \
  |  |  |  | 3667|   365k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   365k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   365k|        return ranges::next(range.begin(), n);
 4202|   365k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  80.3k|        : m_fptr([](storage fn,
  743|  80.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  80.3k|              cvref<T> obj = *get<T>(fn);
  745|  80.3k|              if constexpr (std::is_void_v<R>) {
  746|  80.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  80.3k|              }
  748|  80.3k|              else {
  749|  80.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  80.3k|              }
  751|  80.3k|          }),
  752|  80.3k|          m_storage(std::addressof(f))
  753|  80.3k|    {
  754|  80.3k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  80.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  80.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  80.3k|              else {
  749|  80.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  80.3k|              }
  751|  80.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  80.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  80.3k|        else if constexpr (std::is_object_v<T>) {
  688|  80.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  80.3k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  80.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  80.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  80.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  80.3k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  80.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  80.3k|        {
  662|  80.3k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   196k|        : m_fptr([](storage fn,
  743|   196k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   196k|              cvref<T> obj = *get<T>(fn);
  745|   196k|              if constexpr (std::is_void_v<R>) {
  746|   196k|                  obj(static_cast<decltype(args)>(args)...);
  747|   196k|              }
  748|   196k|              else {
  749|   196k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   196k|              }
  751|   196k|          }),
  752|   196k|          m_storage(std::addressof(f))
  753|   196k|    {
  754|   196k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   196k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   196k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   196k|              else {
  749|   196k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   196k|              }
  751|   196k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   196k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   196k|        else if constexpr (std::is_object_v<T>) {
  688|   196k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   196k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   196k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   196k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   196k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   196k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   196k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   196k|        {
  662|   196k|        }
_ZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   236k|    {
 4159|   236k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   236k|#if !SCN_DISABLE_LOCALE
 4162|   236k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 67.1k, False: 169k]
  ------------------
 4163|  67.1k|            return read_impl<Range>(
 4164|  67.1k|                range, rd,
 4165|  67.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  67.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  67.1k|                },
 4168|  67.1k|                value, loc);
 4169|  67.1k|        }
 4170|   169k|#endif
 4171|       |
 4172|   169k|        return read_impl<Range>(
 4173|   169k|            range, rd,
 4174|   169k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   169k|                return r.read_source(SCN_FWD(args)...);
 4176|   169k|            },
 4177|   169k|            value);
 4178|   236k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   337k|    {
 4195|   337k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   337k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.1k, False: 325k]
  |  |  ------------------
  ------------------
 4197|  12.1k|            return unexpected(r.error());
 4198|  12.1k|        }
 4199|       |
 4200|   325k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   325k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   325k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   325k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.0k, False: 314k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.0k|    }                                                  \
  |  |  |  | 3667|   325k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   314k|        return ranges::next(range.begin(), n);
 4202|   325k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  67.1k|        : m_fptr([](storage fn,
  743|  67.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  67.1k|              cvref<T> obj = *get<T>(fn);
  745|  67.1k|              if constexpr (std::is_void_v<R>) {
  746|  67.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  67.1k|              }
  748|  67.1k|              else {
  749|  67.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  67.1k|              }
  751|  67.1k|          }),
  752|  67.1k|          m_storage(std::addressof(f))
  753|  67.1k|    {
  754|  67.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  67.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  67.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  67.1k|              else {
  749|  67.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  67.1k|              }
  751|  67.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  67.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  67.1k|        else if constexpr (std::is_object_v<T>) {
  688|  67.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  67.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  67.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  67.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  67.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  67.1k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  67.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  67.1k|        {
  662|  67.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   169k|        : m_fptr([](storage fn,
  743|   169k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   169k|              cvref<T> obj = *get<T>(fn);
  745|   169k|              if constexpr (std::is_void_v<R>) {
  746|   169k|                  obj(static_cast<decltype(args)>(args)...);
  747|   169k|              }
  748|   169k|              else {
  749|   169k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   169k|              }
  751|   169k|          }),
  752|   169k|          m_storage(std::addressof(f))
  753|   169k|    {
  754|   169k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   169k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   169k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   169k|              else {
  749|   169k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   169k|              }
  751|   169k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   169k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   169k|        else if constexpr (std::is_object_v<T>) {
  688|   169k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   169k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   169k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   169k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   169k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   169k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   169k|        {
  662|   169k|        }
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|  1.15M|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|  1.15M|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|  1.15M|        else {
 1054|  1.15M|            return r.begin().contiguous_segment();
 1055|  1.15M|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|  1.15M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|  1.01M|{
 2049|  1.01M|    auto it = range.begin();
 2050|  1.90M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.89M, False: 14.9k]
  ------------------
 2051|  1.89M|        const auto val =
 2052|  1.89M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.89M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.89M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.87M, False: 11.6k]
  |  |  ------------------
  ------------------
 2054|  1.87M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.87M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.87M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 1.00M, False: 879k]
  ------------------
 2057|  1.00M|                return it;
 2058|  1.00M|            }
 2059|  1.87M|        }
 2060|   890k|        it = val.iterator;
 2061|   890k|    }
 2062|       |
 2063|  14.9k|    return it;
 2064|  1.01M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  1.89M|{
 1887|  1.89M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  1.89M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  1.89M|    auto it = range.begin();
 1891|  1.89M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  1.89M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.89M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.6k, False: 1.87M]
  |  |  ------------------
  ------------------
 1894|  11.6k|        ++it;
 1895|  11.6k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  11.6k|        return {it, {}};
 1897|  11.6k|    }
 1898|       |
 1899|  1.87M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 1.86M, False: 18.3k]
  ------------------
 1900|  1.86M|        ++it;
 1901|  1.86M|        return {it, string_type(1, *range.begin())};
 1902|  1.86M|    }
 1903|       |
 1904|  18.3k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  18.3k|    return {it, string_type{range.begin(), it}};
 1906|  1.87M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  11.6k|{
 1155|  11.6k|    auto it = input.begin();
 1156|  92.4k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 91.1k, False: 1.36k]
  ------------------
 1157|  91.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 10.2k, False: 80.8k]
  ------------------
 1158|  10.2k|            break;
 1159|  10.2k|        }
 1160|  91.1k|    }
 1161|  11.6k|    return it;
 1162|  11.6k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  18.3k|    {
  283|  18.3k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  18.3k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  18.3k|    {
  252|  18.3k|        constexpr iter_difference_t<I> zero{0};
  253|  18.3k|        iter_difference_t<I> counter{0};
  254|       |
  255|  55.4k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 38.1k, False: 17.3k]
  |  Branch (255:30): [True: 37.1k, False: 981]
  ------------------
  256|  37.1k|            ++i;
  257|  37.1k|            ++counter;
  258|  37.1k|        }
  259|       |
  260|  18.3k|        return counter;
  261|  18.3k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1877|  1.89M|    {
 1878|  1.89M|        return !codepoint.empty();
 1879|  1.89M|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|  1.01M|{
 2070|  1.01M|    return read_until_code_point(range, std::not_fn(pred));
 2071|  1.01M|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|  1.15M|{
 2940|  1.15M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 1.15M, False: 0]
  ------------------
 2941|  1.15M|        auto it = read_while_classic_space(range);
 2942|  1.15M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  1.15M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.15M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.9k, False: 1.13M]
  |  |  ------------------
  ------------------
 2944|  14.9k|            return unexpected(e);
 2945|  14.9k|        }
 2946|       |
 2947|  1.13M|        return it;
 2948|  1.15M|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  1.15M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|  1.15M|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  1.15M|    else {
 2114|  1.15M|        auto it = range.begin();
 2115|       |
 2116|  1.15M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|  1.15M|            auto seg = get_contiguous_beginning(range);
 2118|  1.15M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|  1.15M|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 135k, False: 1.01M]
  ------------------
 2120|   135k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|   135k|            }
 2122|  1.01M|            ranges::advance(it, seg.size());
 2123|  1.01M|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.15M|            return detail::is_cp_space(cp);
 2127|  1.15M|        });
 2128|  1.15M|    }
 2129|  1.15M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.01M|        : m_fptr([](storage fn,
  743|  1.01M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.01M|              cvref<T> obj = *get<T>(fn);
  745|  1.01M|              if constexpr (std::is_void_v<R>) {
  746|  1.01M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.01M|              }
  748|  1.01M|              else {
  749|  1.01M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.01M|              }
  751|  1.01M|          }),
  752|  1.01M|          m_storage(std::addressof(f))
  753|  1.01M|    {
  754|  1.01M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.87M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.87M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.87M|              else {
  749|  1.87M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.87M|              }
  751|  1.87M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.87M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.87M|        else if constexpr (std::is_object_v<T>) {
  688|  1.87M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.87M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  1.87M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.87M|            return detail::is_cp_space(cp);
 2127|  1.87M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.01M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.01M|        {
  662|  1.01M|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   556k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   556k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   556k|        auto beg = r.begin();
  990|   556k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 556k, False: 0]
  ------------------
  991|   556k|            return false;
  992|   556k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   556k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  3.88M|    {
  763|  3.88M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  3.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  3.88M|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1844|  1.45M|{
 1845|  1.45M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|       |    if constexpr (ranges::sized_range<Range>) {
 1848|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|       |        if (sz < count) {
 1850|       |            return unexpected(eof_error::eof);
 1851|       |        }
 1852|       |
 1853|       |        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|  1.45M|    else {
 1856|  1.45M|        auto it = range.begin();
 1857|  1.45M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1857:13): [True: 873k, False: 583k]
  ------------------
 1858|   873k|            return ranges::next(it, count);
 1859|   873k|        }
 1860|       |
 1861|  2.24M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1861:36): [True: 1.71M, False: 529k]
  ------------------
 1862|  1.71M|            if (it == range.end()) {
  ------------------
  |  Branch (1862:17): [True: 53.7k, False: 1.66M]
  ------------------
 1863|  53.7k|                return unexpected(eof_error::eof);
 1864|  53.7k|            }
 1865|  1.71M|        }
 1866|       |
 1867|   529k|        return it;
 1868|   583k|    }
 1869|  1.45M|}
_ZN3scn2v34impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1094|  1.45M|{
 1095|       |    if constexpr (ranges::sized_range<Range>) {
 1096|       |        return r.size();
 1097|       |    }
 1098|       |    else if constexpr (std::is_same_v<
 1099|       |                           ranges::const_iterator_t<Range>,
 1100|       |                           typename detail::basic_scan_buffer<
 1101|  1.45M|                               detail::char_t<Range>>::forward_iterator>) {
 1102|       |        if constexpr (ranges::common_range<Range>) {
 1103|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1104|       |        }
 1105|  1.45M|        else {
 1106|  1.45M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1106:17): [True: 1.45M, False: 0]
  ------------------
 1107|  1.45M|                return static_cast<size_t>(
 1108|  1.45M|                    r.begin().parent()->chars_available() -
 1109|  1.45M|                    r.begin().position());
 1110|  1.45M|            }
 1111|      0|            return r.begin().contiguous_segment().size();
 1112|  1.45M|        }
 1113|       |    }
 1114|       |    else {
 1115|       |        return 0;
 1116|       |    }
 1117|  1.45M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.28M|        : m_fptr([](storage fn,
  743|  1.28M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.28M|              cvref<T> obj = *get<T>(fn);
  745|  1.28M|              if constexpr (std::is_void_v<R>) {
  746|  1.28M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.28M|              }
  748|  1.28M|              else {
  749|  1.28M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.28M|              }
  751|  1.28M|          }),
  752|  1.28M|          m_storage(std::addressof(f))
  753|  1.28M|    {
  754|  1.28M|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  1.94M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.94M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.94M|              else {
  749|  1.94M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.94M|              }
  751|  1.94M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.94M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.94M|        else if constexpr (std::is_object_v<T>) {
  688|  1.94M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.94M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.28M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.28M|        {
  662|  1.28M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   409k|    {
 6026|   409k|        const bool need_skipped_width =
 6027|   409k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 409k]
  |  Branch (6027:33): [True: 0, False: 409k]
  ------------------
 6028|   409k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   409k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 409k]
  ------------------
 6032|   409k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 409k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   409k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 409k, False: 0]
  |  Branch (6036:56): [True: 409k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   409k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 409k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   815k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   409k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   409k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   409k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.68k, False: 406k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.68k|    }                                                  \
  |  |  |  | 3667|   409k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   406k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   815k|                            make_eof_scan_error));
 6047|       |
 6048|   815k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 406k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   406k|            return result_type{it, 0};
 6056|   815k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   409k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|   953k|{
 1964|   953k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   953k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|   953k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|   953k|    else {
 1949|   953k|        auto first = range.begin();
 1950|  1.45M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 1.44M, False: 3.08k]
  ------------------
 1951|  1.44M|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 950k, False: 496k]
  ------------------
 1952|   950k|                return first;
 1953|   950k|            }
 1954|  1.44M|        }
 1955|  3.08k|        return first;
 1956|   953k|    }
 1957|   953k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   667k|    {
  108|   667k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   667k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   667k|    {
   94|   667k|        iter_difference_t<I> counter{0};
   95|  1.76M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.10M, False: 667k]
  ------------------
   96|  1.10M|            ++i;
   97|  1.10M|            ++counter;
   98|  1.10M|        }
   99|   667k|        return counter;
  100|   667k|    }
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1767|   195k|    {
 1768|   195k|        auto stdloc = loc.get<std::locale>();
 1769|   195k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1770|   195k|        grouping = numpunct.grouping();
 1771|   195k|        thousands_sep =
 1772|   195k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1772:13): [True: 0, False: 195k]
  ------------------
 1773|   195k|        decimal_point = numpunct.decimal_point();
 1774|   195k|    }
_ZN3scn2v34impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1704|   195k|{
 1705|   195k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1705:9): [True: 195k, False: 0]
  ------------------
 1706|   195k|        return std::use_facet<Facet>(stdloc);
 1707|   195k|    }
 1708|      0|    stdloc = std::locale(stdloc, new Facet{});
 1709|      0|    return std::use_facet<Facet>(stdloc);
 1710|   195k|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1833|  1.28M|{
 1834|  1.28M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.28M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.00k, False: 1.28M]
  |  |  ------------------
  ------------------
 1835|  2.00k|        return unexpected(e);
 1836|  2.00k|    }
 1837|       |
 1838|  1.28M|    return ranges::next(range.begin());
 1839|  1.28M|}
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.99M|{
  950|  1.99M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.99M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.61k, False: 1.98M]
  |  |  ------------------
  ------------------
  951|  5.61k|        return eof_error::eof;
  952|  5.61k|    }
  953|  1.98M|    return eof_error::good;
  954|  1.99M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  2.94M|{
  944|  2.94M|    return is_range_eof(r.begin(), r.end());
  945|  2.94M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  2.94M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.94M|    {
  937|  2.94M|        return begin == end;
  938|  2.94M|    }
  939|  2.94M|}
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.28M|    {
  296|  1.28M|        ++x;
  297|  1.28M|        return x;
  298|  1.28M|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3129|   564k|{
 3130|   564k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   564k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 559k, False: 5.02k]
  ------------------
 3132|   559k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 559k, False: 70]
  ------------------
 3133|   559k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   559k|        }
 3135|     70|        return unexpected(eof_error::eof);
 3136|   559k|    }
 3137|       |
 3138|  5.02k|    auto& it = *r;
 3139|  5.02k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 4.04k, False: 982]
  ------------------
 3140|  4.04k|        return std::pair{it, sign_type::minus_sign};
 3141|  4.04k|    }
 3142|    982|    return std::pair{it, sign_type::plus_sign};
 3143|  5.02k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2260|   899k|{
 2261|   899k|    auto it = read_code_unit(range);
 2262|   899k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   899k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.09k, False: 898k]
  |  |  ------------------
  ------------------
 2263|  1.09k|        return unexpected(make_eof_parse_error(it.error()));
 2264|  1.09k|    }
 2265|       |
 2266|  1.79M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 1.79M, False: 882k]
  ------------------
 2267|  1.79M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 16.0k, False: 1.77M]
  ------------------
 2268|  16.0k|            return *it;
 2269|  16.0k|        }
 2270|  1.79M|    }
 2271|       |
 2272|   882k|    return unexpected(parse_error::error);
 2273|   898k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2219|  1.45M|{
 2220|  1.45M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  1.45M|    else {
 2233|  1.45M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.45M|            if (ch < 'A' || ch > 'Z') {
 2235|  1.45M|                return ch;
 2236|  1.45M|            }
 2237|  1.45M|            return static_cast<char_type>(ch +
 2238|  1.45M|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.45M|        };
 2240|       |
 2241|  1.45M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.45M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.45M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.45M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 53.7k, False: 1.40M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  53.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  53.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  53.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  53.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  53.7k|    }                                                  \
  |  |  |  | 3667|  1.45M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  1.40M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  1.40M|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  1.40M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.40M, False: 710]
  |  |  ------------------
  ------------------
 2246|  1.40M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  1.40M|                    return ascii_tolower(a) ==
 2248|  1.40M|                           static_cast<detail::char_t<Range>>(b);
 2249|  1.40M|                }))) {
 2250|  1.40M|            return unexpected(parse_error::error);
 2251|  1.40M|        }
 2252|       |
 2253|    710|        return it;
 2254|  1.40M|    }
 2255|  1.45M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  1.63M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.63M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 1.28M, False: 352k]
  |  Branch (2234:29): [True: 341k, False: 10.8k]
  ------------------
 2235|  1.62M|                return ch;
 2236|  1.62M|            }
 2237|  10.8k|            return static_cast<char_type>(ch +
 2238|  10.8k|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.63M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2134|   389k|{
 2135|   389k|    auto it = read_code_unit(range);
 2136|   389k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   389k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 913, False: 388k]
  |  |  ------------------
  ------------------
 2137|    913|        return unexpected(make_eof_parse_error(it.error()));
 2138|    913|    }
 2139|       |
 2140|   388k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   388k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 386k, False: 2.17k]
  |  |  ------------------
  ------------------
 2141|   388k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   386k|        return unexpected(parse_error::error);
 2143|   386k|    }
 2144|       |
 2145|  2.17k|    return *it;
 2146|   388k|}
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 1983|   953k|{
 1984|   953k|    auto it = read_while_code_unit(range, pred);
 1985|   953k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 552k, False: 401k]
  ------------------
 1986|   552k|        return unexpected(parse_error::error);
 1987|   552k|    }
 1988|   401k|    return it;
 1989|   953k|}
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1608|   386k|    {
 1609|   386k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   386k|                           ranges::common_range<Range>) {
 1626|   386k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   386k|            auto end_seg = range.end().contiguous_segment();
 1628|   386k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   386k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.4k, False: 373k]
  |  |  ------------------
  ------------------
 1629|   386k|                             detail::to_address(end_seg.end()))) {
 1630|  13.4k|                auto& str = m_storage.emplace();
 1631|  13.4k|                str.reserve(range.end().position() - range.begin().position());
 1632|  13.4k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  13.4k|                m_view = string_view_type{str};
 1634|  13.4k|                return;
 1635|  13.4k|            }
 1636|       |
 1637|   373k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   373k|                                                            end_seg.data());
 1639|   373k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   386k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  3.42M|    {
 1570|  3.42M|        return m_view;
 1571|  3.42M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|  2.21M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   274k|    {
 6068|   274k|        const bool need_skipped_width =
 6069|   274k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 274k]
  |  Branch (6069:33): [True: 0, False: 274k]
  ------------------
 6070|   274k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   274k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 274k]
  ------------------
 6073|   274k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 274k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   274k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 274k, False: 0]
  ------------------
 6082|   274k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 274k]
  ------------------
 6083|   274k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   274k|        return result_type{rng.begin(), 0};
 6107|   274k|    }
_ZN3scn2v34impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1844|  1.45M|{
 1845|  1.45M|    SCN_EXPECT(count >= 0);
  ------------------
  |  |  924|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1846|       |
 1847|  1.45M|    if constexpr (ranges::sized_range<Range>) {
 1848|  1.45M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1849|  1.45M|        if (sz < count) {
  ------------------
  |  Branch (1849:13): [True: 53.9k, False: 1.40M]
  ------------------
 1850|  53.9k|            return unexpected(eof_error::eof);
 1851|  53.9k|        }
 1852|       |
 1853|  1.40M|        return ranges::next(range.begin(), count);
 1854|       |    }
 1855|       |    else {
 1856|       |        auto it = range.begin();
 1857|       |        if (guaranteed_minimum_size(range) >= count) {
 1858|       |            return ranges::next(it, count);
 1859|       |        }
 1860|       |
 1861|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1862|       |            if (it == range.end()) {
 1863|       |                return unexpected(eof_error::eof);
 1864|       |            }
 1865|       |        }
 1866|       |
 1867|       |        return it;
 1868|       |    }
 1869|  1.45M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|  1.64M|{
 1887|  1.64M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  1.64M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  1.64M|    auto it = range.begin();
 1891|  1.64M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  1.64M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.64M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  1.64M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 1.64M, False: 0]
  ------------------
 1900|  1.64M|        ++it;
 1901|  1.64M|        return {it, string_type(1, *range.begin())};
 1902|  1.64M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  1.64M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  3.10M|{
  944|  3.10M|    return is_range_eof(r.begin(), r.end());
  945|  3.10M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  3.10M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  3.10M|    {
  937|  3.10M|        return begin == end;
  938|  3.10M|    }
  939|  3.10M|}
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   351k|    {
  190|   351k|        i = std::move(bound);
  191|   351k|    }
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|  1.64M|    {
 1878|  1.64M|        return !codepoint.empty();
 1879|  1.64M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  1.46M|{
  950|  1.46M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.46M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.12k, False: 1.45M]
  |  |  ------------------
  ------------------
  951|  4.12k|        return eof_error::eof;
  952|  4.12k|    }
  953|  1.45M|    return eof_error::good;
  954|  1.46M|}
_ZN3scn2v34impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1833|   757k|{
 1834|   757k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   757k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 516, False: 757k]
  |  |  ------------------
  ------------------
 1835|    516|        return unexpected(e);
 1836|    516|    }
 1837|       |
 1838|   757k|    return ranges::next(range.begin());
 1839|   757k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   757k|    {
  296|   757k|        ++x;
  297|   757k|        return x;
  298|   757k|    }
_ZN3scn2v34impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3129|   557k|{
 3130|   557k|    auto r = read_one_of_code_unit(range, "+-");
 3131|   557k|    if (!r) {
  ------------------
  |  Branch (3131:9): [True: 554k, False: 3.14k]
  ------------------
 3132|   554k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3132:13): [True: 554k, False: 24]
  ------------------
 3133|   554k|            return std::pair{range.begin(), sign_type::default_sign};
 3134|   554k|        }
 3135|     24|        return unexpected(eof_error::eof);
 3136|   554k|    }
 3137|       |
 3138|  3.14k|    auto& it = *r;
 3139|  3.14k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3139:9): [True: 2.32k, False: 816]
  ------------------
 3140|  2.32k|        return std::pair{it, sign_type::minus_sign};
 3141|  2.32k|    }
 3142|    816|    return std::pair{it, sign_type::plus_sign};
 3143|  3.14k|}
_ZN3scn2v34impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2260|   630k|{
 2261|   630k|    auto it = read_code_unit(range);
 2262|   630k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   630k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 250, False: 629k]
  |  |  ------------------
  ------------------
 2263|    250|        return unexpected(make_eof_parse_error(it.error()));
 2264|    250|    }
 2265|       |
 2266|  1.25M|    for (auto ch : str) {
  ------------------
  |  Branch (2266:18): [True: 1.25M, False: 622k]
  ------------------
 2267|  1.25M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2267:13): [True: 6.93k, False: 1.25M]
  ------------------
 2268|  6.93k|            return *it;
 2269|  6.93k|        }
 2270|  1.25M|    }
 2271|       |
 2272|   622k|    return unexpected(parse_error::error);
 2273|   629k|}
_ZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2219|  1.45M|{
 2220|  1.45M|    using char_type = detail::char_t<Range>;
 2221|       |
 2222|       |    if constexpr (ranges::contiguous_range<Range> &&
 2223|       |                  std::is_same_v<char_type, char>) {
 2224|       |        if (range.size() < str.size()) {
 2225|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2226|       |        }
 2227|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2228|       |            return unexpected(parse_error::error);
 2229|       |        }
 2230|       |        return ranges::next(range.begin(), str.size());
 2231|       |    }
 2232|  1.45M|    else {
 2233|  1.45M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.45M|            if (ch < 'A' || ch > 'Z') {
 2235|  1.45M|                return ch;
 2236|  1.45M|            }
 2237|  1.45M|            return static_cast<char_type>(ch +
 2238|  1.45M|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.45M|        };
 2240|       |
 2241|  1.45M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3668|  1.45M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.45M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.45M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 53.9k, False: 1.40M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  53.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  53.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  53.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  53.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  53.9k|    }                                                  \
  |  |  |  | 3667|  1.45M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2242|  1.40M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2243|  1.40M|                        .transform_error(make_eof_parse_error));
 2244|       |
 2245|  1.40M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  |  859|  1.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.40M, False: 710]
  |  |  ------------------
  ------------------
 2246|  1.40M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2247|  1.40M|                    return ascii_tolower(a) ==
 2248|  1.40M|                           static_cast<detail::char_t<Range>>(b);
 2249|  1.40M|                }))) {
 2250|  1.40M|            return unexpected(parse_error::error);
 2251|  1.40M|        }
 2252|       |
 2253|    710|        return it;
 2254|  1.40M|    }
 2255|  1.45M|}
_ZZN3scn2v34impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2233|  1.63M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2234|  1.63M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2234:17): [True: 1.28M, False: 353k]
  |  Branch (2234:29): [True: 342k, False: 10.9k]
  ------------------
 2235|  1.62M|                return ch;
 2236|  1.62M|            }
 2237|  10.9k|            return static_cast<char_type>(ch +
 2238|  10.9k|                                          static_cast<char_type>('a' - 'A'));
 2239|  1.63M|        };
_ZN3scn2v34impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2134|   127k|{
 2135|   127k|    auto it = read_code_unit(range);
 2136|   127k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 266, False: 127k]
  |  |  ------------------
  ------------------
 2137|    266|        return unexpected(make_eof_parse_error(it.error()));
 2138|    266|    }
 2139|       |
 2140|   127k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 126k, False: 864]
  |  |  ------------------
  ------------------
 2141|   127k|                     static_cast<detail::char_t<Range>>(ch))) {
 2142|   126k|        return unexpected(parse_error::error);
 2143|   126k|    }
 2144|       |
 2145|    864|    return *it;
 2146|   127k|}
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|   333k|{
 1964|   333k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|   333k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|   333k|{
 1945|   333k|    if constexpr (ranges::common_range<Range>) {
 1946|   333k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|   333k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   556k|{
 2940|   556k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 556k, False: 0]
  ------------------
 2941|   556k|        auto it = read_while_classic_space(range);
 2942|   556k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   556k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   556k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.18k, False: 553k]
  |  |  ------------------
  ------------------
 2944|  3.18k|            return unexpected(e);
 2945|  3.18k|        }
 2946|       |
 2947|   553k|        return it;
 2948|   556k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   556k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   556k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   556k|    else {
 2114|   556k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   556k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   556k|            return detail::is_cp_space(cp);
 2127|   556k|        });
 2128|   556k|    }
 2129|   556k|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|   556k|{
 2070|   556k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   556k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|   934k|{
 2049|   934k|    auto it = range.begin();
 2050|  1.87M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.64M, False: 237k]
  ------------------
 2051|  1.64M|        const auto val =
 2052|  1.64M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.64M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.64M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.64M, False: 0]
  |  |  ------------------
  ------------------
 2054|  1.64M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.64M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.64M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 697k, False: 945k]
  ------------------
 2057|   697k|                return it;
 2058|   697k|            }
 2059|  1.64M|        }
 2060|   945k|        it = val.iterator;
 2061|   945k|    }
 2062|       |
 2063|   237k|    return it;
 2064|   934k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   556k|        : m_fptr([](storage fn,
  743|   556k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   556k|              cvref<T> obj = *get<T>(fn);
  745|   556k|              if constexpr (std::is_void_v<R>) {
  746|   556k|                  obj(static_cast<decltype(args)>(args)...);
  747|   556k|              }
  748|   556k|              else {
  749|   556k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   556k|              }
  751|   556k|          }),
  752|   556k|          m_storage(std::addressof(f))
  753|   556k|    {
  754|   556k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   952k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   952k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   952k|              else {
  749|   952k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   952k|              }
  751|   952k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   952k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   952k|        else if constexpr (std::is_object_v<T>) {
  688|   952k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   952k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|   952k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   952k|            return detail::is_cp_space(cp);
 2127|   952k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   556k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   556k|        {
  662|   556k|        }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.25M|    {
  304|  1.25M|        ranges::advance(x, n);
  305|  1.25M|        return x;
  306|  1.25M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.25M|    {
  268|  1.25M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.25M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.25M|    {
  181|  4.02M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 2.76M, False: 1.25M]
  ------------------
  182|  2.76M|            ++i;
  183|  2.76M|        }
  184|  1.25M|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   128k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   128k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   128k|            auto rd = make_reader<T, char_type>();
 6195|   128k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   128k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 128k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   128k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   128k|                return impl(rd, range, value);
 6202|   128k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   128k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|   818k|    {
 3029|   818k|        reader_error_handler eh{};
 3030|   818k|        get_derived().check_specs_impl(specs, eh);
 3031|   818k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   818k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 818k]
  |  |  ------------------
  ------------------
 3032|      0|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|      0|        }
 3034|   818k|        return {};
 3035|   818k|    }
_ZN3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3039|   818k|    {
 3040|   818k|        return static_cast<Derived&>(*this);
 3041|   818k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4133|   818k|    {
 4134|   818k|        detail::check_float_type_specs(specs, eh);
 4135|   818k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   128k|    {
 6113|   128k|        const bool need_skipped_width =
 6114|   128k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 128k]
  |  Branch (6114:33): [True: 0, False: 128k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   128k|        auto it = rng.begin();
 6118|   128k|        std::ptrdiff_t prefix_width = 0;
 6119|   128k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 128k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   128k|        else {
 6127|   128k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 840, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    840|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    840|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    840|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    840|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    840|    }                                                  \
  |  |  |  | 3667|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   127k|            std::tie(it, prefix_width) = prefix_result;
 6129|   127k|        }
 6130|   127k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   127k|        std::ptrdiff_t value_width = 0;
 6134|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 127k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   127k|        else {
 6150|   127k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.5k, False: 84.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.5k|    }                                                  \
  |  | 3667|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  84.1k|                                             specs, value, loc));
 6152|       |
 6153|  84.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 84.1k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  84.1k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  84.1k|        std::ptrdiff_t postfix_width = 0;
 6162|  84.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 83.8k, False: 360]
  ------------------
 6163|  83.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  83.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  83.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  83.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  83.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 83.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  83.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  83.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  83.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  83.8k|                                 value_width));
 6167|  83.8k|            std::tie(it, postfix_width) = postfix_result;
 6168|  83.8k|        }
 6169|       |
 6170|  84.1k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  84.1k|                                                 value_width, postfix_width);
 6172|  84.1k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 84.1k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  84.1k|        return it;
 6177|  84.1k|    }
_ZNK3scn2v34impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3023|  1.66M|    {
 3024|  1.66M|        return true;
 3025|  1.66M|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4205|   812k|    {
 4206|   812k|        unsigned options{};
 4207|   812k|        if (specs.localized) {
  ------------------
  |  Branch (4207:13): [True: 195k, False: 617k]
  ------------------
 4208|   195k|            options |= float_reader_base::allow_thsep;
 4209|   195k|        }
 4210|       |
 4211|   812k|        SCN_GCC_COMPAT_PUSH
 4212|   812k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4213|       |
 4214|   812k|        switch (specs.type) {
 4215|   161k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4215:13): [True: 161k, False: 651k]
  ------------------
 4216|   161k|                return options | float_reader_base::allow_fixed;
 4217|       |
 4218|  54.1k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4218:13): [True: 54.1k, False: 758k]
  ------------------
 4219|  54.1k|                return options | float_reader_base::allow_scientific;
 4220|       |
 4221|   212k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4221:13): [True: 212k, False: 600k]
  ------------------
 4222|   212k|                return options | float_reader_base::allow_hex;
 4223|       |
 4224|   188k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4224:13): [True: 188k, False: 624k]
  ------------------
 4225|   188k|                return options | float_reader_base::allow_scientific |
 4226|   188k|                       float_reader_base::allow_fixed;
 4227|       |
 4228|   195k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4228:13): [True: 195k, False: 617k]
  ------------------
 4229|   195k|                return options | float_reader_base::allow_scientific |
 4230|   195k|                       float_reader_base::allow_fixed |
 4231|   195k|                       float_reader_base::allow_hex;
 4232|       |
 4233|      0|            default:
  ------------------
  |  Branch (4233:13): [True: 0, False: 812k]
  ------------------
 4234|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4235|   812k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4236|   812k|        }
 4237|       |
 4238|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4239|   812k|    }
_ZN3scn2v34impl12float_readerIwEC2Ej:
 3648|   812k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v34impl35localized_number_formatting_optionsIwEC2Ev:
 1758|  1.10M|    localized_number_formatting_options() = default;
_ZN3scn2v34impl24contiguous_range_factoryIwEC2Ev:
 1519|  2.21M|    contiguous_range_factory() = default;
_ZN3scn2v34impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3679|   261k|    {
 3680|   261k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   261k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   261k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   261k|        const std::ptrdiff_t sign_len =
 3683|   261k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 1.25k, False: 259k]
  ------------------
 3684|       |
 3685|   261k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   261k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   261k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   261k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   261k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 32.5k, False: 228k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  32.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  32.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  32.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  32.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  32.5k|    }                                                  \
  |  |  |  | 3667|   261k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   228k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   228k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   261k|    }
_ZN3scn2v34impl12float_readerIwE17handle_separatorsEv:
 4045|   861k|    {
 4046|   861k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4046:13): [True: 861k, False: 0]
  ------------------
 4047|   861k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4047:13): [True: 861k, False: 0]
  ------------------
 4048|   861k|            return;
 4049|   861k|        }
 4050|       |
 4051|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4052|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4052:13): [True: 0, False: 0]
  ------------------
 4053|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4053:27): [True: 0, False: 0]
  ------------------
 4054|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4054:21): [True: 0, False: 0]
  ------------------
 4055|      0|                    ch = CharT{'.'};
 4056|      0|                }
 4057|      0|            }
 4058|      0|        }
 4059|       |
 4060|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4060:13): [True: 0, False: 0]
  ------------------
 4061|      0|            return;
 4062|      0|        }
 4063|       |
 4064|      0|        auto first =
 4065|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4066|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4066:13): [True: 0, False: 0]
  ------------------
 4067|      0|            return;
 4068|      0|        }
 4069|       |
 4070|      0|        m_thsep_indices.push_back(
 4071|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4072|       |
 4073|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4073:31): [True: 0, False: 0]
  ------------------
 4074|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4074:17): [True: 0, False: 0]
  ------------------
 4075|      0|                *first++ = std::move(*it);
 4076|      0|            }
 4077|      0|            else {
 4078|      0|                m_thsep_indices.push_back(
 4079|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4080|      0|            }
 4081|      0|        }
 4082|       |
 4083|      0|        str.erase(first, str.end());
 4084|      0|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1574|   932k|    {
 1575|   932k|        return m_storage.has_value();
 1576|   932k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1579|   546k|    {
 1580|   546k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|   546k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   546k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|   546k|        return *m_storage;
 1582|   546k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   127k|    {
 4159|   127k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   127k|#if !SCN_DISABLE_LOCALE
 4162|   127k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 28.7k, False: 98.9k]
  ------------------
 4163|  28.7k|            return read_impl<Range>(
 4164|  28.7k|                range, rd,
 4165|  28.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  28.7k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  28.7k|                },
 4168|  28.7k|                value, loc);
 4169|  28.7k|        }
 4170|  98.9k|#endif
 4171|       |
 4172|  98.9k|        return read_impl<Range>(
 4173|  98.9k|            range, rd,
 4174|  98.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|  98.9k|                return r.read_source(SCN_FWD(args)...);
 4176|  98.9k|            },
 4177|  98.9k|            value);
 4178|   127k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   170k|    {
 4195|   170k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   170k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 54.8k, False: 116k]
  |  |  ------------------
  ------------------
 4197|  54.8k|            return unexpected(r.error());
 4198|  54.8k|        }
 4199|       |
 4200|   116k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.70k, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.70k|    }                                                  \
  |  |  |  | 3667|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   114k|        return ranges::next(range.begin(), n);
 4202|   116k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   553k|    {
  763|   553k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   553k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   553k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  28.7k|        : m_fptr([](storage fn,
  743|  28.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.7k|              cvref<T> obj = *get<T>(fn);
  745|  28.7k|              if constexpr (std::is_void_v<R>) {
  746|  28.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.7k|              }
  748|  28.7k|              else {
  749|  28.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.7k|              }
  751|  28.7k|          }),
  752|  28.7k|          m_storage(std::addressof(f))
  753|  28.7k|    {
  754|  28.7k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  28.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  28.7k|              else {
  749|  28.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.7k|              }
  751|  28.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  28.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  28.7k|        else if constexpr (std::is_object_v<T>) {
  688|  28.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  28.7k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  28.7k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  28.7k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  28.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  28.7k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3667|  97.8k|    {
 3668|  97.8k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|  97.8k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  97.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 97.8k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|  97.8k|        return read_source_impl(range);
 3674|  97.8k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3693|   553k|    {
 3694|   553k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   553k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   553k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   553k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   553k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 553k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   553k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   553k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|   553k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|   553k|        auto it = sign_result.first;
 3697|   553k|        m_sign = sign_result.second;
 3698|       |
 3699|   553k|        auto digits_begin = it;
 3700|   553k|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|       |                      ranges::sized_range<Range>) {
 3703|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3704|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|       |                SCN_TRY_ASSIGN(
 3706|       |                    it,
 3707|       |                    do_read_source_impl(
 3708|       |                        r,
 3709|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|       |            }
 3712|       |            else {
 3713|       |                auto cb = [&](const auto& rr)
 3714|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|       |                    auto res = read_all(rr);
 3716|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|       |                        return unexpected_scan_error(
 3718|       |                            scan_error::invalid_scanned_value,
 3719|       |                            "Invalid float value");
 3720|       |                    }
 3721|       |                    return res;
 3722|       |                };
 3723|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3724|       |            }
 3725|       |        }
 3726|   553k|        else {
 3727|   553k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|   553k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   553k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   553k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 166k, False: 386k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|   166k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|   166k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|   166k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|   166k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|   166k|    }                                                  \
  |  | 3667|   553k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   553k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3728|   386k|                it,
 3729|   386k|                do_read_source_impl(
 3730|   386k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|   386k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|   386k|        }
 3733|       |
 3734|   553k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   553k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   553k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|   386k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 386k, False: 0]
  |  Branch (3736:48): [True: 386k, False: 0]
  ------------------
 3737|   386k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 386k, False: 0]
  ------------------
 3738|   386k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 386k, False: 0]
  ------------------
 3739|   386k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|   386k|        }
 3741|       |
 3742|   386k|        handle_separators();
 3743|       |
 3744|   386k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 386k]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|   386k|        return it;
 3757|   386k|    }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 3988|   553k|    {
 3989|   553k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|   553k|        const bool allowed_nonhex =
 3991|   553k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|   553k|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|   553k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 553k, False: 0]
  |  Branch (3994:45): [True: 0, False: 553k]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|   553k|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 553k]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|   553k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 553k, False: 0]
  |  Branch (4003:45): [True: 0, False: 553k]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|   553k|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 553k]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|   553k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 351k, False: 202k]
  |  Branch (4010:28): [True: 106k, False: 244k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   106k|            auto it = range.begin();
 4014|       |
 4015|   106k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 210, False: 106k]
  ------------------
 4016|    210|                m_kind = float_kind::hex_with_prefix;
 4017|    210|                it = *r;
 4018|    210|            }
 4019|   106k|            else {
 4020|   106k|                m_kind = float_kind::hex_without_prefix;
 4021|   106k|            }
 4022|       |
 4023|   106k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   106k|        }
 4025|   446k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 202k, False: 244k]
  |  Branch (4025:29): [True: 202k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   202k|            m_kind = float_kind::generic;
 4029|   202k|            return read_regular_float(range);
 4030|   202k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   244k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 500, False: 244k]
  |  |  ------------------
  ------------------
 4036|    500|            m_kind = float_kind::hex_with_prefix;
 4037|    500|            return read_hex(ranges::subrange{*r, range.end()});
 4038|    500|        }
 4039|       |
 4040|   244k|        m_kind = float_kind::generic;
 4041|   244k|        return read_regular(range);
 4042|   244k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3799|   553k|    {
 3800|   553k|        auto it = range.begin();
 3801|   553k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 553k, False: 0]
  ------------------
 3802|   553k|            return unexpected(r.error());
 3803|   553k|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3822|   553k|    {
 3823|   553k|        auto it = range.begin();
 3824|   553k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 553k, False: 0]
  ------------------
 3825|   553k|            return r.transform_error(map_parse_error_to_scan_error(
 3826|   553k|                scan_error::invalid_scanned_value,
 3827|   553k|                "Invalid floating-point NaN value"));
 3828|   553k|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3792|   351k|    {
 3793|   351k|        return read_matching_string_classic_nocase(range, "0x");
 3794|   351k|    }
_ZN3scn2v34impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3892|   106k|    {
 3893|   106k|        auto it = range.begin();
 3894|       |
 3895|   106k|        std::ptrdiff_t digits_count = 0;
 3896|   106k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3897|   106k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.8k, False: 80.9k]
  |  |  ------------------
  ------------------
 3898|  25.8k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|  25.8k|                scan_error::invalid_scanned_value,
 3900|  25.8k|                "Invalid hexadecimal floating-point value"));
 3901|  25.8k|        }
 3902|  80.9k|        else {
 3903|  80.9k|            digits_count += ranges::distance(it, *r);
 3904|  80.9k|            it = *r;
 3905|  80.9k|        }
 3906|       |
 3907|  80.9k|        m_integral_part_length = digits_count;
 3908|  80.9k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3908:18): [True: 398, False: 80.5k]
  ------------------
 3909|  80.9k|                                             m_locale_options.decimal_point)) {
 3910|    398|            it = *r;
 3911|    398|        }
 3912|       |
 3913|  80.9k|        if (auto r =
  ------------------
  |  Branch (3913:18): [True: 312, False: 80.6k]
  ------------------
 3914|  80.9k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3915|    312|            digits_count += ranges::distance(it, *r);
 3916|    312|            it = *r;
 3917|    312|        }
 3918|       |
 3919|  80.9k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|  80.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 80.9k]
  |  |  ------------------
  ------------------
 3920|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3921|      0|                                         "No significand digits in hexfloat");
 3922|      0|        }
 3923|       |
 3924|  80.9k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 3925|       |
 3926|  80.9k|        return it;
 3927|  80.9k|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3777|   187k|    {
 3778|   187k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 187k]
  |  |  |  Branch (859:45): [True: 0, False: 187k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3779|   187k|                         thsep_allowed)) {
 3780|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3781|      0|                return char_to_int(ch) < 16 ||
 3782|      0|                       ch == m_locale_options.thousands_sep;
 3783|      0|            });
 3784|      0|        }
 3785|       |
 3786|   187k|        return read_while1_code_unit(
 3787|   187k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3788|   187k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   187k|        : m_fptr([](storage fn,
  743|   187k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   187k|              cvref<T> obj = *get<T>(fn);
  745|   187k|              if constexpr (std::is_void_v<R>) {
  746|   187k|                  obj(static_cast<decltype(args)>(args)...);
  747|   187k|              }
  748|   187k|              else {
  749|   187k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   187k|              }
  751|   187k|          }),
  752|   187k|          m_storage(std::addressof(f))
  753|   187k|    {
  754|   187k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   291k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   291k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   291k|              else {
  749|   291k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   291k|              }
  751|   291k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   291k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   291k|        else if constexpr (std::is_object_v<T>) {
  688|   291k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   291k|    }
_ZZN3scn2v34impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3787|   291k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   187k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   187k|        {
  662|   187k|        }
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3864|   334k|    {
 3865|   334k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 11.0k, False: 323k]
  ------------------
 3866|  11.0k|            auto beg_exp_it = range.begin();
 3867|  11.0k|            auto it = *r;
 3868|       |
 3869|  11.0k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 10.9k, False: 70]
  ------------------
 3870|  11.0k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|  10.9k|                it = r_sign->first;
 3872|  10.9k|            }
 3873|       |
 3874|  11.0k|            if (auto r_exp = read_while1_code_unit(
 3875|  11.0k|                    ranges::subrange{it, range.end()},
 3876|  11.0k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|  11.0k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.09k, False: 9.94k]
  |  |  ------------------
  ------------------
 3878|  1.09k|                it = beg_exp_it;
 3879|  1.09k|            }
 3880|  9.94k|            else {
 3881|  9.94k|                it = *r_exp;
 3882|  9.94k|            }
 3883|       |
 3884|  11.0k|            return it;
 3885|  11.0k|        }
 3886|   323k|        return range.begin();
 3887|   334k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  11.0k|        : m_fptr([](storage fn,
  743|  11.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.0k|              cvref<T> obj = *get<T>(fn);
  745|  11.0k|              if constexpr (std::is_void_v<R>) {
  746|  11.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.0k|              }
  748|  11.0k|              else {
  749|  11.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.0k|              }
  751|  11.0k|          }),
  752|  11.0k|          m_storage(std::addressof(f))
  753|  11.0k|    {
  754|  11.0k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  37.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  37.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  37.3k|              else {
  749|  37.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  37.3k|              }
  751|  37.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  37.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  37.3k|        else if constexpr (std::is_object_v<T>) {
  688|  37.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  37.3k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3876|  37.3k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  11.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  11.0k|        {
  662|  11.0k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3932|   446k|    {
 3933|   446k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   446k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 365k, False: 80.9k]
  |  Branch (3934:50): [True: 27.0k, False: 338k]
  ------------------
 3935|       |
 3936|   446k|        auto it = ranges::begin(range);
 3937|   446k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   446k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   446k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   446k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 137k, False: 308k]
  |  |  ------------------
  ------------------
 3941|   137k|            return r.transform_error(
 3942|   137k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|   137k|                                              "Invalid floating-point value"));
 3944|   137k|        }
 3945|   308k|        else {
 3946|   308k|            digits_count += ranges::distance(it, *r);
 3947|   308k|            it = *r;
 3948|   308k|        }
 3949|       |
 3950|   308k|        m_integral_part_length = digits_count;
 3951|   308k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 1.77k, False: 306k]
  ------------------
 3952|   308k|                                             m_locale_options.decimal_point)) {
 3953|  1.77k|            it = *r;
 3954|  1.77k|        }
 3955|       |
 3956|   308k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 1.38k, False: 307k]
  ------------------
 3957|   308k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|  1.38k|            digits_count += ranges::distance(it, *r);
 3959|  1.38k|            it = *r;
 3960|  1.38k|        }
 3961|       |
 3962|   308k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   308k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 308k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   308k|        auto beg_exp_it = it;
 3968|   308k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 253k, False: 54.7k]
  ------------------
 3969|   253k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|   253k|        }
 3971|   308k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 4.04k, False: 304k]
  |  Branch (3971:29): [True: 3.25k, False: 786]
  ------------------
 3972|  3.25k|            return unexpected_scan_error(
 3973|  3.25k|                scan_error::invalid_scanned_value,
 3974|  3.25k|                "No exponent given to scientific float");
 3975|  3.25k|        }
 3976|       |
 3977|   305k|        m_kind =
 3978|   305k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 295k, False: 9.81k]
  ------------------
 3979|       |
 3980|   305k|        return it;
 3981|   308k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3762|   755k|    {
 3763|   755k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   755k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 755k]
  |  |  |  Branch (859:45): [True: 0, False: 755k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|   755k|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|   755k|        return read_while1_code_unit(
 3772|   755k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|   755k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   755k|        : m_fptr([](storage fn,
  743|   755k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   755k|              cvref<T> obj = *get<T>(fn);
  745|   755k|              if constexpr (std::is_void_v<R>) {
  746|   755k|                  obj(static_cast<decltype(args)>(args)...);
  747|   755k|              }
  748|   755k|              else {
  749|   755k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   755k|              }
  751|   755k|          }),
  752|   755k|          m_storage(std::addressof(f))
  753|   755k|    {
  754|   755k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.11M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.11M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.11M|              else {
  749|  1.11M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.11M|              }
  751|  1.11M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.11M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.11M|        else if constexpr (std::is_object_v<T>) {
  688|  1.11M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.11M|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3772|  1.11M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   755k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   755k|        {
  662|   755k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1564|   386k|    {
 1565|   386k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   386k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   386k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  28.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  28.7k|        {
  662|  28.7k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  98.9k|        : m_fptr([](storage fn,
  743|  98.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.9k|              cvref<T> obj = *get<T>(fn);
  745|  98.9k|              if constexpr (std::is_void_v<R>) {
  746|  98.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  98.9k|              }
  748|  98.9k|              else {
  749|  98.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.9k|              }
  751|  98.9k|          }),
  752|  98.9k|          m_storage(std::addressof(f))
  753|  98.9k|    {
  754|  98.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  98.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  98.9k|              else {
  749|  98.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.9k|              }
  751|  98.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  98.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  98.9k|        else if constexpr (std::is_object_v<T>) {
  688|  98.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  98.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|  98.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|  98.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  98.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|  98.9k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3653|   455k|    {
 3654|   455k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   455k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 455k]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|   455k|        return read_source_impl(range);
 3660|   455k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  98.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  98.9k|        {
  662|  98.9k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   127k|    {
 4159|   127k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   127k|#if !SCN_DISABLE_LOCALE
 4162|   127k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 28.8k, False: 98.9k]
  ------------------
 4163|  28.8k|            return read_impl<Range>(
 4164|  28.8k|                range, rd,
 4165|  28.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  28.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  28.8k|                },
 4168|  28.8k|                value, loc);
 4169|  28.8k|        }
 4170|  98.9k|#endif
 4171|       |
 4172|  98.9k|        return read_impl<Range>(
 4173|  98.9k|            range, rd,
 4174|  98.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|  98.9k|                return r.read_source(SCN_FWD(args)...);
 4176|  98.9k|            },
 4177|  98.9k|            value);
 4178|   127k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   171k|    {
 4195|   171k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   171k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.7k, False: 145k]
  |  |  ------------------
  ------------------
 4197|  25.7k|            return unexpected(r.error());
 4198|  25.7k|        }
 4199|       |
 4200|   145k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   145k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.8k, False: 114k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  30.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  30.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  30.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  30.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  30.8k|    }                                                  \
  |  |  |  | 3667|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   114k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   114k|        return ranges::next(range.begin(), n);
 4202|   145k|    }
_ZNK3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   553k|    {
  763|   553k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   553k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   553k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  28.8k|        : m_fptr([](storage fn,
  743|  28.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.8k|              cvref<T> obj = *get<T>(fn);
  745|  28.8k|              if constexpr (std::is_void_v<R>) {
  746|  28.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  28.8k|              }
  748|  28.8k|              else {
  749|  28.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.8k|              }
  751|  28.8k|          }),
  752|  28.8k|          m_storage(std::addressof(f))
  753|  28.8k|    {
  754|  28.8k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  28.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  28.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  28.8k|              else {
  749|  28.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  28.8k|              }
  751|  28.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  28.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  28.8k|        else if constexpr (std::is_object_v<T>) {
  688|  28.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  28.8k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  28.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  28.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  28.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  28.8k|                },
_ZN3scn2v34impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3667|  97.9k|    {
 3668|  97.9k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3669|  97.9k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  |  858|  97.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 97.9k]
  |  |  ------------------
  ------------------
 3670|      0|            m_locale_options.thousands_sep = CharT{0};
 3671|      0|        }
 3672|       |
 3673|  97.9k|        return read_source_impl(range);
 3674|  97.9k|    }
_ZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3693|   553k|    {
 3694|   553k|        SCN_TRY(sign_result,
  ------------------
  |  | 3668|   553k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   553k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   553k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   553k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 553k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   553k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   553k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3695|   553k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3696|   553k|        auto it = sign_result.first;
 3697|   553k|        m_sign = sign_result.second;
 3698|       |
 3699|   553k|        auto digits_begin = it;
 3700|   553k|        auto r = ranges::subrange{it, range.end()};
 3701|       |        if constexpr (ranges::contiguous_range<Range> &&
 3702|   553k|                      ranges::sized_range<Range>) {
 3703|   553k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  |  859|  1.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 553k]
  |  |  |  Branch (859:45): [True: 0, False: 553k]
  |  |  |  Branch (859:45): [True: 0, False: 553k]
  |  |  ------------------
  ------------------
 3704|   553k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3705|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|      0|    }                                                  \
  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3706|      0|                    it,
 3707|      0|                    do_read_source_impl(
 3708|      0|                        r,
 3709|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3710|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3711|      0|            }
 3712|   553k|            else {
 3713|   553k|                auto cb = [&](const auto& rr)
 3714|   553k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|   553k|                    auto res = read_all(rr);
 3716|   553k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3717|   553k|                        return unexpected_scan_error(
 3718|   553k|                            scan_error::invalid_scanned_value,
 3719|   553k|                            "Invalid float value");
 3720|   553k|                    }
 3721|   553k|                    return res;
 3722|   553k|                };
 3723|   553k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3663|   553k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   553k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   553k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 78.0k, False: 475k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  78.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  78.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  78.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  78.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  78.0k|    }                                                  \
  |  | 3667|   553k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   553k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3724|   475k|            }
 3725|       |        }
 3726|       |        else {
 3727|       |            SCN_TRY_ASSIGN(
 3728|       |                it,
 3729|       |                do_read_source_impl(
 3730|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3731|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3732|       |        }
 3733|       |
 3734|   553k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   553k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   553k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3735|       |
 3736|   475k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3736:13): [True: 475k, False: 0]
  |  Branch (3736:48): [True: 475k, False: 0]
  ------------------
 3737|   475k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3737:13): [True: 475k, False: 0]
  ------------------
 3738|   475k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3738:13): [True: 475k, False: 0]
  ------------------
 3739|   475k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3740|   475k|        }
 3741|       |
 3742|   475k|        handle_separators();
 3743|       |
 3744|   475k|        if (!m_thsep_indices.empty()) {
  ------------------
  |  Branch (3744:13): [True: 0, False: 475k]
  ------------------
 3745|      0|            SCN_EXPECT(m_integral_part_length >= 0);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3746|      0|            if (auto e = check_thsep_grouping(
 3747|      0|                    ranges::subrange{
 3748|      0|                        digits_begin,
 3749|      0|                        ranges::next(digits_begin, m_integral_part_length)},
 3750|      0|                    m_thsep_indices, m_locale_options.grouping);
 3751|      0|                SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3752|      0|                return unexpected(e);
 3753|      0|            }
 3754|      0|        }
 3755|       |
 3756|   475k|        return it;
 3757|   475k|    }
_ZN3scn2v34impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3799|   553k|    {
 3800|   553k|        auto it = range.begin();
 3801|   553k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3801:73): [True: 553k, False: 0]
  ------------------
 3802|   553k|            return unexpected(r.error());
 3803|   553k|        }
 3804|      0|        else {
 3805|      0|            it = *r;
 3806|      0|        }
 3807|       |
 3808|      0|        if (auto r = read_matching_string_classic_nocase(
 3809|      0|                ranges::subrange{it, range.end()}, "inity");
 3810|      0|            !r) {
  ------------------
  |  Branch (3810:13): [True: 0, False: 0]
  ------------------
 3811|      0|            m_kind = float_kind::inf_short;
 3812|      0|            return it;
 3813|      0|        }
 3814|      0|        else {
 3815|      0|            m_kind = float_kind::inf_long;
 3816|      0|            return *r;
 3817|      0|        }
 3818|      0|    }
_ZN3scn2v34impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3822|   553k|    {
 3823|   553k|        auto it = range.begin();
 3824|   553k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3824:73): [True: 553k, False: 0]
  ------------------
 3825|   553k|            return r.transform_error(map_parse_error_to_scan_error(
 3826|   553k|                scan_error::invalid_scanned_value,
 3827|   553k|                "Invalid floating-point NaN value"));
 3828|   553k|        }
 3829|      0|        else {
 3830|      0|            it = *r;
 3831|      0|        }
 3832|       |
 3833|      0|        if (auto r =
 3834|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3835|      0|            !r) {
  ------------------
  |  Branch (3835:13): [True: 0, False: 0]
  ------------------
 3836|      0|            m_kind = float_kind::nan_simple;
 3837|      0|            return it;
 3838|      0|        }
 3839|      0|        else {
 3840|      0|            it = *r;
 3841|      0|        }
 3842|       |
 3843|      0|        auto payload_beg_it = it;
 3844|      0|        it = read_while_code_unit(
 3845|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3846|      0|                return is_ascii_char(ch) &&
 3847|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3848|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3849|      0|            });
 3850|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3851|       |
 3852|      0|        m_kind = float_kind::nan_with_payload;
 3853|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3853:18): [True: 0, False: 0]
  ------------------
 3854|      0|                                             ')')) {
 3855|      0|            return *r;
 3856|      0|        }
 3857|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 3858|      0|                                     "Invalid floating-point NaN payload");
 3859|      0|    }
_ZN3scn2v34impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3792|   351k|    {
 3793|   351k|        return read_matching_string_classic_nocase(range, "0x");
 3794|   351k|    }
_ZN3scn2v34impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 1983|   333k|{
 1984|   333k|    auto it = read_while_code_unit(range, pred);
 1985|   333k|    if (it == range.begin()) {
  ------------------
  |  Branch (1985:9): [True: 201k, False: 131k]
  ------------------
 1986|   201k|        return unexpected(parse_error::error);
 1987|   201k|    }
 1988|   131k|    return it;
 1989|   333k|}
_ZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3864|  72.7k|    {
 3865|  72.7k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3865:18): [True: 3.78k, False: 69.0k]
  ------------------
 3866|  3.78k|            auto beg_exp_it = range.begin();
 3867|  3.78k|            auto it = *r;
 3868|       |
 3869|  3.78k|            if (auto r_sign =
  ------------------
  |  Branch (3869:22): [True: 3.76k, False: 24]
  ------------------
 3870|  3.78k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3871|  3.76k|                it = r_sign->first;
 3872|  3.76k|            }
 3873|       |
 3874|  3.78k|            if (auto r_exp = read_while1_code_unit(
 3875|  3.78k|                    ranges::subrange{it, range.end()},
 3876|  3.78k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3877|  3.78k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  |  859|  3.78k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 424, False: 3.36k]
  |  |  ------------------
  ------------------
 3878|    424|                it = beg_exp_it;
 3879|    424|            }
 3880|  3.36k|            else {
 3881|  3.36k|                it = *r_exp;
 3882|  3.36k|            }
 3883|       |
 3884|  3.78k|            return it;
 3885|  3.78k|        }
 3886|  69.0k|        return range.begin();
 3887|  72.7k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  3.78k|        : m_fptr([](storage fn,
  743|  3.78k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.78k|              cvref<T> obj = *get<T>(fn);
  745|  3.78k|              if constexpr (std::is_void_v<R>) {
  746|  3.78k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.78k|              }
  748|  3.78k|              else {
  749|  3.78k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.78k|              }
  751|  3.78k|          }),
  752|  3.78k|          m_storage(std::addressof(f))
  753|  3.78k|    {
  754|  3.78k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  12.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  12.6k|              else {
  749|  12.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.6k|              }
  751|  12.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  12.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  12.6k|        else if constexpr (std::is_object_v<T>) {
  688|  12.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  12.6k|    }
_ZZN3scn2v34impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3876|  12.6k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  3.78k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.78k|        {
  662|  3.78k|        }
_ZN3scn2v34impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3932|   202k|    {
 3933|   202k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 3934|   202k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (3934:35): [True: 121k, False: 80.9k]
  |  Branch (3934:50): [True: 27.0k, False: 94.0k]
  ------------------
 3935|       |
 3936|   202k|        auto it = ranges::begin(range);
 3937|   202k|        std::ptrdiff_t digits_count = 0;
 3938|       |
 3939|   202k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 3940|   202k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   202k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.5k, False: 127k]
  |  |  ------------------
  ------------------
 3941|  74.5k|            return r.transform_error(
 3942|  74.5k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 3943|  74.5k|                                              "Invalid floating-point value"));
 3944|  74.5k|        }
 3945|   127k|        else {
 3946|   127k|            digits_count += ranges::distance(it, *r);
 3947|   127k|            it = *r;
 3948|   127k|        }
 3949|       |
 3950|   127k|        m_integral_part_length = digits_count;
 3951|   127k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3951:18): [True: 864, False: 126k]
  ------------------
 3952|   127k|                                             m_locale_options.decimal_point)) {
 3953|    864|            it = *r;
 3954|    864|        }
 3955|       |
 3956|   127k|        if (auto r =
  ------------------
  |  Branch (3956:18): [True: 666, False: 126k]
  ------------------
 3957|   127k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 3958|    666|            digits_count += ranges::distance(it, *r);
 3959|    666|            it = *r;
 3960|    666|        }
 3961|       |
 3962|   127k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 127k]
  |  |  ------------------
  ------------------
 3963|      0|            return unexpected_scan_error(scan_error::invalid_scanned_value,
 3964|      0|                                         "No significand digits in float");
 3965|      0|        }
 3966|       |
 3967|   127k|        auto beg_exp_it = it;
 3968|   127k|        if (allowed_exp) {
  ------------------
  |  Branch (3968:13): [True: 72.7k, False: 54.7k]
  ------------------
 3969|  72.7k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 3970|  72.7k|        }
 3971|   127k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (3971:13): [True: 4.04k, False: 123k]
  |  Branch (3971:29): [True: 3.25k, False: 786]
  ------------------
 3972|  3.25k|            return unexpected_scan_error(
 3973|  3.25k|                scan_error::invalid_scanned_value,
 3974|  3.25k|                "No exponent given to scientific float");
 3975|  3.25k|        }
 3976|       |
 3977|   124k|        m_kind =
 3978|   124k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (3978:13): [True: 120k, False: 3.36k]
  ------------------
 3979|       |
 3980|   124k|        return it;
 3981|   127k|    }
_ZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3762|   329k|    {
 3763|   329k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  |  859|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 329k]
  |  |  |  Branch (859:45): [True: 0, False: 329k]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3764|   329k|                         thsep_allowed)) {
 3765|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3766|      0|                return char_to_int(ch) < 10 ||
 3767|      0|                       ch == m_locale_options.thousands_sep;
 3768|      0|            });
 3769|      0|        }
 3770|       |
 3771|   329k|        return read_while1_code_unit(
 3772|   329k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3773|   329k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   329k|        : m_fptr([](storage fn,
  743|   329k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   329k|              cvref<T> obj = *get<T>(fn);
  745|   329k|              if constexpr (std::is_void_v<R>) {
  746|   329k|                  obj(static_cast<decltype(args)>(args)...);
  747|   329k|              }
  748|   329k|              else {
  749|   329k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   329k|              }
  751|   329k|          }),
  752|   329k|          m_storage(std::addressof(f))
  753|   329k|    {
  754|   329k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   482k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   482k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   482k|              else {
  749|   482k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   482k|              }
  751|   482k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   482k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   482k|        else if constexpr (std::is_object_v<T>) {
  688|   482k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   482k|    }
_ZZN3scn2v34impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3772|   482k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   329k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   329k|        {
  662|   329k|        }
_ZN3scn2v34impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 3988|   553k|    {
 3989|   553k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 3990|   553k|        const bool allowed_nonhex =
 3991|   553k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 3992|   553k|             ~static_cast<unsigned>(allow_hex)) != 0;
 3993|       |
 3994|   553k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (3994:39): [True: 553k, False: 0]
  |  Branch (3994:45): [True: 0, False: 553k]
  ------------------
 3995|      0|            return r.transform_error(map_parse_error_to_scan_error(
 3996|      0|                scan_error::invalid_scanned_value,
 3997|      0|                "Invalid infinite floating-point value"));
 3998|      0|        }
 3999|   553k|        else if (r) {
  ------------------
  |  Branch (3999:18): [True: 0, False: 553k]
  ------------------
 4000|      0|            return *r;
 4001|      0|        }
 4002|       |
 4003|   553k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4003:39): [True: 553k, False: 0]
  |  Branch (4003:45): [True: 0, False: 553k]
  ------------------
 4004|      0|            return unexpected(r.error());
 4005|      0|        }
 4006|   553k|        else if (r) {
  ------------------
  |  Branch (4006:18): [True: 0, False: 553k]
  ------------------
 4007|      0|            return *r;
 4008|      0|        }
 4009|       |
 4010|   553k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4010:13): [True: 351k, False: 202k]
  |  Branch (4010:28): [True: 106k, False: 244k]
  ------------------
 4011|       |            // only hex allowed:
 4012|       |            // prefix "0x" allowed, not required
 4013|   106k|            auto it = range.begin();
 4014|       |
 4015|   106k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4015:22): [True: 210, False: 106k]
  ------------------
 4016|    210|                m_kind = float_kind::hex_with_prefix;
 4017|    210|                it = *r;
 4018|    210|            }
 4019|   106k|            else {
 4020|   106k|                m_kind = float_kind::hex_without_prefix;
 4021|   106k|            }
 4022|       |
 4023|   106k|            return read_hex(ranges::subrange{it, range.end()});
 4024|   106k|        }
 4025|   447k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4025:13): [True: 202k, False: 244k]
  |  Branch (4025:29): [True: 202k, False: 0]
  ------------------
 4026|       |            // only nonhex allowed:
 4027|       |            // no prefix allowed
 4028|   202k|            m_kind = float_kind::generic;
 4029|   202k|            return read_regular_float(range);
 4030|   202k|        }
 4031|       |        // both hex and nonhex allowed:
 4032|       |        // check for "0x" prefix -> hex,
 4033|       |        // regular otherwise
 4034|       |
 4035|   244k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 500, False: 244k]
  |  |  ------------------
  ------------------
 4036|    500|            m_kind = float_kind::hex_with_prefix;
 4037|    500|            return read_hex(ranges::subrange{*r, range.end()});
 4038|    500|        }
 4039|       |
 4040|   244k|        m_kind = float_kind::generic;
 4041|   244k|        return read_regular(range);
 4042|   244k|    }
_ZZN3scn2v34impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3714|   351k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3715|   351k|                    auto res = read_all(rr);
 3716|   351k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  |  859|   351k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 157, False: 351k]
  |  |  ------------------
  ------------------
 3717|    157|                        return unexpected_scan_error(
 3718|    157|                            scan_error::invalid_scanned_value,
 3719|    157|                            "Invalid float value");
 3720|    157|                    }
 3721|   351k|                    return res;
 3722|   351k|                };
_ZN3scn2v34impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1826|   351k|{
 1827|   351k|    return ranges::next(range.begin(), range.end());
 1828|   351k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   351k|    {
  313|   351k|        ranges::advance(x, bound);
  314|   351k|        return x;
  315|   351k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   351k|    {
  275|   351k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   351k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1564|   475k|    {
 1565|   475k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   475k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   475k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1608|   475k|    {
 1609|   475k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|   475k|                      ranges::sized_range<Range>) {
 1614|   475k|            m_storage.reset();
 1615|   475k|            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   475k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  28.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  28.8k|        {
  662|  28.8k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  98.9k|        : m_fptr([](storage fn,
  743|  98.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.9k|              cvref<T> obj = *get<T>(fn);
  745|  98.9k|              if constexpr (std::is_void_v<R>) {
  746|  98.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  98.9k|              }
  748|  98.9k|              else {
  749|  98.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.9k|              }
  751|  98.9k|          }),
  752|  98.9k|          m_storage(std::addressof(f))
  753|  98.9k|    {
  754|  98.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  98.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  98.9k|              else {
  749|  98.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.9k|              }
  751|  98.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  98.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  98.9k|        else if constexpr (std::is_object_v<T>) {
  688|  98.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  98.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|  98.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|  98.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  98.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|  98.9k|            },
_ZN3scn2v34impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3653|   455k|    {
 3654|   455k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  |  859|   455k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 455k]
  |  |  ------------------
  ------------------
 3655|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3656|      0|                classic_with_thsep_tag{}};
 3657|      0|        }
 3658|       |
 3659|   455k|        return read_source_impl(range);
 3660|   455k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  98.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  98.9k|        {
  662|  98.9k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   139k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   139k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   139k|            auto rd = make_reader<T, char_type>();
 6195|   139k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 139k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   139k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 139k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   139k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   139k|                return impl(rd, range, value);
 6202|   139k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   139k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   139k|    {
 6113|   139k|        const bool need_skipped_width =
 6114|   139k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 139k]
  |  Branch (6114:33): [True: 0, False: 139k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   139k|        auto it = rng.begin();
 6118|   139k|        std::ptrdiff_t prefix_width = 0;
 6119|   139k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 139k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   139k|        else {
 6127|   139k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   139k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   139k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   139k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 904, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    904|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    904|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    904|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    904|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    904|    }                                                  \
  |  |  |  | 3667|   139k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   138k|            std::tie(it, prefix_width) = prefix_result;
 6129|   138k|        }
 6130|   138k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   138k|        std::ptrdiff_t value_width = 0;
 6134|   138k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 138k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   138k|        else {
 6150|   138k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.4k, False: 94.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.4k|    }                                                  \
  |  | 3667|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  94.9k|                                             specs, value, loc));
 6152|       |
 6153|  94.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 94.9k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  94.9k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  94.9k|        std::ptrdiff_t postfix_width = 0;
 6162|  94.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 94.5k, False: 392]
  ------------------
 6163|  94.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  94.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  94.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  94.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  94.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 94.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  94.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  94.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  94.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  94.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  94.5k|                                 value_width));
 6167|  94.5k|            std::tie(it, postfix_width) = postfix_result;
 6168|  94.5k|        }
 6169|       |
 6170|  94.9k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  94.9k|                                                 value_width, postfix_width);
 6172|  94.9k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 94.9k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  94.9k|        return it;
 6177|  94.9k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3679|   297k|    {
 3680|   297k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   297k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   297k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   297k|        const std::ptrdiff_t sign_len =
 3683|   297k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 1.30k, False: 296k]
  ------------------
 3684|       |
 3685|   297k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   297k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 31.3k, False: 266k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  31.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  31.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  31.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  31.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  31.3k|    }                                                  \
  |  |  |  | 3667|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   266k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   297k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   138k|    {
 4159|   138k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   138k|#if !SCN_DISABLE_LOCALE
 4162|   138k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 34.1k, False: 104k]
  ------------------
 4163|  34.1k|            return read_impl<Range>(
 4164|  34.1k|                range, rd,
 4165|  34.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  34.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  34.1k|                },
 4168|  34.1k|                value, loc);
 4169|  34.1k|        }
 4170|   104k|#endif
 4171|       |
 4172|   104k|        return read_impl<Range>(
 4173|   104k|            range, rd,
 4174|   104k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   104k|                return r.read_source(SCN_FWD(args)...);
 4176|   104k|            },
 4177|   104k|            value);
 4178|   138k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   189k|    {
 4195|   189k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   189k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.6k, False: 134k]
  |  |  ------------------
  ------------------
 4197|  55.6k|            return unexpected(r.error());
 4198|  55.6k|        }
 4199|       |
 4200|   134k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 835, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    835|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    835|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    835|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    835|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    835|    }                                                  \
  |  |  |  | 3667|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   133k|        return ranges::next(range.begin(), n);
 4202|   134k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  34.1k|        : m_fptr([](storage fn,
  743|  34.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.1k|              cvref<T> obj = *get<T>(fn);
  745|  34.1k|              if constexpr (std::is_void_v<R>) {
  746|  34.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  34.1k|              }
  748|  34.1k|              else {
  749|  34.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.1k|              }
  751|  34.1k|          }),
  752|  34.1k|          m_storage(std::addressof(f))
  753|  34.1k|    {
  754|  34.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  34.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  34.1k|              else {
  749|  34.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.1k|              }
  751|  34.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  34.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  34.1k|        else if constexpr (std::is_object_v<T>) {
  688|  34.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  34.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  34.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  34.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  34.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  34.1k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  34.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  34.1k|        {
  662|  34.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   104k|        : m_fptr([](storage fn,
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|   104k|              if constexpr (std::is_void_v<R>) {
  746|   104k|                  obj(static_cast<decltype(args)>(args)...);
  747|   104k|              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
  752|   104k|          m_storage(std::addressof(f))
  753|   104k|    {
  754|   104k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   104k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   104k|        else if constexpr (std::is_object_v<T>) {
  688|   104k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   104k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   104k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   104k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   104k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   104k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   104k|        {
  662|   104k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   138k|    {
 4159|   138k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   138k|#if !SCN_DISABLE_LOCALE
 4162|   138k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 34.1k, False: 104k]
  ------------------
 4163|  34.1k|            return read_impl<Range>(
 4164|  34.1k|                range, rd,
 4165|  34.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  34.1k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  34.1k|                },
 4168|  34.1k|                value, loc);
 4169|  34.1k|        }
 4170|   104k|#endif
 4171|       |
 4172|   104k|        return read_impl<Range>(
 4173|   104k|            range, rd,
 4174|   104k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   104k|                return r.read_source(SCN_FWD(args)...);
 4176|   104k|            },
 4177|   104k|            value);
 4178|   138k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   189k|    {
 4195|   189k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   189k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.0k, False: 163k]
  |  |  ------------------
  ------------------
 4197|  26.0k|            return unexpected(r.error());
 4198|  26.0k|        }
 4199|       |
 4200|   163k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   163k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   163k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   163k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   163k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.4k, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  30.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  30.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  30.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  30.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  30.4k|    }                                                  \
  |  |  |  | 3667|   163k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   133k|        return ranges::next(range.begin(), n);
 4202|   163k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  34.1k|        : m_fptr([](storage fn,
  743|  34.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.1k|              cvref<T> obj = *get<T>(fn);
  745|  34.1k|              if constexpr (std::is_void_v<R>) {
  746|  34.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  34.1k|              }
  748|  34.1k|              else {
  749|  34.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.1k|              }
  751|  34.1k|          }),
  752|  34.1k|          m_storage(std::addressof(f))
  753|  34.1k|    {
  754|  34.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  34.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  34.1k|              else {
  749|  34.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.1k|              }
  751|  34.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  34.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  34.1k|        else if constexpr (std::is_object_v<T>) {
  688|  34.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  34.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  34.1k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  34.1k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  34.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  34.1k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  34.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  34.1k|        {
  662|  34.1k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   104k|        : m_fptr([](storage fn,
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|   104k|              if constexpr (std::is_void_v<R>) {
  746|   104k|                  obj(static_cast<decltype(args)>(args)...);
  747|   104k|              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
  752|   104k|          m_storage(std::addressof(f))
  753|   104k|    {
  754|   104k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   104k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   104k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   104k|              else {
  749|   104k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   104k|              }
  751|   104k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   104k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   104k|        else if constexpr (std::is_object_v<T>) {
  688|   104k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   104k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   104k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   104k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   104k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   104k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   104k|        {
  662|   104k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   141k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   141k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   141k|            auto rd = make_reader<T, char_type>();
 6195|   141k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 141k]
  |  |  ------------------
  ------------------
 6196|      0|                return unexpected(e);
 6197|      0|            }
 6198|       |
 6199|   141k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 141k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   141k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   141k|                return impl(rd, range, value);
 6202|   141k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   141k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 6112|   141k|    {
 6113|   141k|        const bool need_skipped_width =
 6114|   141k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 141k]
  |  Branch (6114:33): [True: 0, False: 141k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   141k|        auto it = rng.begin();
 6118|   141k|        std::ptrdiff_t prefix_width = 0;
 6119|   141k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 141k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   141k|        else {
 6127|   141k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   141k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 944, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    944|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    944|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    944|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    944|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    944|    }                                                  \
  |  |  |  | 3667|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   140k|            std::tie(it, prefix_width) = prefix_result;
 6129|   140k|        }
 6130|   140k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   140k|        std::ptrdiff_t value_width = 0;
 6134|   140k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 140k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   140k|        else {
 6150|   140k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.4k, False: 96.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.4k|    }                                                  \
  |  | 3667|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  96.7k|                                             specs, value, loc));
 6152|       |
 6153|  96.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 96.7k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  96.7k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  96.7k|        std::ptrdiff_t postfix_width = 0;
 6162|  96.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 96.3k, False: 410]
  ------------------
 6163|  96.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  96.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  96.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  96.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  96.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 96.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  96.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  96.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  96.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  96.3k|                                 value_width));
 6167|  96.3k|            std::tie(it, postfix_width) = postfix_result;
 6168|  96.3k|        }
 6169|       |
 6170|  96.7k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  96.7k|                                                 value_width, postfix_width);
 6172|  96.7k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 96.7k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  96.7k|        return it;
 6177|  96.7k|    }
_ZN3scn2v34impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3679|   302k|    {
 3680|   302k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  |  924|   302k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   302k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3681|       |
 3682|   302k|        const std::ptrdiff_t sign_len =
 3683|   302k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3683:13): [True: 1.32k, False: 301k]
  ------------------
 3684|       |
 3685|   302k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3668|   302k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   302k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   302k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.3k, False: 272k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  30.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  30.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  30.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  30.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  30.3k|    }                                                  \
  |  |  |  | 3667|   302k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   272k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3686|   272k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3687|   302k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4158|   140k|    {
 4159|   140k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   140k|#if !SCN_DISABLE_LOCALE
 4162|   140k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 34.9k, False: 105k]
  ------------------
 4163|  34.9k|            return read_impl<Range>(
 4164|  34.9k|                range, rd,
 4165|  34.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  34.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  34.9k|                },
 4168|  34.9k|                value, loc);
 4169|  34.9k|        }
 4170|   105k|#endif
 4171|       |
 4172|   105k|        return read_impl<Range>(
 4173|   105k|            range, rd,
 4174|   105k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   105k|                return r.read_source(SCN_FWD(args)...);
 4176|   105k|            },
 4177|   105k|            value);
 4178|   140k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4194|   192k|    {
 4195|   192k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   192k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56.2k, False: 136k]
  |  |  ------------------
  ------------------
 4197|  56.2k|            return unexpected(r.error());
 4198|  56.2k|        }
 4199|       |
 4200|   136k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   136k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 149, False: 136k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    149|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    149|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    149|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    149|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    149|    }                                                  \
  |  |  |  | 3667|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   136k|        return ranges::next(range.begin(), n);
 4202|   136k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  34.9k|        : m_fptr([](storage fn,
  743|  34.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.9k|              cvref<T> obj = *get<T>(fn);
  745|  34.9k|              if constexpr (std::is_void_v<R>) {
  746|  34.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  34.9k|              }
  748|  34.9k|              else {
  749|  34.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.9k|              }
  751|  34.9k|          }),
  752|  34.9k|          m_storage(std::addressof(f))
  753|  34.9k|    {
  754|  34.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  34.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  34.9k|              else {
  749|  34.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.9k|              }
  751|  34.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  34.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  34.9k|        else if constexpr (std::is_object_v<T>) {
  688|  34.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  34.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4165|  34.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  34.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  34.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  34.9k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  34.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  34.9k|        {
  662|  34.9k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   105k|        : m_fptr([](storage fn,
  743|   105k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   105k|              cvref<T> obj = *get<T>(fn);
  745|   105k|              if constexpr (std::is_void_v<R>) {
  746|   105k|                  obj(static_cast<decltype(args)>(args)...);
  747|   105k|              }
  748|   105k|              else {
  749|   105k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   105k|              }
  751|   105k|          }),
  752|   105k|          m_storage(std::addressof(f))
  753|   105k|    {
  754|   105k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   105k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   105k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   105k|              else {
  749|   105k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   105k|              }
  751|   105k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   105k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   105k|        else if constexpr (std::is_object_v<T>) {
  688|   105k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   105k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4174|   105k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   105k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   105k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   105k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   105k|        {
  662|   105k|        }
_ZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4158|   140k|    {
 4159|   140k|        float_reader<CharT> rd{get_options(specs)};
 4160|       |
 4161|   140k|#if !SCN_DISABLE_LOCALE
 4162|   140k|        if (specs.localized) {
  ------------------
  |  Branch (4162:13): [True: 35.0k, False: 105k]
  ------------------
 4163|  35.0k|            return read_impl<Range>(
 4164|  35.0k|                range, rd,
 4165|  35.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  35.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4167|  35.0k|                },
 4168|  35.0k|                value, loc);
 4169|  35.0k|        }
 4170|   105k|#endif
 4171|       |
 4172|   105k|        return read_impl<Range>(
 4173|   105k|            range, rd,
 4174|   105k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   105k|                return r.read_source(SCN_FWD(args)...);
 4176|   105k|            },
 4177|   105k|            value);
 4178|   140k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4194|   192k|    {
 4195|   192k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4196|   192k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   192k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 26.2k, False: 166k]
  |  |  ------------------
  ------------------
 4197|  26.2k|            return unexpected(r.error());
 4198|  26.2k|        }
 4199|       |
 4200|   166k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3668|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 30.1k, False: 136k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  30.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  30.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  30.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  30.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  30.1k|    }                                                  \
  |  |  |  | 3667|   166k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4201|   136k|        return ranges::next(range.begin(), n);
 4202|   166k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  35.0k|        : m_fptr([](storage fn,
  743|  35.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.0k|              cvref<T> obj = *get<T>(fn);
  745|  35.0k|              if constexpr (std::is_void_v<R>) {
  746|  35.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  35.0k|              }
  748|  35.0k|              else {
  749|  35.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.0k|              }
  751|  35.0k|          }),
  752|  35.0k|          m_storage(std::addressof(f))
  753|  35.0k|    {
  754|  35.0k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  35.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  35.0k|              else {
  749|  35.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.0k|              }
  751|  35.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  35.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  35.0k|        else if constexpr (std::is_object_v<T>) {
  688|  35.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  35.0k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4165|  35.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4166|  35.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  |  930|  35.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4167|  35.0k|                },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  35.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  35.0k|        {
  662|  35.0k|        }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   105k|        : m_fptr([](storage fn,
  743|   105k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   105k|              cvref<T> obj = *get<T>(fn);
  745|   105k|              if constexpr (std::is_void_v<R>) {
  746|   105k|                  obj(static_cast<decltype(args)>(args)...);
  747|   105k|              }
  748|   105k|              else {
  749|   105k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   105k|              }
  751|   105k|          }),
  752|   105k|          m_storage(std::addressof(f))
  753|   105k|    {
  754|   105k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   105k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   105k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   105k|              else {
  749|   105k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   105k|              }
  751|   105k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|   105k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   105k|        else if constexpr (std::is_object_v<T>) {
  688|   105k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   105k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4174|   105k|            [](float_reader<CharT>& r, auto&&... args) {
 4175|   105k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4176|   105k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   105k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   105k|        {
  662|   105k|        }
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   556k|{
 2049|   556k|    auto it = range.begin();
 2050|   955k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 952k, False: 3.18k]
  ------------------
 2051|   952k|        const auto val =
 2052|   952k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   952k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   952k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 952k, False: 0]
  |  |  ------------------
  ------------------
 2054|   952k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   952k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   952k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 553k, False: 399k]
  ------------------
 2057|   553k|                return it;
 2058|   553k|            }
 2059|   952k|        }
 2060|   399k|        it = val.iterator;
 2061|   399k|    }
 2062|       |
 2063|  3.18k|    return it;
 2064|   556k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|   952k|{
 1887|   952k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   952k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   952k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   952k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   952k|    auto it = range.begin();
 1891|   952k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   952k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   952k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 952k]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|   952k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 952k, False: 0]
  ------------------
 1900|   952k|        ++it;
 1901|   952k|        return {it, string_type(1, *range.begin())};
 1902|   952k|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|   952k|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1877|   952k|    {
 1878|   952k|        return !codepoint.empty();
 1879|   952k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   556k|{
 2070|   556k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   556k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   556k|{
 2940|   556k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 556k, False: 0]
  ------------------
 2941|   556k|        auto it = read_while_classic_space(range);
 2942|   556k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   556k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   556k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.18k, False: 553k]
  |  |  ------------------
  ------------------
 2944|  3.18k|            return unexpected(e);
 2945|  3.18k|        }
 2946|       |
 2947|   553k|        return it;
 2948|   556k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   556k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   556k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   556k|    else {
 2114|   556k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   556k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   556k|            return detail::is_cp_space(cp);
 2127|   556k|        });
 2128|   556k|    }
 2129|   556k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   556k|        : m_fptr([](storage fn,
  743|   556k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   556k|              cvref<T> obj = *get<T>(fn);
  745|   556k|              if constexpr (std::is_void_v<R>) {
  746|   556k|                  obj(static_cast<decltype(args)>(args)...);
  747|   556k|              }
  748|   556k|              else {
  749|   556k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   556k|              }
  751|   556k|          }),
  752|   556k|          m_storage(std::addressof(f))
  753|   556k|    {
  754|   556k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   952k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   952k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   952k|              else {
  749|   952k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   952k|              }
  751|   952k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   952k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   952k|        else if constexpr (std::is_object_v<T>) {
  688|   952k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   952k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|   952k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   952k|            return detail::is_cp_space(cp);
 2127|   952k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   556k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   556k|        {
  662|   556k|        }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2075|   910k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|   910k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|   910k|        auto buf = make_contiguous_buffer(range);
 2080|   910k|        auto it = find_classic_space_narrow_fast(buf.view());
 2081|   910k|        return ranges::next(range.begin(),
 2082|   910k|                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|       |    else {
 2085|       |        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|       |        return read_until_code_point(
 2097|       |            ranges::subrange{it, range.end()},
 2098|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|       |    }
 2100|   910k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1670|   910k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   910k|                  ranges::sized_range<Range>) {
 1674|   910k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   910k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   910k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1476|   910k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   910k|    {
 1478|   910k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1564|   910k|    {
 1565|   910k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   910k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   910k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1608|   910k|    {
 1609|   910k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|   910k|                                          std::basic_string<CharT>>) {
 1619|   910k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   910k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1620|   910k|            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   910k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIfEET_S5_:
 4088|   657k|    {
 4089|   657k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 74.2k, False: 583k]
  ------------------
 4090|  74.2k|            return std::copysign(value, T{-1.0});
 4091|  74.2k|        }
 4092|   583k|        return std::copysign(value, T{1.0});
 4093|   657k|    }
_ZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2075|   377k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|   377k|    else {
 2085|   377k|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|   377k|        return read_until_code_point(
 2097|   377k|            ranges::subrange{it, range.end()},
 2098|   377k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|   377k|    }
 2100|   377k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   377k|        : m_fptr([](storage fn,
  743|   377k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   377k|              cvref<T> obj = *get<T>(fn);
  745|   377k|              if constexpr (std::is_void_v<R>) {
  746|   377k|                  obj(static_cast<decltype(args)>(args)...);
  747|   377k|              }
  748|   377k|              else {
  749|   377k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   377k|              }
  751|   377k|          }),
  752|   377k|          m_storage(std::addressof(f))
  753|   377k|    {
  754|   377k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|   690k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   690k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   690k|              else {
  749|   690k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   690k|              }
  751|   690k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|   690k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   690k|        else if constexpr (std::is_object_v<T>) {
  688|   690k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   690k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2098|   690k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   377k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   377k|        {
  662|   377k|        }
_ZN3scn2v34impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1564|   377k|    {
 1565|   377k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1566|   377k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1608|   377k|    {
 1609|   377k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|   377k|                                          std::basic_string<CharT>>) {
 1619|   377k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  |  930|   377k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1620|   377k|            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|       |                           ranges::common_range<Range>) {
 1626|       |            auto beg_seg = range.begin().contiguous_segment();
 1627|       |            auto end_seg = range.end().contiguous_segment();
 1628|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1629|       |                             detail::to_address(end_seg.end()))) {
 1630|       |                auto& str = m_storage.emplace();
 1631|       |                str.reserve(range.end().position() - range.begin().position());
 1632|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|       |                m_view = string_view_type{str};
 1634|       |                return;
 1635|       |            }
 1636|       |
 1637|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|       |                                                            end_seg.data());
 1639|       |            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   377k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIfEET_S5_:
 4088|   261k|    {
 4089|   261k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 907, False: 260k]
  ------------------
 4090|    907|            return std::copysign(value, T{-1.0});
 4091|    907|        }
 4092|   260k|        return std::copysign(value, T{1.0});
 4093|   261k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIdEET_S5_:
 4088|   681k|    {
 4089|   681k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 77.1k, False: 604k]
  ------------------
 4090|  77.1k|            return std::copysign(value, T{-1.0});
 4091|  77.1k|        }
 4092|   604k|        return std::copysign(value, T{1.0});
 4093|   681k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIdEET_S5_:
 4088|   297k|    {
 4089|   297k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 921, False: 296k]
  ------------------
 4090|    921|            return std::copysign(value, T{-1.0});
 4091|    921|        }
 4092|   296k|        return std::copysign(value, T{1.0});
 4093|   297k|    }
_ZNK3scn2v34impl12float_readerIcE7setsignIeEET_S5_:
 4088|   690k|    {
 4089|   690k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 79.4k, False: 611k]
  ------------------
 4090|  79.4k|            return std::copysign(value, T{-1.0});
 4091|  79.4k|        }
 4092|   611k|        return std::copysign(value, T{1.0});
 4093|   690k|    }
_ZNK3scn2v34impl12float_readerIwE7setsignIeEET_S5_:
 4088|   302k|    {
 4089|   302k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4089:13): [True: 935, False: 302k]
  ------------------
 4090|    935|            return std::copysign(value, T{-1.0});
 4091|    935|        }
 4092|   302k|        return std::copysign(value, T{1.0});
 4093|   302k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|   298k|{
 5784|   298k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.93k, False: 294k]
  |  |  ------------------
  ------------------
 5785|  3.93k|        return unexpected(e);
 5786|  3.93k|    }
 5787|       |
 5788|   294k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 294k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   294k|    return skip_classic_whitespace(range);
 5793|   294k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 5859|  96.2k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  96.2k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  96.2k|            auto rd = make_reader<T, char_type>();
 5865|  96.2k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  96.2k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  96.2k|    {
 5852|  96.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  96.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  96.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  96.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  96.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.30k, False: 94.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.30k|    }                                                  \
  |  |  |  | 3667|  96.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  94.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  94.9k|                        .transform_error(make_eof_scan_error));
 5854|  94.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  96.2k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  94.9k|    {
 4141|  94.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  94.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  94.9k|        float_reader<CharT> rd{};
 4144|  94.9k|        return read_impl<Range>(
 4145|  94.9k|            range, rd,
 4146|  94.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  94.9k|                return r.read_source(SCN_FWD(args)...);
 4148|  94.9k|            },
 4149|  94.9k|            value);
 4150|  94.9k|    }
_ZN3scn2v34impl12float_readerIcEC2Ev:
 3646|   615k|    constexpr float_reader() = default;
_ZN3scn2v34impl17float_reader_baseC2Ev:
 3632|   908k|    constexpr float_reader_base() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  94.9k|        : m_fptr([](storage fn,
  743|  94.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.9k|              cvref<T> obj = *get<T>(fn);
  745|  94.9k|              if constexpr (std::is_void_v<R>) {
  746|  94.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  94.9k|              }
  748|  94.9k|              else {
  749|  94.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.9k|              }
  751|  94.9k|          }),
  752|  94.9k|          m_storage(std::addressof(f))
  753|  94.9k|    {
  754|  94.9k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  94.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  94.9k|              else {
  749|  94.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.9k|              }
  751|  94.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  94.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  94.9k|        else if constexpr (std::is_object_v<T>) {
  688|  94.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  94.9k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  94.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  94.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  94.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  94.9k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  94.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  94.9k|        {
  662|  94.9k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 5859|   100k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   100k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   100k|            auto rd = make_reader<T, char_type>();
 5865|   100k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   100k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|   100k|    {
 5852|   100k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.48k, False: 98.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.48k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.48k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.48k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.48k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.48k|    }                                                  \
  |  |  |  | 3667|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  98.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  98.5k|                        .transform_error(make_eof_scan_error));
 5854|  98.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   100k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  98.5k|    {
 4141|  98.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  98.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  98.5k|        float_reader<CharT> rd{};
 4144|  98.5k|        return read_impl<Range>(
 4145|  98.5k|            range, rd,
 4146|  98.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  98.5k|                return r.read_source(SCN_FWD(args)...);
 4148|  98.5k|            },
 4149|  98.5k|            value);
 4150|  98.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  98.5k|        : m_fptr([](storage fn,
  743|  98.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.5k|              cvref<T> obj = *get<T>(fn);
  745|  98.5k|              if constexpr (std::is_void_v<R>) {
  746|  98.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  98.5k|              }
  748|  98.5k|              else {
  749|  98.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.5k|              }
  751|  98.5k|          }),
  752|  98.5k|          m_storage(std::addressof(f))
  753|  98.5k|    {
  754|  98.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  98.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  98.5k|              else {
  749|  98.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.5k|              }
  751|  98.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  98.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  98.5k|        else if constexpr (std::is_object_v<T>) {
  688|  98.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  98.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  98.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  98.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  98.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  98.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  98.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  98.5k|        {
  662|  98.5k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 5859|   102k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   102k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   102k|            auto rd = make_reader<T, char_type>();
 5865|   102k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   102k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|   102k|    {
 5852|   102k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.61k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.61k|    }                                                  \
  |  |  |  | 3667|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   100k|                        .transform_error(make_eof_scan_error));
 5854|   100k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   102k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|   100k|    {
 4141|   100k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   100k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   100k|        float_reader<CharT> rd{};
 4144|   100k|        return read_impl<Range>(
 4145|   100k|            range, rd,
 4146|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   100k|                return r.read_source(SCN_FWD(args)...);
 4148|   100k|            },
 4149|   100k|            value);
 4150|   100k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|   100k|        : m_fptr([](storage fn,
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
  752|   100k|          m_storage(std::addressof(f))
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   100k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  688|   100k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   100k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   100k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   100k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   100k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|   325k|{
 5784|   325k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.09k, False: 321k]
  |  |  ------------------
  ------------------
 5785|  4.09k|        return unexpected(e);
 5786|  4.09k|    }
 5787|       |
 5788|   321k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 321k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   321k|    return skip_classic_whitespace(range);
 5793|   321k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|   104k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   104k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   104k|            auto rd = make_reader<T, char_type>();
 5869|   104k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 104k, False: 0]
  ------------------
 5870|   104k|                return impl(rd, range, value);
 5871|   104k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   104k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|   104k|    {
 5852|   104k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   104k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   104k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   104k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   104k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.37k, False: 103k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.37k|    }                                                  \
  |  |  |  | 3667|   104k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   103k|                        .transform_error(make_eof_scan_error));
 5854|   103k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   104k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|   103k|    {
 4141|   103k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   103k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   103k|        float_reader<CharT> rd{};
 4144|   103k|        return read_impl<Range>(
 4145|   103k|            range, rd,
 4146|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   103k|                return r.read_source(SCN_FWD(args)...);
 4148|   103k|            },
 4149|   103k|            value);
 4150|   103k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   103k|        : m_fptr([](storage fn,
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|   103k|              if constexpr (std::is_void_v<R>) {
  746|   103k|                  obj(static_cast<decltype(args)>(args)...);
  747|   103k|              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
  752|   103k|          m_storage(std::addressof(f))
  753|   103k|    {
  754|   103k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   103k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   103k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   103k|              else {
  749|   103k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   103k|              }
  751|   103k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   103k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   103k|        else if constexpr (std::is_object_v<T>) {
  688|   103k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   103k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|   103k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   103k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   103k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   103k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   103k|        {
  662|   103k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|   109k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   109k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   109k|            auto rd = make_reader<T, char_type>();
 5869|   109k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 109k, False: 0]
  ------------------
 5870|   109k|                return impl(rd, range, value);
 5871|   109k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   109k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|   109k|    {
 5852|   109k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.56k, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.56k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.56k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.56k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.56k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.56k|    }                                                  \
  |  |  |  | 3667|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   108k|                        .transform_error(make_eof_scan_error));
 5854|   108k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   109k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|   108k|    {
 4141|   108k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   108k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   108k|        float_reader<CharT> rd{};
 4144|   108k|        return read_impl<Range>(
 4145|   108k|            range, rd,
 4146|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   108k|                return r.read_source(SCN_FWD(args)...);
 4148|   108k|            },
 4149|   108k|            value);
 4150|   108k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   108k|        : m_fptr([](storage fn,
  743|   108k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   108k|              cvref<T> obj = *get<T>(fn);
  745|   108k|              if constexpr (std::is_void_v<R>) {
  746|   108k|                  obj(static_cast<decltype(args)>(args)...);
  747|   108k|              }
  748|   108k|              else {
  749|   108k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   108k|              }
  751|   108k|          }),
  752|   108k|          m_storage(std::addressof(f))
  753|   108k|    {
  754|   108k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   108k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   108k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   108k|              else {
  749|   108k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   108k|              }
  751|   108k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   108k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   108k|        else if constexpr (std::is_object_v<T>) {
  688|   108k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   108k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   108k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   108k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   108k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   108k|        {
  662|   108k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|   111k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   111k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   111k|            auto rd = make_reader<T, char_type>();
 5869|   111k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 111k, False: 0]
  ------------------
 5870|   111k|                return impl(rd, range, value);
 5871|   111k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   111k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|   111k|    {
 5852|   111k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   111k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   111k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   111k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.68k, False: 109k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.68k|    }                                                  \
  |  |  |  | 3667|   111k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   109k|                        .transform_error(make_eof_scan_error));
 5854|   109k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   111k|    }
_ZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|   109k|    {
 4141|   109k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   109k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|   109k|        float_reader<CharT> rd{};
 4144|   109k|        return read_impl<Range>(
 4145|   109k|            range, rd,
 4146|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   109k|                return r.read_source(SCN_FWD(args)...);
 4148|   109k|            },
 4149|   109k|            value);
 4150|   109k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|   109k|        : m_fptr([](storage fn,
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|   109k|              if constexpr (std::is_void_v<R>) {
  746|   109k|                  obj(static_cast<decltype(args)>(args)...);
  747|   109k|              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
  752|   109k|          m_storage(std::addressof(f))
  753|   109k|    {
  754|   109k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|   109k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   109k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   109k|              else {
  749|   109k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   109k|              }
  751|   109k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|   109k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   109k|        else if constexpr (std::is_object_v<T>) {
  688|   109k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   109k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|   109k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|   109k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|   109k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|   109k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   109k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   109k|        {
  662|   109k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|   708k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   708k|    static_cast<    \
  |  |  929|   708k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   708k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   708k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   708k|          m_current(m_range.begin())
 2867|   708k|    {
 2868|   708k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|  2.05M|    {
 2872|  2.05M|        return m_current;
 2873|  2.05M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|  1.35M|    {
 2877|  1.35M|        return m_range.end();
 2878|  1.35M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|   642k|    {
 2892|   642k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   642k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   642k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   642k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   642k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 642k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   642k|        }
 2898|   642k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   642k|    static_cast<    \
  |  |  929|   642k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   642k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|   708k|    {
 2882|   708k|        return ranges::subrange{begin(), end()};
 2883|   708k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   708k|    {
 6026|   708k|        const bool need_skipped_width =
 6027|   708k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 708k]
  |  Branch (6027:33): [True: 0, False: 708k]
  ------------------
 6028|   708k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   708k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 708k]
  ------------------
 6032|   708k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 708k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   708k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 708k, False: 0]
  |  Branch (6036:56): [True: 708k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   708k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 708k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  1.40M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   708k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   708k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   708k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   708k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 11.3k, False: 697k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  11.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  11.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  11.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  11.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  11.3k|    }                                                  \
  |  |  |  | 3667|   708k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   697k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  1.40M|                            make_eof_scan_error));
 6047|       |
 6048|  1.40M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 697k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   697k|            return result_type{it, 0};
 6056|  1.40M|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   708k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   632k|    {
 6068|   632k|        const bool need_skipped_width =
 6069|   632k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 632k]
  |  Branch (6069:33): [True: 0, False: 632k]
  ------------------
 6070|   632k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   632k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 632k]
  ------------------
 6073|   632k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 632k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   632k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 632k, False: 0]
  ------------------
 6082|   632k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 632k]
  ------------------
 6083|   632k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   632k|        return result_type{rng.begin(), 0};
 6107|   632k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIfEENS0_13scan_expectedIPKcEERT_:
 6181|   230k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   230k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   230k|            auto rd = make_reader<T, char_type>();
 6187|   230k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 230k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   230k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   230k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   230k|    {
 6113|   230k|        const bool need_skipped_width =
 6114|   230k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 230k]
  |  Branch (6114:33): [True: 0, False: 230k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   230k|        auto it = rng.begin();
 6118|   230k|        std::ptrdiff_t prefix_width = 0;
 6119|   230k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 230k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   230k|        else {
 6127|   230k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   230k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   230k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   230k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.45k, False: 227k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.45k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.45k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.45k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.45k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.45k|    }                                                  \
  |  |  |  | 3667|   230k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   227k|            std::tie(it, prefix_width) = prefix_result;
 6129|   227k|        }
 6130|   227k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   227k|        std::ptrdiff_t value_width = 0;
 6134|   227k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 227k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   227k|        else {
 6150|   227k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   227k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   227k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   227k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.7k, False: 208k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.7k|    }                                                  \
  |  | 3667|   227k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   227k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   208k|                                             specs, value, loc));
 6152|       |
 6153|   208k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 208k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   208k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   208k|        std::ptrdiff_t postfix_width = 0;
 6162|   208k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 205k, False: 3.04k]
  ------------------
 6163|   205k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   205k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   205k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   205k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 205k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   205k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   205k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   205k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   205k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   205k|                                 value_width));
 6167|   205k|            std::tie(it, postfix_width) = postfix_result;
 6168|   205k|        }
 6169|       |
 6170|   208k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   208k|                                                 value_width, postfix_width);
 6172|   208k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 208k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   208k|        return it;
 6177|   208k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIdEENS0_13scan_expectedIPKcEERT_:
 6181|   237k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   237k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   237k|            auto rd = make_reader<T, char_type>();
 6187|   237k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 237k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   237k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   237k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   237k|    {
 6113|   237k|        const bool need_skipped_width =
 6114|   237k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 237k]
  |  Branch (6114:33): [True: 0, False: 237k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   237k|        auto it = rng.begin();
 6118|   237k|        std::ptrdiff_t prefix_width = 0;
 6119|   237k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 237k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   237k|        else {
 6127|   237k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   237k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   237k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   237k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   237k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.81k, False: 233k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.81k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.81k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.81k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.81k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.81k|    }                                                  \
  |  |  |  | 3667|   237k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   233k|            std::tie(it, prefix_width) = prefix_result;
 6129|   233k|        }
 6130|   233k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   233k|        std::ptrdiff_t value_width = 0;
 6134|   233k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 233k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   233k|        else {
 6150|   233k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   233k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   233k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   233k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.3k, False: 215k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.3k|    }                                                  \
  |  | 3667|   233k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   233k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   215k|                                             specs, value, loc));
 6152|       |
 6153|   215k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 215k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   215k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   215k|        std::ptrdiff_t postfix_width = 0;
 6162|   215k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 211k, False: 3.36k]
  ------------------
 6163|   211k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   211k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   211k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   211k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   211k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 211k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   211k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   211k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   211k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   211k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   211k|                                 value_width));
 6167|   211k|            std::tie(it, postfix_width) = postfix_result;
 6168|   211k|        }
 6169|       |
 6170|   215k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   215k|                                                 value_width, postfix_width);
 6172|   215k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 215k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   215k|        return it;
 6177|   215k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclIeEENS0_13scan_expectedIPKcEERT_:
 6181|   240k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   240k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   240k|            auto rd = make_reader<T, char_type>();
 6187|   240k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 240k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   240k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   240k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   240k|    {
 6113|   240k|        const bool need_skipped_width =
 6114|   240k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 240k]
  |  Branch (6114:33): [True: 0, False: 240k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   240k|        auto it = rng.begin();
 6118|   240k|        std::ptrdiff_t prefix_width = 0;
 6119|   240k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 240k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   240k|        else {
 6127|   240k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   240k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   240k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   240k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.07k, False: 236k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.07k|    }                                                  \
  |  |  |  | 3667|   240k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   236k|            std::tie(it, prefix_width) = prefix_result;
 6129|   236k|        }
 6130|   236k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   236k|        std::ptrdiff_t value_width = 0;
 6134|   236k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 236k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   236k|        else {
 6150|   236k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   236k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   236k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   236k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 18.1k, False: 218k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  18.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  18.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  18.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  18.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  18.1k|    }                                                  \
  |  | 3667|   236k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   236k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   218k|                                             specs, value, loc));
 6152|       |
 6153|   218k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 218k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   218k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   218k|        std::ptrdiff_t postfix_width = 0;
 6162|   218k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 214k, False: 3.59k]
  ------------------
 6163|   214k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   214k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   214k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   214k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 214k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   214k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   214k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   214k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   214k|                                 value_width));
 6167|   214k|            std::tie(it, postfix_width) = postfix_result;
 6168|   214k|        }
 6169|       |
 6170|   218k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   218k|                                                 value_width, postfix_width);
 6172|   218k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 218k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   218k|        return it;
 6177|   218k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|   147k|{
 5784|   147k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 426, False: 147k]
  |  |  ------------------
  ------------------
 5785|    426|        return unexpected(e);
 5786|    426|    }
 5787|       |
 5788|   147k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 147k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   147k|    return skip_classic_whitespace(range);
 5793|   147k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 5859|  43.4k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  43.4k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  43.4k|            auto rd = make_reader<T, char_type>();
 5865|  43.4k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  43.4k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  43.4k|    {
 5852|  43.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  43.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  43.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  43.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  43.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 273, False: 43.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    273|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    273|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    273|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    273|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    273|    }                                                  \
  |  |  |  | 3667|  43.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  43.2k|                        .transform_error(make_eof_scan_error));
 5854|  43.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  43.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  43.2k|    {
 4141|  43.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  43.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  43.2k|        float_reader<CharT> rd{};
 4144|  43.2k|        return read_impl<Range>(
 4145|  43.2k|            range, rd,
 4146|  43.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  43.2k|                return r.read_source(SCN_FWD(args)...);
 4148|  43.2k|            },
 4149|  43.2k|            value);
 4150|  43.2k|    }
_ZN3scn2v34impl12float_readerIwEC2Ev:
 3646|   293k|    constexpr float_reader() = default;
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  43.2k|        : m_fptr([](storage fn,
  743|  43.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.2k|              cvref<T> obj = *get<T>(fn);
  745|  43.2k|              if constexpr (std::is_void_v<R>) {
  746|  43.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  43.2k|              }
  748|  43.2k|              else {
  749|  43.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.2k|              }
  751|  43.2k|          }),
  752|  43.2k|          m_storage(std::addressof(f))
  753|  43.2k|    {
  754|  43.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  43.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  43.2k|              else {
  749|  43.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.2k|              }
  751|  43.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  43.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  43.2k|        else if constexpr (std::is_object_v<T>) {
  688|  43.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  43.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  43.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  43.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  43.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  43.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  43.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  43.2k|        {
  662|  43.2k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 5859|  51.5k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  51.5k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  51.5k|            auto rd = make_reader<T, char_type>();
 5865|  51.5k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  51.5k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  51.5k|    {
 5852|  51.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  51.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 309, False: 51.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    309|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    309|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    309|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    309|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    309|    }                                                  \
  |  |  |  | 3667|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  51.2k|                        .transform_error(make_eof_scan_error));
 5854|  51.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  51.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  51.2k|    {
 4141|  51.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  51.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  51.2k|        float_reader<CharT> rd{};
 4144|  51.2k|        return read_impl<Range>(
 4145|  51.2k|            range, rd,
 4146|  51.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  51.2k|                return r.read_source(SCN_FWD(args)...);
 4148|  51.2k|            },
 4149|  51.2k|            value);
 4150|  51.2k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  51.2k|        : m_fptr([](storage fn,
  743|  51.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  51.2k|              cvref<T> obj = *get<T>(fn);
  745|  51.2k|              if constexpr (std::is_void_v<R>) {
  746|  51.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  51.2k|              }
  748|  51.2k|              else {
  749|  51.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  51.2k|              }
  751|  51.2k|          }),
  752|  51.2k|          m_storage(std::addressof(f))
  753|  51.2k|    {
  754|  51.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  51.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  51.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  51.2k|              else {
  749|  51.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  51.2k|              }
  751|  51.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  51.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  51.2k|        else if constexpr (std::is_object_v<T>) {
  688|  51.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  51.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  51.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  51.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  51.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  51.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  51.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  51.2k|        {
  662|  51.2k|        }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 5859|  52.8k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  52.8k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  52.8k|            auto rd = make_reader<T, char_type>();
 5865|  52.8k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  52.8k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5851|  52.8k|    {
 5852|  52.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  52.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 336, False: 52.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    336|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    336|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    336|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    336|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    336|    }                                                  \
  |  |  |  | 3667|  52.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  52.5k|                        .transform_error(make_eof_scan_error));
 5854|  52.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  52.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4140|  52.5k|    {
 4141|  52.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  52.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  52.5k|        float_reader<CharT> rd{};
 4144|  52.5k|        return read_impl<Range>(
 4145|  52.5k|            range, rd,
 4146|  52.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  52.5k|                return r.read_source(SCN_FWD(args)...);
 4148|  52.5k|            },
 4149|  52.5k|            value);
 4150|  52.5k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  52.5k|        : m_fptr([](storage fn,
  743|  52.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.5k|              cvref<T> obj = *get<T>(fn);
  745|  52.5k|              if constexpr (std::is_void_v<R>) {
  746|  52.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  52.5k|              }
  748|  52.5k|              else {
  749|  52.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.5k|              }
  751|  52.5k|          }),
  752|  52.5k|          m_storage(std::addressof(f))
  753|  52.5k|    {
  754|  52.5k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  52.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  52.5k|              else {
  749|  52.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.5k|              }
  751|  52.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  52.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  52.5k|        else if constexpr (std::is_object_v<T>) {
  688|  52.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  52.5k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4146|  52.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  52.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  52.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  52.5k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  52.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  52.5k|        {
  662|  52.5k|        }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|   409k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   409k|    static_cast<    \
  |  |  929|   409k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   409k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   409k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   409k|          m_current(m_range.begin())
 2867|   409k|    {
 2868|   409k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|  1.09M|    {
 2872|  1.09M|        return m_current;
 2873|  1.09M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|   685k|    {
 2877|   685k|        return m_range.end();
 2878|   685k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|   276k|    {
 2892|   276k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   276k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   276k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   276k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   276k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 276k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   276k|        }
 2898|   276k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   276k|    static_cast<    \
  |  |  929|   276k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   276k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|   409k|    {
 2882|   409k|        return ranges::subrange{begin(), end()};
 2883|   409k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   409k|    {
 6026|   409k|        const bool need_skipped_width =
 6027|   409k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 409k]
  |  Branch (6027:33): [True: 0, False: 409k]
  ------------------
 6028|   409k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   409k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 409k]
  ------------------
 6032|   409k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 409k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   409k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 409k, False: 0]
  |  Branch (6036:56): [True: 409k, False: 0]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   409k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 409k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   815k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   409k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   409k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   409k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   409k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.68k, False: 406k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.68k|    }                                                  \
  |  |  |  | 3667|   409k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   406k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   815k|                            make_eof_scan_error));
 6047|       |
 6048|   815k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 406k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   406k|            return result_type{it, 0};
 6056|   815k|        }
 6057|       |
 6058|      0|        return result_type{rng.begin(), 0};
 6059|   409k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   274k|    {
 6068|   274k|        const bool need_skipped_width =
 6069|   274k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 274k]
  |  Branch (6069:33): [True: 0, False: 274k]
  ------------------
 6070|   274k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   274k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 274k]
  ------------------
 6073|   274k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 274k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   274k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 274k, False: 0]
  ------------------
 6082|   274k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 0, False: 274k]
  ------------------
 6083|   274k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 0]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 0]
  ------------------
 6085|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   274k|        return result_type{rng.begin(), 0};
 6107|   274k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIfEENS0_13scan_expectedIPKwEERT_:
 6181|   128k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   128k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   128k|            auto rd = make_reader<T, char_type>();
 6187|   128k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 128k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   128k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   128k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   128k|    {
 6113|   128k|        const bool need_skipped_width =
 6114|   128k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 128k]
  |  Branch (6114:33): [True: 0, False: 128k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   128k|        auto it = rng.begin();
 6118|   128k|        std::ptrdiff_t prefix_width = 0;
 6119|   128k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 128k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   128k|        else {
 6127|   128k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 840, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    840|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    840|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    840|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    840|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    840|    }                                                  \
  |  |  |  | 3667|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   127k|            std::tie(it, prefix_width) = prefix_result;
 6129|   127k|        }
 6130|   127k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   127k|        std::ptrdiff_t value_width = 0;
 6134|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 127k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   127k|        else {
 6150|   127k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.5k, False: 84.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.5k|    }                                                  \
  |  | 3667|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  84.2k|                                             specs, value, loc));
 6152|       |
 6153|  84.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 84.2k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  84.2k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  84.2k|        std::ptrdiff_t postfix_width = 0;
 6162|  84.2k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 83.8k, False: 360]
  ------------------
 6163|  83.8k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  83.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  83.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  83.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  83.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 83.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  83.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  83.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  83.8k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  83.8k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  83.8k|                                 value_width));
 6167|  83.8k|            std::tie(it, postfix_width) = postfix_result;
 6168|  83.8k|        }
 6169|       |
 6170|  84.2k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  84.2k|                                                 value_width, postfix_width);
 6172|  84.2k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 84.2k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  84.2k|        return it;
 6177|  84.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIdEENS0_13scan_expectedIPKwEERT_:
 6181|   139k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   139k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   139k|            auto rd = make_reader<T, char_type>();
 6187|   139k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 139k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   139k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   139k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   139k|    {
 6113|   139k|        const bool need_skipped_width =
 6114|   139k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 139k]
  |  Branch (6114:33): [True: 0, False: 139k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   139k|        auto it = rng.begin();
 6118|   139k|        std::ptrdiff_t prefix_width = 0;
 6119|   139k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 139k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   139k|        else {
 6127|   139k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   139k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   139k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   139k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 904, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    904|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    904|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    904|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    904|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    904|    }                                                  \
  |  |  |  | 3667|   139k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   138k|            std::tie(it, prefix_width) = prefix_result;
 6129|   138k|        }
 6130|   138k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   138k|        std::ptrdiff_t value_width = 0;
 6134|   138k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 138k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   138k|        else {
 6150|   138k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.4k, False: 95.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.4k|    }                                                  \
  |  | 3667|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  95.0k|                                             specs, value, loc));
 6152|       |
 6153|  95.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 95.0k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  95.0k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  95.0k|        std::ptrdiff_t postfix_width = 0;
 6162|  95.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 94.6k, False: 392]
  ------------------
 6163|  94.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  94.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  94.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  94.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 94.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  94.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  94.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  94.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  94.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  94.6k|                                 value_width));
 6167|  94.6k|            std::tie(it, postfix_width) = postfix_result;
 6168|  94.6k|        }
 6169|       |
 6170|  95.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  95.0k|                                                 value_width, postfix_width);
 6172|  95.0k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 95.0k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  95.0k|        return it;
 6177|  95.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclIeEENS0_13scan_expectedIPKwEERT_:
 6181|   141k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   141k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   141k|            auto rd = make_reader<T, char_type>();
 6187|   141k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 141k]
  |  |  ------------------
  ------------------
 6188|      0|                return unexpected(e);
 6189|      0|            }
 6190|       |
 6191|   141k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   141k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6112|   141k|    {
 6113|   141k|        const bool need_skipped_width =
 6114|   141k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 141k]
  |  Branch (6114:33): [True: 0, False: 141k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   141k|        auto it = rng.begin();
 6118|   141k|        std::ptrdiff_t prefix_width = 0;
 6119|   141k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 141k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   141k|        else {
 6127|   141k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   141k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 944, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    944|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    944|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    944|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    944|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    944|    }                                                  \
  |  |  |  | 3667|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   140k|            std::tie(it, prefix_width) = prefix_result;
 6129|   140k|        }
 6130|   140k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   140k|        std::ptrdiff_t value_width = 0;
 6134|   140k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 140k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   140k|        else {
 6150|   140k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 43.4k, False: 96.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  43.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  43.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  43.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  43.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  43.4k|    }                                                  \
  |  | 3667|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  96.8k|                                             specs, value, loc));
 6152|       |
 6153|  96.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 96.8k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  96.8k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  96.8k|        std::ptrdiff_t postfix_width = 0;
 6162|  96.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 96.4k, False: 410]
  ------------------
 6163|  96.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  96.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  96.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  96.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  96.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 96.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  96.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  96.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  96.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  96.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  96.4k|                                 value_width));
 6167|  96.4k|            std::tie(it, postfix_width) = postfix_result;
 6168|  96.4k|        }
 6169|       |
 6170|  96.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  96.8k|                                                 value_width, postfix_width);
 6172|  96.8k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 96.8k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  96.8k|        return it;
 6177|  96.8k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|   147k|{
 5784|   147k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 426, False: 147k]
  |  |  ------------------
  ------------------
 5785|    426|        return unexpected(e);
 5786|    426|    }
 5787|       |
 5788|   147k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 147k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   147k|    return skip_classic_whitespace(range);
 5793|   147k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIfEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  43.4k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  43.4k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  43.4k|            auto rd = make_reader<T, char_type>();
 5869|  43.4k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 43.4k, False: 0]
  ------------------
 5870|  43.4k|                return impl(rd, range, value);
 5871|  43.4k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  43.4k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  43.4k|    {
 5852|  43.4k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  43.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  43.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  43.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  43.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 273, False: 43.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    273|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    273|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    273|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    273|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    273|    }                                                  \
  |  |  |  | 3667|  43.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  43.1k|                        .transform_error(make_eof_scan_error));
 5854|  43.1k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  43.4k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|  43.1k|    {
 4141|  43.1k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  43.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  43.1k|        float_reader<CharT> rd{};
 4144|  43.1k|        return read_impl<Range>(
 4145|  43.1k|            range, rd,
 4146|  43.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  43.1k|                return r.read_source(SCN_FWD(args)...);
 4148|  43.1k|            },
 4149|  43.1k|            value);
 4150|  43.1k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  43.1k|        : m_fptr([](storage fn,
  743|  43.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.1k|              cvref<T> obj = *get<T>(fn);
  745|  43.1k|              if constexpr (std::is_void_v<R>) {
  746|  43.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  43.1k|              }
  748|  43.1k|              else {
  749|  43.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.1k|              }
  751|  43.1k|          }),
  752|  43.1k|          m_storage(std::addressof(f))
  753|  43.1k|    {
  754|  43.1k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  43.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  43.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  43.1k|              else {
  749|  43.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  43.1k|              }
  751|  43.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  43.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  43.1k|        else if constexpr (std::is_object_v<T>) {
  688|  43.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  43.1k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|  43.1k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  43.1k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  43.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  43.1k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  43.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  43.1k|        {
  662|  43.1k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIdEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  51.5k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  51.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  51.5k|            auto rd = make_reader<T, char_type>();
 5869|  51.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 51.5k, False: 0]
  ------------------
 5870|  51.5k|                return impl(rd, range, value);
 5871|  51.5k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  51.5k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  51.5k|    {
 5852|  51.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  51.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 309, False: 51.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    309|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    309|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    309|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    309|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    309|    }                                                  \
  |  |  |  | 3667|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  51.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  51.2k|                        .transform_error(make_eof_scan_error));
 5854|  51.2k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  51.5k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|  51.2k|    {
 4141|  51.2k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  51.2k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  51.2k|        float_reader<CharT> rd{};
 4144|  51.2k|        return read_impl<Range>(
 4145|  51.2k|            range, rd,
 4146|  51.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  51.2k|                return r.read_source(SCN_FWD(args)...);
 4148|  51.2k|            },
 4149|  51.2k|            value);
 4150|  51.2k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  51.2k|        : m_fptr([](storage fn,
  743|  51.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  51.2k|              cvref<T> obj = *get<T>(fn);
  745|  51.2k|              if constexpr (std::is_void_v<R>) {
  746|  51.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  51.2k|              }
  748|  51.2k|              else {
  749|  51.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  51.2k|              }
  751|  51.2k|          }),
  752|  51.2k|          m_storage(std::addressof(f))
  753|  51.2k|    {
  754|  51.2k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  51.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  51.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  51.2k|              else {
  749|  51.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  51.2k|              }
  751|  51.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  51.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  51.2k|        else if constexpr (std::is_object_v<T>) {
  688|  51.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  51.2k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|  51.2k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  51.2k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  51.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  51.2k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  51.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  51.2k|        {
  662|  51.2k|        }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclIeEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  52.8k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  52.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  52.8k|            auto rd = make_reader<T, char_type>();
 5869|  52.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 52.8k, False: 0]
  ------------------
 5870|  52.8k|                return impl(rd, range, value);
 5871|  52.8k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  52.8k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SK_RT1_:
 5851|  52.8k|    {
 5852|  52.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  52.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  52.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  52.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  52.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 336, False: 52.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    336|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    336|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    336|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    336|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    336|    }                                                  \
  |  |  |  | 3667|  52.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  52.4k|                        .transform_error(make_eof_scan_error));
 5854|  52.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  52.8k|    }
_ZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4140|  52.4k|    {
 4141|  52.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  52.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4142|       |
 4143|  52.4k|        float_reader<CharT> rd{};
 4144|  52.4k|        return read_impl<Range>(
 4145|  52.4k|            range, rd,
 4146|  52.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  52.4k|                return r.read_source(SCN_FWD(args)...);
 4148|  52.4k|            },
 4149|  52.4k|            value);
 4150|  52.4k|    }
_ZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  52.4k|        : m_fptr([](storage fn,
  743|  52.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.4k|              cvref<T> obj = *get<T>(fn);
  745|  52.4k|              if constexpr (std::is_void_v<R>) {
  746|  52.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  52.4k|              }
  748|  52.4k|              else {
  749|  52.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.4k|              }
  751|  52.4k|          }),
  752|  52.4k|          m_storage(std::addressof(f))
  753|  52.4k|    {
  754|  52.4k|    }
_ZZN3scn2v34impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  52.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  52.4k|              else {
  749|  52.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.4k|              }
  751|  52.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  52.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  52.4k|        else if constexpr (std::is_object_v<T>) {
  688|  52.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  52.4k|    }
_ZZN3scn2v34impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4146|  52.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4147|  52.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  |  930|  52.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4148|  52.4k|            },
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  52.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  52.4k|        {
  662|  52.4k|        }

LLVMFuzzerTestOneInput:
   54|  2.21k|{
   55|  2.21k|    scn::fuzz::run(data, size);
   56|  2.21k|    return 0;
   57|  2.21k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  2.21k|{
   33|  2.21k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 2.21k]
  |  Branch (33:35): [True: 0, False: 2.21k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  2.21k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  2.21k|    const auto& f =
   40|  2.21k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  2.21k|    do_basic_run(sv, f);
   42|       |
   43|  2.21k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  2.21k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  2.21k|    do_basic_run(wsv_reinterpret, wf);
   46|  2.21k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 2.21k, False: 0]
  ------------------
   47|  2.21k|        do_basic_run(wsv_transcode, wf);
   48|  2.21k|    }
   49|  2.21k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.21k|{
   25|  2.21k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.21k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.21k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.21k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.21k|{
   25|  2.21k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  2.21k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  2.21k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  2.21k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.43k|{
   25|  4.43k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.43k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.43k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.43k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.43k|{
   25|  4.43k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  4.43k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  4.43k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  4.43k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.21k|{
   52|  2.21k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.21k|    string_buffer.resize(size);
   56|  2.21k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.21k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.21k|    const auto wsv_reinterpret_size =
   61|  2.21k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 69, False: 2.15k]
  ------------------
   62|  2.21k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.21k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.21k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.21k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.21k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.21k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.21k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.21k|{
  122|  2.21k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.21k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.21k|    buf.resize(sizeof...(Args));
  125|  2.21k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.21k|    return buf;
  127|  2.21k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.21k|{
  108|  2.21k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  2.21k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  2.21k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.21k|{
  185|  2.21k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.21k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.21k|                                   format_strings);
  188|  2.21k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.21k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.21k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   147k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   147k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   147k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   147k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   147k|            auto result = scn::scan<T>(
  139|   147k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   147k|                scn::runtime_format(f));
  141|   147k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 134k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   134k|            it = result->begin();
  145|   134k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.21k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   147k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   147k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   147k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   147k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   147k|            auto result = scn::scan<T>(
  154|   147k|                global_locale,
  155|   147k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   147k|                scn::runtime_format(f));
  157|   147k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 134k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   134k|            it = result->begin();
  161|   134k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.21k|    {
  166|  2.21k|        auto it = scn::ranges::begin(source);
  167|  32.0k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  32.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  32.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  32.0k|            auto result = scn::scan_value<T>(
  170|  32.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  32.0k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.21k, False: 29.8k]
  ------------------
  172|  2.21k|                break;
  173|  2.21k|            }
  174|  29.8k|            it = result->begin();
  175|  29.8k|        }
  176|  2.21k|    }
  177|  2.21k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.21k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.21k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   152k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   152k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   152k|            auto result = scn::scan<T>(
  139|   152k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   152k|                scn::runtime_format(f));
  141|   152k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 138k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   138k|            it = result->begin();
  145|   138k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.21k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   152k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   152k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   152k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   152k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   152k|            auto result = scn::scan<T>(
  154|   152k|                global_locale,
  155|   152k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   152k|                scn::runtime_format(f));
  157|   152k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 138k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   138k|            it = result->begin();
  161|   138k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.21k|    {
  166|  2.21k|        auto it = scn::ranges::begin(source);
  167|  33.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  33.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  33.3k|            auto result = scn::scan_value<T>(
  170|  33.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  33.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.21k, False: 31.1k]
  ------------------
  172|  2.21k|                break;
  173|  2.21k|            }
  174|  31.1k|            it = result->begin();
  175|  31.1k|        }
  176|  2.21k|    }
  177|  2.21k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.21k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.21k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   154k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   154k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   154k|            auto result = scn::scan<T>(
  139|   154k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   154k|                scn::runtime_format(f));
  141|   154k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 141k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   141k|            it = result->begin();
  145|   141k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.21k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   154k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   154k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   154k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   154k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   154k|            auto result = scn::scan<T>(
  154|   154k|                global_locale,
  155|   154k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   154k|                scn::runtime_format(f));
  157|   154k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 141k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   141k|            it = result->begin();
  161|   141k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.21k|    {
  166|  2.21k|        auto it = scn::ranges::begin(source);
  167|  34.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  34.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  34.1k|            auto result = scn::scan_value<T>(
  170|  34.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  34.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.21k, False: 31.8k]
  ------------------
  172|  2.21k|                break;
  173|  2.21k|            }
  174|  31.8k|            it = result->begin();
  175|  31.8k|        }
  176|  2.21k|    }
  177|  2.21k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.21k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.21k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   168k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   168k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   168k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   168k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   168k|            auto result = scn::scan<T>(
  139|   168k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   168k|                scn::runtime_format(f));
  141|   168k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 155k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   155k|            it = result->begin();
  145|   155k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.21k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   168k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   168k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   168k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   168k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   168k|            auto result = scn::scan<T>(
  154|   168k|                global_locale,
  155|   168k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   168k|                scn::runtime_format(f));
  157|   168k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 155k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   155k|            it = result->begin();
  161|   155k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.21k|    {
  166|  2.21k|        auto it = scn::ranges::begin(source);
  167|  34.8k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  34.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  34.8k|            auto result = scn::scan_value<T>(
  170|  34.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  34.8k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.21k, False: 32.5k]
  ------------------
  172|  2.21k|                break;
  173|  2.21k|            }
  174|  32.5k|            it = result->begin();
  175|  32.5k|        }
  176|  2.21k|    }
  177|  2.21k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.21k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.21k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   176k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   176k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   176k|            auto result = scn::scan<T>(
  139|   176k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   176k|                scn::runtime_format(f));
  141|   176k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 162k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   162k|            it = result->begin();
  145|   162k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.21k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   176k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   176k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   176k|            auto result = scn::scan<T>(
  154|   176k|                global_locale,
  155|   176k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   176k|                scn::runtime_format(f));
  157|   176k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 162k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   162k|            it = result->begin();
  161|   162k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.21k|    {
  166|  2.21k|        auto it = scn::ranges::begin(source);
  167|  36.5k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  36.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  36.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  36.5k|            auto result = scn::scan_value<T>(
  170|  36.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  36.5k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.21k, False: 34.3k]
  ------------------
  172|  2.21k|                break;
  173|  2.21k|            }
  174|  34.3k|            it = result->begin();
  175|  34.3k|        }
  176|  2.21k|    }
  177|  2.21k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  2.21k|{
  133|       |    // Regular scan
  134|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 13.3k, False: 2.21k]
  ------------------
  135|  13.3k|        auto it = scn::ranges::begin(source);
  136|   178k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   178k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   178k|            auto result = scn::scan<T>(
  139|   178k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   178k|                scn::runtime_format(f));
  141|   178k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 13.3k, False: 165k]
  ------------------
  142|  13.3k|                break;
  143|  13.3k|            }
  144|   165k|            it = result->begin();
  145|   165k|        }
  146|  13.3k|    }
  147|       |
  148|       |    // scan localized
  149|  13.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 13.3k, False: 2.21k]
  ------------------
  150|  13.3k|        auto it = scn::ranges::begin(source);
  151|   178k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   178k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   178k|            auto result = scn::scan<T>(
  154|   178k|                global_locale,
  155|   178k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   178k|                scn::runtime_format(f));
  157|   178k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 13.3k, False: 165k]
  ------------------
  158|  13.3k|                break;
  159|  13.3k|            }
  160|   165k|            it = result->begin();
  161|   165k|        }
  162|  13.3k|    }
  163|       |
  164|       |    // scan_value
  165|  2.21k|    {
  166|  2.21k|        auto it = scn::ranges::begin(source);
  167|  37.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  37.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  37.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  37.1k|            auto result = scn::scan_value<T>(
  170|  37.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  37.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.21k, False: 34.9k]
  ------------------
  172|  2.21k|                break;
  173|  2.21k|            }
  174|  34.9k|            it = result->begin();
  175|  34.9k|        }
  176|  2.21k|    }
  177|  2.21k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.21k|{
   90|  2.21k|    using char_type = ranges::range_value_t<Source>;
   91|  2.21k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.21k|    deque.clear();
   93|  2.21k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.21k|              std::back_inserter(deque));
   95|  2.21k|    return deque;
   96|  2.21k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.21k|{
   79|  2.21k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  2.21k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  2.21k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.21k|{
  122|  2.21k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.21k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.21k|    buf.resize(sizeof...(Args));
  125|  2.21k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.21k|    return buf;
  127|  2.21k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.21k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  2.21k|    else {
  112|  2.21k|        return wformat_string_view_buffer;
  113|  2.21k|    }
  114|  2.21k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.43k|{
  185|  4.43k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.43k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.43k|                                   format_strings);
  188|  4.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.43k|{
  133|       |    // Regular scan
  134|  26.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.6k, False: 4.43k]
  ------------------
  135|  26.6k|        auto it = scn::ranges::begin(source);
  136|  78.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  78.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  78.8k|            auto result = scn::scan<T>(
  139|  78.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  78.8k|                scn::runtime_format(f));
  141|  78.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.6k, False: 52.1k]
  ------------------
  142|  26.6k|                break;
  143|  26.6k|            }
  144|  52.1k|            it = result->begin();
  145|  52.1k|        }
  146|  26.6k|    }
  147|       |
  148|       |    // scan localized
  149|  26.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.6k, False: 4.43k]
  ------------------
  150|  26.6k|        auto it = scn::ranges::begin(source);
  151|  78.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  78.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  78.8k|            auto result = scn::scan<T>(
  154|  78.8k|                global_locale,
  155|  78.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  78.8k|                scn::runtime_format(f));
  157|  78.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.6k, False: 52.1k]
  ------------------
  158|  26.6k|                break;
  159|  26.6k|            }
  160|  52.1k|            it = result->begin();
  161|  52.1k|        }
  162|  26.6k|    }
  163|       |
  164|       |    // scan_value
  165|  4.43k|    {
  166|  4.43k|        auto it = scn::ranges::begin(source);
  167|  14.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  14.4k|            auto result = scn::scan_value<T>(
  170|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  14.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.43k, False: 10.0k]
  ------------------
  172|  4.43k|                break;
  173|  4.43k|            }
  174|  10.0k|            it = result->begin();
  175|  10.0k|        }
  176|  4.43k|    }
  177|  4.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.43k|{
  133|       |    // Regular scan
  134|  26.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.6k, False: 4.43k]
  ------------------
  135|  26.6k|        auto it = scn::ranges::begin(source);
  136|  86.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  86.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  86.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  86.8k|            auto result = scn::scan<T>(
  139|  86.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  86.8k|                scn::runtime_format(f));
  141|  86.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.6k, False: 60.2k]
  ------------------
  142|  26.6k|                break;
  143|  26.6k|            }
  144|  60.2k|            it = result->begin();
  145|  60.2k|        }
  146|  26.6k|    }
  147|       |
  148|       |    // scan localized
  149|  26.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.6k, False: 4.43k]
  ------------------
  150|  26.6k|        auto it = scn::ranges::begin(source);
  151|  86.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  86.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  86.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  86.8k|            auto result = scn::scan<T>(
  154|  86.8k|                global_locale,
  155|  86.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  86.8k|                scn::runtime_format(f));
  157|  86.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.6k, False: 60.2k]
  ------------------
  158|  26.6k|                break;
  159|  26.6k|            }
  160|  60.2k|            it = result->begin();
  161|  60.2k|        }
  162|  26.6k|    }
  163|       |
  164|       |    // scan_value
  165|  4.43k|    {
  166|  4.43k|        auto it = scn::ranges::begin(source);
  167|  17.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  17.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  17.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  17.1k|            auto result = scn::scan_value<T>(
  170|  17.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  17.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.43k, False: 12.7k]
  ------------------
  172|  4.43k|                break;
  173|  4.43k|            }
  174|  12.7k|            it = result->begin();
  175|  12.7k|        }
  176|  4.43k|    }
  177|  4.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.43k|{
  133|       |    // Regular scan
  134|  26.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.6k, False: 4.43k]
  ------------------
  135|  26.6k|        auto it = scn::ranges::begin(source);
  136|  88.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  88.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  88.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  88.2k|            auto result = scn::scan<T>(
  139|  88.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  88.2k|                scn::runtime_format(f));
  141|  88.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.6k, False: 61.5k]
  ------------------
  142|  26.6k|                break;
  143|  26.6k|            }
  144|  61.5k|            it = result->begin();
  145|  61.5k|        }
  146|  26.6k|    }
  147|       |
  148|       |    // scan localized
  149|  26.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.6k, False: 4.43k]
  ------------------
  150|  26.6k|        auto it = scn::ranges::begin(source);
  151|  88.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  88.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  88.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  88.2k|            auto result = scn::scan<T>(
  154|  88.2k|                global_locale,
  155|  88.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  88.2k|                scn::runtime_format(f));
  157|  88.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.6k, False: 61.5k]
  ------------------
  158|  26.6k|                break;
  159|  26.6k|            }
  160|  61.5k|            it = result->begin();
  161|  61.5k|        }
  162|  26.6k|    }
  163|       |
  164|       |    // scan_value
  165|  4.43k|    {
  166|  4.43k|        auto it = scn::ranges::begin(source);
  167|  17.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  17.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  17.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  17.6k|            auto result = scn::scan_value<T>(
  170|  17.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  17.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.43k, False: 13.1k]
  ------------------
  172|  4.43k|                break;
  173|  4.43k|            }
  174|  13.1k|            it = result->begin();
  175|  13.1k|        }
  176|  4.43k|    }
  177|  4.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.43k|{
  133|       |    // Regular scan
  134|  26.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.6k, False: 4.43k]
  ------------------
  135|  26.6k|        auto it = scn::ranges::begin(source);
  136|  78.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  78.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  78.7k|            auto result = scn::scan<T>(
  139|  78.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  78.7k|                scn::runtime_format(f));
  141|  78.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.6k, False: 52.1k]
  ------------------
  142|  26.6k|                break;
  143|  26.6k|            }
  144|  52.1k|            it = result->begin();
  145|  52.1k|        }
  146|  26.6k|    }
  147|       |
  148|       |    // scan localized
  149|  26.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.6k, False: 4.43k]
  ------------------
  150|  26.6k|        auto it = scn::ranges::begin(source);
  151|  78.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  78.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  78.7k|            auto result = scn::scan<T>(
  154|  78.7k|                global_locale,
  155|  78.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  78.7k|                scn::runtime_format(f));
  157|  78.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.6k, False: 52.1k]
  ------------------
  158|  26.6k|                break;
  159|  26.6k|            }
  160|  52.1k|            it = result->begin();
  161|  52.1k|        }
  162|  26.6k|    }
  163|       |
  164|       |    // scan_value
  165|  4.43k|    {
  166|  4.43k|        auto it = scn::ranges::begin(source);
  167|  14.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  14.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  14.4k|            auto result = scn::scan_value<T>(
  170|  14.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  14.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.43k, False: 10.0k]
  ------------------
  172|  4.43k|                break;
  173|  4.43k|            }
  174|  10.0k|            it = result->begin();
  175|  10.0k|        }
  176|  4.43k|    }
  177|  4.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.43k|{
  133|       |    // Regular scan
  134|  26.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.6k, False: 4.43k]
  ------------------
  135|  26.6k|        auto it = scn::ranges::begin(source);
  136|  86.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  86.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  86.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  86.8k|            auto result = scn::scan<T>(
  139|  86.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  86.8k|                scn::runtime_format(f));
  141|  86.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.6k, False: 60.2k]
  ------------------
  142|  26.6k|                break;
  143|  26.6k|            }
  144|  60.2k|            it = result->begin();
  145|  60.2k|        }
  146|  26.6k|    }
  147|       |
  148|       |    // scan localized
  149|  26.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.6k, False: 4.43k]
  ------------------
  150|  26.6k|        auto it = scn::ranges::begin(source);
  151|  86.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  86.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  86.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  86.8k|            auto result = scn::scan<T>(
  154|  86.8k|                global_locale,
  155|  86.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  86.8k|                scn::runtime_format(f));
  157|  86.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.6k, False: 60.2k]
  ------------------
  158|  26.6k|                break;
  159|  26.6k|            }
  160|  60.2k|            it = result->begin();
  161|  60.2k|        }
  162|  26.6k|    }
  163|       |
  164|       |    // scan_value
  165|  4.43k|    {
  166|  4.43k|        auto it = scn::ranges::begin(source);
  167|  17.1k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  17.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  17.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  17.1k|            auto result = scn::scan_value<T>(
  170|  17.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  17.1k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.43k, False: 12.7k]
  ------------------
  172|  4.43k|                break;
  173|  4.43k|            }
  174|  12.7k|            it = result->begin();
  175|  12.7k|        }
  176|  4.43k|    }
  177|  4.43k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  132|  4.43k|{
  133|       |    // Regular scan
  134|  26.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 26.6k, False: 4.43k]
  ------------------
  135|  26.6k|        auto it = scn::ranges::begin(source);
  136|  88.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  88.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  88.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  88.1k|            auto result = scn::scan<T>(
  139|  88.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  88.1k|                scn::runtime_format(f));
  141|  88.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 26.6k, False: 61.5k]
  ------------------
  142|  26.6k|                break;
  143|  26.6k|            }
  144|  61.5k|            it = result->begin();
  145|  61.5k|        }
  146|  26.6k|    }
  147|       |
  148|       |    // scan localized
  149|  26.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 26.6k, False: 4.43k]
  ------------------
  150|  26.6k|        auto it = scn::ranges::begin(source);
  151|  88.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  88.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  88.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  88.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  88.1k|            auto result = scn::scan<T>(
  154|  88.1k|                global_locale,
  155|  88.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  88.1k|                scn::runtime_format(f));
  157|  88.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 26.6k, False: 61.5k]
  ------------------
  158|  26.6k|                break;
  159|  26.6k|            }
  160|  61.5k|            it = result->begin();
  161|  61.5k|        }
  162|  26.6k|    }
  163|       |
  164|       |    // scan_value
  165|  4.43k|    {
  166|  4.43k|        auto it = scn::ranges::begin(source);
  167|  17.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  17.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  17.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  17.6k|            auto result = scn::scan_value<T>(
  170|  17.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  17.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.43k, False: 13.1k]
  ------------------
  172|  4.43k|                break;
  173|  4.43k|            }
  174|  13.1k|            it = result->begin();
  175|  13.1k|        }
  176|  4.43k|    }
  177|  4.43k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  4.43k|{
   90|  4.43k|    using char_type = ranges::range_value_t<Source>;
   91|  4.43k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.43k|    deque.clear();
   93|  4.43k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.43k|              std::back_inserter(deque));
   95|  4.43k|    return deque;
   96|  4.43k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  4.43k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  4.43k|    else {
   83|  4.43k|        return wnoncontiguous_buffer;
   84|  4.43k|    }
   85|  4.43k|}

