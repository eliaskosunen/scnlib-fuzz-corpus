_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIccEEDaSG_SQ_:
 1039|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlSG_T0_E_clIwcEEDaSG_SQ_:
 1039|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlSD_T0_E_clIwcEEDaSD_SN_:
 1039|  1.49M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)

_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4085|  1.82M|{
 4086|  1.82M|    if constexpr (sizeof(U) == 1) {
 4087|  1.82M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|       |    else {
 4093|       |        // utf-32
 4094|       |        static_assert(sizeof(U) == 4);
 4095|       |        SCN_UNUSED(ch);
 4096|       |        return 1;
 4097|       |    }
 4098|  1.82M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4049|  1.82M|{
 4050|  1.82M|    static_assert(sizeof(U8) == 1);
 4051|       |
 4052|  1.82M|    SCN_GCC_COMPAT_PUSH
 4053|  1.82M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4054|  1.82M|    constexpr char lengths[] =
 4055|  1.82M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4056|  1.82M|        "\1\1\1\1\1\1\1\1"
 4057|  1.82M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4058|       |                            // byte
 4059|  1.82M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4060|  1.82M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4061|  1.82M|        "\4";               // highest bits 11110 -> 4-byte cp
 4062|  1.82M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4063|  1.82M|    SCN_GCC_COMPAT_POP
 4064|  1.82M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|  1.62M|{
 4292|  1.62M|    if constexpr (sizeof(CharT) == 1) {
 4293|  1.62M|        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|       |    else {
 4299|       |        SCN_EXPECT(input.size() == 1);
 4300|       |        auto cp = static_cast<char32_t>(input.front());
 4301|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4302|       |            return invalid_code_point;
 4303|       |        }
 4304|       |        return cp;
 4305|       |    }
 4306|  1.62M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4104|  1.62M|{
 4105|  1.62M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1104|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4106|       |
 4107|  1.62M|    const auto is_trailing_code_unit = [](char ch) {
 4108|  1.62M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|  1.62M|    };
 4110|       |
 4111|  1.62M|    if (input.size() == 1) {
  ------------------
  |  Branch (4111:9): [True: 1.55M, False: 63.6k]
  ------------------
 4112|  1.55M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4112:13): [True: 481, False: 1.55M]
  ------------------
 4113|    481|            SCN_UNLIKELY_ATTR
 4114|    481|            return invalid_code_point;
 4115|    481|        }
 4116|  1.55M|        return static_cast<char32_t>(input[0]);
 4117|  1.55M|    }
 4118|       |
 4119|  63.6k|    if (input.size() == 2) {
  ------------------
  |  Branch (4119:9): [True: 56.5k, False: 7.06k]
  ------------------
 4120|  56.5k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4120:13): [True: 174, False: 56.3k]
  ------------------
 4121|    174|            SCN_UNLIKELY_ATTR
 4122|    174|            return invalid_code_point;
 4123|    174|        }
 4124|  56.3k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4124:13): [True: 7.50k, False: 48.8k]
  ------------------
 4125|  7.50k|            SCN_UNLIKELY_ATTR
 4126|  7.50k|            return invalid_code_point;
 4127|  7.50k|        }
 4128|       |
 4129|  48.8k|        char32_t cp{};
 4130|  48.8k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4131|  48.8k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4132|  48.8k|        return cp;
 4133|  56.3k|    }
 4134|       |
 4135|  7.06k|    if (input.size() == 3) {
  ------------------
  |  Branch (4135:9): [True: 3.72k, False: 3.33k]
  ------------------
 4136|  3.72k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4136:13): [True: 137, False: 3.59k]
  ------------------
 4137|    137|            SCN_UNLIKELY_ATTR
 4138|    137|            return invalid_code_point;
 4139|    137|        }
 4140|  3.59k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4140:13): [True: 1.43k, False: 2.15k]
  ------------------
 4141|  3.59k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4141:13): [True: 1.31k, False: 839]
  ------------------
 4142|  2.75k|            SCN_UNLIKELY_ATTR
 4143|  2.75k|            return invalid_code_point;
 4144|  2.75k|        }
 4145|       |
 4146|    839|        char32_t cp{};
 4147|    839|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4148|    839|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4149|    839|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4150|    839|        return cp;
 4151|  3.59k|    }
 4152|       |
 4153|  3.33k|    if (input.size() == 4) {
  ------------------
  |  Branch (4153:9): [True: 3.33k, False: 0]
  ------------------
 4154|  3.33k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4154:13): [True: 0, False: 3.33k]
  ------------------
 4155|      0|            SCN_UNLIKELY_ATTR
 4156|      0|            return invalid_code_point;
 4157|      0|        }
 4158|  3.33k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4158:13): [True: 762, False: 2.57k]
  ------------------
 4159|    762|            SCN_UNLIKELY_ATTR
 4160|    762|            return invalid_code_point;
 4161|    762|        }
 4162|  2.57k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4162:13): [True: 473, False: 2.09k]
  ------------------
 4163|  2.57k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4163:13): [True: 917, False: 1.18k]
  ------------------
 4164|  2.57k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4164:13): [True: 835, False: 345]
  ------------------
 4165|  2.22k|            SCN_UNLIKELY_ATTR
 4166|  2.22k|            return invalid_code_point;
 4167|  2.22k|        }
 4168|       |
 4169|    345|        char32_t cp{};
 4170|    345|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4171|    345|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4172|    345|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4173|    345|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4174|    345|        return cp;
 4175|  2.57k|    }
 4176|       |
 4177|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4178|       |    // gcc 7 thinks we'll get here, even when we won't
 4179|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4180|      0|#endif
 4181|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4182|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4107|  67.9k|    const auto is_trailing_code_unit = [](char ch) {
 4108|  67.9k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|  67.9k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3977|  3.67M|{
 3978|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3979|       |                                          decltype(first), decltype(last)> &&
 3980|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3981|       |        return {first, last};
 3982|       |    }
 3983|  3.67M|    else {
 3984|  3.67M|        return {to_address(first), static_cast<size_t>(std::distance(
 3985|  3.67M|                                       to_address(first), to_address(last)))};
 3986|  3.67M|    }
 3987|  3.67M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  11.2M|{
  331|  11.2M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  11.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  11.2M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  308|  16.3M|{
  309|  16.3M|    return p;
  310|  16.3M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4008|  5.52M|{
 4009|       |    if constexpr (std::is_constructible_v<
 4010|       |                      typename std::basic_string_view<CharT>::iterator,
 4011|       |                      decltype(it)> &&
 4012|  5.52M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4013|  5.52M|        SCN_UNUSED(sv);
  ------------------
  |  | 1089|  5.52M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4014|  5.52M|        return it;
 4015|       |    }
 4016|       |    else {
 4017|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4018|       |    }
 4019|  5.52M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  70.5k|    {
 2883|  70.5k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  70.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  70.5k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  70.5k|    {
 2864|  70.5k|        return decay_copy(t.begin());
 2865|  70.5k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2107|  7.02M|{
 2108|  7.02M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  7.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  7.02M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.17M|    {
 2940|  1.17M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.17M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.17M|    {
 2922|  1.17M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.17M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|  86.1k|{
 9893|  86.1k|    auto result = make_scan_result<Source, Args...>();
 9894|  86.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  86.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  86.1k|                                   make_scan_args(result->values())));
 9896|  86.1k|    return result;
 9897|  86.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEEDav:
 9848|   190k|{
 9849|   190k|    return scan_result_type<Source, Args...>();
 9850|   190k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1565|   190k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  441|   190k|        : m_value(T{}), m_has_value(true)
  442|   190k|    {
  443|   190k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2Ev:
 6692|   190k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6535|   588k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3473|   588k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJfEEC2Ev:
 6466|   706k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   190k|{
 9834|   190k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.9k, False: 167k]
  |  |  ------------------
  ------------------
 9835|  22.9k|        out = unexpected(in.error());
 9836|  22.9k|    }
 9837|   167k|    else {
 9838|   167k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   167k|    static_cast<    \
  |  | 1109|   167k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   167k|    }
 9840|   190k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1753|   588k|    {
 1754|   588k|        return has_value();
 1755|   588k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.17M|    {
  505|  1.17M|        return m_has_value;
  506|  1.17M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1759|  68.7k|    {
 1760|  68.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  68.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  68.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  68.7k|        return this->get_unexpected().error();
 1762|  68.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  68.7k|    {
  488|  68.7k|        return m_unexpected;
  489|  68.7k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  379|  10.4M|    {
  380|  10.4M|        return m_unexpected;
  381|  10.4M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  364|  2.69M|        : m_unexpected(std::forward<Err>(e))
  365|  2.69M|    {
  366|  2.69M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  2.69M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  2.69M|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  22.9k|        : base(unexpect, std::move(e.error())),
 1630|  22.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.9k|    {
 1632|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  22.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.9k|          m_has_value(false)
  466|  22.9k|    {
  467|  22.9k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  373|  7.59M|        : m_unexpected(std::forward<Args>(args)...)
  374|  7.59M|    {
  375|  7.59M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  7.59M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  7.59M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.9k|    {
 1330|  22.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1570|  22.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  916|  22.9k|    {
  917|  22.9k|        assign_common(std::move(other));
  918|  22.9k|        return *this;
  919|  22.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  22.9k|    {
  964|  22.9k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.9k, False: 0]
  ------------------
  965|  22.9k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.9k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.9k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   761k|    {
  505|   761k|        return m_has_value;
  506|   761k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   524k|    {
  471|   524k|        return m_value;
  472|   524k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  22.9k|    {
 1060|  22.9k|        this->destroy_value();
 1061|  22.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  22.9k|    {
  519|  22.9k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.9k|                                  std::forward<Args>(args)...);
  521|  22.9k|        m_has_value = false;
  522|  22.9k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  410|   412k|{
  411|   412k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   412k|        T(std::forward<Args>(args)...);
  413|   412k|}
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.9k|    {
  488|  22.9k|        return m_unexpected;
  489|  22.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.9k|    {
  496|  22.9k|        return std::move(m_unexpected);
  497|  22.9k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6566|   519k|    {
 6567|   519k|        m_range = std::forward<Other>(r);
 6568|   519k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|   519k|    {
 1809|   519k|        return value();
 1810|   519k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|   519k|    {
 1783|   519k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   519k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   519k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   519k|        return this->get_value();
 1785|   519k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   519k|    {
  471|   519k|        return m_value;
  472|   519k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9654|   266k|{
 9655|   266k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|   266k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|   266k|{
 9592|   266k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   266k|    auto result = vscan_impl(buffer, format, args);
 9595|   266k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 31.7k, False: 234k]
  |  |  ------------------
  ------------------
 9596|  31.7k|        return unexpected(result.error());
 9597|  31.7k|    }
 9598|   234k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   266k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5398|   588k|{
 5399|   588k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   588k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   588k|                  "\n"
 5403|   588k|                  "Unsupported range type given as input to a scanning "
 5404|   588k|                  "function.\n"
 5405|   588k|                  "A range needs to have a character type (value type) "
 5406|   588k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   588k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   588k|                  "to be included.\n"
 5409|   588k|                  "See the scnlib documentation for more details.");
 5410|   588k|    static_assert(
 5411|   588k|        !std::is_same_v<T, custom_char_traits>,
 5412|   588k|        "\n"
 5413|   588k|        "Unsupported range type given as input to a scanning "
 5414|   588k|        "function.\n"
 5415|   588k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   588k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   588k|        "not supported.");
 5418|   588k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   588k|                  "\n"
 5420|   588k|                  "Unsupported range type given as input to a scanning "
 5421|   588k|                  "function.\n"
 5422|   588k|                  "file_marker_found cannot be used as an "
 5423|   588k|                  "source range type to scn::scan.\n"
 5424|   588k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   588k|                  "and do not provide an explicit source range, "
 5426|   588k|                  "or use scn::scan with a FILE* directly.");
 5427|   588k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   588k|                  "\n"
 5429|   588k|                  "Unsupported range type given as input to a scanning "
 5430|   588k|                  "function.\n"
 5431|   588k|                  "In order to be scannable, a range needs to satisfy "
 5432|   588k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   588k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   588k|                  "\n"
 5435|   588k|                  "Unsupported range type given as input to a scanning "
 5436|   588k|                  "function.\n"
 5437|   588k|                  "A range needs to model forward_range and have a valid "
 5438|   588k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   588k|                  "Examples of scannable ranges are std::string, "
 5440|   588k|                  "std::string_view, "
 5441|   588k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   588k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   588k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   588k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|   588k|{
 5338|   588k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|   588k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|   588k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   588k|    {
 3014|   588k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   588k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   588k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   588k|    {
 2995|   588k|        return t.data();
 2996|   588k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3396|   588k|    {
 3397|   588k|        return detail::to_address(ranges::begin(derived()));
 3398|   588k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  5.09M|{
  331|  5.09M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  5.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  5.09M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  1.10M|    {
 2883|  1.10M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.10M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  1.10M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  1.10M|    {
 2864|  1.10M|        return decay_copy(t.begin());
 2865|  1.10M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3493|  14.9M|    {
 3494|  14.9M|        return m_iterator;
 3495|  14.9M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3352|   588k|    {
 3353|   588k|        return static_cast<const D&>(*this);
 3354|   588k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|   588k|    {
 3089|   588k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   588k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|   588k|    {
 3055|   588k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   588k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   588k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2107|  3.70M|{
 2108|  3.70M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  3.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  3.70M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|  3.65M|    {
 3510|  3.65M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|  3.65M|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1753|  9.12M|    {
 1754|  9.12M|        return has_value();
 1755|  9.12M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  504|  16.3M|    {
  505|  16.3M|        return m_has_value;
  506|  16.3M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1759|   848k|    {
 1760|   848k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   848k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   848k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   848k|        return this->get_unexpected().error();
 1762|   848k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   848k|    {
  488|   848k|        return m_unexpected;
  489|   848k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  68.7k|        : base(unexpect, std::move(e.error())),
 1630|  68.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  68.7k|    {
 1632|  68.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  68.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  68.7k|          m_has_value(false)
  466|  68.7k|    {
  467|  68.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   588k|    {
 1330|   588k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|   519k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   519k|                      ranges::iterator_t<SourceRange>>) {
 6799|   519k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   519k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  4.14M|    {
 2883|  4.14M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  4.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  4.14M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  4.14M|    {
 2864|  4.14M|        return decay_copy(t.begin());
 2865|  4.14M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6783|   519k|{
 6784|   519k|    return ranges::end(source);
 6785|   519k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   519k|    {
 2940|   519k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   519k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   519k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   519k|    {
 2922|   519k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   519k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   519k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3497|  6.91M|    {
 3498|  6.91M|        return m_sentinel;
 3499|  6.91M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1808|  2.73M|    {
 1809|  2.73M|        return value();
 1810|  2.73M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1782|  6.36M|    {
 1783|  6.36M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  6.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  6.36M|        return this->get_value();
 1785|  6.36M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  470|  6.36M|    {
  471|  6.36M|        return m_value;
  472|  6.36M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   519k|        : base(std::in_place, std::forward<U>(val)),
 1584|   519k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   519k|    {
 1586|   519k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|   519k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   519k|    {
  457|   519k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|   172k|    {
 8855|   172k|        return m_str;
 8856|   172k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   354k|{
 6196|   354k|    detail::check_scan_arg_types<Args...>();
 6197|   354k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   354k|}
_ZN3scn2v46detail20check_scan_arg_typesIJfEEEbv:
 5910|   706k|{
 5911|   706k|    constexpr bool default_constructible_constraint =
 5912|   706k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   706k|    static_assert(default_constructible_constraint,
 5914|   706k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   706k|    constexpr bool destructible_constraint =
 5917|   706k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   706k|    static_assert(destructible_constraint,
 5919|   706k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   706k|    constexpr bool non_reference_constraint =
 5922|   706k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   706k|    static_assert(non_reference_constraint,
 5924|   706k|                  "Scan argument types must not be references");
 5925|       |
 5926|   706k|    constexpr bool movable_constraint =
 5927|   706k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   706k|    static_assert(movable_constraint,
 5929|   706k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   706k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   706k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   706k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEEC2ERNSt3__15tupleIJfEEE:
 6171|   354k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   354k|    {
 6173|   354k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   354k|    {
 6181|   354k|        return {detail::make_arg<
 6182|   354k|            kind, Context,
 6183|   354k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   354k|                                 typename Context::char_type>::value>(args)...};
 6185|   354k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE18EfvEEPvRT2_:
 5960|   354k|{
 5961|   354k|    return make_value<Context>(value).ref_value;
 5962|   354k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEEDaRT0_:
 5895|   390k|{
 5896|   390k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   390k|                                  needs_context_tag>) {
 5900|   390k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   390k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   390k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERf:
 5702|   390k|    {                                                                        \
 5703|   390k|        return val;                                                          \
 5704|   390k|    }
_ZN3scn2v46detail15make_value_implIfRfEEDaOT0_:
 5864|   706k|{
 5865|   706k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   706k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   706k|    constexpr bool scannable_char =
 5869|   706k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   706k|    static_assert(scannable_char,
 5871|   706k|                  "Cannot scan an argument of an unsupported character "
 5872|   706k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   706k|    constexpr bool scannable_const =
 5875|   706k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   706k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   706k|    constexpr bool scannable_disabled =
 5879|   706k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   706k|    static_assert(scannable_disabled,
 5881|   706k|                  "Cannot scan an argument that has been disabled by "
 5882|   706k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   706k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   706k|    static_assert(
 5886|   706k|        scannable,
 5887|   706k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   706k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   706k|    return arg_value{arg};
 5891|   706k|}
_ZN3scn2v46detail9arg_valueC2IfEERT_:
 5645|   706k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   706k|    {
 5647|   706k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJfEE6valuesEv:
 6475|   642k|    {
 6476|   642k|        return m_values;
 6477|   642k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   354k|        : basic_scan_args(store.desc, store.args.data())
 6222|   354k|    {
 6223|   354k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6273|  1.09M|        : m_desc(desc), m_builtin_values(data)
 6274|  1.09M|    {
 6275|  1.09M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|  5.96M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  5.96M|    static_cast<    \
  |  | 1109|  5.96M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  5.96M|    static_cast<    \
  |  | 1109|  5.96M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  5.96M|    {
 3480|  5.96M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8531|  1.09M|{
 8532|  1.09M|    return s;
 8533|  1.09M|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8508|  1.09M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   172k|        : m_str(r.str)
 8850|   172k|    {
 8851|   172k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1753|   190k|    {
 1754|   190k|        return has_value();
 1755|   190k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEEptEv:
 1828|   524k|    {
 1829|   524k|        return &value();
 1830|   524k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   524k|    {
 1783|   524k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   524k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   524k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   524k|        return this->get_value();
 1785|   524k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6555|   519k|    {
 6556|   519k|        return ranges::begin(m_range);
 6557|   519k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|  86.1k|{
 9962|  86.1k|    auto result = make_scan_result<Source, Args...>();
 9963|  86.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  86.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  86.1k|                                   make_scan_args(result->values())));
 9965|  86.1k|    return result;
 9966|  86.1k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9672|   266k|{
 9673|   266k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   266k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|   266k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|   266k|{
 9608|   266k|#if !SCN_DISABLE_LOCALE
 9609|   266k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   266k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   266k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   266k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   266k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   266k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 31.7k, False: 234k]
  |  |  ------------------
  ------------------
 9616|  31.7k|        return unexpected(result.error());
 9617|  31.7k|    }
 9618|   234k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   234k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   266k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  18.0k|{
10003|  18.0k|    auto result = make_scan_result<Source, T>();
10004|  18.0k|    fill_scan_result(
10005|  18.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  18.0k|                            detail::make_arg<scan_context>(result->value())));
10007|  18.0k|    return result;
10008|  18.0k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9685|  56.4k|{
 9686|  56.4k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|  56.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|  56.4k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  56.4k|{
 9632|  56.4k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  56.4k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  56.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  56.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.28k, False: 51.1k]
  |  |  ------------------
  ------------------
 9636|  5.28k|        return unexpected(result.error());
 9637|  5.28k|    }
 9638|  51.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  51.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  56.4k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEfEENS0_14basic_scan_argIT_EERT0_:
 5945|  36.1k|{
 5946|  36.1k|    check_scan_arg_types<T>();
 5947|       |
 5948|  36.1k|    basic_scan_arg<Context> arg;
 5949|  36.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  36.1k|    arg.m_value = make_value<Context>(value);
 5951|  36.1k|    return arg;
 5952|  36.1k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6040|  1.21M|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5641|  2.22M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJfEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  63.2k|    {
 6498|  63.2k|        return std::get<0>(m_values);
 6499|  63.2k|    }
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|  89.0k|{
 9893|  89.0k|    auto result = make_scan_result<Source, Args...>();
 9894|  89.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  89.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  89.0k|                                   make_scan_args(result->values())));
 9896|  89.0k|    return result;
 9897|  89.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEEDav:
 9848|   196k|{
 9849|   196k|    return scan_result_type<Source, Args...>();
 9850|   196k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|   196k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|   196k|        : m_value(T{}), m_has_value(true)
  442|   196k|    {
  443|   196k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2Ev:
 6692|   196k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJdEEC2Ev:
 6466|   752k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   196k|{
 9834|   196k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.9k, False: 173k]
  |  |  ------------------
  ------------------
 9835|  22.9k|        out = unexpected(in.error());
 9836|  22.9k|    }
 9837|   173k|    else {
 9838|   173k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   173k|    static_cast<    \
  |  | 1109|   173k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   173k|    }
 9840|   196k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  22.9k|        : base(unexpect, std::move(e.error())),
 1630|  22.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.9k|    {
 1632|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  22.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.9k|          m_has_value(false)
  466|  22.9k|    {
  467|  22.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.9k|    {
 1330|  22.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1570|  22.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  916|  22.9k|    {
  917|  22.9k|        assign_common(std::move(other));
  918|  22.9k|        return *this;
  919|  22.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  22.9k|    {
  964|  22.9k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.9k, False: 0]
  ------------------
  965|  22.9k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.9k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.9k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   787k|    {
  505|   787k|        return m_has_value;
  506|   787k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   544k|    {
  471|   544k|        return m_value;
  472|   544k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  22.9k|    {
 1060|  22.9k|        this->destroy_value();
 1061|  22.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  22.9k|    {
  519|  22.9k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.9k|                                  std::forward<Args>(args)...);
  521|  22.9k|        m_has_value = false;
  522|  22.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.9k|    {
  488|  22.9k|        return m_unexpected;
  489|  22.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.9k|    {
  496|  22.9k|        return std::move(m_unexpected);
  497|  22.9k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|   178k|    {
 8855|   178k|        return m_str;
 8856|   178k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   368k|{
 6196|   368k|    detail::check_scan_arg_types<Args...>();
 6197|   368k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   368k|}
_ZN3scn2v46detail20check_scan_arg_typesIJdEEEbv:
 5910|   752k|{
 5911|   752k|    constexpr bool default_constructible_constraint =
 5912|   752k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   752k|    static_assert(default_constructible_constraint,
 5914|   752k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   752k|    constexpr bool destructible_constraint =
 5917|   752k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   752k|    static_assert(destructible_constraint,
 5919|   752k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   752k|    constexpr bool non_reference_constraint =
 5922|   752k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   752k|    static_assert(non_reference_constraint,
 5924|   752k|                  "Scan argument types must not be references");
 5925|       |
 5926|   752k|    constexpr bool movable_constraint =
 5927|   752k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   752k|    static_assert(movable_constraint,
 5929|   752k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   752k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   752k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   752k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEEC2ERNSt3__15tupleIJdEEE:
 6171|   368k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   368k|    {
 6173|   368k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   368k|    {
 6181|   368k|        return {detail::make_arg<
 6182|   368k|            kind, Context,
 6183|   368k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   368k|                                 typename Context::char_type>::value>(args)...};
 6185|   368k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19EdvEEPvRT2_:
 5960|   368k|{
 5961|   368k|    return make_value<Context>(value).ref_value;
 5962|   368k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEEDaRT0_:
 5895|   405k|{
 5896|   405k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   405k|                                  needs_context_tag>) {
 5900|   405k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   405k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   405k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERd:
 5702|   405k|    {                                                                        \
 5703|   405k|        return val;                                                          \
 5704|   405k|    }
_ZN3scn2v46detail15make_value_implIdRdEEDaOT0_:
 5864|   752k|{
 5865|   752k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   752k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   752k|    constexpr bool scannable_char =
 5869|   752k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   752k|    static_assert(scannable_char,
 5871|   752k|                  "Cannot scan an argument of an unsupported character "
 5872|   752k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   752k|    constexpr bool scannable_const =
 5875|   752k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   752k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   752k|    constexpr bool scannable_disabled =
 5879|   752k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   752k|    static_assert(scannable_disabled,
 5881|   752k|                  "Cannot scan an argument that has been disabled by "
 5882|   752k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   752k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   752k|    static_assert(
 5886|   752k|        scannable,
 5887|   752k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   752k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   752k|    return arg_value{arg};
 5891|   752k|}
_ZN3scn2v46detail9arg_valueC2IdEERT_:
 5645|   752k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   752k|    {
 5647|   752k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJdEE6valuesEv:
 6475|   682k|    {
 6476|   682k|        return m_values;
 6477|   682k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   368k|        : basic_scan_args(store.desc, store.args.data())
 6222|   368k|    {
 6223|   368k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   178k|        : m_str(r.str)
 8850|   178k|    {
 8851|   178k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1753|   196k|    {
 1754|   196k|        return has_value();
 1755|   196k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEEptEv:
 1828|   544k|    {
 1829|   544k|        return &value();
 1830|   544k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   544k|    {
 1783|   544k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   544k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   544k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   544k|        return this->get_value();
 1785|   544k|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|  89.0k|{
 9962|  89.0k|    auto result = make_scan_result<Source, Args...>();
 9963|  89.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  89.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  89.0k|                                   make_scan_args(result->values())));
 9965|  89.0k|    return result;
 9966|  89.0k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  18.8k|{
10003|  18.8k|    auto result = make_scan_result<Source, T>();
10004|  18.8k|    fill_scan_result(
10005|  18.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  18.8k|                            detail::make_arg<scan_context>(result->value())));
10007|  18.8k|    return result;
10008|  18.8k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEdEENS0_14basic_scan_argIT_EERT0_:
 5945|  37.7k|{
 5946|  37.7k|    check_scan_arg_types<T>();
 5947|       |
 5948|  37.7k|    basic_scan_arg<Context> arg;
 5949|  37.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  37.7k|    arg.m_value = make_value<Context>(value);
 5951|  37.7k|    return arg;
 5952|  37.7k|}
_ZNR3scn2v46detail25scan_result_value_storageIJdEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  69.3k|    {
 6498|  69.3k|        return std::get<0>(m_values);
 6499|  69.3k|    }
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJDpT_EEEEEOSD_NS0_24basic_scan_format_stringIcNSI_13type_identityISD_E4typeEJDpNSU_ISO_E4typeEEEE:
 9892|  90.9k|{
 9893|  90.9k|    auto result = make_scan_result<Source, Args...>();
 9894|  90.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  90.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  90.9k|                                   make_scan_args(result->values())));
 9896|  90.9k|    return result;
 9897|  90.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEEDav:
 9848|   201k|{
 9849|   201k|    return scan_result_type<Source, Args...>();
 9850|   201k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1565|   201k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  441|   201k|        : m_value(T{}), m_has_value(true)
  442|   201k|    {
  443|   201k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2Ev:
 6692|   201k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJeEEC2Ev:
 6466|   768k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   201k|{
 9834|   201k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   201k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.9k, False: 178k]
  |  |  ------------------
  ------------------
 9835|  22.9k|        out = unexpected(in.error());
 9836|  22.9k|    }
 9837|   178k|    else {
 9838|   178k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   178k|    static_cast<    \
  |  | 1109|   178k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   178k|    }
 9840|   201k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  22.9k|        : base(unexpect, std::move(e.error())),
 1630|  22.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.9k|    {
 1632|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  22.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.9k|          m_has_value(false)
  466|  22.9k|    {
  467|  22.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.9k|    {
 1330|  22.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1570|  22.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  916|  22.9k|    {
  917|  22.9k|        assign_common(std::move(other));
  918|  22.9k|        return *this;
  919|  22.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  22.9k|    {
  964|  22.9k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.9k, False: 0]
  ------------------
  965|  22.9k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.9k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.9k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   805k|    {
  505|   805k|        return m_has_value;
  506|   805k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   558k|    {
  471|   558k|        return m_value;
  472|   558k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  22.9k|    {
 1060|  22.9k|        this->destroy_value();
 1061|  22.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  22.9k|    {
  519|  22.9k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.9k|                                  std::forward<Args>(args)...);
  521|  22.9k|        m_has_value = false;
  522|  22.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.9k|    {
  488|  22.9k|        return m_unexpected;
  489|  22.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.9k|    {
  496|  22.9k|        return std::move(m_unexpected);
  497|  22.9k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEcvNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEv:
 8854|   181k|    {
 8855|   181k|        return m_str;
 8856|   181k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   376k|{
 6196|   376k|    detail::check_scan_arg_types<Args...>();
 6197|   376k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   376k|}
_ZN3scn2v46detail20check_scan_arg_typesIJeEEEbv:
 5910|   768k|{
 5911|   768k|    constexpr bool default_constructible_constraint =
 5912|   768k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   768k|    static_assert(default_constructible_constraint,
 5914|   768k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   768k|    constexpr bool destructible_constraint =
 5917|   768k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   768k|    static_assert(destructible_constraint,
 5919|   768k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   768k|    constexpr bool non_reference_constraint =
 5922|   768k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   768k|    static_assert(non_reference_constraint,
 5924|   768k|                  "Scan argument types must not be references");
 5925|       |
 5926|   768k|    constexpr bool movable_constraint =
 5927|   768k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   768k|    static_assert(movable_constraint,
 5929|   768k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   768k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   768k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   768k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEEC2ERNSt3__15tupleIJeEEE:
 6171|   376k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   376k|    {
 6173|   376k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   376k|    {
 6181|   376k|        return {detail::make_arg<
 6182|   376k|            kind, Context,
 6183|   376k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   376k|                                 typename Context::char_type>::value>(args)...};
 6185|   376k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE20EevEEPvRT2_:
 5960|   376k|{
 5961|   376k|    return make_value<Context>(value).ref_value;
 5962|   376k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEEDaRT0_:
 5895|   414k|{
 5896|   414k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   414k|                                  needs_context_tag>) {
 5900|   414k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   414k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   414k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERe:
 5702|   414k|    {                                                                        \
 5703|   414k|        return val;                                                          \
 5704|   414k|    }
_ZN3scn2v46detail15make_value_implIeReEEDaOT0_:
 5864|   768k|{
 5865|   768k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   768k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   768k|    constexpr bool scannable_char =
 5869|   768k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   768k|    static_assert(scannable_char,
 5871|   768k|                  "Cannot scan an argument of an unsupported character "
 5872|   768k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   768k|    constexpr bool scannable_const =
 5875|   768k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   768k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   768k|    constexpr bool scannable_disabled =
 5879|   768k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   768k|    static_assert(scannable_disabled,
 5881|   768k|                  "Cannot scan an argument that has been disabled by "
 5882|   768k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   768k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   768k|    static_assert(
 5886|   768k|        scannable,
 5887|   768k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   768k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   768k|    return arg_value{arg};
 5891|   768k|}
_ZN3scn2v46detail9arg_valueC2IeEERT_:
 5645|   768k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   768k|    {
 5647|   768k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJeEE6valuesEv:
 6475|   697k|    {
 6476|   697k|        return m_values;
 6477|   697k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   376k|        : basic_scan_args(store.desc, store.args.data())
 6222|   376k|    {
 6223|   376k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   181k|        : m_str(r.str)
 8850|   181k|    {
 8851|   181k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1753|   201k|    {
 1754|   201k|        return has_value();
 1755|   201k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEEptEv:
 1828|   558k|    {
 1829|   558k|        return &value();
 1830|   558k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   558k|    {
 1783|   558k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   558k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   558k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   558k|        return this->get_value();
 1785|   558k|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcS9_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEJDpT_EEEEERKT0_OSE_NS0_24basic_scan_format_stringIcNSJ_13type_identityISE_E4typeEJDpNSY_ISP_E4typeEEEE:
 9961|  90.9k|{
 9962|  90.9k|    auto result = make_scan_result<Source, Args...>();
 9963|  90.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  90.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  90.9k|                                   make_scan_args(result->values())));
 9965|  90.9k|    return result;
 9966|  90.9k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEvEENS0_13scan_expectedINS0_11scan_resultINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEJT_EEEEEOSD_:
10002|  19.5k|{
10003|  19.5k|    auto result = make_scan_result<Source, T>();
10004|  19.5k|    fill_scan_result(
10005|  19.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  19.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  19.5k|                            detail::make_arg<scan_context>(result->value())));
10007|  19.5k|    return result;
10008|  19.5k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEeEENS0_14basic_scan_argIT_EERT0_:
 5945|  38.8k|{
 5946|  38.8k|    check_scan_arg_types<T>();
 5947|       |
 5948|  38.8k|    basic_scan_arg<Context> arg;
 5949|  38.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  38.8k|    arg.m_value = make_value<Context>(value);
 5951|  38.8k|    return arg;
 5952|  38.8k|}
_ZNR3scn2v46detail25scan_result_value_storageIJeEE5valueILm1ETnPNSt3__19enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  71.4k|    {
 6498|  71.4k|        return std::get<0>(m_values);
 6499|  71.4k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  68.7k|    {
 2883|  68.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  68.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  68.7k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  68.7k|    {
 2864|  68.7k|        return decay_copy(t.begin());
 2865|  68.7k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2107|  21.5M|{
 2108|  21.5M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  21.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  21.5M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.24M|    {
 2940|  1.24M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.24M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.24M|    {
 2922|  1.24M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.24M|    }
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|  91.2k|{
 9893|  91.2k|    auto result = make_scan_result<Source, Args...>();
 9894|  91.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  91.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  91.2k|                                   make_scan_args(result->values())));
 9896|  91.2k|    return result;
 9897|  91.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEEDav:
 9848|   200k|{
 9849|   200k|    return scan_result_type<Source, Args...>();
 9850|   200k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1565|   200k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  441|   200k|        : m_value(T{}), m_has_value(true)
  442|   200k|    {
  443|   200k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2Ev:
 6692|   200k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6535|   623k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3473|   623k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   200k|{
 9834|   200k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.9k, False: 177k]
  |  |  ------------------
  ------------------
 9835|  22.9k|        out = unexpected(in.error());
 9836|  22.9k|    }
 9837|   177k|    else {
 9838|   177k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   177k|    static_cast<    \
  |  | 1109|   177k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   177k|    }
 9840|   200k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1753|   623k|    {
 1754|   623k|        return has_value();
 1755|   623k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.24M|    {
  505|  1.24M|        return m_has_value;
  506|  1.24M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1759|  68.7k|    {
 1760|  68.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  68.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  68.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  68.7k|        return this->get_unexpected().error();
 1762|  68.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  68.7k|    {
  488|  68.7k|        return m_unexpected;
  489|  68.7k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  22.9k|        : base(unexpect, std::move(e.error())),
 1630|  22.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.9k|    {
 1632|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  22.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.9k|          m_has_value(false)
  466|  22.9k|    {
  467|  22.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.9k|    {
 1330|  22.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1570|  22.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  916|  22.9k|    {
  917|  22.9k|        assign_common(std::move(other));
  918|  22.9k|        return *this;
  919|  22.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  22.9k|    {
  964|  22.9k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.9k, False: 0]
  ------------------
  965|  22.9k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.9k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.9k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   802k|    {
  505|   802k|        return m_has_value;
  506|   802k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   555k|    {
  471|   555k|        return m_value;
  472|   555k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  22.9k|    {
 1060|  22.9k|        this->destroy_value();
 1061|  22.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  22.9k|    {
  519|  22.9k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.9k|                                  std::forward<Args>(args)...);
  521|  22.9k|        m_has_value = false;
  522|  22.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.9k|    {
  488|  22.9k|        return m_unexpected;
  489|  22.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.9k|    {
  496|  22.9k|        return std::move(m_unexpected);
  497|  22.9k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6566|   554k|    {
 6567|   554k|        m_range = std::forward<Other>(r);
 6568|   554k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|   554k|    {
 1809|   554k|        return value();
 1810|   554k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|   554k|    {
 1783|   554k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   554k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   554k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   554k|        return this->get_value();
 1785|   554k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   554k|    {
  471|   554k|        return m_value;
  472|   554k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9654|   283k|{
 9655|   283k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|   283k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|   283k|{
 9592|   283k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   283k|    auto result = vscan_impl(buffer, format, args);
 9595|   283k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 31.7k, False: 251k]
  |  |  ------------------
  ------------------
 9596|  31.7k|        return unexpected(result.error());
 9597|  31.7k|    }
 9598|   251k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   283k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5398|   623k|{
 5399|   623k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   623k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   623k|                  "\n"
 5403|   623k|                  "Unsupported range type given as input to a scanning "
 5404|   623k|                  "function.\n"
 5405|   623k|                  "A range needs to have a character type (value type) "
 5406|   623k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   623k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   623k|                  "to be included.\n"
 5409|   623k|                  "See the scnlib documentation for more details.");
 5410|   623k|    static_assert(
 5411|   623k|        !std::is_same_v<T, custom_char_traits>,
 5412|   623k|        "\n"
 5413|   623k|        "Unsupported range type given as input to a scanning "
 5414|   623k|        "function.\n"
 5415|   623k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   623k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   623k|        "not supported.");
 5418|   623k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   623k|                  "\n"
 5420|   623k|                  "Unsupported range type given as input to a scanning "
 5421|   623k|                  "function.\n"
 5422|   623k|                  "file_marker_found cannot be used as an "
 5423|   623k|                  "source range type to scn::scan.\n"
 5424|   623k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   623k|                  "and do not provide an explicit source range, "
 5426|   623k|                  "or use scn::scan with a FILE* directly.");
 5427|   623k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   623k|                  "\n"
 5429|   623k|                  "Unsupported range type given as input to a scanning "
 5430|   623k|                  "function.\n"
 5431|   623k|                  "In order to be scannable, a range needs to satisfy "
 5432|   623k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   623k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   623k|                  "\n"
 5435|   623k|                  "Unsupported range type given as input to a scanning "
 5436|   623k|                  "function.\n"
 5437|   623k|                  "A range needs to model forward_range and have a valid "
 5438|   623k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   623k|                  "Examples of scannable ranges are std::string, "
 5440|   623k|                  "std::string_view, "
 5441|   623k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   623k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   623k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   623k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|   623k|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|   623k|    else {
 5384|   623k|        return make_forward_scan_buffer(r);
 5385|   623k|    }
 5386|   623k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5202|   623k|{
 5203|   623k|    return basic_scan_forward_buffer_impl(range);
 5204|   623k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|   623k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|   623k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|   623k|          m_cursor(ranges::begin(*m_range))
 4784|   623k|    {
 4785|   623k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4754|   623k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|   623k|    {
 4756|   623k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4445|   623k|        : m_current_view(sv), m_is_contiguous(false)
 4446|   623k|    {
 4447|   623k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4358|   623k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  1.17M|    {
 2883|  1.17M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  1.17M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  1.17M|    {
 2864|  1.17M|        return decay_copy(t.begin());
 2865|  1.17M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3493|  1.73M|    {
 3494|  1.73M|        return m_iterator;
 3495|  1.73M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4788|  6.11M|    {
 4789|  6.11M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 180k, False: 5.93M]
  ------------------
 4790|   180k|            return false;
 4791|   180k|        }
 4792|  5.93M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|  5.93M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|  5.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|  5.93M|        }
 4795|  5.93M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 5.32M, False: 615k]
  ------------------
 4796|  5.32M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|  5.32M|                                          this->m_current_view.begin(),
 4798|  5.32M|                                          this->m_current_view.end());
 4799|  5.32M|        }
 4800|  5.93M|        m_latest = *m_cursor;
 4801|  5.93M|        ++m_cursor;
 4802|  5.93M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|  5.93M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|  5.93M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|  5.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|  5.93M|        }
 4806|  5.93M|        return true;
 4807|  6.11M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  17.9M|    {
 2940|  17.9M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  17.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  17.9M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  17.9M|    {
 2922|  17.9M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  17.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  17.9M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3497|  18.5M|    {
 3498|  18.5M|        return m_sentinel;
 3499|  18.5M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4363|   623k|    {
 4364|   623k|        SCN_UNUSED(position);
  ------------------
  |  | 1089|   623k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|   623k|        return true;
 4366|   623k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|  68.7k|        : base(unexpect, std::move(e.error())),
 1630|  68.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  68.7k|    {
 1632|  68.7k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|  68.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  68.7k|          m_has_value(false)
  466|  68.7k|    {
  467|  68.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   623k|    {
 1330|   623k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|   554k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   554k|                      ranges::iterator_t<SourceRange>>) {
 6799|   554k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   554k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   554k|    {
 2883|   554k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   554k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   554k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   554k|    {
 2864|   554k|        return decay_copy(t.begin());
 2865|   554k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6783|   554k|{
 6784|   554k|    return ranges::end(source);
 6785|   554k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   554k|    {
 2940|   554k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   554k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   554k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   554k|    {
 2922|   554k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   554k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   554k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|   554k|        : base(std::in_place, std::forward<U>(val)),
 1584|   554k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   554k|    {
 1586|   554k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|   554k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   554k|    {
  457|   554k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|   182k|    {
 8855|   182k|        return m_str;
 8856|   182k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|  1.17M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.17M|    static_cast<    \
  |  | 1109|  1.17M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.17M|    static_cast<    \
  |  | 1109|  1.17M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  1.17M|    {
 3480|  1.17M|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   182k|        : m_str(r.str)
 8850|   182k|    {
 8851|   182k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1753|   200k|    {
 1754|   200k|        return has_value();
 1755|   200k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1828|   555k|    {
 1829|   555k|        return &value();
 1830|   555k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   555k|    {
 1783|   555k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   555k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   555k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   555k|        return this->get_value();
 1785|   555k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6555|   554k|    {
 6556|   554k|        return ranges::begin(m_range);
 6557|   554k|    }
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|  91.2k|{
 9962|  91.2k|    auto result = make_scan_result<Source, Args...>();
 9963|  91.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  91.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  91.2k|                                   make_scan_args(result->values())));
 9965|  91.2k|    return result;
 9966|  91.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9672|   283k|{
 9673|   283k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|   283k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|   283k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|   283k|{
 9608|   283k|#if !SCN_DISABLE_LOCALE
 9609|   283k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   283k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   283k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   283k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   283k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 31.7k, False: 251k]
  |  |  ------------------
  ------------------
 9616|  31.7k|        return unexpected(result.error());
 9617|  31.7k|    }
 9618|   251k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   251k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   283k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  18.1k|{
10003|  18.1k|    auto result = make_scan_result<Source, T>();
10004|  18.1k|    fill_scan_result(
10005|  18.1k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  18.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  18.1k|                            detail::make_arg<scan_context>(result->value())));
10007|  18.1k|    return result;
10008|  18.1k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9685|  56.3k|{
 9686|  56.3k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|  56.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|  56.3k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  56.3k|{
 9632|  56.3k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  56.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  56.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  56.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.28k, False: 51.0k]
  |  |  ------------------
  ------------------
 9636|  5.28k|        return unexpected(result.error());
 9637|  5.28k|    }
 9638|  51.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  51.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  56.3k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|  95.1k|{
 9893|  95.1k|    auto result = make_scan_result<Source, Args...>();
 9894|  95.1k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  95.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  95.1k|                                   make_scan_args(result->values())));
 9896|  95.1k|    return result;
 9897|  95.1k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEEDav:
 9848|   209k|{
 9849|   209k|    return scan_result_type<Source, Args...>();
 9850|   209k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|   209k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|   209k|        : m_value(T{}), m_has_value(true)
  442|   209k|    {
  443|   209k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2Ev:
 6692|   209k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   209k|{
 9834|   209k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.9k, False: 186k]
  |  |  ------------------
  ------------------
 9835|  22.9k|        out = unexpected(in.error());
 9836|  22.9k|    }
 9837|   186k|    else {
 9838|   186k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   186k|    static_cast<    \
  |  | 1109|   186k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   186k|    }
 9840|   209k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  22.9k|        : base(unexpect, std::move(e.error())),
 1630|  22.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.9k|    {
 1632|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  22.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.9k|          m_has_value(false)
  466|  22.9k|    {
  467|  22.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.9k|    {
 1330|  22.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1570|  22.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  916|  22.9k|    {
  917|  22.9k|        assign_common(std::move(other));
  918|  22.9k|        return *this;
  919|  22.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  22.9k|    {
  964|  22.9k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.9k, False: 0]
  ------------------
  965|  22.9k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.9k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.9k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   836k|    {
  505|   836k|        return m_has_value;
  506|   836k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   581k|    {
  471|   581k|        return m_value;
  472|   581k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  22.9k|    {
 1060|  22.9k|        this->destroy_value();
 1061|  22.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  22.9k|    {
  519|  22.9k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.9k|                                  std::forward<Args>(args)...);
  521|  22.9k|        m_has_value = false;
  522|  22.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.9k|    {
  488|  22.9k|        return m_unexpected;
  489|  22.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.9k|    {
  496|  22.9k|        return std::move(m_unexpected);
  497|  22.9k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|   190k|    {
 8855|   190k|        return m_str;
 8856|   190k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   190k|        : m_str(r.str)
 8850|   190k|    {
 8851|   190k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1753|   209k|    {
 1754|   209k|        return has_value();
 1755|   209k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1828|   581k|    {
 1829|   581k|        return &value();
 1830|   581k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   581k|    {
 1783|   581k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   581k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   581k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   581k|        return this->get_value();
 1785|   581k|    }
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|  95.1k|{
 9962|  95.1k|    auto result = make_scan_result<Source, Args...>();
 9963|  95.1k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  95.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  95.1k|                                   make_scan_args(result->values())));
 9965|  95.1k|    return result;
 9966|  95.1k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  18.9k|{
10003|  18.9k|    auto result = make_scan_result<Source, T>();
10004|  18.9k|    fill_scan_result(
10005|  18.9k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  18.9k|                            detail::make_arg<scan_context>(result->value())));
10007|  18.9k|    return result;
10008|  18.9k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
 9892|  97.0k|{
 9893|  97.0k|    auto result = make_scan_result<Source, Args...>();
 9894|  97.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  97.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  97.0k|                                   make_scan_args(result->values())));
 9896|  97.0k|    return result;
 9897|  97.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEEDav:
 9848|   213k|{
 9849|   213k|    return scan_result_type<Source, Args...>();
 9850|   213k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1565|   213k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  441|   213k|        : m_value(T{}), m_has_value(true)
  442|   213k|    {
  443|   213k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2Ev:
 6692|   213k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   213k|{
 9834|   213k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   213k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.9k, False: 190k]
  |  |  ------------------
  ------------------
 9835|  22.9k|        out = unexpected(in.error());
 9836|  22.9k|    }
 9837|   190k|    else {
 9838|   190k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   190k|    static_cast<    \
  |  | 1109|   190k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   190k|    }
 9840|   213k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  22.9k|        : base(unexpect, std::move(e.error())),
 1630|  22.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.9k|    {
 1632|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  22.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.9k|          m_has_value(false)
  466|  22.9k|    {
  467|  22.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.9k|    {
 1330|  22.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1570|  22.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  916|  22.9k|    {
  917|  22.9k|        assign_common(std::move(other));
  918|  22.9k|        return *this;
  919|  22.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  22.9k|    {
  964|  22.9k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.9k, False: 0]
  ------------------
  965|  22.9k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.9k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.9k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   853k|    {
  505|   853k|        return m_has_value;
  506|   853k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   594k|    {
  471|   594k|        return m_value;
  472|   594k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  22.9k|    {
 1060|  22.9k|        this->destroy_value();
 1061|  22.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  22.9k|    {
  519|  22.9k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.9k|                                  std::forward<Args>(args)...);
  521|  22.9k|        m_has_value = false;
  522|  22.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.9k|    {
  488|  22.9k|        return m_unexpected;
  489|  22.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.9k|    {
  496|  22.9k|        return std::move(m_unexpected);
  497|  22.9k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEcvNS6_17basic_string_viewIcNS6_11char_traitsIcEEEEEv:
 8854|   194k|    {
 8855|   194k|        return m_str;
 8856|   194k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   194k|        : m_str(r.str)
 8850|   194k|    {
 8851|   194k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1753|   213k|    {
 1754|   213k|        return has_value();
 1755|   213k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1828|   594k|    {
 1829|   594k|        return &value();
 1830|   594k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   594k|    {
 1783|   594k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   594k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   594k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   594k|        return this->get_value();
 1785|   594k|    }
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
 9961|  97.0k|{
 9962|  97.0k|    auto result = make_scan_result<Source, Args...>();
 9963|  97.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  97.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  97.0k|                                   make_scan_args(result->values())));
 9965|  97.0k|    return result;
 9966|  97.0k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEvEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
10002|  19.3k|{
10003|  19.3k|    auto result = make_scan_result<Source, T>();
10004|  19.3k|    fill_scan_result(
10005|  19.3k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  19.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  19.3k|                            detail::make_arg<scan_context>(result->value())));
10007|  19.3k|    return result;
10008|  19.3k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   141k|    {
 2883|   141k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   141k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   141k|    {
 2864|   141k|        return decay_copy(t.begin());
 2865|   141k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2107|  4.14M|{
 2108|  4.14M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  4.14M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  4.14M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.01M|    {
 2940|  1.01M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.01M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.01M|    {
 2922|  1.01M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.01M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEEDav:
 9848|   157k|{
 9849|   157k|    return scan_result_type<Source, Args...>();
 9850|   157k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2Ev:
 1565|   157k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  441|   157k|        : m_value(T{}), m_has_value(true)
  442|   157k|    {
  443|   157k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2Ev:
 6692|   157k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6535|   507k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3473|   507k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   157k|{
 9834|   157k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 45.8k, False: 111k]
  |  |  ------------------
  ------------------
 9835|  45.8k|        out = unexpected(in.error());
 9836|  45.8k|    }
 9837|   111k|    else {
 9838|   111k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   111k|    static_cast<    \
  |  | 1109|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   111k|    }
 9840|   157k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1753|   507k|    {
 1754|   507k|        return has_value();
 1755|   507k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.01M|    {
  505|  1.01M|        return m_has_value;
  506|  1.01M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1759|   137k|    {
 1760|   137k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   137k|        return this->get_unexpected().error();
 1762|   137k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   137k|    {
  488|   137k|        return m_unexpected;
  489|   137k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  45.8k|        : base(unexpect, std::move(e.error())),
 1630|  45.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  45.8k|    {
 1632|  45.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  45.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  45.8k|          m_has_value(false)
  466|  45.8k|    {
  467|  45.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  45.8k|    {
 1330|  45.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEaSEOSC_:
 1570|  45.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvEaSEOSD_:
  916|  45.8k|    {
  917|  45.8k|        assign_common(std::move(other));
  918|  45.8k|        return *this;
  919|  45.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  45.8k|    {
  964|  45.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 45.8k, False: 0]
  ------------------
  965|  45.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 45.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  45.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  45.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   630k|    {
  505|   630k|        return m_has_value;
  506|   630k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   381k|    {
  471|   381k|        return m_value;
  472|   381k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  45.8k|    {
 1060|  45.8k|        this->destroy_value();
 1061|  45.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  45.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  45.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  45.8k|    {
  519|  45.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  45.8k|                                  std::forward<Args>(args)...);
  521|  45.8k|        m_has_value = false;
  522|  45.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  45.8k|    {
  488|  45.8k|        return m_unexpected;
  489|  45.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  45.8k|    {
  496|  45.8k|        return std::move(m_unexpected);
  497|  45.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6566|   370k|    {
 6567|   370k|        m_range = std::forward<Other>(r);
 6568|   370k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|   370k|    {
 1809|   370k|        return value();
 1810|   370k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|   370k|    {
 1783|   370k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   370k|        return this->get_value();
 1785|   370k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   370k|    {
  471|   370k|        return m_value;
  472|   370k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|   231k|{
 9592|   231k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   231k|    auto result = vscan_impl(buffer, format, args);
 9595|   231k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 63.4k, False: 167k]
  |  |  ------------------
  ------------------
 9596|  63.4k|        return unexpected(result.error());
 9597|  63.4k|    }
 9598|   167k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   231k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5398|   507k|{
 5399|   507k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   507k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   507k|                  "\n"
 5403|   507k|                  "Unsupported range type given as input to a scanning "
 5404|   507k|                  "function.\n"
 5405|   507k|                  "A range needs to have a character type (value type) "
 5406|   507k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   507k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   507k|                  "to be included.\n"
 5409|   507k|                  "See the scnlib documentation for more details.");
 5410|   507k|    static_assert(
 5411|   507k|        !std::is_same_v<T, custom_char_traits>,
 5412|   507k|        "\n"
 5413|   507k|        "Unsupported range type given as input to a scanning "
 5414|   507k|        "function.\n"
 5415|   507k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   507k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   507k|        "not supported.");
 5418|   507k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   507k|                  "\n"
 5420|   507k|                  "Unsupported range type given as input to a scanning "
 5421|   507k|                  "function.\n"
 5422|   507k|                  "file_marker_found cannot be used as an "
 5423|   507k|                  "source range type to scn::scan.\n"
 5424|   507k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   507k|                  "and do not provide an explicit source range, "
 5426|   507k|                  "or use scn::scan with a FILE* directly.");
 5427|   507k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   507k|                  "\n"
 5429|   507k|                  "Unsupported range type given as input to a scanning "
 5430|   507k|                  "function.\n"
 5431|   507k|                  "In order to be scannable, a range needs to satisfy "
 5432|   507k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   507k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   507k|                  "\n"
 5435|   507k|                  "Unsupported range type given as input to a scanning "
 5436|   507k|                  "function.\n"
 5437|   507k|                  "A range needs to model forward_range and have a valid "
 5438|   507k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   507k|                  "Examples of scannable ranges are std::string, "
 5440|   507k|                  "std::string_view, "
 5441|   507k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   507k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   507k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   507k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|   507k|{
 5338|   507k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|   507k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|   507k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   507k|    {
 3014|   507k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   507k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   507k|    {
 2995|   507k|        return t.data();
 2996|   507k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3396|   507k|    {
 3397|   507k|        return detail::to_address(ranges::begin(derived()));
 3398|   507k|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  2.43M|{
  331|  2.43M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  2.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  2.43M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  308|  2.43M|{
  309|  2.43M|    return p;
  310|  2.43M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   877k|    {
 2883|   877k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   877k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   877k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   877k|    {
 2864|   877k|        return decay_copy(t.begin());
 2865|   877k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3493|  21.0M|    {
 3494|  21.0M|        return m_iterator;
 3495|  21.0M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3352|   507k|    {
 3353|   507k|        return static_cast<const D&>(*this);
 3354|   507k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|   507k|    {
 3089|   507k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   507k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|   507k|    {
 3055|   507k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   507k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|  2.65M|    {
 3510|  2.65M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|  2.65M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|   137k|        : base(unexpect, std::move(e.error())),
 1630|   137k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   137k|    {
 1632|   137k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|   137k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   137k|          m_has_value(false)
  466|   137k|    {
  467|   137k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   507k|    {
 1330|   507k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|   370k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   370k|                      ranges::iterator_t<SourceRange>>) {
 6799|   370k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   370k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  1.73M|    {
 2883|  1.73M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.73M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  1.73M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  1.73M|    {
 2864|  1.73M|        return decay_copy(t.begin());
 2865|  1.73M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6783|   370k|{
 6784|   370k|    return ranges::end(source);
 6785|   370k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   370k|    {
 2940|   370k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   370k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   370k|    {
 2922|   370k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   370k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3497|  12.6M|    {
 3498|  12.6M|        return m_sentinel;
 3499|  12.6M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   370k|        : base(std::in_place, std::forward<U>(val)),
 1584|   370k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   370k|    {
 1586|   370k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|   370k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   370k|    {
  457|   370k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|   144k|    {
 8855|   144k|        return m_str;
 8856|   144k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJfEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   288k|{
 6196|   288k|    detail::check_scan_arg_types<Args...>();
 6197|   288k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   288k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEEC2ERNSt3__15tupleIJfEEE:
 6171|   288k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   288k|    {
 6173|   288k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJfEE12make_argptrsIJfEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   288k|    {
 6181|   288k|        return {detail::make_arg<
 6182|   288k|            kind, Context,
 6183|   288k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   288k|                                 typename Context::char_type>::value>(args)...};
 6185|   288k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE18EfvEEPvRT2_:
 5960|   288k|{
 5961|   288k|    return make_value<Context>(value).ref_value;
 5962|   288k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEEDaRT0_:
 5895|   315k|{
 5896|   315k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   315k|                                  needs_context_tag>) {
 5900|   315k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   315k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   315k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERf:
 5702|   315k|    {                                                                        \
 5703|   315k|        return val;                                                          \
 5704|   315k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJfEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   288k|        : basic_scan_args(store.desc, store.args.data())
 6222|   288k|    {
 6223|   288k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6273|   923k|        : m_desc(desc), m_builtin_values(data)
 6274|   923k|    {
 6275|   923k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|  7.85M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  7.85M|    static_cast<    \
  |  | 1109|  7.85M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  7.85M|    static_cast<    \
  |  | 1109|  7.85M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  7.85M|    {
 3480|  7.85M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8536|   923k|{
 8537|   923k|    return s;
 8538|   923k|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8508|   923k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   144k|        : m_str(r.str)
 8850|   144k|    {
 8851|   144k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEcvbEv:
 1753|   157k|    {
 1754|   157k|        return has_value();
 1755|   157k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEEptEv:
 1828|   381k|    {
 1829|   381k|        return &value();
 1830|   381k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJfEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   381k|    {
 1783|   381k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   381k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   381k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   381k|        return this->get_value();
 1785|   381k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6555|   370k|    {
 6556|   370k|        return ranges::begin(m_range);
 6557|   370k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|   231k|{
 9608|   231k|#if !SCN_DISABLE_LOCALE
 9609|   231k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   231k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   231k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   231k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   231k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   231k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 63.4k, False: 167k]
  |  |  ------------------
  ------------------
 9616|  63.4k|        return unexpected(result.error());
 9617|  63.4k|    }
 9618|   167k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   231k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  45.6k|{
 9632|  45.6k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  45.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  45.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  45.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.5k, False: 35.0k]
  |  |  ------------------
  ------------------
 9636|  10.5k|        return unexpected(result.error());
 9637|  10.5k|    }
 9638|  35.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  35.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  45.6k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEfEENS0_14basic_scan_argIT_EERT0_:
 5945|  27.1k|{
 5946|  27.1k|    check_scan_arg_types<T>();
 5947|       |
 5948|  27.1k|    basic_scan_arg<Context> arg;
 5949|  27.1k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  27.1k|    arg.m_value = make_value<Context>(value);
 5951|  27.1k|    return arg;
 5952|  27.1k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6040|  1.01M|    constexpr basic_scan_arg() = default;
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEEDav:
 9848|   173k|{
 9849|   173k|    return scan_result_type<Source, Args...>();
 9850|   173k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|   173k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|   173k|        : m_value(T{}), m_has_value(true)
  442|   173k|    {
  443|   173k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2Ev:
 6692|   173k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   173k|{
 9834|   173k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   173k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 45.8k, False: 127k]
  |  |  ------------------
  ------------------
 9835|  45.8k|        out = unexpected(in.error());
 9836|  45.8k|    }
 9837|   127k|    else {
 9838|   127k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   127k|    static_cast<    \
  |  | 1109|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   127k|    }
 9840|   173k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  45.8k|        : base(unexpect, std::move(e.error())),
 1630|  45.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  45.8k|    {
 1632|  45.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  45.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  45.8k|          m_has_value(false)
  466|  45.8k|    {
  467|  45.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  45.8k|    {
 1330|  45.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEaSEOSC_:
 1570|  45.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvEaSEOSD_:
  916|  45.8k|    {
  917|  45.8k|        assign_common(std::move(other));
  918|  45.8k|        return *this;
  919|  45.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  45.8k|    {
  964|  45.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 45.8k, False: 0]
  ------------------
  965|  45.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 45.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  45.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  45.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   692k|    {
  505|   692k|        return m_has_value;
  506|   692k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   427k|    {
  471|   427k|        return m_value;
  472|   427k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  45.8k|    {
 1060|  45.8k|        this->destroy_value();
 1061|  45.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  45.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  45.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  45.8k|    {
  519|  45.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  45.8k|                                  std::forward<Args>(args)...);
  521|  45.8k|        m_has_value = false;
  522|  45.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  45.8k|    {
  488|  45.8k|        return m_unexpected;
  489|  45.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  45.8k|    {
  496|  45.8k|        return std::move(m_unexpected);
  497|  45.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|   157k|    {
 8855|   157k|        return m_str;
 8856|   157k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJdEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   314k|{
 6196|   314k|    detail::check_scan_arg_types<Args...>();
 6197|   314k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   314k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEEC2ERNSt3__15tupleIJdEEE:
 6171|   314k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   314k|    {
 6173|   314k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJdEE12make_argptrsIJdEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   314k|    {
 6181|   314k|        return {detail::make_arg<
 6182|   314k|            kind, Context,
 6183|   314k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   314k|                                 typename Context::char_type>::value>(args)...};
 6185|   314k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE19EdvEEPvRT2_:
 5960|   314k|{
 5961|   314k|    return make_value<Context>(value).ref_value;
 5962|   314k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEEDaRT0_:
 5895|   346k|{
 5896|   346k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   346k|                                  needs_context_tag>) {
 5900|   346k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   346k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   346k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERd:
 5702|   346k|    {                                                                        \
 5703|   346k|        return val;                                                          \
 5704|   346k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJdEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   314k|        : basic_scan_args(store.desc, store.args.data())
 6222|   314k|    {
 6223|   314k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   157k|        : m_str(r.str)
 8850|   157k|    {
 8851|   157k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEcvbEv:
 1753|   173k|    {
 1754|   173k|        return has_value();
 1755|   173k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEEptEv:
 1828|   427k|    {
 1829|   427k|        return &value();
 1830|   427k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJdEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   427k|    {
 1783|   427k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   427k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   427k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   427k|        return this->get_value();
 1785|   427k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEdEENS0_14basic_scan_argIT_EERT0_:
 5945|  31.5k|{
 5946|  31.5k|    check_scan_arg_types<T>();
 5947|       |
 5948|  31.5k|    basic_scan_arg<Context> arg;
 5949|  31.5k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  31.5k|    arg.m_value = make_value<Context>(value);
 5951|  31.5k|    return arg;
 5952|  31.5k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEEDav:
 9848|   176k|{
 9849|   176k|    return scan_result_type<Source, Args...>();
 9850|   176k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2Ev:
 1565|   176k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  441|   176k|        : m_value(T{}), m_has_value(true)
  442|   176k|    {
  443|   176k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2Ev:
 6692|   176k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEES9_TnPNSt3__19enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSB_7is_sameINSF_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISF_EEONSR_ISL_EE:
 9833|   176k|{
 9834|   176k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 45.8k, False: 131k]
  |  |  ------------------
  ------------------
 9835|  45.8k|        out = unexpected(in.error());
 9836|  45.8k|    }
 9837|   131k|    else {
 9838|   131k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   131k|    static_cast<    \
  |  | 1109|   131k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   131k|    }
 9840|   176k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEC2ISB_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSF_IXsr3stdE16is_convertible_vISH_SB_EEvE4typeELSL_0EEEONS0_10unexpectedISG_EE:
 1629|  45.8k|        : base(unexpect, std::move(e.error())),
 1630|  45.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  45.8k|    {
 1632|  45.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2IJSC_EvEENS0_10unexpect_tEDpOT_:
  464|  45.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  45.8k|          m_has_value(false)
  466|  45.8k|    {
  467|  45.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  45.8k|    {
 1330|  45.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEaSEOSC_:
 1570|  45.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvEaSEOSD_:
  916|  45.8k|    {
  917|  45.8k|        assign_common(std::move(other));
  918|  45.8k|        return *this;
  919|  45.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE13assign_commonISD_EEvOT_:
  963|  45.8k|    {
  964|  45.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 45.8k, False: 0]
  ------------------
  965|  45.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 45.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  45.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  45.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   707k|    {
  505|   707k|        return m_has_value;
  506|   707k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   439k|    {
  471|   439k|        return m_value;
  472|   439k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISD_EEvOT_:
 1059|  45.8k|    {
 1060|  45.8k|        this->destroy_value();
 1061|  45.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  45.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  45.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISC_EEEEEvDpOT_:
  518|  45.8k|    {
  519|  45.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  45.8k|                                  std::forward<Args>(args)...);
  521|  45.8k|        m_has_value = false;
  522|  45.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  45.8k|    {
  488|  45.8k|        return m_unexpected;
  489|  45.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  45.8k|    {
  496|  45.8k|        return std::move(m_unexpected);
  497|  45.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEcvNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEv:
 8854|   160k|    {
 8855|   160k|        return m_str;
 8856|   160k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJeEEEDaRNSt3__15tupleIJDpT0_EEE:
 6195|   321k|{
 6196|   321k|    detail::check_scan_arg_types<Args...>();
 6197|   321k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   321k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEEC2ERNSt3__15tupleIJeEEE:
 6171|   321k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   321k|    {
 6173|   321k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJeEE12make_argptrsIJeEEENSt3__15arrayIPvLm1EEEDpRT_:
 6180|   321k|    {
 6181|   321k|        return {detail::make_arg<
 6182|   321k|            kind, Context,
 6183|   321k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   321k|                                 typename Context::char_type>::value>(args)...};
 6185|   321k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20EevEEPvRT2_:
 5960|   321k|{
 5961|   321k|    return make_value<Context>(value).ref_value;
 5962|   321k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEEDaRT0_:
 5895|   353k|{
 5896|   353k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   353k|                                  needs_context_tag>) {
 5900|   353k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   353k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERe:
 5702|   353k|    {                                                                        \
 5703|   353k|        return val;                                                          \
 5704|   353k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJeEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   321k|        : basic_scan_args(store.desc, store.args.data())
 6222|   321k|    {
 6223|   321k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   160k|        : m_str(r.str)
 8850|   160k|    {
 8851|   160k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEcvbEv:
 1753|   176k|    {
 1754|   176k|        return has_value();
 1755|   176k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEEptEv:
 1828|   439k|    {
 1829|   439k|        return &value();
 1830|   439k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJeEEENS0_10scan_errorEE5valueISA_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSG_v:
 1782|   439k|    {
 1783|   439k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   439k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   439k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   439k|        return this->get_value();
 1785|   439k|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEeEENS0_14basic_scan_argIT_EERT0_:
 5945|  32.6k|{
 5946|  32.6k|    check_scan_arg_types<T>();
 5947|       |
 5948|  32.6k|    basic_scan_arg<Context> arg;
 5949|  32.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  32.6k|    arg.m_value = make_value<Context>(value);
 5951|  32.6k|    return arg;
 5952|  32.6k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   137k|    {
 2883|   137k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   137k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   137k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   137k|    {
 2864|   137k|        return decay_copy(t.begin());
 2865|   137k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2107|  10.1M|{
 2108|  10.1M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  10.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  10.1M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.01M|    {
 2940|  1.01M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.01M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.01M|    {
 2922|  1.01M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.01M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEEDav:
 9848|   157k|{
 9849|   157k|    return scan_result_type<Source, Args...>();
 9850|   157k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2Ev:
 1565|   157k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2Ev:
  441|   157k|        : m_value(T{}), m_has_value(true)
  442|   157k|    {
  443|   157k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2Ev:
 6692|   157k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6535|   507k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3473|   507k|    subrange() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   157k|{
 9834|   157k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 45.8k, False: 111k]
  |  |  ------------------
  ------------------
 9835|  45.8k|        out = unexpected(in.error());
 9836|  45.8k|    }
 9837|   111k|    else {
 9838|   111k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   111k|    static_cast<    \
  |  | 1109|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   111k|    }
 9840|   157k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1753|   507k|    {
 1754|   507k|        return has_value();
 1755|   507k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.01M|    {
  505|  1.01M|        return m_has_value;
  506|  1.01M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1759|   137k|    {
 1760|   137k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   137k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   137k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   137k|        return this->get_unexpected().error();
 1762|   137k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   137k|    {
  488|   137k|        return m_unexpected;
  489|   137k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  45.8k|        : base(unexpect, std::move(e.error())),
 1630|  45.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  45.8k|    {
 1632|  45.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  45.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  45.8k|          m_has_value(false)
  466|  45.8k|    {
  467|  45.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  45.8k|    {
 1330|  45.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEaSEOSI_:
 1570|  45.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvEaSEOSJ_:
  916|  45.8k|    {
  917|  45.8k|        assign_common(std::move(other));
  918|  45.8k|        return *this;
  919|  45.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  45.8k|    {
  964|  45.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 45.8k, False: 0]
  ------------------
  965|  45.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 45.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  45.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  45.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   630k|    {
  505|   630k|        return m_has_value;
  506|   630k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   381k|    {
  471|   381k|        return m_value;
  472|   381k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  45.8k|    {
 1060|  45.8k|        this->destroy_value();
 1061|  45.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  45.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  45.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  45.8k|    {
  519|  45.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  45.8k|                                  std::forward<Args>(args)...);
  521|  45.8k|        m_has_value = false;
  522|  45.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  45.8k|    {
  488|  45.8k|        return m_unexpected;
  489|  45.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJfEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  45.8k|    {
  496|  45.8k|        return std::move(m_unexpected);
  497|  45.8k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6566|   369k|    {
 6567|   369k|        m_range = std::forward<Other>(r);
 6568|   369k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|   369k|    {
 1809|   369k|        return value();
 1810|   369k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|   369k|    {
 1783|   369k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   369k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   369k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   369k|        return this->get_value();
 1785|   369k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   369k|    {
  471|   369k|        return m_value;
  472|   369k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|   230k|{
 9592|   230k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   230k|    auto result = vscan_impl(buffer, format, args);
 9595|   230k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 63.4k, False: 167k]
  |  |  ------------------
  ------------------
 9596|  63.4k|        return unexpected(result.error());
 9597|  63.4k|    }
 9598|   167k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   230k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5398|   507k|{
 5399|   507k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   507k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   507k|                  "\n"
 5403|   507k|                  "Unsupported range type given as input to a scanning "
 5404|   507k|                  "function.\n"
 5405|   507k|                  "A range needs to have a character type (value type) "
 5406|   507k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   507k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   507k|                  "to be included.\n"
 5409|   507k|                  "See the scnlib documentation for more details.");
 5410|   507k|    static_assert(
 5411|   507k|        !std::is_same_v<T, custom_char_traits>,
 5412|   507k|        "\n"
 5413|   507k|        "Unsupported range type given as input to a scanning "
 5414|   507k|        "function.\n"
 5415|   507k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   507k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   507k|        "not supported.");
 5418|   507k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   507k|                  "\n"
 5420|   507k|                  "Unsupported range type given as input to a scanning "
 5421|   507k|                  "function.\n"
 5422|   507k|                  "file_marker_found cannot be used as an "
 5423|   507k|                  "source range type to scn::scan.\n"
 5424|   507k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   507k|                  "and do not provide an explicit source range, "
 5426|   507k|                  "or use scn::scan with a FILE* directly.");
 5427|   507k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   507k|                  "\n"
 5429|   507k|                  "Unsupported range type given as input to a scanning "
 5430|   507k|                  "function.\n"
 5431|   507k|                  "In order to be scannable, a range needs to satisfy "
 5432|   507k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   507k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   507k|                  "\n"
 5435|   507k|                  "Unsupported range type given as input to a scanning "
 5436|   507k|                  "function.\n"
 5437|   507k|                  "A range needs to model forward_range and have a valid "
 5438|   507k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   507k|                  "Examples of scannable ranges are std::string, "
 5440|   507k|                  "std::string_view, "
 5441|   507k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   507k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   507k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   507k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|   507k|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|   507k|    else {
 5384|   507k|        return make_forward_scan_buffer(r);
 5385|   507k|    }
 5386|   507k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5202|   507k|{
 5203|   507k|    return basic_scan_forward_buffer_impl(range);
 5204|   507k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|   507k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|   507k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|   507k|          m_cursor(ranges::begin(*m_range))
 4784|   507k|    {
 4785|   507k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4754|   507k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|   507k|    {
 4756|   507k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4445|   507k|        : m_current_view(sv), m_is_contiguous(false)
 4446|   507k|    {
 4447|   507k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4358|   507k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   877k|    {
 2883|   877k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   877k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   877k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   877k|    {
 2864|   877k|        return decay_copy(t.begin());
 2865|   877k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3493|  1.24M|    {
 3494|  1.24M|        return m_iterator;
 3495|  1.24M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4788|  2.59M|    {
 4789|  2.59M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 184k, False: 2.41M]
  ------------------
 4790|   184k|            return false;
 4791|   184k|        }
 4792|  2.41M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|  2.41M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|  2.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|  2.41M|        }
 4795|  2.41M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 1.90M, False: 505k]
  ------------------
 4796|  1.90M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|  1.90M|                                          this->m_current_view.begin(),
 4798|  1.90M|                                          this->m_current_view.end());
 4799|  1.90M|        }
 4800|  2.41M|        m_latest = *m_cursor;
 4801|  2.41M|        ++m_cursor;
 4802|  2.41M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|  2.41M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|  2.41M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|  2.41M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.41M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|  2.41M|        }
 4806|  2.41M|        return true;
 4807|  2.59M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  7.42M|    {
 2940|  7.42M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  7.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  7.42M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  7.42M|    {
 2922|  7.42M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  7.42M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  7.42M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3497|  7.79M|    {
 3498|  7.79M|        return m_sentinel;
 3499|  7.79M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4363|   507k|    {
 4364|   507k|        SCN_UNUSED(position);
  ------------------
  |  | 1089|   507k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|   507k|        return true;
 4366|   507k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|   137k|        : base(unexpect, std::move(e.error())),
 1630|   137k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   137k|    {
 1632|   137k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|   137k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   137k|          m_has_value(false)
  466|   137k|    {
  467|   137k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   507k|    {
 1330|   507k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|   369k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   369k|                      ranges::iterator_t<SourceRange>>) {
 6799|   369k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   369k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   369k|    {
 2883|   369k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   369k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   369k|    {
 2864|   369k|        return decay_copy(t.begin());
 2865|   369k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6783|   369k|{
 6784|   369k|    return ranges::end(source);
 6785|   369k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   369k|    {
 2940|   369k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   369k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   369k|    {
 2922|   369k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   369k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|   369k|        : base(std::in_place, std::forward<U>(val)),
 1584|   369k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   369k|    {
 1586|   369k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|   369k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   369k|    {
  457|   369k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|   144k|    {
 8855|   144k|        return m_str;
 8856|   144k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|   877k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   877k|    static_cast<    \
  |  | 1109|   877k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   877k|    static_cast<    \
  |  | 1109|   877k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   877k|    {
 3480|   877k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJfEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   144k|        : m_str(r.str)
 8850|   144k|    {
 8851|   144k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEcvbEv:
 1753|   157k|    {
 1754|   157k|        return has_value();
 1755|   157k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEEptEv:
 1828|   381k|    {
 1829|   381k|        return &value();
 1830|   381k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJfEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   381k|    {
 1783|   381k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   381k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   381k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   381k|        return this->get_value();
 1785|   381k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6555|   369k|    {
 6556|   369k|        return ranges::begin(m_range);
 6557|   369k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|   230k|{
 9608|   230k|#if !SCN_DISABLE_LOCALE
 9609|   230k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   230k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   230k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   230k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   230k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   230k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 63.4k, False: 167k]
  |  |  ------------------
  ------------------
 9616|  63.4k|        return unexpected(result.error());
 9617|  63.4k|    }
 9618|   167k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   230k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  45.6k|{
 9632|  45.6k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  45.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  45.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  45.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.5k, False: 35.0k]
  |  |  ------------------
  ------------------
 9636|  10.5k|        return unexpected(result.error());
 9637|  10.5k|    }
 9638|  35.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  35.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  45.6k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEEDav:
 9848|   172k|{
 9849|   172k|    return scan_result_type<Source, Args...>();
 9850|   172k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2Ev:
 1565|   172k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2Ev:
  441|   172k|        : m_value(T{}), m_has_value(true)
  442|   172k|    {
  443|   172k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2Ev:
 6692|   172k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   172k|{
 9834|   172k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   172k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 45.8k, False: 127k]
  |  |  ------------------
  ------------------
 9835|  45.8k|        out = unexpected(in.error());
 9836|  45.8k|    }
 9837|   127k|    else {
 9838|   127k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   127k|    static_cast<    \
  |  | 1109|   127k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   127k|    }
 9840|   172k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  45.8k|        : base(unexpect, std::move(e.error())),
 1630|  45.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  45.8k|    {
 1632|  45.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  45.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  45.8k|          m_has_value(false)
  466|  45.8k|    {
  467|  45.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  45.8k|    {
 1330|  45.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEaSEOSI_:
 1570|  45.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvEaSEOSJ_:
  916|  45.8k|    {
  917|  45.8k|        assign_common(std::move(other));
  918|  45.8k|        return *this;
  919|  45.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  45.8k|    {
  964|  45.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 45.8k, False: 0]
  ------------------
  965|  45.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 45.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  45.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  45.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   691k|    {
  505|   691k|        return m_has_value;
  506|   691k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   427k|    {
  471|   427k|        return m_value;
  472|   427k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  45.8k|    {
 1060|  45.8k|        this->destroy_value();
 1061|  45.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  45.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  45.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  45.8k|    {
  519|  45.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  45.8k|                                  std::forward<Args>(args)...);
  521|  45.8k|        m_has_value = false;
  522|  45.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  45.8k|    {
  488|  45.8k|        return m_unexpected;
  489|  45.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJdEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  45.8k|    {
  496|  45.8k|        return std::move(m_unexpected);
  497|  45.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|   157k|    {
 8855|   157k|        return m_str;
 8856|   157k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJdEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   157k|        : m_str(r.str)
 8850|   157k|    {
 8851|   157k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEcvbEv:
 1753|   172k|    {
 1754|   172k|        return has_value();
 1755|   172k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEEptEv:
 1828|   427k|    {
 1829|   427k|        return &value();
 1830|   427k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJdEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   427k|    {
 1783|   427k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   427k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   427k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   427k|        return this->get_value();
 1785|   427k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEEDav:
 9848|   176k|{
 9849|   176k|    return scan_result_type<Source, Args...>();
 9850|   176k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2Ev:
 1565|   176k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2Ev:
  441|   176k|        : m_value(T{}), m_has_value(true)
  442|   176k|    {
  443|   176k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2Ev:
 6692|   176k|    constexpr scan_result() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSK_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISK_EEONSW_ISQ_EE:
 9833|   176k|{
 9834|   176k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 45.8k, False: 131k]
  |  |  ------------------
  ------------------
 9835|  45.8k|        out = unexpected(in.error());
 9836|  45.8k|    }
 9837|   131k|    else {
 9838|   131k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   131k|    static_cast<    \
  |  | 1109|   131k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   131k|    }
 9840|   176k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEC2ISH_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISH_OT_EEvE4typeELPv0ETnPNSK_IXsr3stdE16is_convertible_vISM_SH_EEvE4typeELSQ_0EEEONS0_10unexpectedISL_EE:
 1629|  45.8k|        : base(unexpect, std::move(e.error())),
 1630|  45.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  45.8k|    {
 1632|  45.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2IJSI_EvEENS0_10unexpect_tEDpOT_:
  464|  45.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  45.8k|          m_has_value(false)
  466|  45.8k|    {
  467|  45.8k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  45.8k|    {
 1330|  45.8k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEaSEOSI_:
 1570|  45.8k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvEaSEOSJ_:
  916|  45.8k|    {
  917|  45.8k|        assign_common(std::move(other));
  918|  45.8k|        return *this;
  919|  45.8k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE13assign_commonISJ_EEvOT_:
  963|  45.8k|    {
  964|  45.8k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 45.8k, False: 0]
  ------------------
  965|  45.8k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 45.8k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  45.8k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  45.8k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   707k|    {
  505|   707k|        return m_has_value;
  506|   707k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   438k|    {
  471|   438k|        return m_value;
  472|   438k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorEvE28assign_unexpected_over_valueISJ_EEvOT_:
 1059|  45.8k|    {
 1060|  45.8k|        this->destroy_value();
 1061|  45.8k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  45.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  45.8k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISI_EEEEEvDpOT_:
  518|  45.8k|    {
  519|  45.8k|        scn::detail::construct_at(&get_unexpected(),
  520|  45.8k|                                  std::forward<Args>(args)...);
  521|  45.8k|        m_has_value = false;
  522|  45.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  45.8k|    {
  488|  45.8k|        return m_unexpected;
  489|  45.8k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJeEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  45.8k|    {
  496|  45.8k|        return std::move(m_unexpected);
  497|  45.8k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEcvNS6_17basic_string_viewIwNS6_11char_traitsIwEEEEEv:
 8854|   160k|    {
 8855|   160k|        return m_str;
 8856|   160k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJeEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   160k|        : m_str(r.str)
 8850|   160k|    {
 8851|   160k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEcvbEv:
 1753|   176k|    {
 1754|   176k|        return has_value();
 1755|   176k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEEptEv:
 1828|   438k|    {
 1829|   438k|        return &value();
 1830|   438k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJeEEENS0_10scan_errorEE5valueISG_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSL_v:
 1782|   438k|    {
 1783|   438k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   438k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   438k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   438k|        return this->get_value();
 1785|   438k|    }
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3758|  2.53M|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3759|  2.53M|    {
 3760|  2.53M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|  2.53M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3761|  2.53M|    }
_ZNK3scn2v410scan_error4codeEv:
 3770|   218k|    {
 3771|   218k|        return m_code;
 3772|   218k|    }
_ZNK3scn2v410scan_error3msgEv:
 3775|  2.10k|    {
 3776|  2.10k|        return m_msg;
 3777|  2.10k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   472k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   472k|    else {
 3999|   472k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   472k|    }
 4001|   472k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  27.3M|    {
 3494|  27.3M|        return m_iterator;
 3495|  27.3M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  21.5M|    {
 3494|  21.5M|        return m_iterator;
 3495|  21.5M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  586|  13.8M|    {
  587|  13.8M|        return m_has_value;
  588|  13.8M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  569|  2.69M|    {
  570|  2.69M|        return m_unexpected;
  571|  2.69M|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1759|   329k|    {
 1760|   329k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   329k|        return this->get_unexpected().error();
 1762|   329k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7096|  1.61M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7140|  1.19M|    {
 7141|  1.19M|        m_specs.type = type;
 7142|  1.19M|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7213|  1.61M|    {
 7214|  1.61M|        return m_error;
 7215|  1.61M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3935|  2.50M|{
 3936|  2.50M|    return unexpected(scan_error{c, m});
 3937|  2.50M|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4325|  4.29M|{
 4326|       |    // Pattern_White_Space property
 4327|  4.29M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4327:13): [True: 4.12M, False: 169k]
  |  Branch (4327:27): [True: 396k, False: 3.73M]
  ------------------
 4328|  4.29M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4328:12): [True: 28.7k, False: 3.87M]
  ------------------
 4329|  4.29M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4329:12): [True: 51.7k, False: 3.82M]
  ------------------
 4330|  4.29M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4330:12): [True: 3.81k, False: 3.81M]
  ------------------
 4331|  4.29M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4331:12): [True: 24.2k, False: 3.79M]
  ------------------
 4332|  4.29M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4332:12): [True: 970k, False: 2.82M]
  ------------------
 4333|  4.29M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4333:12): [True: 348, False: 2.82M]
  ------------------
 4334|  4.29M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7896|   419k|{
 7897|   419k|    switch (type) {
 7898|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7898:9): [True: 0, False: 419k]
  ------------------
 7899|      0|            return arg_type_category::none;
 7900|       |
 7901|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7901:9): [True: 0, False: 419k]
  ------------------
 7902|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7902:9): [True: 0, False: 419k]
  ------------------
 7903|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7903:9): [True: 0, False: 419k]
  ------------------
 7904|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7904:9): [True: 0, False: 419k]
  ------------------
 7905|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7905:9): [True: 0, False: 419k]
  ------------------
 7906|      0|        case arg_type::int128_type:
  ------------------
  |  Branch (7906:9): [True: 0, False: 419k]
  ------------------
 7907|      0|            return arg_type_category::integer;
 7908|       |
 7909|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7909:9): [True: 0, False: 419k]
  ------------------
 7910|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7910:9): [True: 0, False: 419k]
  ------------------
 7911|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7911:9): [True: 0, False: 419k]
  ------------------
 7912|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7912:9): [True: 0, False: 419k]
  ------------------
 7913|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7913:9): [True: 0, False: 419k]
  ------------------
 7914|      0|        case arg_type::uint128_type:
  ------------------
  |  Branch (7914:9): [True: 0, False: 419k]
  ------------------
 7915|      0|            return arg_type_category::unsigned_integer;
 7916|       |
 7917|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7917:9): [True: 0, False: 419k]
  ------------------
 7918|      0|            return arg_type_category::pointer;
 7919|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7919:9): [True: 0, False: 419k]
  ------------------
 7920|      0|            return arg_type_category::boolean;
 7921|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7921:9): [True: 0, False: 419k]
  ------------------
 7922|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7922:9): [True: 0, False: 419k]
  ------------------
 7923|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7923:9): [True: 0, False: 419k]
  ------------------
 7924|      0|            return arg_type_category::character;
 7925|       |
 7926|   129k|        case arg_type::float_type:
  ------------------
  |  Branch (7926:9): [True: 129k, False: 289k]
  ------------------
 7927|   272k|        case arg_type::double_type:
  ------------------
  |  Branch (7927:9): [True: 142k, False: 277k]
  ------------------
 7928|   419k|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7928:9): [True: 147k, False: 272k]
  ------------------
 7929|   419k|        case arg_type::float16_type:
  ------------------
  |  Branch (7929:9): [True: 0, False: 419k]
  ------------------
 7930|   419k|        case arg_type::float32_type:
  ------------------
  |  Branch (7930:9): [True: 0, False: 419k]
  ------------------
 7931|   419k|        case arg_type::float64_type:
  ------------------
  |  Branch (7931:9): [True: 0, False: 419k]
  ------------------
 7932|   419k|        case arg_type::float128_type:
  ------------------
  |  Branch (7932:9): [True: 0, False: 419k]
  ------------------
 7933|   419k|        case arg_type::bfloat16_type:
  ------------------
  |  Branch (7933:9): [True: 0, False: 419k]
  ------------------
 7934|   419k|            return arg_type_category::floating;
 7935|       |
 7936|      0|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7936:9): [True: 0, False: 419k]
  ------------------
 7937|      0|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7937:9): [True: 0, False: 419k]
  ------------------
 7938|      0|        case arg_type::string_view_type:
  ------------------
  |  Branch (7938:9): [True: 0, False: 419k]
  ------------------
 7939|      0|            return arg_type_category::string;
 7940|       |
 7941|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7941:9): [True: 0, False: 419k]
  ------------------
 7942|      0|            return arg_type_category::custom;
 7943|       |
 7944|      0|            SCN_CLANG_PUSH
 7945|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7946|      0|        default:
  ------------------
  |  Branch (7946:9): [True: 0, False: 419k]
  ------------------
 7947|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7948|   419k|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7949|   419k|            SCN_CLANG_POP
 7950|   419k|    }
 7951|       |
 7952|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7953|   419k|}
_ZNO3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1769|  2.36M|    {
 1770|  2.36M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  2.36M|        return std::move(this->get_unexpected().error());
 1772|  2.36M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEmEENS6_9enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|  1.81M|    {
 3055|  1.81M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  1.81M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  1.81M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSE_:
 3088|  1.81M|    {
 3089|  1.81M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  1.81M|    }
_ZN3scn2v46ranges6detail6ssize_2fn4implIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTcmclL_ZNS1_4sizeEEclsr3stdE7forwardIT_Efp_EEcvNS6_11conditionalIXltstNS6_9enable_ifIX5rangeISE_EENS1_20incrementable_traitsIDTclL_ZNS1_5beginEEclsr3stdE7declvalIRSE_EEEEE15difference_typeEE4typeELm8EElSN_E4typeE_EEOSE_:
 3111|  1.81M|    {
 3112|  1.81M|        return static_cast<ssize_return_t<T>>(ranges::size(std::forward<T>(t)));
 3113|  1.81M|    }
_ZNK3scn2v46ranges6detail6ssize_2fnclIRNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EEEOSE_:
 3120|  1.81M|    {
 3121|  1.81M|        return fn::impl(std::forward<T>(t));
 3122|  1.81M|    }
_ZN3scn2v46detail22check_float_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8032|  1.61M|{
 8033|  1.61M|    if (specs.type != presentation_type::none &&
  ------------------
  |  Branch (8033:9): [True: 1.19M, False: 419k]
  ------------------
 8034|  1.61M|        (specs.type < presentation_type::float_hex ||
  ------------------
  |  Branch (8034:10): [True: 0, False: 1.19M]
  ------------------
 8035|  1.19M|         specs.type > presentation_type::float_general)) {
  ------------------
  |  Branch (8035:10): [True: 0, False: 1.19M]
  ------------------
 8036|      0|        SCN_UNLIKELY_ATTR
 8037|      0|        return handler.on_error("Invalid type specifier for float type");
 8038|      0|    }
 8039|  1.61M|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1753|  11.1M|    {
 1754|  11.1M|        return has_value();
 1755|  11.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4490|   141M|    {
 4491|   141M|        assert(m_begin);
 4492|   141M|        return m_end == nullptr;
 4493|   141M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4507|  2.29M|    {
 4508|  2.29M|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 0, False: 2.29M]
  ------------------
 4509|      0|            return make_string_view_from_pointers(
 4510|      0|                static_cast<const CharT*>(m_begin) + position(),
 4511|      0|                static_cast<const CharT*>(m_end));
 4512|      0|        }
 4513|  2.29M|        return parent()->get_segment_starting_at(position());
 4514|  2.29M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4501|  78.1M|    {
 4502|  78.1M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  78.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  78.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|  78.1M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|  78.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4394|  2.29M|    {
 4395|  2.29M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  2.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 980k, False: 1.31M]
  |  |  ------------------
  ------------------
 4396|  2.29M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4397|   980k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4398|   980k|        }
 4399|  1.31M|        const auto start = pos - m_putback_buffer.size();
 4400|  1.31M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1104|  1.31M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.31M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4401|  1.31M|        return m_current_view.substr(start);
 4402|  1.31M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4496|  1.61M|    {
 4497|  1.61M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  1.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4498|  1.61M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4499|  1.61M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4485|  4.19M|    {
 4486|  4.19M|        return m_position;
 4487|  4.19M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4416|  1.86M|    {
 4417|  1.86M|        return m_is_contiguous;
 4418|  1.86M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4490|  69.9M|    {
 4491|  69.9M|        assert(m_begin);
 4492|  69.9M|        return m_end == nullptr;
 4493|  69.9M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   354k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   354k|    else {
 3999|   354k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   354k|    }
 4001|   354k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4507|  1.25M|    {
 4508|  1.25M|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 0, False: 1.25M]
  ------------------
 4509|      0|            return make_string_view_from_pointers(
 4510|      0|                static_cast<const CharT*>(m_begin) + position(),
 4511|      0|                static_cast<const CharT*>(m_end));
 4512|      0|        }
 4513|  1.25M|        return parent()->get_segment_starting_at(position());
 4514|  1.25M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4501|  37.4M|    {
 4502|  37.4M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  37.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  37.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|  37.4M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|  37.4M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4394|  1.25M|    {
 4395|  1.25M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 726k, False: 526k]
  |  |  ------------------
  ------------------
 4396|  1.25M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4397|   726k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4398|   726k|        }
 4399|   526k|        const auto start = pos - m_putback_buffer.size();
 4400|   526k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1104|   526k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   526k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4401|   526k|        return m_current_view.substr(start);
 4402|   526k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4496|  1.33M|    {
 4497|  1.33M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  1.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4498|  1.33M|        return static_cast<basic_scan_buffer<CharT>*>(m_begin);
 4499|  1.33M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4485|  2.72M|    {
 4486|  2.72M|        return m_position;
 4487|  2.72M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4416|  1.52M|    {
 4417|  1.52M|        return m_is_contiguous;
 4418|  1.52M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3347|  3.45M|    {
 3348|  3.45M|        return static_cast<D&>(*this);
 3349|  3.45M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3388|  3.45M|    {
 3389|  3.45M|        return detail::to_address(ranges::begin(derived()));
 3390|  3.45M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3347|  1.18M|    {
 3348|  1.18M|        return static_cast<D&>(*this);
 3349|  1.18M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3388|  1.18M|    {
 3389|  1.18M|        return detail::to_address(ranges::begin(derived()));
 3390|  1.18M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 9051|   454k|    {
 9052|   454k|        return ranges::subrange{begin(), end()};
 9053|   454k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 9043|   454k|    {
 9044|   454k|        return ranges::default_sentinel;
 9045|   454k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|  6.64M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  6.64M|    static_cast<    \
  |  | 1109|  6.64M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  6.64M|    static_cast<    \
  |  | 1109|  6.64M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  6.64M|    {
 3480|  6.64M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8870|  3.42M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|   623k|    {
 1993|   623k|        return detail::transform_error_impl(std::move(*this),
 1994|   623k|                                            std::forward<F>(f));
 1995|   623k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   623k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   623k|    else {
 1486|   623k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   623k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   623k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 613k, False: 10.1k]
  |  |  ------------------
  ------------------
 1488|   623k|                   ? result(*std::forward<Exp>(exp))
 1489|   623k|                   : result(unexpect,
 1490|  10.1k|                            trivial_invoke(std::forward<F>(f),
 1491|  10.1k|                                           std::forward<Exp>(exp).error()));
 1492|   623k|    }
 1493|   623k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  6.47M|    {
  505|  6.47M|        return m_has_value;
  506|  6.47M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  2.20M|    {
 1819|  2.20M|        return std::move(value());
 1820|  2.20M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  2.49M|    {
 1783|  2.49M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.49M|        return this->get_value();
 1785|  2.49M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  2.49M|    {
  471|  2.49M|        return m_value;
  472|  2.49M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|  2.67M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.67M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.67M|    {
 1586|  2.67M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  2.67M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.67M|    {
  457|  2.67M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.52M|    {
 1330|  3.52M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|  28.0k|{
 1364|  28.0k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  28.0k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  37.8k|    {
 1770|  37.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  37.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  37.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  37.8k|        return std::move(this->get_unexpected().error());
 1772|  37.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  48.8k|    {
  488|  48.8k|        return m_unexpected;
  489|  48.8k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  379|   369k|    {
  380|   369k|        return m_unexpected;
  381|   369k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|   625k|        : base(unexpect, std::forward<Args>(args)...),
 1640|   625k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|   625k|    {
 1642|   625k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   806k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   806k|          m_has_value(false)
  466|   806k|    {
  467|   806k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 9051|   370k|    {
 9052|   370k|        return ranges::subrange{begin(), end()};
 9053|   370k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 9043|   370k|    {
 9044|   370k|        return ranges::default_sentinel;
 9045|   370k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|  5.24M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  5.24M|    static_cast<    \
  |  | 1109|  5.24M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  5.24M|    static_cast<    \
  |  | 1109|  5.24M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  5.24M|    {
 3480|  5.24M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|   507k|    {
 1993|   507k|        return detail::transform_error_impl(std::move(*this),
 1994|   507k|                                            std::forward<F>(f));
 1995|   507k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   507k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   507k|    else {
 1486|   507k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   507k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   507k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 503k, False: 3.98k]
  |  |  ------------------
  ------------------
 1488|   507k|                   ? result(*std::forward<Exp>(exp))
 1489|   507k|                   : result(unexpect,
 1490|  3.98k|                            trivial_invoke(std::forward<F>(f),
 1491|  3.98k|                                           std::forward<Exp>(exp).error()));
 1492|   507k|    }
 1493|   507k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  4.92M|    {
  505|  4.92M|        return m_has_value;
  506|  4.92M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  1.78M|    {
 1819|  1.78M|        return std::move(value());
 1820|  1.78M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  1.80M|    {
 1783|  1.80M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.80M|        return this->get_value();
 1785|  1.80M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  1.80M|    {
  471|  1.80M|        return m_value;
  472|  1.80M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|  1.88M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.88M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.88M|    {
 1586|  1.88M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  1.88M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.88M|    {
  457|  1.88M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.89M|    {
 1330|  2.89M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  58.3k|    {
 1770|  58.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  58.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  58.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  58.3k|        return std::move(this->get_unexpected().error());
 1772|  58.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  60.5k|    {
  488|  60.5k|        return m_unexpected;
  489|  60.5k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|   634k|        : base(unexpect, std::forward<Args>(args)...),
 1640|   634k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|   634k|    {
 1642|   634k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  1.00M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.00M|          m_has_value(false)
  466|  1.00M|    {
  467|  1.00M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  364|  2.50M|        : m_unexpected(std::forward<Err>(e))
  365|  2.50M|    {
  366|  2.50M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  2.50M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  2.50M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   632k|        : base(unexpect, std::move(e.error())),
 1630|   632k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   632k|    {
 1632|   632k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  464|   632k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   632k|          m_has_value(false)
  466|   632k|    {
  467|   632k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.07M|    {
 1330|  6.07M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|   163k|        : base(unexpect, std::move(e.error())),
 1630|   163k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   163k|    {
 1632|   163k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|   730k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   730k|          m_has_value(false)
  466|   730k|    {
  467|   730k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.36M|    {
 1330|  3.36M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|  2.59M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.59M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.59M|    {
 1586|  2.59M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  2.59M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.59M|    {
  457|  2.59M|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1753|  3.94M|    {
 1754|  3.94M|        return has_value();
 1755|  3.94M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  504|  6.21M|    {
  505|  6.21M|        return m_has_value;
  506|  6.21M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1759|   191k|    {
 1760|   191k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   191k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   191k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   191k|        return this->get_unexpected().error();
 1762|   191k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   191k|    {
  488|   191k|        return m_unexpected;
  489|   191k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|  1.68M|    {
 1819|  1.68M|        return std::move(value());
 1820|  1.68M|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|  2.07M|    {
 1783|  2.07M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.07M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.07M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.07M|        return this->get_value();
 1785|  2.07M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  470|  2.07M|    {
  471|  2.07M|        return m_value;
  472|  2.07M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|   305k|        : base(unexpect, std::move(e.error())),
 1630|   305k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   305k|    {
 1632|   305k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|   871k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   871k|          m_has_value(false)
  466|   871k|    {
  467|   871k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.89M|    {
 1330|  2.89M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|  2.02M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.02M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.02M|    {
 1586|  2.02M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  2.02M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.02M|    {
  457|  2.02M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1753|  3.39M|    {
 1754|  3.39M|        return has_value();
 1755|  3.39M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  504|  5.34M|    {
  505|  5.34M|        return m_has_value;
  506|  5.34M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1759|   367k|    {
 1760|   367k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   367k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   367k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   367k|        return this->get_unexpected().error();
 1762|   367k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   367k|    {
  488|   367k|        return m_unexpected;
  489|   367k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|  1.31M|    {
 1819|  1.31M|        return std::move(value());
 1820|  1.31M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|  1.58M|    {
 1783|  1.58M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.58M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.58M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.58M|        return this->get_value();
 1785|  1.58M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  470|  1.58M|    {
  471|  1.58M|        return m_value;
  472|  1.58M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|   588k|    {
 1993|   588k|        return detail::transform_error_impl(std::move(*this),
 1994|   588k|                                            std::forward<F>(f));
 1995|   588k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|   588k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   588k|    else {
 1486|   588k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   588k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   588k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 580k, False: 8.23k]
  |  |  ------------------
  ------------------
 1488|   588k|                   ? result(*std::forward<Exp>(exp))
 1489|   588k|                   : result(unexpect,
 1490|  8.23k|                            trivial_invoke(std::forward<F>(f),
 1491|  8.23k|                                           std::forward<Exp>(exp).error()));
 1492|   588k|    }
 1493|   588k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  2.26M|    {
  505|  2.26M|        return m_has_value;
  506|  2.26M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|   580k|    {
 1819|   580k|        return std::move(value());
 1820|   580k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|   767k|    {
 1783|   767k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   767k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   767k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   767k|        return this->get_value();
 1785|   767k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|   767k|    {
  471|   767k|        return m_value;
  472|   767k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1769|  8.23k|    {
 1770|  8.23k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  8.23k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  8.23k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  8.23k|        return std::move(this->get_unexpected().error());
 1772|  8.23k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  12.9k|    {
  488|  12.9k|        return m_unexpected;
  489|  12.9k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|   566k|        : base(unexpect, std::forward<Args>(args)...),
 1640|   566k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|   566k|    {
 1642|   566k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 9035|  1.30M|    {
 9036|  1.30M|        return m_current;
 9037|  1.30M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8928|   873k|    {
 8929|   873k|        return m_locale;
 8930|   873k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8934|   873k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   873k|    static_cast<    \
  |  | 1109|   873k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   873k|    static_cast<    \
  |  | 1109|   873k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   873k|    {
 8936|   873k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   943k|    {
 3014|   943k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   943k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   943k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcEENS6_9enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   943k|    {
 2995|   943k|        return t.data();
 2996|   943k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|   180k|        : base(unexpect, std::move(e.error())),
 1630|   180k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   180k|    {
 1632|   180k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRS5_vEEOT_:
 1583|  47.2k|        : base(std::in_place, std::forward<U>(val)),
 1584|  47.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  47.2k|    {
 1586|  47.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|  47.2k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  47.2k|    {
  457|  47.2k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 9035|  1.00M|    {
 9036|  1.00M|        return m_current;
 9037|  1.00M|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8928|   741k|    {
 8929|   741k|        return m_locale;
 8930|   741k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8934|   741k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   741k|    static_cast<    \
  |  | 1109|   741k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   741k|    static_cast<    \
  |  | 1109|   741k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   741k|    {
 8936|   741k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|   374k|        : base(unexpect, std::move(e.error())),
 1630|   374k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   374k|    {
 1632|   374k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|  2.69M|        : base(unexpect, std::move(e.error())),
 1630|  2.69M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.69M|    {
 1632|  2.69M|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  563|  2.69M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  564|  2.69M|          m_has_value(false)
  565|  2.69M|    {
  566|  2.69M|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.69M|    {
 1330|  2.69M|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1565|  9.49M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  543|  9.49M|        : m_deferred_init(), m_has_value(true)
  544|  9.49M|    {
  545|  9.49M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|  5.32M|    {
 4577|  5.32M|        return x.is_at_end();
 4578|  5.32M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4620|  11.4M|    {
 4621|  11.4M|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 11.4M]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|  11.4M|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 11.4M]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|  11.4M|        return !read_at_position();
 4628|  11.4M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4600|  45.5M|    {
 4601|  45.5M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  45.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  45.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|  45.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 45.5M]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|  45.5M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|  45.5M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 39.4M, False: 6.11M]
  |  |  ------------------
  ------------------
 4608|  39.4M|            return true;
 4609|  39.4M|        }
 4610|       |
 4611|  12.0M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 6.11M, False: 5.93M]
  ------------------
 4612|  6.11M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 180k, False: 5.93M]
  ------------------
 4613|   180k|                return false;
 4614|   180k|            }
 4615|  6.11M|        }
 4616|  5.93M|        return true;
 4617|  6.11M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4535|  12.1M|    {
 4536|  12.1M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  12.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  12.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|  12.1M|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 12.1M]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|  12.1M|        auto res = read_at_position();
 4545|  12.1M|        SCN_EXPECT(res);
  ------------------
  |  | 1104|  12.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  12.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|  12.1M|        return parent()->get_character_at(m_position);
 4547|  12.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4405|  12.1M|    {
 4406|  12.1M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  12.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8.30M, False: 3.83M]
  |  |  ------------------
  ------------------
 4407|  12.1M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|  8.30M|            return m_putback_buffer[pos];
 4409|  8.30M|        }
 4410|  3.83M|        const auto start = pos - m_putback_buffer.size();
 4411|  3.83M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|  3.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|  3.83M|        return m_current_view[start];
 4413|  3.83M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|  3.88M|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.88M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.88M|    {
 1586|  3.88M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  3.88M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.88M|    {
  457|  3.88M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.93M|    {
 1330|  3.93M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IS3_vEEOT_:
  364|   138k|        : m_unexpected(std::forward<Err>(e))
  365|   138k|    {
  366|   138k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   138k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|   138k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  48.8k|        : base(unexpect, std::move(e.error())),
 1630|  48.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  48.8k|    {
 1632|  48.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  48.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  48.8k|          m_has_value(false)
  466|  48.8k|    {
  467|  48.8k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|   185k|        : m_unexpected(std::forward<Args>(args)...)
  374|   185k|    {
  375|   185k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   185k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|   185k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4521|  22.0M|    {
 4522|  22.0M|        ++m_position;
 4523|  22.0M|        (void)read_at_position();
 4524|  22.0M|        return *this;
 4525|  22.0M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1753|  1.69M|    {
 1754|  1.69M|        return has_value();
 1755|  1.69M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|   287k|    {
 1809|   287k|        return value();
 1810|   287k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4570|  10.2M|    {
 4571|  10.2M|        return !(lhs == rhs);
 4572|  10.2M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4565|  11.7M|    {
 4566|  11.7M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 11.7M, False: 0]
  |  Branch (4566:46): [True: 2.01M, False: 9.74M]
  ------------------
 4567|  11.7M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  364|  46.4k|        : m_unexpected(std::forward<Err>(e))
  365|  46.4k|    {
  366|  46.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  46.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  46.4k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  7.80k|        : base(unexpect, std::move(e.error())),
 1630|  7.80k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  7.80k|    {
 1632|  7.80k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|  7.80k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  7.80k|          m_has_value(false)
  466|  7.80k|    {
  467|  7.80k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   849k|    {
 1330|   849k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   841k|        : base(std::in_place, std::forward<U>(val)),
 1584|   841k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   841k|    {
 1586|   841k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  455|   841k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   841k|    {
  457|   841k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1753|   849k|    {
 1754|   849k|        return has_value();
 1755|   849k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.69M|    {
  505|  1.69M|        return m_has_value;
  506|  1.69M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1759|  7.80k|    {
 1760|  7.80k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  7.80k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.80k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  7.80k|        return this->get_unexpected().error();
 1762|  7.80k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  7.80k|    {
  488|  7.80k|        return m_unexpected;
  489|  7.80k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   841k|    {
 1819|   841k|        return std::move(value());
 1820|   841k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   841k|    {
 1783|   841k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   841k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   841k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   841k|        return this->get_value();
 1785|   841k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  470|   841k|    {
  471|   841k|        return m_value;
  472|   841k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  16.9M|    {
 3498|  16.9M|        return m_sentinel;
 3499|  16.9M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IS3_vEEOT_:
  364|  47.1k|        : m_unexpected(std::forward<Err>(e))
  365|  47.1k|    {
  366|  47.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  47.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  47.1k|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_errorEE5errorEv:
  379|  9.04M|    {
  380|  9.04M|        return m_unexpected;
  381|  9.04M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|  2.50M|        : m_unexpected(std::forward<Args>(args)...)
  374|  2.50M|    {
  375|  2.50M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  2.50M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  2.50M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_error4codeEEC2IS4_vEEOT_:
  364|  10.8M|        : m_unexpected(std::forward<Err>(e))
  365|  10.8M|    {
  366|  10.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  10.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  10.8M|    }
_ZNR3scn2v410unexpectedINS0_4impl11parse_error4codeEE5errorEv:
  379|  10.8M|    {
  380|  10.8M|        return m_unexpected;
  381|  10.8M|    }
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IJNS3_4codeEEvEENSt3__110in_place_tEDpOT_:
  373|  10.8M|        : m_unexpected(std::forward<Args>(args)...)
  374|  10.8M|    {
  375|  10.8M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  10.8M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  10.8M|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_4impl11parse_errorENS3_9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|   136k|{
 1364|   136k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|   136k|}
_ZN3scn2v410unexpectedINS0_4impl11parse_errorEEC2IRS3_vEEOT_:
  364|  2.32M|        : m_unexpected(std::forward<Err>(e))
  365|  2.32M|    {
  366|  2.32M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  2.32M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  2.32M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1759|  10.9k|    {
 1760|  10.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  10.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  10.9k|        return this->get_unexpected().error();
 1762|  10.9k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|   644k|        : base(unexpect, std::move(e.error())),
 1630|   644k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   644k|    {
 1632|   644k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|   671k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   671k|          m_has_value(false)
  466|   671k|    {
  467|   671k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  6.68M|    {
 1330|  6.68M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1583|   290k|        : base(std::in_place, std::forward<U>(val)),
 1584|   290k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   290k|    {
 1586|   290k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|   290k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   290k|    {
  457|   290k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  3.41M|        : base(unexpect, std::move(e.error())),
 1630|  3.41M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  3.41M|    {
 1632|  3.41M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  3.41M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  3.41M|          m_has_value(false)
  466|  3.41M|    {
  467|  3.41M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1753|  7.29M|    {
 1754|  7.29M|        return has_value();
 1755|  7.29M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  12.8M|    {
  505|  12.8M|        return m_has_value;
  506|  12.8M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1759|  1.75M|    {
 1760|  1.75M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.75M|        return this->get_unexpected().error();
 1762|  1.75M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  1.75M|    {
  488|  1.75M|        return m_unexpected;
  489|  1.75M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1583|   654k|        : base(std::in_place, std::forward<U>(val)),
 1584|   654k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   654k|    {
 1586|   654k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|   654k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   654k|    {
  457|   654k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   654k|    {
 1330|   654k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1629|    212|        : base(unexpect, std::move(e.error())),
 1630|    212|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    212|    {
 1632|    212|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  464|    212|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    212|          m_has_value(false)
  466|    212|    {
  467|    212|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|  1.60M|    {
 1809|  1.60M|        return value();
 1810|  1.60M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  3.19M|    {
 1783|  3.19M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  3.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  3.19M|        return this->get_value();
 1785|  3.19M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  3.19M|    {
  471|  3.19M|        return m_value;
  472|  3.19M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1753|  41.5k|    {
 1754|  41.5k|        return has_value();
 1755|  41.5k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  504|  1.30M|    {
  505|  1.30M|        return m_has_value;
  506|  1.30M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|   613k|    {
 1819|   613k|        return std::move(value());
 1820|   613k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|   654k|    {
 1783|   654k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   654k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   654k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   654k|        return this->get_value();
 1785|   654k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  470|   654k|    {
  471|   654k|        return m_value;
  472|   654k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  1.61M|    {
 1993|  1.61M|        return detail::transform_error_impl(std::move(*this),
 1994|  1.61M|                                            std::forward<F>(f));
 1995|  1.61M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|  1.61M|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.61M|    else {
 1486|  1.61M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.61M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.61M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.59M, False: 27.7k]
  |  |  ------------------
  ------------------
 1488|  1.61M|                   ? result(*std::forward<Exp>(exp))
 1489|  1.61M|                   : result(unexpect,
 1490|  27.7k|                            trivial_invoke(std::forward<F>(f),
 1491|  27.7k|                                           std::forward<Exp>(exp).error()));
 1492|  1.61M|    }
 1493|  1.61M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1583|  2.30M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.30M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.30M|    {
 1586|  2.30M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  2.30M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.30M|    {
  457|  2.30M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1639|  27.7k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  27.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  27.7k|    {
 1642|  27.7k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  1.59M|    {
 1819|  1.59M|        return std::move(value());
 1820|  1.59M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|  4.12M|    {
 1754|  4.12M|        return has_value();
 1755|  4.12M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|  6.52M|    {
  505|  6.52M|        return m_has_value;
  506|  6.52M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|   235k|    {
 1760|   235k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   235k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   235k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   235k|        return this->get_unexpected().error();
 1762|   235k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   235k|    {
  488|   235k|        return m_unexpected;
  489|   235k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  1.72M|    {
 1819|  1.72M|        return std::move(value());
 1820|  1.72M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  2.15M|    {
 1783|  2.15M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.15M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.15M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.15M|        return this->get_value();
 1785|  2.15M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|  2.15M|    {
  471|  2.15M|        return m_value;
  472|  2.15M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3493|   652k|    {
 3494|   652k|        return m_iterator;
 3495|   652k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3497|   652k|    {
 3498|   652k|        return m_sentinel;
 3499|   652k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3478|   525k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   525k|    static_cast<    \
  |  | 1109|   525k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   525k|    static_cast<    \
  |  | 1109|   525k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   525k|    {
 3480|   525k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|  6.09M|    {
 4588|  6.09M|        return !x.is_at_end();
 4589|  6.09M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  12.9k|        : base(unexpect, std::move(e.error())),
 1630|  12.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.9k|    {
 1632|  12.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  12.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  12.9k|          m_has_value(false)
  466|  12.9k|    {
  467|  12.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.47M|    {
 1330|  1.47M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  1.46M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.46M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.46M|    {
 1586|  1.46M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  1.46M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.46M|    {
  457|  1.46M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl9eof_errorEEcvbEv:
 1753|   891k|    {
 1754|   891k|        return has_value();
 1755|   891k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|   187k|    {
 1809|   187k|        return value();
 1810|   187k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  5.98k|        : base(unexpect, std::move(e.error())),
 1630|  5.98k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  5.98k|    {
 1632|  5.98k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  5.98k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  5.98k|          m_has_value(false)
  466|  5.98k|    {
  467|  5.98k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   780k|    {
 1330|   780k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|   774k|        : base(std::in_place, std::forward<U>(val)),
 1584|   774k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   774k|    {
 1586|   774k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|   774k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   774k|    {
  457|   774k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1753|   780k|    {
 1754|   780k|        return has_value();
 1755|   780k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.56M|    {
  505|  1.56M|        return m_has_value;
  506|  1.56M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1759|  5.98k|    {
 1760|  5.98k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  5.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  5.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  5.98k|        return this->get_unexpected().error();
 1762|  5.98k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  5.98k|    {
  488|  5.98k|        return m_unexpected;
  489|  5.98k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   774k|    {
 1819|   774k|        return std::move(value());
 1820|   774k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   774k|    {
 1783|   774k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   774k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   774k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   774k|        return this->get_value();
 1785|   774k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  470|   774k|    {
  471|   774k|        return m_value;
  472|   774k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1759|  4.74k|    {
 1760|  4.74k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  4.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  4.74k|        return this->get_unexpected().error();
 1762|  4.74k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|   606k|        : base(unexpect, std::move(e.error())),
 1630|   606k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   606k|    {
 1632|   606k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   606k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   606k|          m_has_value(false)
  466|   606k|    {
  467|   606k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.33M|    {
 1330|  3.33M|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1583|   190k|        : base(std::in_place, std::forward<U>(val)),
 1584|   190k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   190k|    {
 1586|   190k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|   190k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   190k|    {
  457|   190k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  2.28M|        : base(unexpect, std::move(e.error())),
 1630|  2.28M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.28M|    {
 1632|  2.28M|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  2.28M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.28M|          m_has_value(false)
  466|  2.28M|    {
  467|  2.28M|    }
_ZNK3scn2v48expectedIPKcNS0_4impl11parse_errorEEcvbEv:
 1753|  3.91M|    {
 1754|  3.91M|        return has_value();
 1755|  3.91M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  6.67M|    {
  505|  6.67M|        return m_has_value;
  506|  6.67M|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5errorEv:
 1759|  1.60M|    {
 1760|  1.60M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.60M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.60M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.60M|        return this->get_unexpected().error();
 1762|  1.60M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  1.60M|    {
  488|  1.60M|        return m_unexpected;
  489|  1.60M|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1583|   604k|        : base(std::in_place, std::forward<U>(val)),
 1584|   604k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   604k|    {
 1586|   604k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   604k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   604k|    {
  457|   604k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   606k|    {
 1330|   606k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  1.75k|        : base(unexpect, std::move(e.error())),
 1630|  1.75k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.75k|    {
 1632|  1.75k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  1.75k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.75k|          m_has_value(false)
  466|  1.75k|    {
  467|  1.75k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|   606k|    {
 1809|   606k|        return value();
 1810|   606k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|   606k|    {
 1783|   606k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   606k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   606k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   606k|        return this->get_value();
 1785|   606k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EE9get_valueEv:
  470|   606k|    {
  471|   606k|        return m_value;
  472|   606k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1753|  25.8k|    {
 1754|  25.8k|        return has_value();
 1755|  25.8k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  504|  1.21M|    {
  505|  1.21M|        return m_has_value;
  506|  1.21M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5errorEv:
 1759|  1.69k|    {
 1760|  1.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.69k|        return this->get_unexpected().error();
 1762|  1.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE14get_unexpectedEv:
  487|  1.69k|    {
  488|  1.69k|        return m_unexpected;
  489|  1.69k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  1.69k|        : base(unexpect, std::move(e.error())),
 1630|  1.69k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.69k|    {
 1632|  1.69k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  1.69k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.69k|          m_has_value(false)
  466|  1.69k|    {
  467|  1.69k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.7k|    {
 1330|  12.7k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   591k|    {
 1819|   591k|        return std::move(value());
 1820|   591k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   604k|    {
 1783|   604k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   604k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   604k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   604k|        return this->get_value();
 1785|   604k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  470|   604k|    {
  471|   604k|        return m_value;
  472|   604k|    }
_ZN3scn2v48expectedIPKcNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1583|   247k|        : base(std::in_place, std::forward<U>(val)),
 1584|   247k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   247k|    {
 1586|   247k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|   247k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   247k|    {
  457|   247k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEC2IS6_vEEOT_:
 1583|  11.0k|        : base(std::in_place, std::forward<U>(val)),
 1584|  11.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  11.0k|    {
 1586|  11.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|  11.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  11.0k|    {
  457|  11.0k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  12.7k|    {
 1993|  12.7k|        return detail::transform_error_impl(std::move(*this),
 1994|  12.7k|                                            std::forward<F>(f));
 1995|  12.7k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS4_9eof_errorEEERFNS0_10scan_errorES9_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSG_OT0_:
 1475|  12.7k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  12.7k|    else {
 1486|  12.7k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  12.7k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  12.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 11.0k, False: 1.69k]
  |  |  ------------------
  ------------------
 1488|  12.7k|                   ? result(*std::forward<Exp>(exp))
 1489|  12.7k|                   : result(unexpect,
 1490|  1.69k|                            trivial_invoke(std::forward<F>(f),
 1491|  1.69k|                                           std::forward<Exp>(exp).error()));
 1492|  12.7k|    }
 1493|  12.7k|}
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9has_valueEv:
  504|  25.5k|    {
  505|  25.5k|        return m_has_value;
  506|  25.5k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  11.0k|    {
 1819|  11.0k|        return std::move(value());
 1820|  11.0k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  11.0k|    {
 1783|  11.0k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  11.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  11.0k|        return this->get_value();
 1785|  11.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE9get_valueEv:
  470|  11.0k|    {
  471|  11.0k|        return m_value;
  472|  11.0k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|  11.0k|        : base(std::in_place, std::forward<U>(val)),
 1584|  11.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  11.0k|    {
 1586|  11.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS7_EvEENSt3__110in_place_tEDpOT_:
  455|  11.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  11.0k|    {
  457|  11.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  12.7k|    {
 1330|  12.7k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS2_9eof_errorEE5errorEv:
 1769|  1.69k|    {
 1770|  1.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  1.69k|        return std::move(this->get_unexpected().error());
 1772|  1.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS3_9eof_errorELb1EE14get_unexpectedEv:
  487|  1.69k|    {
  488|  1.69k|        return m_unexpected;
  489|  1.69k|    }
_ZN3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1639|  1.69k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  1.69k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  1.69k|    {
 1642|  1.69k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  1.69k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.69k|          m_has_value(false)
  466|  1.69k|    {
  467|  1.69k|    }
_ZNK3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEcvbEv:
 1753|  12.7k|    {
 1754|  12.7k|        return has_value();
 1755|  12.7k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9has_valueEv:
  504|  25.5k|    {
  505|  25.5k|        return m_has_value;
  506|  25.5k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5errorEv:
 1759|  1.69k|    {
 1760|  1.69k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.69k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.69k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.69k|        return this->get_unexpected().error();
 1762|  1.69k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  1.69k|    {
  488|  1.69k|        return m_unexpected;
  489|  1.69k|    }
_ZNO3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEEdeIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  11.0k|    {
 1819|  11.0k|        return std::move(value());
 1820|  11.0k|    }
_ZNR3scn2v48expectedINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorEE5valueIS6_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  11.0k|    {
 1783|  11.0k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  11.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  11.0k|        return this->get_value();
 1785|  11.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_4impl27parse_integer_prefix_resultIPKcEENS0_10scan_errorELb1EE9get_valueEv:
  470|  11.0k|    {
  471|  11.0k|        return m_value;
  472|  11.0k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  1.95M|    {
 3014|  1.95M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  1.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  1.95M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  1.95M|    {
 2995|  1.95M|        return t.data();
 2996|  1.95M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1583|  5.37M|        : base(std::in_place, std::forward<U>(val)),
 1584|  5.37M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  5.37M|    {
 1586|  5.37M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  455|  5.37M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  5.37M|    {
  457|  5.37M|    }
_ZNO3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS7_v:
 1818|  3.62M|    {
 1819|  3.62M|        return std::move(value());
 1820|  3.62M|    }
_ZN3scn2v46detail14trivial_invokeIZNS0_4impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlNS3_11parse_errorEE_JRS8_EvEEDcOT_DpOT0_:
 1363|  2.36M|{
 1364|  2.36M|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  2.36M|}
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1992|   613k|    {
 1993|   613k|        return detail::transform_error_impl(std::move(*this),
 1994|   613k|                                            std::forward<F>(f));
 1995|   613k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1475|   613k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   613k|    else {
 1486|   613k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   613k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   613k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 613k, False: 0]
  |  |  ------------------
  ------------------
 1488|   613k|                   ? result(*std::forward<Exp>(exp))
 1489|   613k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   613k|    }
 1493|   613k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1583|   613k|        : base(std::in_place, std::forward<U>(val)),
 1584|   613k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   613k|    {
 1586|   613k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|   613k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   613k|    {
  457|   613k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   613k|    {
 1330|   613k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|   613k|    {
 1754|   613k|        return has_value();
 1755|   613k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.22M|    {
  505|  1.22M|        return m_has_value;
  506|  1.22M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|   613k|    {
 1819|   613k|        return std::move(value());
 1820|   613k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|   613k|    {
 1783|   613k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   613k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   613k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   613k|        return this->get_value();
 1785|   613k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   613k|    {
  471|   613k|        return m_value;
  472|   613k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   615k|    {
 1979|   615k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|   615k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1475|   615k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   615k|    else {
 1486|   615k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   615k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   615k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 615k]
  |  |  ------------------
  ------------------
 1488|   615k|                   ? result(*std::forward<Exp>(exp))
 1489|   615k|                   : result(unexpect,
 1490|   615k|                            trivial_invoke(std::forward<F>(f),
 1491|   615k|                                           std::forward<Exp>(exp).error()));
 1492|   615k|    }
 1493|   615k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|   434k|    {
 1809|   434k|        return value();
 1810|   434k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3953|   140k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1828|  41.3k|    {
 1829|  41.3k|        return &value();
 1830|  41.3k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2882|   430k|    {
 2883|   430k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   430k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2863|   430k|    {
 2864|   430k|        return decay_copy(t.begin());
 2865|   430k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEEu7__decayIT_EOS8_:
 2107|   430k|{
 2108|   430k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   430k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   430k|}
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3953|   253k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1992|   580k|    {
 1993|   580k|        return detail::transform_error_impl(std::move(*this),
 1994|   580k|                                            std::forward<F>(f));
 1995|   580k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1475|   580k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   580k|    else {
 1486|   580k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   580k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   580k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 580k, False: 0]
  |  |  ------------------
  ------------------
 1488|   580k|                   ? result(*std::forward<Exp>(exp))
 1489|   580k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   580k|    }
 1493|   580k|}
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   580k|        : base(std::in_place, std::forward<U>(val)),
 1584|   580k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   580k|    {
 1586|   580k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   580k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   580k|    {
  457|   580k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   580k|    {
 1330|   580k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|   580k|    {
 1754|   580k|        return has_value();
 1755|   580k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.16M|    {
  505|  1.16M|        return m_has_value;
  506|  1.16M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   580k|    {
 1819|   580k|        return std::move(value());
 1820|   580k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   580k|    {
 1783|   580k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   580k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   580k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   580k|        return this->get_value();
 1785|   580k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKcNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   580k|    {
  471|   580k|        return m_value;
  472|   580k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeES3_EUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   558k|    {
 1979|   558k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|   558k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKcNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeES5_EUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   558k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   558k|    else {
 1486|   558k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   558k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   558k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 558k]
  |  |  ------------------
  ------------------
 1488|   558k|                   ? result(*std::forward<Exp>(exp))
 1489|   558k|                   : result(unexpect,
 1490|   558k|                            trivial_invoke(std::forward<F>(f),
 1491|   558k|                                           std::forward<Exp>(exp).error()));
 1492|   558k|    }
 1493|   558k|}
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRS3_vEEOT_:
 1583|  45.7k|        : base(std::in_place, std::forward<U>(val)),
 1584|  45.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  45.7k|    {
 1586|  45.7k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|  45.7k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  45.7k|    {
  457|  45.7k|    }
_ZN3scn2v413scan_expectedIPKcEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3928|   558k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|   558k|    static_cast<    \
  |  | 1109|   558k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|   558k|    {
 3930|   558k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|   398k|    {
 1809|   398k|        return value();
 1810|   398k|    }
_ZN3scn2v48expectedINSt3__14pairIPKcNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1828|  12.9k|    {
 1829|  12.9k|        return &value();
 1830|  12.9k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3928|   615k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|   615k|    static_cast<    \
  |  | 1109|   615k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|   615k|    {
 3930|   615k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|  4.31M|    {
 4577|  4.31M|        return x.is_at_end();
 4578|  4.31M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4620|  6.86M|    {
 4621|  6.86M|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 6.86M]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|  6.86M|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 6.86M]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|  6.86M|        return !read_at_position();
 4628|  6.86M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4600|  21.7M|    {
 4601|  21.7M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  21.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|  21.7M|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 21.7M]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|  21.7M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|  21.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 19.1M, False: 2.59M]
  |  |  ------------------
  ------------------
 4608|  19.1M|            return true;
 4609|  19.1M|        }
 4610|       |
 4611|  5.01M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 2.59M, False: 2.41M]
  ------------------
 4612|  2.59M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 184k, False: 2.41M]
  ------------------
 4613|   184k|                return false;
 4614|   184k|            }
 4615|  2.59M|        }
 4616|  2.41M|        return true;
 4617|  2.59M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4374|  28.1M|    {
 4375|  28.1M|        return m_putback_buffer.size() + m_current_view.size();
 4376|  28.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4535|  6.81M|    {
 4536|  6.81M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  6.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|  6.81M|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 6.81M]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|  6.81M|        auto res = read_at_position();
 4545|  6.81M|        SCN_EXPECT(res);
  ------------------
  |  | 1104|  6.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  6.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|  6.81M|        return parent()->get_character_at(m_position);
 4547|  6.81M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4405|  6.81M|    {
 4406|  6.81M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  6.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.75M, False: 1.05M]
  |  |  ------------------
  ------------------
 4407|  6.81M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|  5.75M|            return m_putback_buffer[pos];
 4409|  5.75M|        }
 4410|  1.05M|        const auto start = pos - m_putback_buffer.size();
 4411|  1.05M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|  1.05M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.05M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|  1.05M|        return m_current_view[start];
 4413|  1.05M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|  2.99M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.99M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.99M|    {
 1586|  2.99M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  2.99M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.99M|    {
  457|  2.99M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.05M|    {
 1330|  3.05M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  60.5k|        : base(unexpect, std::move(e.error())),
 1630|  60.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  60.5k|    {
 1632|  60.5k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  60.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  60.5k|          m_has_value(false)
  466|  60.5k|    {
  467|  60.5k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4521|  8.10M|    {
 4522|  8.10M|        ++m_position;
 4523|  8.10M|        (void)read_at_position();
 4524|  8.10M|        return *this;
 4525|  8.10M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEcvbEv:
 1753|  1.21M|    {
 1754|  1.21M|        return has_value();
 1755|  1.21M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|  26.9k|    {
 1809|  26.9k|        return value();
 1810|  26.9k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4570|  3.35M|    {
 4571|  3.35M|        return !(lhs == rhs);
 4572|  3.35M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4565|  4.54M|    {
 4566|  4.54M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 4.54M, False: 0]
  |  Branch (4566:46): [True: 1.44M, False: 3.09M]
  ------------------
 4567|  4.54M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4085|  3.06M|{
 4086|       |    if constexpr (sizeof(U) == 1) {
 4087|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|  3.06M|    else {
 4093|       |        // utf-32
 4094|  3.06M|        static_assert(sizeof(U) == 4);
 4095|  3.06M|        SCN_UNUSED(ch);
  ------------------
  |  | 1089|  3.06M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4096|  3.06M|        return 1;
 4097|  3.06M|    }
 4098|  3.06M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|  3.06M|{
 4292|       |    if constexpr (sizeof(CharT) == 1) {
 4293|       |        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|  3.06M|    else {
 4299|  3.06M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1104|  3.06M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.06M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4300|  3.06M|        auto cp = static_cast<char32_t>(input.front());
 4301|  3.06M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  3.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 157k, False: 2.90M]
  |  |  ------------------
  ------------------
 4302|   157k|            return invalid_code_point;
 4303|   157k|        }
 4304|  2.90M|        return cp;
 4305|  3.06M|    }
 4306|  3.06M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  2.96k|        : base(unexpect, std::move(e.error())),
 1630|  2.96k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.96k|    {
 1632|  2.96k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|  2.96k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.96k|          m_has_value(false)
  466|  2.96k|    {
  467|  2.96k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   634k|    {
 1330|   634k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   631k|        : base(std::in_place, std::forward<U>(val)),
 1584|   631k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   631k|    {
 1586|   631k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  455|   631k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   631k|    {
  457|   631k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1753|   634k|    {
 1754|   634k|        return has_value();
 1755|   634k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.26M|    {
  505|  1.26M|        return m_has_value;
  506|  1.26M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1759|  2.96k|    {
 1760|  2.96k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  2.96k|        return this->get_unexpected().error();
 1762|  2.96k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  2.96k|    {
  488|  2.96k|        return m_unexpected;
  489|  2.96k|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   631k|    {
 1819|   631k|        return std::move(value());
 1820|   631k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   631k|    {
 1783|   631k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   631k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   631k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   631k|        return this->get_value();
 1785|   631k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  470|   631k|    {
  471|   631k|        return m_value;
  472|   631k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  11.2M|    {
 3498|  11.2M|        return m_sentinel;
 3499|  11.2M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1759|  2.21k|    {
 1760|  2.21k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.21k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.21k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  2.21k|        return this->get_unexpected().error();
 1762|  2.21k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|   560k|        : base(unexpect, std::move(e.error())),
 1630|   560k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   560k|    {
 1632|   560k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|   614k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   614k|          m_has_value(false)
  466|   614k|    {
  467|   614k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  5.28M|    {
 1330|  5.28M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IRS5_vEEOT_:
 1583|  26.9k|        : base(std::in_place, std::forward<U>(val)),
 1584|  26.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  26.9k|    {
 1586|  26.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJRS5_EvEENSt3__110in_place_tEDpOT_:
  455|  26.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  26.9k|    {
  457|  26.9k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2INS7_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S7_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|  2.96M|        : base(unexpect, std::move(e.error())),
 1630|  2.96M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.96M|    {
 1632|  2.96M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJNS7_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  2.96M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.96M|          m_has_value(false)
  466|  2.96M|    {
  467|  2.96M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEcvbEv:
 1753|  5.78M|    {
 1754|  5.78M|        return has_value();
 1755|  5.78M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  10.1M|    {
  505|  10.1M|        return m_has_value;
  506|  10.1M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5errorEv:
 1759|  1.70M|    {
 1760|  1.70M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.70M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.70M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.70M|        return this->get_unexpected().error();
 1762|  1.70M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  1.70M|    {
  488|  1.70M|        return m_unexpected;
  489|  1.70M|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISA_vEEOT_:
 1583|   517k|        : base(std::in_place, std::forward<U>(val)),
 1584|   517k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   517k|    {
 1586|   517k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|   517k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   517k|    {
  457|   517k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   517k|    {
 1330|   517k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEC2ISB_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vISB_OT_EEvE4typeELPv0ETnPNSE_IXsr3stdE16is_convertible_vISG_SB_EEvE4typeELSK_0EEEONS0_10unexpectedISF_EE:
 1629|     72|        : base(unexpect, std::move(e.error())),
 1630|     72|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|     72|    {
 1632|     72|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EEC2IJSB_EvEENS0_10unexpect_tEDpOT_:
  464|     72|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|     72|          m_has_value(false)
  466|     72|    {
  467|     72|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1808|   804k|    {
 1809|   804k|        return value();
 1810|   804k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|  2.08M|    {
 1783|  2.08M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.08M|        return this->get_value();
 1785|  2.08M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  2.08M|    {
  471|  2.08M|        return m_value;
  472|  2.08M|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEcvbEv:
 1753|  14.4k|    {
 1754|  14.4k|        return has_value();
 1755|  14.4k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9has_valueEv:
  504|  1.03M|    {
  505|  1.03M|        return m_has_value;
  506|  1.03M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|   503k|    {
 1819|   503k|        return std::move(value());
 1820|   503k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|   517k|    {
 1783|   517k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   517k|        return this->get_value();
 1785|   517k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorELb1EE9get_valueEv:
  470|   517k|    {
  471|   517k|        return m_value;
  472|   517k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS6_11parse_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|  1.33M|    {
 1993|  1.33M|        return detail::transform_error_impl(std::move(*this),
 1994|  1.33M|                                            std::forward<F>(f));
 1995|  1.33M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS7_11parse_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|  1.33M|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.33M|    else {
 1486|  1.33M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.33M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.33M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.27M, False: 54.3k]
  |  |  ------------------
  ------------------
 1488|  1.33M|                   ? result(*std::forward<Exp>(exp))
 1489|  1.33M|                   : result(unexpect,
 1490|  54.3k|                            trivial_invoke(std::forward<F>(f),
 1491|  54.3k|                                           std::forward<Exp>(exp).error()));
 1492|  1.33M|    }
 1493|  1.33M|}
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IS5_vEEOT_:
 1583|  1.67M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.67M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.67M|    {
 1586|  1.67M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  1.67M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.67M|    {
  457|  1.67M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
 1639|  54.3k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  54.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  54.3k|    {
 1642|  54.3k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|  1.27M|    {
 1819|  1.27M|        return std::move(value());
 1820|  1.27M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|  3.39M|    {
 1754|  3.39M|        return has_value();
 1755|  3.39M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|  5.41M|    {
  505|  5.41M|        return m_has_value;
  506|  5.41M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|   506k|    {
 1760|   506k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   506k|        return this->get_unexpected().error();
 1762|   506k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   506k|    {
  488|   506k|        return m_unexpected;
  489|   506k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  1.24M|    {
 1819|  1.24M|        return std::move(value());
 1820|  1.24M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  1.51M|    {
 1783|  1.51M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.51M|        return this->get_value();
 1785|  1.51M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.51M|    {
  471|  1.51M|        return m_value;
  472|  1.51M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3493|   408k|    {
 3494|   408k|        return m_iterator;
 3495|   408k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3497|   408k|    {
 3498|   408k|        return m_sentinel;
 3499|   408k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3478|   372k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   372k|    static_cast<    \
  |  | 1109|   372k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   372k|    static_cast<    \
  |  | 1109|   372k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   372k|    {
 3480|   372k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|  2.55M|    {
 4588|  2.55M|        return !x.is_at_end();
 4589|  2.55M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  59.0k|        : base(unexpect, std::move(e.error())),
 1630|  59.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  59.0k|    {
 1632|  59.0k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  59.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  59.0k|          m_has_value(false)
  466|  59.0k|    {
  467|  59.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.53M|    {
 1330|  2.53M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  2.47M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.47M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.47M|    {
 1586|  2.47M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  2.47M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.47M|    {
  457|  2.47M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl9eof_errorEEcvbEv:
 1753|   698k|    {
 1754|   698k|        return has_value();
 1755|   698k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  4.39M|    {
  505|  4.39M|        return m_has_value;
  506|  4.39M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|  11.6k|    {
 1809|  11.6k|        return value();
 1810|  11.6k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  1.79M|    {
 1783|  1.79M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.79M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.79M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.79M|        return this->get_value();
 1785|  1.79M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  1.79M|    {
  471|  1.79M|        return m_value;
  472|  1.79M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  2.96k|        : base(unexpect, std::move(e.error())),
 1630|  2.96k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.96k|    {
 1632|  2.96k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  2.96k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.96k|          m_has_value(false)
  466|  2.96k|    {
  467|  2.96k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   634k|    {
 1330|   634k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|   631k|        : base(std::in_place, std::forward<U>(val)),
 1584|   631k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   631k|    {
 1586|   631k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|   631k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   631k|    {
  457|   631k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|   507k|    {
 1993|   507k|        return detail::transform_error_impl(std::move(*this),
 1994|   507k|                                            std::forward<F>(f));
 1995|   507k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|   507k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   507k|    else {
 1486|   507k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   507k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   507k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 503k, False: 3.98k]
  |  |  ------------------
  ------------------
 1488|   507k|                   ? result(*std::forward<Exp>(exp))
 1489|   507k|                   : result(unexpect,
 1490|  3.98k|                            trivial_invoke(std::forward<F>(f),
 1491|  3.98k|                                           std::forward<Exp>(exp).error()));
 1492|   507k|    }
 1493|   507k|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  1.78M|    {
 1819|  1.78M|        return std::move(value());
 1820|  1.78M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1769|  58.4k|    {
 1770|  58.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  58.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  58.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  58.4k|        return std::move(this->get_unexpected().error());
 1772|  58.4k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  59.0k|    {
  488|  59.0k|        return m_unexpected;
  489|  59.0k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|   565k|        : base(unexpect, std::forward<Args>(args)...),
 1640|   565k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|   565k|    {
 1642|   565k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1753|   634k|    {
 1754|   634k|        return has_value();
 1755|   634k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.26M|    {
  505|  1.26M|        return m_has_value;
  506|  1.26M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1759|  2.96k|    {
 1760|  2.96k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  2.96k|        return this->get_unexpected().error();
 1762|  2.96k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  2.96k|    {
  488|  2.96k|        return m_unexpected;
  489|  2.96k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   631k|    {
 1819|   631k|        return std::move(value());
 1820|   631k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   631k|    {
 1783|   631k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   631k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   631k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   631k|        return this->get_value();
 1785|   631k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  470|   631k|    {
  471|   631k|        return m_value;
  472|   631k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1759|    524|    {
 1760|    524|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    524|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    524|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    524|        return this->get_unexpected().error();
 1762|    524|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|   558k|        : base(unexpect, std::move(e.error())),
 1630|   558k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   558k|    {
 1632|   558k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|   613k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   613k|          m_has_value(false)
  466|   613k|    {
  467|   613k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl11parse_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  4.17M|    {
 1330|  4.17M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IRS3_vEEOT_:
 1583|  11.6k|        : base(std::in_place, std::forward<U>(val)),
 1584|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  11.6k|    {
 1586|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJRS4_EvEENSt3__110in_place_tEDpOT_:
  455|  11.6k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  11.6k|    {
  457|  11.6k|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2INS5_4codeETnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S5_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  2.14M|        : base(unexpect, std::move(e.error())),
 1630|  2.14M|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.14M|    {
 1632|  2.14M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJNS6_4codeEEvEENS0_10unexpect_tEDpOT_:
  464|  2.14M|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.14M|          m_has_value(false)
  466|  2.14M|    {
  467|  2.14M|    }
_ZNK3scn2v48expectedIPKwNS0_4impl11parse_errorEEcvbEv:
 1753|  4.67M|    {
 1754|  4.67M|        return has_value();
 1755|  4.67M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9has_valueEv:
  504|  8.40M|    {
  505|  8.40M|        return m_has_value;
  506|  8.40M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5errorEv:
 1759|  1.62M|    {
 1760|  1.62M|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.62M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.62M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.62M|        return this->get_unexpected().error();
 1762|  1.62M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE14get_unexpectedEv:
  487|  1.62M|    {
  488|  1.62M|        return m_unexpected;
  489|  1.62M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS8_vEEOT_:
 1583|   508k|        : base(std::in_place, std::forward<U>(val)),
 1584|   508k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   508k|    {
 1586|   508k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   508k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   508k|    {
  457|   508k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   508k|    {
 1330|   508k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|     24|        : base(unexpect, std::move(e.error())),
 1630|     24|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|     24|    {
 1632|     24|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|     24|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|     24|          m_has_value(false)
  466|     24|    {
  467|     24|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1808|   261k|    {
 1809|   261k|        return value();
 1810|   261k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  1.54M|    {
 1783|  1.54M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.54M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.54M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.54M|        return this->get_value();
 1785|  1.54M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EE9get_valueEv:
  470|  1.54M|    {
  471|  1.54M|        return m_value;
  472|  1.54M|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEcvbEv:
 1753|  5.23k|    {
 1754|  5.23k|        return has_value();
 1755|  5.23k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9has_valueEv:
  504|  1.01M|    {
  505|  1.01M|        return m_has_value;
  506|  1.01M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   503k|    {
 1819|   503k|        return std::move(value());
 1820|   503k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   508k|    {
 1783|   508k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   508k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   508k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   508k|        return this->get_value();
 1785|   508k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS7_9eof_errorELb1EE9get_valueEv:
  470|   508k|    {
  471|   508k|        return m_value;
  472|   508k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS4_11parse_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  1.33M|    {
 1993|  1.33M|        return detail::transform_error_impl(std::move(*this),
 1994|  1.33M|                                            std::forward<F>(f));
 1995|  1.33M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS6_11parse_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  1.33M|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.33M|    else {
 1486|  1.33M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.33M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.33M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.27M, False: 54.5k]
  |  |  ------------------
  ------------------
 1488|  1.33M|                   ? result(*std::forward<Exp>(exp))
 1489|  1.33M|                   : result(unexpect,
 1490|  54.5k|                            trivial_invoke(std::forward<F>(f),
 1491|  54.5k|                                           std::forward<Exp>(exp).error()));
 1492|  1.33M|    }
 1493|  1.33M|}
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IS3_vEEOT_:
 1583|  1.40M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.40M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.40M|    {
 1586|  1.40M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl11parse_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  1.40M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.40M|    {
  457|  1.40M|    }
_ZN3scn2v48expectedIPKwNS0_4impl11parse_errorEEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
 1639|  54.5k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  54.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  54.5k|    {
 1642|  54.5k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl11parse_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  1.27M|    {
 1819|  1.27M|        return std::move(value());
 1820|  1.27M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  1.18M|    {
 3014|  1.18M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  1.18M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  1.18M|    {
 2995|  1.18M|        return t.data();
 2996|  1.18M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEE15transform_errorIRFNS0_10scan_errorESB_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSH_:
 1992|   503k|    {
 1993|   503k|        return detail::transform_error_impl(std::move(*this),
 1994|   503k|                                            std::forward<F>(f));
 1995|   503k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS9_9eof_errorEEERFNS0_10scan_errorESC_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESE_EEDaOSI_OT0_:
 1475|   503k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   503k|    else {
 1486|   503k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   503k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   503k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 503k, False: 0]
  |  |  ------------------
  ------------------
 1488|   503k|                   ? result(*std::forward<Exp>(exp))
 1489|   503k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   503k|    }
 1493|   503k|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEC2ISA_vEEOT_:
 1583|   503k|        : base(std::in_place, std::forward<U>(val)),
 1584|   503k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   503k|    {
 1586|   503k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJSA_EvEENS3_10in_place_tEDpOT_:
  455|   503k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   503k|    {
  457|   503k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   503k|    {
 1330|   503k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|   503k|    {
 1754|   503k|        return has_value();
 1755|   503k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.00M|    {
  505|  1.00M|        return m_has_value;
  506|  1.00M|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEEdeISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSF_v:
 1818|   503k|    {
 1819|   503k|        return std::move(value());
 1820|   503k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorEE5valueISA_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSF_v:
 1782|   503k|    {
 1783|   503k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   503k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   503k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   503k|        return this->get_value();
 1785|   503k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   503k|    {
  471|   503k|        return m_value;
  472|   503k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEE15transform_errorIZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1978|   630k|    {
 1979|   630k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|   630k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl11parse_errorEEEZNS7_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS8_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESB_EEDaOSI_OT0_:
 1475|   630k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   630k|    else {
 1486|   630k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   630k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   630k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 630k]
  |  |  ------------------
  ------------------
 1488|   630k|                   ? result(*std::forward<Exp>(exp))
 1489|   630k|                   : result(unexpect,
 1490|   630k|                            trivial_invoke(std::forward<F>(f),
 1491|   630k|                                           std::forward<Exp>(exp).error()));
 1492|   630k|    }
 1493|   630k|}
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|   264k|    {
 1809|   264k|        return value();
 1810|   264k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E0_clISE_EEDaSP_:
 3953|  99.4k|    auto&& SCN_TRY_TMP = (x);                          \
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9sign_typeEEENS8_9eof_errorEEptEv:
 1828|  14.3k|    {
 1829|  14.3k|        return &value();
 1830|  14.3k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS8_12priority_tagILm3EEEEEEOT_:
 2882|   404k|    {
 2883|   404k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   404k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   404k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESI_E4typeEOT_NS8_12priority_tagILm1EEE:
 2863|   404k|    {
 2864|   404k|        return decay_copy(t.begin());
 2865|   404k|    }
_ZN3scn2v46ranges6detail10decay_copyINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEEu7__decayIT_EOS8_:
 2107|   404k|{
 2108|   404k|    return SCN_FWD(t);
  ------------------
  |  | 1110|   404k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|   404k|}
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlRKSI_E_clISE_EEDaSP_:
 3953|   225k|    auto&& SCN_TRY_TMP = (x);                          \
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEE15transform_errorIRFNS0_10scan_errorES9_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSF_:
 1992|   503k|    {
 1993|   503k|        return detail::transform_error_impl(std::move(*this),
 1994|   503k|                                            std::forward<F>(f));
 1995|   503k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS8_9eof_errorEEERFNS0_10scan_errorESB_ETnPNS4_9enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESD_EEDaOSH_OT0_:
 1475|   503k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   503k|    else {
 1486|   503k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   503k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   503k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 503k, False: 0]
  |  |  ------------------
  ------------------
 1488|   503k|                   ? result(*std::forward<Exp>(exp))
 1489|   503k|                   : result(unexpect,
 1490|      0|                            trivial_invoke(std::forward<F>(f),
 1491|      0|                                           std::forward<Exp>(exp).error()));
 1492|   503k|    }
 1493|   503k|}
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   503k|        : base(std::in_place, std::forward<U>(val)),
 1584|   503k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   503k|    {
 1586|   503k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2IJS9_EvEENS3_10in_place_tEDpOT_:
  455|   503k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   503k|    {
  457|   503k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   503k|    {
 1330|   503k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEcvbEv:
 1753|   503k|    {
 1754|   503k|        return has_value();
 1755|   503k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.00M|    {
  505|  1.00M|        return m_has_value;
  506|  1.00M|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   503k|    {
 1819|   503k|        return std::move(value());
 1820|   503k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   503k|    {
 1783|   503k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   503k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   503k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   503k|        return this->get_value();
 1785|   503k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwNS0_4impl9sign_typeEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   503k|    {
  471|   503k|        return m_value;
  472|   503k|    }
_ZNR3scn2v48expectedIPKwNS0_4impl11parse_errorEE15transform_errorIZNS4_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS5_E_EEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   561k|    {
 1979|   561k|        return detail::transform_error_impl(*this, std::forward<F>(f));
 1980|   561k|    }
_ZN3scn2v46detail20transform_error_implIRNS0_8expectedIPKwNS0_4impl11parse_errorEEEZNS6_29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcEUlS7_E_TnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSH_OT0_:
 1475|   561k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   561k|    else {
 1486|   561k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   561k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   561k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 561k]
  |  |  ------------------
  ------------------
 1488|   561k|                   ? result(*std::forward<Exp>(exp))
 1489|   561k|                   : result(unexpect,
 1490|   561k|                            trivial_invoke(std::forward<F>(f),
 1491|   561k|                                           std::forward<Exp>(exp).error()));
 1492|   561k|    }
 1493|   561k|}
_ZN3scn2v413scan_expectedIPKwEC2EONS0_8expectedIS3_NS0_10scan_errorEEE:
 3928|   561k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|   561k|    static_cast<    \
  |  | 1109|   561k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|   561k|    {
 3930|   561k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|   265k|    {
 1809|   265k|        return value();
 1810|   265k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwNS0_4impl9sign_typeEEENS6_9eof_errorEEptEv:
 1828|  5.21k|    {
 1829|  5.21k|        return &value();
 1830|  5.21k|    }
_ZN3scn2v413scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEC2EONS0_8expectedIS5_NS0_10scan_errorEEE:
 3928|   630k|        : expected<T, scan_error>(SCN_MOVE(other))
  ------------------
  |  | 1108|   630k|    static_cast<    \
  |  | 1109|   630k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3929|   630k|    {
 3930|   630k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4374|  59.2M|    {
 4375|  59.2M|        return m_putback_buffer.size() + m_current_view.size();
 4376|  59.2M|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2ImvEEOT_:
 1583|  67.4k|        : base(std::in_place, std::forward<U>(val)),
 1584|  67.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  67.4k|    {
 1586|  67.4k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJmEvEENSt3__110in_place_tEDpOT_:
  455|  67.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  67.4k|    {
  457|  67.4k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6262|  1.09M|    {
 6263|  1.09M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.09M]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|  1.09M|        return static_cast<std::size_t>(m_desc &
 6268|  1.09M|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|  1.09M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6288|  2.19M|    {
 6289|  2.19M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|  2.19M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6230|  1.09M|    {
 6231|  1.09M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.09M]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|  1.09M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.09M]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|  1.09M|        const auto t = type(id);
 6243|  1.09M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.09M]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|  1.09M|        basic_scan_arg<Context> arg;
 6248|  1.09M|        arg.m_type = t;
 6249|  1.09M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 1.09M, False: 0]
  ------------------
 6250|  1.09M|            arg.m_value.ref_value = m_builtin_values[id];
 6251|  1.09M|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|  1.09M|        return arg;
 6256|  1.09M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6297|  1.09M|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|  1.09M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|  1.09M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|  1.09M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|  1.09M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6292|  1.09M|    {
 6293|  1.09M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|  1.09M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6046|  2.08M|    {
 6047|  2.08M|        return m_type != detail::arg_type::none_type;
 6048|  2.08M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|   169k|{
 9494|   169k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   169k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   169k|{
 9353|   169k|#define SCN_VISIT(Type)                                                \
 9354|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   169k|    }                                                                  \
 9357|   169k|    else {                                                             \
 9358|   169k|        return vis(monostate_val);                                     \
 9359|   169k|    }
 9360|       |
 9361|   169k|    monostate monostate_val{};
 9362|       |
 9363|   169k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 169k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 169k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 169k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 169k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 169k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 169k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 169k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 169k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 169k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 169k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 169k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 169k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 169k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 169k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 169k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 169k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 169k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|  54.1k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 54.1k, False: 115k]
  ------------------
 9407|  54.1k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  54.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  54.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  54.1k|    }                                                                  \
  |  | 9357|  54.1k|    else {                                                             \
  |  | 9358|  54.1k|        return vis(monostate_val);                                     \
  |  | 9359|  54.1k|    }
  ------------------
 9408|   110k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 56.6k, False: 112k]
  ------------------
 9409|   110k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   110k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   110k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   110k|    }                                                                  \
  |  | 9357|   110k|    else {                                                             \
  |  | 9358|   110k|        return vis(monostate_val);                                     \
  |  | 9359|   110k|    }
  ------------------
 9410|   169k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 58.5k, False: 110k]
  ------------------
 9411|   169k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   169k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   169k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   169k|    }                                                                  \
  |  | 9357|   169k|    else {                                                             \
  |  | 9358|   169k|        return vis(monostate_val);                                     \
  |  | 9359|   169k|    }
  ------------------
 9412|   169k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 169k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   169k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 169k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 169k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 169k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 169k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 169k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 169k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 169k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 169k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 169k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 169k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   169k|            SCN_CLANG_POP
 9473|   169k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|  2.95M|{
 6092|  2.95M|    return arg.m_type;
 6093|  2.95M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|  1.21M|{
 6104|  1.21M|    return arg.m_value;
 6105|  1.21M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|   454k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|   454k|    static_cast<    \
  |  | 1109|   454k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|   454k|    {
 9021|   454k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4708|   623k|{
 4709|   623k|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 0, False: 623k]
  ------------------
 4710|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|      0|                                ranges::default_sentinel};
 4712|      0|    }
 4713|   623k|    return ranges::subrange{forward_iterator{this, 0},
 4714|   623k|                            ranges::default_sentinel};
 4715|   623k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4471|   623k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|   623k|    {
 4473|   623k|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|   623k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   623k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|   623k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|   623k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   623k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|   623k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|   168k|{
 9494|   168k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   168k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   168k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   168k|{
 9353|   168k|#define SCN_VISIT(Type)                                                \
 9354|   168k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   168k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   168k|    }                                                                  \
 9357|   168k|    else {                                                             \
 9358|   168k|        return vis(monostate_val);                                     \
 9359|   168k|    }
 9360|       |
 9361|   168k|    monostate monostate_val{};
 9362|       |
 9363|   168k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 168k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 168k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 168k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 168k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 168k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 168k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 168k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 168k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 168k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 168k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 168k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 168k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 168k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 168k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 168k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 168k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 168k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|  54.3k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 54.3k, False: 114k]
  ------------------
 9407|  54.3k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  54.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  54.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  54.3k|    }                                                                  \
  |  | 9357|  54.3k|    else {                                                             \
  |  | 9358|  54.3k|        return vis(monostate_val);                                     \
  |  | 9359|  54.3k|    }
  ------------------
 9408|   111k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 56.7k, False: 112k]
  ------------------
 9409|   111k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   111k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   111k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   111k|    }                                                                  \
  |  | 9357|   111k|    else {                                                             \
  |  | 9358|   111k|        return vis(monostate_val);                                     \
  |  | 9359|   111k|    }
  ------------------
 9410|   168k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 57.9k, False: 111k]
  ------------------
 9411|   168k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   168k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   168k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   168k|    }                                                                  \
  |  | 9357|   168k|    else {                                                             \
  |  | 9358|   168k|        return vis(monostate_val);                                     \
  |  | 9359|   168k|    }
  ------------------
 9412|   168k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 168k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   168k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 168k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 168k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 168k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 168k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 168k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 168k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 168k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 168k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 168k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 168k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   168k|            SCN_CLANG_POP
 9473|   168k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6361|   419k|        : m_format{format},
 6362|   419k|          m_next_arg_id{next_arg_id},
 6363|   419k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   419k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   419k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   419k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   419k|    {
 6369|   419k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|   419k|    {
 3089|   419k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   419k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|   419k|    {
 3055|   419k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   419k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   419k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   419k|{
 7878|   419k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   419k|    handler.check_args_exhausted();
 7880|   419k|    return handler.get_error();
 7881|   419k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   419k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   419k|    auto begin = format.data();
 7846|   419k|    auto it = begin;
 7847|   419k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   785k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 419k, False: 366k]
  ------------------
 7850|   419k|        const auto ch = *it++;
 7851|   419k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 419k, False: 0]
  ------------------
 7852|   419k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   419k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   419k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 52.8k, False: 366k]
  ------------------
 7856|  52.8k|                return;
 7857|  52.8k|            }
 7858|   419k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   419k|    }
 7869|       |
 7870|   366k|    handler.on_literal_text(begin, end);
 7871|   366k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7774|   419k|{
 7775|   419k|    struct id_adapter {
 7776|   419k|        constexpr void operator()()
 7777|   419k|        {
 7778|   419k|            arg_id = handler.on_arg_id();
 7779|   419k|        }
 7780|   419k|        constexpr void operator()(std::size_t id)
 7781|   419k|        {
 7782|   419k|            arg_id = handler.on_arg_id(id);
 7783|   419k|        }
 7784|       |
 7785|   419k|        constexpr void on_error(const char* msg)
 7786|   419k|        {
 7787|   419k|            SCN_UNLIKELY_ATTR
 7788|   419k|            handler.on_error(msg);
 7789|   419k|        }
 7790|       |
 7791|   419k|        Handler& handler;
 7792|   419k|        std::size_t arg_id;
 7793|   419k|    };
 7794|       |
 7795|   419k|    ++begin;
 7796|   419k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 419k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   419k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 419k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   419k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 419k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   419k|    else {
 7808|   419k|        auto adapter = id_adapter{handler, 0};
 7809|   419k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   419k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 419k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   419k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 419k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   419k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 419k, False: 0]
  ------------------
 7820|   419k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 419k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   419k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   419k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   838k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 419k]
  |  |  |  Branch (1039:45): [True: 0, False: 419k]
  |  |  |  Branch (1039:45): [True: 0, False: 419k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|   419k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   419k|    }
 7836|   419k|    return begin + 1;
 7837|   419k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8918|   873k|    {
 8919|   873k|        return m_args.get(id);
 8920|   873k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6396|   873k|    {
 6397|   873k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|   873k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 873k]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|   873k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|   873k|        do_check_arg_id(id);
 6405|   873k|        return id;
 6406|   873k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6890|   873k|{
 6891|   873k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|   873k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|   873k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   419k|{
 7276|   419k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   419k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 419k, False: 0]
  |  Branch (7277:26): [True: 0, False: 419k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   419k|    handler();
 7282|   419k|    return begin;
 7283|   419k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   419k|        {
 7778|   419k|            arg_id = handler.on_arg_id();
 7779|   419k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6391|   873k|    {
 6392|   873k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|   873k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6380|  1.74M|    {
 6381|  1.74M|        return m_format.data();
 6382|  1.74M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|   419k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   419k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   419k|    {
 7962|   419k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   419k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   419k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   419k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7690|   419k|{
 7691|   419k|    auto do_presentation = [&]() -> const CharT* {
 7692|   419k|        if (*begin == CharT{'['}) {
 7693|   419k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   419k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   419k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   419k|                return begin;
 7699|   419k|            }
 7700|   419k|            handler.on_character_set_string(set);
 7701|   419k|            return begin;
 7702|   419k|        }
 7703|   419k|        if (*begin == CharT{'/'}) {
 7704|   419k|            return parse_presentation_regex(begin, end, handler);
 7705|   419k|        }
 7706|   419k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   419k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   419k|            handler.on_error("Invalid type specifier in format string");
 7709|   419k|            return begin;
 7710|   419k|        }
 7711|   419k|        handler.on_type(type);
 7712|   419k|        return begin;
 7713|   419k|    };
 7714|       |
 7715|   419k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 419k, False: 0]
  |  Branch (7715:28): [True: 419k, False: 0]
  ------------------
 7716|   419k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 419k, False: 0]
  |  Branch (7716:36): [True: 306k, False: 112k]
  ------------------
 7717|   306k|        return do_presentation();
 7718|   306k|    }
 7719|       |
 7720|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|   112k|    begin = parse_align(begin, end, handler);
 7726|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|   112k|    begin = parse_width(begin, end, handler);
 7732|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|   112k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 112k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|   112k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 112k, False: 0]
  ------------------
 7751|   112k|        handler.on_localized();
 7752|   112k|        ++begin;
 7753|   112k|    }
 7754|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|   112k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 112k, False: 0]
  |  Branch (7759:25): [True: 0, False: 112k]
  ------------------
 7760|      0|        do_presentation();
 7761|      0|    }
 7762|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|   112k|    return begin;
 7768|   112k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7339|   873k|{
 7340|   873k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 636k, False: 237k]
  |  Branch (7340:33): [True: 636k, False: 0]
  ------------------
 7341|   873k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 237k, False: 0]
  |  Branch (7341:33): [True: 237k, False: 0]
  ------------------
 7342|   873k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|   306k|    auto do_presentation = [&]() -> const CharT* {
 7692|   306k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 306k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   306k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 306k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   306k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   306k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   306k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 306k]
  |  |  ------------------
  ------------------
 7708|      0|            handler.on_error("Invalid type specifier in format string");
 7709|      0|            return begin;
 7710|      0|        }
 7711|   306k|        handler.on_type(type);
 7712|   306k|        return begin;
 7713|   306k|    };
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7287|   636k|{
 7288|   636k|    switch (type) {
 7289|      0|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 0, False: 636k]
  ------------------
 7290|      0|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 0, False: 636k]
  ------------------
 7291|      0|            return presentation_type::int_binary;
 7292|      0|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 0, False: 636k]
  ------------------
 7293|      0|            return presentation_type::int_decimal;
 7294|      0|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 0, False: 636k]
  ------------------
 7295|      0|            return presentation_type::int_generic;
 7296|      0|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 0, False: 636k]
  ------------------
 7297|      0|            return presentation_type::int_unsigned_decimal;
 7298|      0|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 0, False: 636k]
  ------------------
 7299|      0|            return presentation_type::int_octal;
 7300|      0|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 0, False: 636k]
  ------------------
 7301|      0|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 0, False: 636k]
  ------------------
 7302|      0|            return presentation_type::int_hex;
 7303|      0|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 0, False: 636k]
  ------------------
 7304|      0|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 0, False: 636k]
  ------------------
 7305|      0|            return presentation_type::int_arbitrary_base;
 7306|   259k|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 259k, False: 376k]
  ------------------
 7307|   259k|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 0, False: 636k]
  ------------------
 7308|   259k|            return presentation_type::float_hex;
 7309|  29.2k|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 29.2k, False: 606k]
  ------------------
 7310|  29.2k|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 0, False: 636k]
  ------------------
 7311|  29.2k|            return presentation_type::float_scientific;
 7312|   141k|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 141k, False: 494k]
  ------------------
 7313|   141k|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 0, False: 636k]
  ------------------
 7314|   141k|            return presentation_type::float_fixed;
 7315|   205k|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 205k, False: 430k]
  ------------------
 7316|   205k|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 0, False: 636k]
  ------------------
 7317|   205k|            return presentation_type::float_general;
 7318|      0|        case 's':
  ------------------
  |  Branch (7318:9): [True: 0, False: 636k]
  ------------------
 7319|      0|            return presentation_type::string;
 7320|      0|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 0, False: 636k]
  ------------------
 7321|      0|            return presentation_type::character;
 7322|      0|        case '?':
  ------------------
  |  Branch (7322:9): [True: 0, False: 636k]
  ------------------
 7323|      0|            return presentation_type::escaped_character;
 7324|      0|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 0, False: 636k]
  ------------------
 7325|      0|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 636k]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 636k]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|      0|        default:
  ------------------
  |  Branch (7332:9): [True: 0, False: 636k]
  ------------------
 7333|      0|            return presentation_type::none;
 7334|   636k|    }
 7335|   636k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7364|   112k|{
 7365|   112k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|   112k|    auto check_align = [](wchar_t ch) {
 7368|   112k|        switch (ch) {
 7369|   112k|            case L'<':
 7370|   112k|                return align_type::left;
 7371|   112k|            case L'>':
 7372|   112k|                return align_type::right;
 7373|   112k|            case L'^':
 7374|   112k|                return align_type::center;
 7375|   112k|            default:
 7376|   112k|                return align_type::none;
 7377|   112k|        }
 7378|   112k|    };
 7379|       |
 7380|   112k|    auto potential_fill_len = code_point_length(begin, end);
 7381|   112k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 112k]
  |  |  |  Branch (1039:45): [True: 0, False: 112k]
  |  |  |  Branch (1039:45): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7382|   112k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|   112k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|   112k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|   112k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|   112k|    const auto begin_before_fill = begin;
 7392|   112k|    begin += potential_fill_len;
 7393|       |
 7394|   112k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 112k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|   112k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|   112k|    const auto begin_after_fill = begin;
 7400|   112k|    ++begin;
 7401|       |
 7402|   112k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 112k, False: 0]
  ------------------
 7403|   112k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|   112k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 112k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|   112k|    }
 7411|       |
 7412|   112k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 112k, False: 0]
  ------------------
 7413|   112k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 112k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|   112k|        return begin_before_fill;
 7418|   112k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|   112k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7346|   237k|{
 7347|   237k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   237k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   237k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|       |    if constexpr (sizeof(CharT) != 1) {
 7349|       |        return 1;
 7350|       |    }
 7351|   237k|    else {
 7352|   237k|        const auto lengths =
 7353|   237k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|   237k|            "\3\4";
 7355|   237k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|   237k|        return len;
 7357|   237k|    }
 7358|   237k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|   225k|    auto check_align = [](wchar_t ch) {
 7368|   225k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 225k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 225k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 225k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   225k|            default:
  ------------------
  |  Branch (7375:13): [True: 225k, False: 0]
  ------------------
 7376|   225k|                return align_type::none;
 7377|   225k|        }
 7378|   225k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7429|   112k|{
 7430|   112k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|   112k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 112k, False: 0]
  |  Branch (7432:33): [True: 0, False: 112k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|   112k|    return begin;
 7443|   112k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7966|   112k|    {
 7967|   112k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|   112k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 112k, False: 0]
  ------------------
 7969|   112k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 112k, False: 0]
  ------------------
 7970|   112k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 112k]
  ------------------
 7971|   112k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|   112k|        Handler::on_localized();
 7979|   112k|    }
_ZN3scn2v46detail12specs_setter12on_localizedILb1EEEvv:
 7109|   419k|    {
 7110|   419k|        if constexpr (!SCN_DISABLE_LOCALE) {
 7111|   419k|            m_specs.localized = true;
 7112|       |        }
 7113|       |        else {
 7114|       |            on_error("'L' flag invalid when SCN_DISABLE_LOCALE is on");
 7115|       |        }
 7116|   419k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|   419k|{
 9494|   419k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   419k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   419k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   419k|{
 9353|   419k|#define SCN_VISIT(Type)                                                \
 9354|   419k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   419k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   419k|    }                                                                  \
 9357|   419k|    else {                                                             \
 9358|   419k|        return vis(monostate_val);                                     \
 9359|   419k|    }
 9360|       |
 9361|   419k|    monostate monostate_val{};
 9362|       |
 9363|   419k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 419k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 419k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 419k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 419k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 419k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 419k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 419k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 419k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 419k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 419k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 419k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 419k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 419k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 419k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 419k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 419k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 419k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|   136k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 136k, False: 283k]
  ------------------
 9407|   136k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   136k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   136k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   136k|    }                                                                  \
  |  | 9357|   136k|    else {                                                             \
  |  | 9358|   136k|        return vis(monostate_val);                                     \
  |  | 9359|   136k|    }
  ------------------
 9408|   276k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 140k, False: 279k]
  ------------------
 9409|   276k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   276k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   276k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   276k|    }                                                                  \
  |  | 9357|   276k|    else {                                                             \
  |  | 9358|   276k|        return vis(monostate_val);                                     \
  |  | 9359|   276k|    }
  ------------------
 9410|   419k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 142k, False: 276k]
  ------------------
 9411|   419k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   419k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   419k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   419k|    }                                                                  \
  |  | 9357|   419k|    else {                                                             \
  |  | 9358|   419k|        return vis(monostate_val);                                     \
  |  | 9359|   419k|    }
  ------------------
 9412|   419k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 419k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   419k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 419k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 419k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 419k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 419k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 419k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 419k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 419k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 419k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 419k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 419k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   419k|            SCN_CLANG_POP
 9473|   419k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6361|   454k|        : m_format{format},
 6362|   454k|          m_next_arg_id{next_arg_id},
 6363|   454k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   454k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   454k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   454k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   454k|    {
 6369|   454k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   454k|{
 7878|   454k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   454k|    handler.check_args_exhausted();
 7880|   454k|    return handler.get_error();
 7881|   454k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   454k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   454k|    auto begin = format.data();
 7846|   454k|    auto it = begin;
 7847|   454k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   855k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 454k, False: 401k]
  ------------------
 7850|   454k|        const auto ch = *it++;
 7851|   454k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 454k, False: 0]
  ------------------
 7852|   454k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   454k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   454k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 52.8k, False: 401k]
  ------------------
 7856|  52.8k|                return;
 7857|  52.8k|            }
 7858|   454k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   454k|    }
 7869|       |
 7870|   401k|    handler.on_literal_text(begin, end);
 7871|   401k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9057|   401k|    {
 9058|   401k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   401k|    static_cast<    \
  |  | 1109|   401k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|   401k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7774|   454k|{
 7775|   454k|    struct id_adapter {
 7776|   454k|        constexpr void operator()()
 7777|   454k|        {
 7778|   454k|            arg_id = handler.on_arg_id();
 7779|   454k|        }
 7780|   454k|        constexpr void operator()(std::size_t id)
 7781|   454k|        {
 7782|   454k|            arg_id = handler.on_arg_id(id);
 7783|   454k|        }
 7784|       |
 7785|   454k|        constexpr void on_error(const char* msg)
 7786|   454k|        {
 7787|   454k|            SCN_UNLIKELY_ATTR
 7788|   454k|            handler.on_error(msg);
 7789|   454k|        }
 7790|       |
 7791|   454k|        Handler& handler;
 7792|   454k|        std::size_t arg_id;
 7793|   454k|    };
 7794|       |
 7795|   454k|    ++begin;
 7796|   454k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   454k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 454k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   454k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 454k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   454k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 454k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   454k|    else {
 7808|   454k|        auto adapter = id_adapter{handler, 0};
 7809|   454k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   454k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   454k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 454k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   454k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 454k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   454k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 454k, False: 0]
  ------------------
 7820|   454k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   454k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 454k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   454k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   454k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   908k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 454k]
  |  |  |  Branch (1039:45): [True: 0, False: 454k]
  |  |  |  Branch (1039:45): [True: 0, False: 454k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|   454k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   454k|    }
 7836|   454k|    return begin + 1;
 7837|   454k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   454k|{
 7276|   454k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   454k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   454k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   454k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 454k, False: 0]
  |  Branch (7277:26): [True: 0, False: 454k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   454k|    handler();
 7282|   454k|    return begin;
 7283|   454k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   454k|        {
 7778|   454k|            arg_id = handler.on_arg_id();
 7779|   454k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7960|   454k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   454k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   454k|    {
 7962|   454k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   454k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   454k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   454k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7690|   454k|{
 7691|   454k|    auto do_presentation = [&]() -> const CharT* {
 7692|   454k|        if (*begin == CharT{'['}) {
 7693|   454k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   454k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   454k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   454k|                return begin;
 7699|   454k|            }
 7700|   454k|            handler.on_character_set_string(set);
 7701|   454k|            return begin;
 7702|   454k|        }
 7703|   454k|        if (*begin == CharT{'/'}) {
 7704|   454k|            return parse_presentation_regex(begin, end, handler);
 7705|   454k|        }
 7706|   454k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   454k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   454k|            handler.on_error("Invalid type specifier in format string");
 7709|   454k|            return begin;
 7710|   454k|        }
 7711|   454k|        handler.on_type(type);
 7712|   454k|        return begin;
 7713|   454k|    };
 7714|       |
 7715|   454k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 454k, False: 0]
  |  Branch (7715:28): [True: 454k, False: 0]
  ------------------
 7716|   454k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 454k, False: 0]
  |  Branch (7716:36): [True: 329k, False: 124k]
  ------------------
 7717|   329k|        return do_presentation();
 7718|   329k|    }
 7719|       |
 7720|   124k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|   124k|    begin = parse_align(begin, end, handler);
 7726|   124k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|   124k|    begin = parse_width(begin, end, handler);
 7732|   124k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|   124k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 124k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|   124k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 124k, False: 0]
  ------------------
 7751|   124k|        handler.on_localized();
 7752|   124k|        ++begin;
 7753|   124k|    }
 7754|   124k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|   124k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 124k, False: 0]
  |  Branch (7759:25): [True: 0, False: 124k]
  ------------------
 7760|      0|        do_presentation();
 7761|      0|    }
 7762|   124k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|   124k|    return begin;
 7768|   124k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7691|   329k|    auto do_presentation = [&]() -> const CharT* {
 7692|   329k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 329k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   329k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 329k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   329k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   329k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 329k]
  |  |  ------------------
  ------------------
 7708|      0|            handler.on_error("Invalid type specifier in format string");
 7709|      0|            return begin;
 7710|      0|        }
 7711|   329k|        handler.on_type(type);
 7712|   329k|        return begin;
 7713|   329k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7364|   124k|{
 7365|   124k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   124k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   124k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|   124k|    auto check_align = [](wchar_t ch) {
 7368|   124k|        switch (ch) {
 7369|   124k|            case L'<':
 7370|   124k|                return align_type::left;
 7371|   124k|            case L'>':
 7372|   124k|                return align_type::right;
 7373|   124k|            case L'^':
 7374|   124k|                return align_type::center;
 7375|   124k|            default:
 7376|   124k|                return align_type::none;
 7377|   124k|        }
 7378|   124k|    };
 7379|       |
 7380|   124k|    auto potential_fill_len = code_point_length(begin, end);
 7381|   124k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   248k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 124k]
  |  |  |  Branch (1039:45): [True: 0, False: 124k]
  |  |  |  Branch (1039:45): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
 7382|   124k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|   124k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|   124k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|   124k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|   124k|    const auto begin_before_fill = begin;
 7392|   124k|    begin += potential_fill_len;
 7393|       |
 7394|   124k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 124k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|   124k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|   124k|    const auto begin_after_fill = begin;
 7400|   124k|    ++begin;
 7401|       |
 7402|   124k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 124k, False: 0]
  ------------------
 7403|   124k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 124k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|   124k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 124k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|   124k|    }
 7411|       |
 7412|   124k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 124k, False: 0]
  ------------------
 7413|   124k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 124k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|   124k|        return begin_before_fill;
 7418|   124k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|   124k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7367|   248k|    auto check_align = [](wchar_t ch) {
 7368|   248k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 248k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 248k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 248k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   248k|            default:
  ------------------
  |  Branch (7375:13): [True: 248k, False: 0]
  ------------------
 7376|   248k|                return align_type::none;
 7377|   248k|        }
 7378|   248k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7429|   124k|{
 7430|   124k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   124k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   124k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|   124k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 124k, False: 0]
  |  Branch (7432:33): [True: 0, False: 124k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|   124k|    return begin;
 7443|   124k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7966|   124k|    {
 7967|   124k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|   124k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 124k, False: 0]
  ------------------
 7969|   124k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 124k, False: 0]
  ------------------
 7970|   124k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 124k]
  ------------------
 7971|   124k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|   124k|        Handler::on_localized();
 7979|   124k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9493|   454k|{
 9494|   454k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   454k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   454k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   454k|{
 9353|   454k|#define SCN_VISIT(Type)                                                \
 9354|   454k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   454k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   454k|    }                                                                  \
 9357|   454k|    else {                                                             \
 9358|   454k|        return vis(monostate_val);                                     \
 9359|   454k|    }
 9360|       |
 9361|   454k|    monostate monostate_val{};
 9362|       |
 9363|   454k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 454k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 454k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 454k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 454k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 454k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 454k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 454k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 454k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 454k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 454k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 454k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 454k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 454k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 454k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 454k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 454k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 454k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|   146k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 146k, False: 307k]
  ------------------
 9407|   146k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   146k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   146k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   146k|    }                                                                  \
  |  | 9357|   146k|    else {                                                             \
  |  | 9358|   146k|        return vis(monostate_val);                                     \
  |  | 9359|   146k|    }
  ------------------
 9408|   298k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 152k, False: 301k]
  ------------------
 9409|   298k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   298k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   298k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   298k|    }                                                                  \
  |  | 9357|   298k|    else {                                                             \
  |  | 9358|   298k|        return vis(monostate_val);                                     \
  |  | 9359|   298k|    }
  ------------------
 9410|   454k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 155k, False: 298k]
  ------------------
 9411|   454k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   454k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   454k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   454k|    }                                                                  \
  |  | 9357|   454k|    else {                                                             \
  |  | 9358|   454k|        return vis(monostate_val);                                     \
  |  | 9359|   454k|    }
  ------------------
 9412|   454k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 454k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   454k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 454k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 454k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 454k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 454k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 454k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 454k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 454k]
  ------------------
 9447|      0|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|      0|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 454k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 454k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 454k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   454k|            SCN_CLANG_POP
 9473|   454k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4369|  68.7k|    {
 4370|  68.7k|        return sync(0);
 4371|  68.7k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6262|   923k|    {
 6263|   923k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   923k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 923k]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|   923k|        return static_cast<std::size_t>(m_desc &
 6268|   923k|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|   923k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6288|  1.84M|    {
 6289|  1.84M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|  1.84M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6230|   923k|    {
 6231|   923k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   923k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 923k]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|   923k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|   923k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 923k]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|   923k|        const auto t = type(id);
 6243|   923k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|   923k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 923k]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|   923k|        basic_scan_arg<Context> arg;
 6248|   923k|        arg.m_type = t;
 6249|   923k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 923k, False: 0]
  ------------------
 6250|   923k|            arg.m_value.ref_value = m_builtin_values[id];
 6251|   923k|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|   923k|        return arg;
 6256|   923k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6297|   923k|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|   923k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|   923k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|   923k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|   923k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6292|   923k|    {
 6293|   923k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|   923k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6046|  1.75M|    {
 6047|  1.75M|        return m_type != detail::arg_type::none_type;
 6048|  1.75M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|   136k|{
 9494|   136k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   136k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   136k|{
 9353|   136k|#define SCN_VISIT(Type)                                                \
 9354|   136k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   136k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   136k|    }                                                                  \
 9357|   136k|    else {                                                             \
 9358|   136k|        return vis(monostate_val);                                     \
 9359|   136k|    }
 9360|       |
 9361|   136k|    monostate monostate_val{};
 9362|       |
 9363|   136k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 136k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 136k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 136k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 136k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 136k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 136k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 136k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 136k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 136k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 136k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 136k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 136k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 136k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 136k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 136k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 136k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 136k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|  40.7k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 40.7k, False: 96.2k]
  ------------------
 9407|  40.7k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  40.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  40.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  40.7k|    }                                                                  \
  |  | 9357|  40.7k|    else {                                                             \
  |  | 9358|  40.7k|        return vis(monostate_val);                                     \
  |  | 9359|  40.7k|    }
  ------------------
 9408|  88.0k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 47.3k, False: 89.6k]
  ------------------
 9409|  88.0k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  88.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  88.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  88.0k|    }                                                                  \
  |  | 9357|  88.0k|    else {                                                             \
  |  | 9358|  88.0k|        return vis(monostate_val);                                     \
  |  | 9359|  88.0k|    }
  ------------------
 9410|   136k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 48.9k, False: 88.0k]
  ------------------
 9411|   136k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   136k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   136k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   136k|    }                                                                  \
  |  | 9357|   136k|    else {                                                             \
  |  | 9358|   136k|        return vis(monostate_val);                                     \
  |  | 9359|   136k|    }
  ------------------
 9412|   136k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 136k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   136k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 136k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 136k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 136k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 136k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 136k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 136k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 136k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 136k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 136k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 136k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   136k|            SCN_CLANG_POP
 9473|   136k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|  2.49M|{
 6092|  2.49M|    return arg.m_type;
 6093|  2.49M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|  1.01M|{
 6104|  1.01M|    return arg.m_value;
 6105|  1.01M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|   370k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|   370k|    static_cast<    \
  |  | 1109|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|   370k|    {
 9021|   370k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6361|   370k|        : m_format{format},
 6362|   370k|          m_next_arg_id{next_arg_id},
 6363|   370k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   370k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   370k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   370k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   370k|    {
 6369|   370k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|   370k|    {
 3089|   370k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   370k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|   370k|    {
 3055|   370k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   370k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   370k|{
 7878|   370k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   370k|    handler.check_args_exhausted();
 7880|   370k|    return handler.get_error();
 7881|   370k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   370k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   370k|    auto begin = format.data();
 7846|   370k|    auto it = begin;
 7847|   370k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   635k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 370k, False: 265k]
  ------------------
 7850|   370k|        const auto ch = *it++;
 7851|   370k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 370k, False: 0]
  ------------------
 7852|   370k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   370k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   370k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 105k, False: 265k]
  ------------------
 7856|   105k|                return;
 7857|   105k|            }
 7858|   370k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   370k|    }
 7869|       |
 7870|   265k|    handler.on_literal_text(begin, end);
 7871|   265k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7774|   370k|{
 7775|   370k|    struct id_adapter {
 7776|   370k|        constexpr void operator()()
 7777|   370k|        {
 7778|   370k|            arg_id = handler.on_arg_id();
 7779|   370k|        }
 7780|   370k|        constexpr void operator()(std::size_t id)
 7781|   370k|        {
 7782|   370k|            arg_id = handler.on_arg_id(id);
 7783|   370k|        }
 7784|       |
 7785|   370k|        constexpr void on_error(const char* msg)
 7786|   370k|        {
 7787|   370k|            SCN_UNLIKELY_ATTR
 7788|   370k|            handler.on_error(msg);
 7789|   370k|        }
 7790|       |
 7791|   370k|        Handler& handler;
 7792|   370k|        std::size_t arg_id;
 7793|   370k|    };
 7794|       |
 7795|   370k|    ++begin;
 7796|   370k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   370k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 370k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   370k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 370k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   370k|    else {
 7808|   370k|        auto adapter = id_adapter{handler, 0};
 7809|   370k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   370k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   370k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 370k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   370k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 370k, False: 0]
  ------------------
 7820|   370k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   370k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   370k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   741k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 370k]
  |  |  |  Branch (1039:45): [True: 0, False: 370k]
  |  |  |  Branch (1039:45): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|   370k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   370k|    }
 7836|   370k|    return begin + 1;
 7837|   370k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8918|   741k|    {
 8919|   741k|        return m_args.get(id);
 8920|   741k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6396|   741k|    {
 6397|   741k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|   741k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 741k]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|   741k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|   741k|        do_check_arg_id(id);
 6405|   741k|        return id;
 6406|   741k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6890|   741k|{
 6891|   741k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|   741k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|   741k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   370k|{
 7276|   370k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   370k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 370k, False: 0]
  |  Branch (7277:26): [True: 0, False: 370k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   370k|    handler();
 7282|   370k|    return begin;
 7283|   370k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   370k|        {
 7778|   370k|            arg_id = handler.on_arg_id();
 7779|   370k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6391|   741k|    {
 6392|   741k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|   741k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4708|   507k|{
 4709|   507k|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 0, False: 507k]
  ------------------
 4710|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|      0|                                ranges::default_sentinel};
 4712|      0|    }
 4713|   507k|    return ranges::subrange{forward_iterator{this, 0},
 4714|   507k|                            ranges::default_sentinel};
 4715|   507k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4471|   507k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|   507k|    {
 4473|   507k|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|   507k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   507k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|   507k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|   507k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   507k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|   507k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6380|  1.48M|    {
 6381|  1.48M|        return m_format.data();
 6382|  1.48M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|   370k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   370k|    {
 7962|   370k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   370k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7690|   370k|{
 7691|   370k|    auto do_presentation = [&]() -> const CharT* {
 7692|   370k|        if (*begin == CharT{'['}) {
 7693|   370k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   370k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   370k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   370k|                return begin;
 7699|   370k|            }
 7700|   370k|            handler.on_character_set_string(set);
 7701|   370k|            return begin;
 7702|   370k|        }
 7703|   370k|        if (*begin == CharT{'/'}) {
 7704|   370k|            return parse_presentation_regex(begin, end, handler);
 7705|   370k|        }
 7706|   370k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   370k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   370k|            handler.on_error("Invalid type specifier in format string");
 7709|   370k|            return begin;
 7710|   370k|        }
 7711|   370k|        handler.on_type(type);
 7712|   370k|        return begin;
 7713|   370k|    };
 7714|       |
 7715|   370k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 370k, False: 0]
  |  Branch (7715:28): [True: 370k, False: 0]
  ------------------
 7716|   370k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 370k, False: 0]
  |  Branch (7716:36): [True: 279k, False: 91.3k]
  ------------------
 7717|   279k|        return do_presentation();
 7718|   279k|    }
 7719|       |
 7720|  91.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.3k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  91.3k|    begin = parse_align(begin, end, handler);
 7726|  91.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.3k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  91.3k|    begin = parse_width(begin, end, handler);
 7732|  91.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.3k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  91.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 91.3k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  91.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 91.3k, False: 0]
  ------------------
 7751|  91.3k|        handler.on_localized();
 7752|  91.3k|        ++begin;
 7753|  91.3k|    }
 7754|  91.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.3k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  91.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 91.3k, False: 0]
  |  Branch (7759:25): [True: 0, False: 91.3k]
  ------------------
 7760|      0|        do_presentation();
 7761|      0|    }
 7762|  91.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.3k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  91.3k|    return begin;
 7768|  91.3k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7339|   741k|{
 7340|   741k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 558k, False: 182k]
  |  Branch (7340:33): [True: 558k, False: 0]
  ------------------
 7341|   741k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 182k, False: 0]
  |  Branch (7341:33): [True: 182k, False: 0]
  ------------------
 7342|   741k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|   279k|    auto do_presentation = [&]() -> const CharT* {
 7692|   279k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 279k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   279k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 279k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   279k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   279k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 279k]
  |  |  ------------------
  ------------------
 7708|      0|            handler.on_error("Invalid type specifier in format string");
 7709|      0|            return begin;
 7710|      0|        }
 7711|   279k|        handler.on_type(type);
 7712|   279k|        return begin;
 7713|   279k|    };
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7287|   558k|{
 7288|   558k|    switch (type) {
 7289|      0|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 0, False: 558k]
  ------------------
 7290|      0|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 0, False: 558k]
  ------------------
 7291|      0|            return presentation_type::int_binary;
 7292|      0|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 0, False: 558k]
  ------------------
 7293|      0|            return presentation_type::int_decimal;
 7294|      0|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 0, False: 558k]
  ------------------
 7295|      0|            return presentation_type::int_generic;
 7296|      0|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 0, False: 558k]
  ------------------
 7297|      0|            return presentation_type::int_unsigned_decimal;
 7298|      0|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 0, False: 558k]
  ------------------
 7299|      0|            return presentation_type::int_octal;
 7300|      0|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 0, False: 558k]
  ------------------
 7301|      0|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 0, False: 558k]
  ------------------
 7302|      0|            return presentation_type::int_hex;
 7303|      0|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 0, False: 558k]
  ------------------
 7304|      0|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 0, False: 558k]
  ------------------
 7305|      0|            return presentation_type::int_arbitrary_base;
 7306|   199k|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 199k, False: 358k]
  ------------------
 7307|   199k|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 0, False: 558k]
  ------------------
 7308|   199k|            return presentation_type::float_hex;
 7309|  44.9k|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 44.9k, False: 513k]
  ------------------
 7310|  44.9k|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 0, False: 558k]
  ------------------
 7311|  44.9k|            return presentation_type::float_scientific;
 7312|   145k|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 145k, False: 413k]
  ------------------
 7313|   145k|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 0, False: 558k]
  ------------------
 7314|   145k|            return presentation_type::float_fixed;
 7315|   168k|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 168k, False: 390k]
  ------------------
 7316|   168k|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 0, False: 558k]
  ------------------
 7317|   168k|            return presentation_type::float_general;
 7318|      0|        case 's':
  ------------------
  |  Branch (7318:9): [True: 0, False: 558k]
  ------------------
 7319|      0|            return presentation_type::string;
 7320|      0|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 0, False: 558k]
  ------------------
 7321|      0|            return presentation_type::character;
 7322|      0|        case '?':
  ------------------
  |  Branch (7322:9): [True: 0, False: 558k]
  ------------------
 7323|      0|            return presentation_type::escaped_character;
 7324|      0|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 0, False: 558k]
  ------------------
 7325|      0|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 558k]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 558k]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|      0|        default:
  ------------------
  |  Branch (7332:9): [True: 0, False: 558k]
  ------------------
 7333|      0|            return presentation_type::none;
 7334|   558k|    }
 7335|   558k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7364|  91.3k|{
 7365|  91.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  91.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  91.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  91.3k|    auto check_align = [](wchar_t ch) {
 7368|  91.3k|        switch (ch) {
 7369|  91.3k|            case L'<':
 7370|  91.3k|                return align_type::left;
 7371|  91.3k|            case L'>':
 7372|  91.3k|                return align_type::right;
 7373|  91.3k|            case L'^':
 7374|  91.3k|                return align_type::center;
 7375|  91.3k|            default:
 7376|  91.3k|                return align_type::none;
 7377|  91.3k|        }
 7378|  91.3k|    };
 7379|       |
 7380|  91.3k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  91.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.3k]
  |  |  |  Branch (1039:45): [True: 0, False: 91.3k]
  |  |  |  Branch (1039:45): [True: 0, False: 91.3k]
  |  |  ------------------
  ------------------
 7382|  91.3k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  91.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  91.3k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  91.3k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  91.3k|    const auto begin_before_fill = begin;
 7392|  91.3k|    begin += potential_fill_len;
 7393|       |
 7394|  91.3k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 91.3k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  91.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  91.3k|    const auto begin_after_fill = begin;
 7400|  91.3k|    ++begin;
 7401|       |
 7402|  91.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 91.3k, False: 0]
  ------------------
 7403|  91.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  91.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.3k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  91.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 91.3k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|  91.3k|    }
 7411|       |
 7412|  91.3k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 91.3k, False: 0]
  ------------------
 7413|  91.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 91.3k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  91.3k|        return begin_before_fill;
 7418|  91.3k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  91.3k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7346|   182k|{
 7347|   182k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   182k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   182k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|   182k|    if constexpr (sizeof(CharT) != 1) {
 7349|   182k|        return 1;
 7350|       |    }
 7351|       |    else {
 7352|       |        const auto lengths =
 7353|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|       |            "\3\4";
 7355|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|       |        return len;
 7357|       |    }
 7358|   182k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|   182k|    auto check_align = [](wchar_t ch) {
 7368|   182k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 182k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 182k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 182k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   182k|            default:
  ------------------
  |  Branch (7375:13): [True: 182k, False: 0]
  ------------------
 7376|   182k|                return align_type::none;
 7377|   182k|        }
 7378|   182k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7429|  91.3k|{
 7430|  91.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  91.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  91.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  91.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 91.3k, False: 0]
  |  Branch (7432:33): [True: 0, False: 91.3k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|  91.3k|    return begin;
 7443|  91.3k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7966|  91.3k|    {
 7967|  91.3k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  91.3k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 91.3k, False: 0]
  ------------------
 7969|  91.3k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 91.3k, False: 0]
  ------------------
 7970|  91.3k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 91.3k]
  ------------------
 7971|  91.3k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|  91.3k|        Handler::on_localized();
 7979|  91.3k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|   370k|{
 9494|   370k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   370k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   370k|{
 9353|   370k|#define SCN_VISIT(Type)                                                \
 9354|   370k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   370k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   370k|    }                                                                  \
 9357|   370k|    else {                                                             \
 9358|   370k|        return vis(monostate_val);                                     \
 9359|   370k|    }
 9360|       |
 9361|   370k|    monostate monostate_val{};
 9362|       |
 9363|   370k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 370k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 370k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 370k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 370k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 370k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 370k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 370k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 370k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 370k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 370k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 370k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 370k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 370k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 370k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 370k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 370k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 370k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|   116k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 116k, False: 253k]
  ------------------
 9407|   116k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   116k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   116k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   116k|    }                                                                  \
  |  | 9357|   116k|    else {                                                             \
  |  | 9358|   116k|        return vis(monostate_val);                                     \
  |  | 9359|   116k|    }
  ------------------
 9408|   242k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 125k, False: 245k]
  ------------------
 9409|   242k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   242k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   242k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   242k|    }                                                                  \
  |  | 9357|   242k|    else {                                                             \
  |  | 9358|   242k|        return vis(monostate_val);                                     \
  |  | 9359|   242k|    }
  ------------------
 9410|   370k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 128k, False: 242k]
  ------------------
 9411|   370k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   370k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   370k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   370k|    }                                                                  \
  |  | 9357|   370k|    else {                                                             \
  |  | 9358|   370k|        return vis(monostate_val);                                     \
  |  | 9359|   370k|    }
  ------------------
 9412|   370k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 370k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   370k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 370k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 370k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 370k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 370k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 370k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 370k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 370k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 370k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 370k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 370k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   370k|            SCN_CLANG_POP
 9473|   370k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|   136k|{
 9494|   136k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   136k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   136k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   136k|{
 9353|   136k|#define SCN_VISIT(Type)                                                \
 9354|   136k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   136k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   136k|    }                                                                  \
 9357|   136k|    else {                                                             \
 9358|   136k|        return vis(monostate_val);                                     \
 9359|   136k|    }
 9360|       |
 9361|   136k|    monostate monostate_val{};
 9362|       |
 9363|   136k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 136k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 136k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 136k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 136k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 136k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 136k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 136k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 136k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 136k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 136k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 136k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 136k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 136k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 136k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 136k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 136k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 136k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|  40.6k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 40.6k, False: 96.1k]
  ------------------
 9407|  40.6k|            SCN_VISIT(float);
  ------------------
  |  | 9354|  40.6k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  40.6k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  40.6k|    }                                                                  \
  |  | 9357|  40.6k|    else {                                                             \
  |  | 9358|  40.6k|        return vis(monostate_val);                                     \
  |  | 9359|  40.6k|    }
  ------------------
 9408|  87.9k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 47.2k, False: 89.5k]
  ------------------
 9409|  87.9k|            SCN_VISIT(double);
  ------------------
  |  | 9354|  87.9k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  87.9k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  87.9k|    }                                                                  \
  |  | 9357|  87.9k|    else {                                                             \
  |  | 9358|  87.9k|        return vis(monostate_val);                                     \
  |  | 9359|  87.9k|    }
  ------------------
 9410|   136k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 48.8k, False: 87.9k]
  ------------------
 9411|   136k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   136k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   136k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   136k|    }                                                                  \
  |  | 9357|   136k|    else {                                                             \
  |  | 9358|   136k|        return vis(monostate_val);                                     \
  |  | 9359|   136k|    }
  ------------------
 9412|   136k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 136k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   136k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 136k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 136k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 136k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 136k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 136k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 136k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 136k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 136k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 136k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 136k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   136k|            SCN_CLANG_POP
 9473|   136k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6361|   370k|        : m_format{format},
 6362|   370k|          m_next_arg_id{next_arg_id},
 6363|   370k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   370k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   370k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   370k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   370k|    {
 6369|   370k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   370k|{
 7878|   370k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   370k|    handler.check_args_exhausted();
 7880|   370k|    return handler.get_error();
 7881|   370k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   370k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   370k|    auto begin = format.data();
 7846|   370k|    auto it = begin;
 7847|   370k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   635k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 370k, False: 264k]
  ------------------
 7850|   370k|        const auto ch = *it++;
 7851|   370k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 370k, False: 0]
  ------------------
 7852|   370k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   370k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   370k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 105k, False: 264k]
  ------------------
 7856|   105k|                return;
 7857|   105k|            }
 7858|   370k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   370k|    }
 7869|       |
 7870|   264k|    handler.on_literal_text(begin, end);
 7871|   264k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9057|   264k|    {
 9058|   264k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   264k|    static_cast<    \
  |  | 1109|   264k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|   264k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7774|   370k|{
 7775|   370k|    struct id_adapter {
 7776|   370k|        constexpr void operator()()
 7777|   370k|        {
 7778|   370k|            arg_id = handler.on_arg_id();
 7779|   370k|        }
 7780|   370k|        constexpr void operator()(std::size_t id)
 7781|   370k|        {
 7782|   370k|            arg_id = handler.on_arg_id(id);
 7783|   370k|        }
 7784|       |
 7785|   370k|        constexpr void on_error(const char* msg)
 7786|   370k|        {
 7787|   370k|            SCN_UNLIKELY_ATTR
 7788|   370k|            handler.on_error(msg);
 7789|   370k|        }
 7790|       |
 7791|   370k|        Handler& handler;
 7792|   370k|        std::size_t arg_id;
 7793|   370k|    };
 7794|       |
 7795|   370k|    ++begin;
 7796|   370k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   370k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 370k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   370k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 370k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   370k|    else {
 7808|   370k|        auto adapter = id_adapter{handler, 0};
 7809|   370k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   370k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   370k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 370k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   370k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 370k, False: 0]
  ------------------
 7820|   370k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   370k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   370k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   741k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 370k]
  |  |  |  Branch (1039:45): [True: 0, False: 370k]
  |  |  |  Branch (1039:45): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 7826|      0|                handler.on_error("Unknown format specifier");
 7827|      0|                return begin;
 7828|      0|            }
 7829|   370k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   370k|    }
 7836|   370k|    return begin + 1;
 7837|   370k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   370k|{
 7276|   370k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   370k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 370k, False: 0]
  |  Branch (7277:26): [True: 0, False: 370k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   370k|    handler();
 7282|   370k|    return begin;
 7283|   370k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   370k|        {
 7778|   370k|            arg_id = handler.on_arg_id();
 7779|   370k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7960|   370k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   370k|    {
 7962|   370k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   370k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7690|   370k|{
 7691|   370k|    auto do_presentation = [&]() -> const CharT* {
 7692|   370k|        if (*begin == CharT{'['}) {
 7693|   370k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   370k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   370k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   370k|                return begin;
 7699|   370k|            }
 7700|   370k|            handler.on_character_set_string(set);
 7701|   370k|            return begin;
 7702|   370k|        }
 7703|   370k|        if (*begin == CharT{'/'}) {
 7704|   370k|            return parse_presentation_regex(begin, end, handler);
 7705|   370k|        }
 7706|   370k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   370k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   370k|            handler.on_error("Invalid type specifier in format string");
 7709|   370k|            return begin;
 7710|   370k|        }
 7711|   370k|        handler.on_type(type);
 7712|   370k|        return begin;
 7713|   370k|    };
 7714|       |
 7715|   370k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 370k, False: 0]
  |  Branch (7715:28): [True: 370k, False: 0]
  ------------------
 7716|   370k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 370k, False: 0]
  |  Branch (7716:36): [True: 279k, False: 91.2k]
  ------------------
 7717|   279k|        return do_presentation();
 7718|   279k|    }
 7719|       |
 7720|  91.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.2k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  91.2k|    begin = parse_align(begin, end, handler);
 7726|  91.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.2k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  91.2k|    begin = parse_width(begin, end, handler);
 7732|  91.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.2k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  91.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 91.2k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  91.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 91.2k, False: 0]
  ------------------
 7751|  91.2k|        handler.on_localized();
 7752|  91.2k|        ++begin;
 7753|  91.2k|    }
 7754|  91.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.2k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  91.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 91.2k, False: 0]
  |  Branch (7759:25): [True: 0, False: 91.2k]
  ------------------
 7760|      0|        do_presentation();
 7761|      0|    }
 7762|  91.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  91.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.2k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  91.2k|    return begin;
 7768|  91.2k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7691|   279k|    auto do_presentation = [&]() -> const CharT* {
 7692|   279k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 0, False: 279k]
  ------------------
 7693|      0|            auto set = parse_presentation_set(begin, end, handler);
 7694|      0|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|      0|            handler.on_character_set_string(set);
 7701|      0|            return begin;
 7702|      0|        }
 7703|   279k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 279k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   279k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   279k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 279k]
  |  |  ------------------
  ------------------
 7708|      0|            handler.on_error("Invalid type specifier in format string");
 7709|      0|            return begin;
 7710|      0|        }
 7711|   279k|        handler.on_type(type);
 7712|   279k|        return begin;
 7713|   279k|    };
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7364|  91.2k|{
 7365|  91.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  91.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  91.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  91.2k|    auto check_align = [](wchar_t ch) {
 7368|  91.2k|        switch (ch) {
 7369|  91.2k|            case L'<':
 7370|  91.2k|                return align_type::left;
 7371|  91.2k|            case L'>':
 7372|  91.2k|                return align_type::right;
 7373|  91.2k|            case L'^':
 7374|  91.2k|                return align_type::center;
 7375|  91.2k|            default:
 7376|  91.2k|                return align_type::none;
 7377|  91.2k|        }
 7378|  91.2k|    };
 7379|       |
 7380|  91.2k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  91.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|   182k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.2k]
  |  |  |  Branch (1039:45): [True: 0, False: 91.2k]
  |  |  |  Branch (1039:45): [True: 0, False: 91.2k]
  |  |  ------------------
  ------------------
 7382|  91.2k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  91.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  91.2k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  91.2k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  91.2k|    const auto begin_before_fill = begin;
 7392|  91.2k|    begin += potential_fill_len;
 7393|       |
 7394|  91.2k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 91.2k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  91.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  91.2k|    const auto begin_after_fill = begin;
 7400|  91.2k|    ++begin;
 7401|       |
 7402|  91.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 91.2k, False: 0]
  ------------------
 7403|  91.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  91.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 91.2k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  91.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 0, False: 91.2k]
  ------------------
 7408|      0|            return begin_before_fill;
 7409|      0|        }
 7410|  91.2k|    }
 7411|       |
 7412|  91.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 91.2k, False: 0]
  ------------------
 7413|  91.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 91.2k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  91.2k|        return begin_before_fill;
 7418|  91.2k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  91.2k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7367|   182k|    auto check_align = [](wchar_t ch) {
 7368|   182k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 182k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 182k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 182k]
  ------------------
 7374|      0|                return align_type::center;
 7375|   182k|            default:
  ------------------
  |  Branch (7375:13): [True: 182k, False: 0]
  ------------------
 7376|   182k|                return align_type::none;
 7377|   182k|        }
 7378|   182k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7429|  91.2k|{
 7430|  91.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  91.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  91.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  91.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 91.2k, False: 0]
  |  Branch (7432:33): [True: 0, False: 91.2k]
  ------------------
 7433|      0|        int width = parse_simple_int(begin, end);
 7434|      0|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7435|      0|            handler.on_width(width);
 7436|      0|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|      0|    }
 7442|  91.2k|    return begin;
 7443|  91.2k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7966|  91.2k|    {
 7967|  91.2k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  91.2k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 91.2k, False: 0]
  ------------------
 7969|  91.2k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 91.2k, False: 0]
  ------------------
 7970|  91.2k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 0, False: 91.2k]
  ------------------
 7971|  91.2k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 0, False: 0]
  ------------------
 7972|      0|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|      0|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|      0|        }
 7977|       |
 7978|  91.2k|        Handler::on_localized();
 7979|  91.2k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9493|   370k|{
 9494|   370k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   370k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   370k|{
 9353|   370k|#define SCN_VISIT(Type)                                                \
 9354|   370k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   370k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   370k|    }                                                                  \
 9357|   370k|    else {                                                             \
 9358|   370k|        return vis(monostate_val);                                     \
 9359|   370k|    }
 9360|       |
 9361|   370k|    monostate monostate_val{};
 9362|       |
 9363|   370k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 370k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 370k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 370k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 370k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 370k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 370k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 370k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 370k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 370k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 370k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 370k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 370k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 370k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 370k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 370k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 370k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 370k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|   116k|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 116k, False: 253k]
  ------------------
 9407|   116k|            SCN_VISIT(float);
  ------------------
  |  | 9354|   116k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   116k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   116k|    }                                                                  \
  |  | 9357|   116k|    else {                                                             \
  |  | 9358|   116k|        return vis(monostate_val);                                     \
  |  | 9359|   116k|    }
  ------------------
 9408|   242k|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 125k, False: 244k]
  ------------------
 9409|   242k|            SCN_VISIT(double);
  ------------------
  |  | 9354|   242k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   242k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   242k|    }                                                                  \
  |  | 9357|   242k|    else {                                                             \
  |  | 9358|   242k|        return vis(monostate_val);                                     \
  |  | 9359|   242k|    }
  ------------------
 9410|   370k|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 127k, False: 242k]
  ------------------
 9411|   370k|            SCN_VISIT(long double);
  ------------------
  |  | 9354|   370k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   370k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   370k|    }                                                                  \
  |  | 9357|   370k|    else {                                                             \
  |  | 9358|   370k|        return vis(monostate_val);                                     \
  |  | 9359|   370k|    }
  ------------------
 9412|   370k|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 370k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|   370k|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 370k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 370k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 370k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 370k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 370k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 370k]
  ------------------
 9445|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9446|      0|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 370k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|      0|            else {
 9451|      0|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9452|      0|            }
 9453|      0|        }
 9454|       |
 9455|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 370k]
  ------------------
 9456|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|      0|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|      0|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 370k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 370k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   370k|            SCN_CLANG_POP
 9473|   370k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4369|   137k|    {
 4370|   137k|        return sync(0);
 4371|   137k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6216|   112k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6216|  91.2k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  72.0k|{
   89|  72.0k|    auto result = make_scan_result<Source, Args...>();
   90|  72.0k|    fill_scan_result(result,
   91|  72.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  72.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  72.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  72.0k|    return result;
   94|  72.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   231k|{
   44|   231k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   231k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  72.0k|{
  131|  72.0k|    auto result = make_scan_result<Source, Args...>();
  132|  72.0k|    fill_scan_result(result,
  133|  72.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  72.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  72.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  72.0k|    return result;
  136|  72.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   231k|{
   60|   231k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   231k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  13.5k|{
  171|  13.5k|    auto result = make_scan_result<Source, T>();
  172|  13.5k|    fill_scan_result(
  173|  13.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  13.5k|                            detail::make_arg<wscan_context>(result->value())));
  175|  13.5k|    return result;
  176|  13.5k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|  45.6k|{
   72|  45.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|  45.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  45.6k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  78.6k|{
   89|  78.6k|    auto result = make_scan_result<Source, Args...>();
   90|  78.6k|    fill_scan_result(result,
   91|  78.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  78.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  78.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  78.6k|    return result;
   94|  78.6k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  78.6k|{
  131|  78.6k|    auto result = make_scan_result<Source, Args...>();
  132|  78.6k|    fill_scan_result(result,
  133|  78.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  78.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  78.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  78.6k|    return result;
  136|  78.6k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  15.7k|{
  171|  15.7k|    auto result = make_scan_result<Source, T>();
  172|  15.7k|    fill_scan_result(
  173|  15.7k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.7k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.7k|    return result;
  176|  15.7k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJDpT_EEEEEOSB_NS0_24basic_scan_format_stringIwNSN_13type_identityISB_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  80.3k|{
   89|  80.3k|    auto result = make_scan_result<Source, Args...>();
   90|  80.3k|    fill_scan_result(result,
   91|  80.3k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  80.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  80.3k|                           make_scan_args<wscan_context>(result->values())));
   93|  80.3k|    return result;
   94|  80.3k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSG_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISC_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEJDpT_EEEEERKT0_OSC_NS0_24basic_scan_format_stringIwNSP_13type_identityISC_E4typeEJDpNS14_ISV_E4typeEEEE:
  130|  80.3k|{
  131|  80.3k|    auto result = make_scan_result<Source, Args...>();
  132|  80.3k|    fill_scan_result(result,
  133|  80.3k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  80.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  80.3k|                           make_scan_args<wscan_context>(result->values())));
  135|  80.3k|    return result;
  136|  80.3k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeIPKwS7_EETnPNSt3__19enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISB_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISB_Xsr6rangesE14borrowed_rangeISB_EEE4typeEE4typeEJT_EEEEEOSB_:
  170|  16.3k|{
  171|  16.3k|    auto result = make_scan_result<Source, T>();
  172|  16.3k|    fill_scan_result(
  173|  16.3k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  16.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  16.3k|                            detail::make_arg<wscan_context>(result->value())));
  175|  16.3k|    return result;
  176|  16.3k|}
_ZN3scn2v44scanIJfENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  72.0k|{
   89|  72.0k|    auto result = make_scan_result<Source, Args...>();
   90|  72.0k|    fill_scan_result(result,
   91|  72.0k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  72.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  72.0k|                           make_scan_args<wscan_context>(result->values())));
   93|  72.0k|    return result;
   94|  72.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   230k|{
   44|   230k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   230k|}
_ZN3scn2v44scanIJfENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  72.0k|{
  131|  72.0k|    auto result = make_scan_result<Source, Args...>();
  132|  72.0k|    fill_scan_result(result,
  133|  72.0k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  72.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  72.0k|                           make_scan_args<wscan_context>(result->values())));
  135|  72.0k|    return result;
  136|  72.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   230k|{
   60|   230k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   230k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   230k|}
_ZN3scn2v410scan_valueIfNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  13.5k|{
  171|  13.5k|    auto result = make_scan_result<Source, T>();
  172|  13.5k|    fill_scan_result(
  173|  13.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  13.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  13.5k|                            detail::make_arg<wscan_context>(result->value())));
  175|  13.5k|    return result;
  176|  13.5k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|  45.6k|{
   72|  45.6k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|  45.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  45.6k|}
_ZN3scn2v44scanIJdENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  78.6k|{
   89|  78.6k|    auto result = make_scan_result<Source, Args...>();
   90|  78.6k|    fill_scan_result(result,
   91|  78.6k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  78.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  78.6k|                           make_scan_args<wscan_context>(result->values())));
   93|  78.6k|    return result;
   94|  78.6k|}
_ZN3scn2v44scanIJdENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  78.6k|{
  131|  78.6k|    auto result = make_scan_result<Source, Args...>();
  132|  78.6k|    fill_scan_result(result,
  133|  78.6k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  78.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  78.6k|                           make_scan_args<wscan_context>(result->values())));
  135|  78.6k|    return result;
  136|  78.6k|}
_ZN3scn2v410scan_valueIdNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  15.7k|{
  171|  15.7k|    auto result = make_scan_result<Source, T>();
  172|  15.7k|    fill_scan_result(
  173|  15.7k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  15.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  15.7k|                            detail::make_arg<wscan_context>(result->value())));
  175|  15.7k|    return result;
  176|  15.7k|}
_ZN3scn2v44scanIJeENS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEEOSG_NS0_24basic_scan_format_stringIwNSS_13type_identityISG_E4typeEJDpNS14_ISY_E4typeEEEE:
   88|  80.2k|{
   89|  80.2k|    auto result = make_scan_result<Source, Args...>();
   90|  80.2k|    fill_scan_result(result,
   91|  80.2k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  80.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|  80.2k|                           make_scan_args<wscan_context>(result->values())));
   93|  80.2k|    return result;
   94|  80.2k|}
_ZN3scn2v44scanIJeENSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSL_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEERKT0_OSH_NS0_24basic_scan_format_stringIwNSU_13type_identityISH_E4typeEJDpNS19_IS10_E4typeEEEE:
  130|  80.2k|{
  131|  80.2k|    auto result = make_scan_result<Source, Args...>();
  132|  80.2k|    fill_scan_result(result,
  133|  80.2k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  80.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|  80.2k|                           make_scan_args<wscan_context>(result->values())));
  135|  80.2k|    return result;
  136|  80.2k|}
_ZN3scn2v410scan_valueIeNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EETnPNS6_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESR_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJT_EEEEEOSG_:
  170|  16.2k|{
  171|  16.2k|    auto result = make_scan_result<Source, T>();
  172|  16.2k|    fill_scan_result(
  173|  16.2k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|  16.2k|                            detail::make_arg<wscan_context>(result->value())));
  175|  16.2k|    return result;
  176|  16.2k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.01M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.01M|{
  309|  1.01M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.01M|}
_ZNK3scn2v46detail10locale_ref3getINSt3__16localeEEET_v:
  314|   414k|{
  315|   414k|    static_assert(std::is_same_v<Locale, std::locale>);
  316|   414k|    return m_locale ? *static_cast<const std::locale*>(m_locale)
  ------------------
  |  Branch (316:12): [True: 207k, False: 207k]
  ------------------
  317|   414k|                    : std::locale{};
  318|   414k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1828|   357k|{
 1829|   357k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   357k|                                      m_nan_payload_buffer, value);
 1831|   357k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   357k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 344k, False: 12.7k]
  |  |  ------------------
  ------------------
 1832|   344k|        value = this->setsign(value);
 1833|   344k|        return n;
 1834|   344k|    }
 1835|       |
 1836|  12.7k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 3.38k, False: 9.37k]
  ------------------
 1837|  12.7k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 879, False: 2.50k]
  ------------------
 1838|    879|        return detail::unexpected_scan_error(
 1839|    879|            scan_error::value_negative_overflow, n.error().msg());
 1840|    879|    }
 1841|  11.8k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 546, False: 11.3k]
  ------------------
 1842|  11.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 80, False: 466]
  ------------------
 1843|     80|        return detail::unexpected_scan_error(
 1844|     80|            scan_error::value_negative_underflow, n.error().msg());
 1845|     80|    }
 1846|  11.8k|    return n;
 1847|  11.8k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIfEENS0_13scan_expectedIlEERT_:
 1828|   249k|{
 1829|   249k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   249k|                                      m_nan_payload_buffer, value);
 1831|   249k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   249k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 223k, False: 26.0k]
  |  |  ------------------
  ------------------
 1832|   223k|        value = this->setsign(value);
 1833|   223k|        return n;
 1834|   223k|    }
 1835|       |
 1836|  26.0k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 2.54k, False: 23.4k]
  ------------------
 1837|  26.0k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 104, False: 2.43k]
  ------------------
 1838|    104|        return detail::unexpected_scan_error(
 1839|    104|            scan_error::value_negative_overflow, n.error().msg());
 1840|    104|    }
 1841|  25.9k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 788, False: 25.1k]
  ------------------
 1842|  25.9k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 50, False: 738]
  ------------------
 1843|     50|        return detail::unexpected_scan_error(
 1844|     50|            scan_error::value_negative_underflow, n.error().msg());
 1845|     50|    }
 1846|  25.8k|    return n;
 1847|  25.9k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1828|   371k|{
 1829|   371k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   371k|                                      m_nan_payload_buffer, value);
 1831|   371k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   371k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 360k, False: 11.4k]
  |  |  ------------------
  ------------------
 1832|   360k|        value = this->setsign(value);
 1833|   360k|        return n;
 1834|   360k|    }
 1835|       |
 1836|  11.4k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 2.04k, False: 9.35k]
  ------------------
 1837|  11.4k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 526, False: 1.51k]
  ------------------
 1838|    526|        return detail::unexpected_scan_error(
 1839|    526|            scan_error::value_negative_overflow, n.error().msg());
 1840|    526|    }
 1841|  10.8k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 227, False: 10.6k]
  ------------------
 1842|  10.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 77, False: 150]
  ------------------
 1843|     77|        return detail::unexpected_scan_error(
 1844|     77|            scan_error::value_negative_underflow, n.error().msg());
 1845|     77|    }
 1846|  10.7k|    return n;
 1847|  10.8k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIdEENS0_13scan_expectedIlEERT_:
 1828|   279k|{
 1829|   279k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   279k|                                      m_nan_payload_buffer, value);
 1831|   279k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   279k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 254k, False: 24.8k]
  |  |  ------------------
  ------------------
 1832|   254k|        value = this->setsign(value);
 1833|   254k|        return n;
 1834|   254k|    }
 1835|       |
 1836|  24.8k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 1.49k, False: 23.3k]
  ------------------
 1837|  24.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 104, False: 1.38k]
  ------------------
 1838|    104|        return detail::unexpected_scan_error(
 1839|    104|            scan_error::value_negative_overflow, n.error().msg());
 1840|    104|    }
 1841|  24.7k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 192, False: 24.5k]
  ------------------
 1842|  24.7k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 18, False: 174]
  ------------------
 1843|     18|        return detail::unexpected_scan_error(
 1844|     18|            scan_error::value_negative_underflow, n.error().msg());
 1845|     18|    }
 1846|  24.7k|    return n;
 1847|  24.7k|}
_ZN3scn2v44impl12float_readerIcE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1828|   379k|{
 1829|   379k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   379k|                                      m_nan_payload_buffer, value);
 1831|   379k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   379k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 369k, False: 9.96k]
  |  |  ------------------
  ------------------
 1832|   369k|        value = this->setsign(value);
 1833|   369k|        return n;
 1834|   369k|    }
 1835|       |
 1836|  9.96k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 409, False: 9.56k]
  ------------------
 1837|  9.96k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 179, False: 230]
  ------------------
 1838|    179|        return detail::unexpected_scan_error(
 1839|    179|            scan_error::value_negative_overflow, n.error().msg());
 1840|    179|    }
 1841|  9.79k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 94, False: 9.69k]
  ------------------
 1842|  9.79k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 38, False: 56]
  ------------------
 1843|     38|        return detail::unexpected_scan_error(
 1844|     38|            scan_error::value_negative_underflow, n.error().msg());
 1845|     38|    }
 1846|  9.75k|    return n;
 1847|  9.79k|}
_ZN3scn2v44impl12float_readerIwE16parse_value_implIeEENS0_13scan_expectedIlEERT_:
 1828|   286k|{
 1829|   286k|    auto n = parse_float_value<CharT>({this->m_buffer, m_kind, m_options},
 1830|   286k|                                      m_nan_payload_buffer, value);
 1831|   286k|    if (SCN_LIKELY(n)) {
  ------------------
  |  | 1038|   286k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 262k, False: 23.8k]
  |  |  ------------------
  ------------------
 1832|   262k|        value = this->setsign(value);
 1833|   262k|        return n;
 1834|   262k|    }
 1835|       |
 1836|  23.8k|    if (n.error().code() == scan_error::value_positive_overflow &&
  ------------------
  |  Branch (1836:9): [True: 132, False: 23.6k]
  ------------------
 1837|  23.8k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1837:9): [True: 32, False: 100]
  ------------------
 1838|     32|        return detail::unexpected_scan_error(
 1839|     32|            scan_error::value_negative_overflow, n.error().msg());
 1840|     32|    }
 1841|  23.7k|    if (n.error().code() == scan_error::value_positive_underflow &&
  ------------------
  |  Branch (1841:9): [True: 68, False: 23.7k]
  ------------------
 1842|  23.7k|        m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (1842:9): [True: 18, False: 50]
  ------------------
 1843|     18|        return detail::unexpected_scan_error(
 1844|     18|            scan_error::value_negative_underflow, n.error().msg());
 1845|     18|    }
 1846|  23.7k|    return n;
 1847|  23.7k|}
_ZN3scn2v44impl19parse_integer_valueIcmEENS0_13scan_expectedINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEEES9_RT0_NS1_9sign_typeEi:
 2184|  11.0k|{
 2185|  11.0k|    SCN_EXPECT(!source.empty());
  ------------------
  |  | 1104|  11.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2186|  11.0k|    SCN_EXPECT(std::is_signed_v<T> || sign == sign_type::plus_sign);
  ------------------
  |  | 1104|  11.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2187|  11.0k|    SCN_EXPECT(sign != sign_type::default_sign);
  ------------------
  |  | 1104|  11.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2188|  11.0k|    SCN_EXPECT(base > 0);
  ------------------
  |  | 1104|  11.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2189|       |
 2190|  11.0k|    if (char_to_int(source[0]) >= base) {
  ------------------
  |  Branch (2190:9): [True: 96, False: 10.9k]
  ------------------
 2191|     96|        SCN_UNLIKELY_ATTR
 2192|     96|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 2193|     96|                                             "Invalid integer value");
 2194|     96|    }
 2195|       |
 2196|       |    // Skip leading zeroes
 2197|  10.9k|    auto start = source.data();
 2198|  10.9k|    const auto end = source.data() + source.size();
 2199|  10.9k|    {
 2200|   156k|        for (; start != end; ++start) {
  ------------------
  |  Branch (2200:16): [True: 156k, False: 522]
  ------------------
 2201|   156k|            if (*start != CharT{'0'}) {
  ------------------
  |  Branch (2201:17): [True: 10.4k, False: 145k]
  ------------------
 2202|  10.4k|                break;
 2203|  10.4k|            }
 2204|   156k|        }
 2205|  10.9k|        if (SCN_UNLIKELY(start == end || char_to_int(*start) >= base)) {
  ------------------
  |  | 1039|  21.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 732, False: 10.2k]
  |  |  |  Branch (1039:45): [True: 522, False: 10.4k]
  |  |  |  Branch (1039:45): [True: 210, False: 10.2k]
  |  |  ------------------
  ------------------
 2206|    732|            value = 0;
 2207|    732|            return ranges::next(source.begin(),
 2208|    732|                                ranges::distance(source.data(), start));
 2209|    732|        }
 2210|  10.9k|    }
 2211|       |
 2212|       |    if constexpr (std::is_same_v<CharT, char> &&
 2213|  10.2k|                  sizeof(T) <= sizeof(std::uint64_t)) {
 2214|  10.2k|        if (base == 10) {
  ------------------
  |  Branch (2214:13): [True: 10.2k, False: 0]
  ------------------
 2215|  10.2k|            SCN_TRY(ptr, parse_decimal_integer_fast(
  ------------------
  |  | 3958|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.23k, False: 9.02k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.23k|    }                                                  \
  |  |  |  | 3957|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  9.02k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2216|  9.02k|                             detail::make_string_view_from_pointers(start, end),
 2217|  9.02k|                             value, sign == sign_type::minus_sign));
 2218|  9.02k|            return ranges::next(source.begin(),
 2219|  9.02k|                                ranges::distance(source.data(), ptr));
 2220|  10.2k|        }
 2221|  10.2k|    }
 2222|       |
 2223|  10.2k|    SCN_TRY(ptr, parse_regular_integer(
  ------------------
  |  | 3958|  10.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  10.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  10.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  10.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  10.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2224|  10.2k|                     detail::make_string_view_from_pointers(start, end), value,
 2225|  10.2k|                     base, sign == sign_type::minus_sign));
 2226|  10.2k|    return ranges::next(source.begin(), ranges::distance(source.data(), ptr));
 2227|  10.2k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2935|   266k|{
 2936|   266k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2937|   266k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2943|   283k|{
 2944|   283k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2945|   283k|    return sync_after_vscan(source, n);
 2946|   283k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2953|   231k|{
 2954|   231k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2955|   231k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2961|   230k|{
 2962|   230k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2963|   230k|    return sync_after_vscan(source, n);
 2964|   230k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   943k|{
  207|   943k|    return find_classic_impl(
  208|   943k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   943k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   943k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|  1.20M|{
  215|  1.20M|    return find_classic_impl(
  216|  1.20M|        source, [](char ch) { return !is_ascii_space(ch); },
  217|  1.20M|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|  1.20M|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2904|   266k|{
 2905|   266k|    return vscan_internal(source, format, args);
 2906|   266k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2910|   283k|{
 2911|   283k|    auto n = vscan_internal(source, format, args);
 2912|   283k|    return sync_after_vscan(source, n);
 2913|   283k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2918|   231k|{
 2919|   231k|    return vscan_internal(source, format, args);
 2920|   231k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2924|   230k|{
 2925|   230k|    auto n = vscan_internal(source, format, args);
 2926|   230k|    return sync_after_vscan(source, n);
 2927|   230k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2990|  56.4k|{
 2991|  56.4k|    return vscan_value_internal(source, arg);
 2992|  56.4k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2995|  56.3k|{
 2996|  56.3k|    auto n = vscan_value_internal(source, arg);
 2997|  56.3k|    return sync_after_vscan(source, n);
 2998|  56.3k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3003|  45.6k|{
 3004|  45.6k|    return vscan_value_internal(source, arg);
 3005|  45.6k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3009|  45.6k|{
 3010|  45.6k|    auto n = vscan_value_internal(source, arg);
 3011|  45.6k|    return sync_after_vscan(source, n);
 3012|  45.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_113maxdigits_u64Ei:
 1959|  10.2k|{
 1960|  10.2k|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1104|  10.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1961|  10.2k|    return maxdigits_u64_table[static_cast<size_t>(base)];
 1962|  10.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112min_safe_u64Ei:
 2003|    312|{
 2004|    312|    SCN_EXPECT(base >= 2 && base <= 36);
  ------------------
  |  | 1104|    312|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    312|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2005|    312|    return min_safe_u64_table[static_cast<size_t>(base)];
 2006|    312|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122check_integer_overflowImEEbmmib:
 2013|  10.2k|{
 2014|  10.2k|    auto max_digits = maxdigits_u64(base);
 2015|  10.2k|    if (digits_count > max_digits) {
  ------------------
  |  Branch (2015:9): [True: 1.08k, False: 9.18k]
  ------------------
 2016|  1.08k|        return true;
 2017|  1.08k|    }
 2018|  9.18k|    if (digits_count == max_digits && val < min_safe_u64(base)) {
  ------------------
  |  Branch (2018:9): [True: 312, False: 8.87k]
  |  Branch (2018:39): [True: 156, False: 156]
  ------------------
 2019|    156|        return true;
 2020|    156|    }
 2021|       |    if constexpr (!std::is_same_v<T, uint64_t>) {
 2022|       |        if (val > static_cast<uint64_t>(std::numeric_limits<T>::max()) +
 2023|       |                      static_cast<uint64_t>(is_negative)) {
 2024|       |            SCN_UNLIKELY_ATTR
 2025|       |            return true;
 2026|       |        }
 2027|       |    }
 2028|       |
 2029|  9.02k|    return false;
 2030|  9.18k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112store_resultImmEET_T0_b:
 2034|  9.02k|{
 2035|  9.02k|    if (is_negative) {
  ------------------
  |  Branch (2035:9): [True: 0, False: 9.02k]
  ------------------
 2036|      0|        SCN_MSVC_PUSH
 2037|      0|        SCN_MSVC_IGNORE(4146)
 2038|      0|        return static_cast<T>(
 2039|      0|            -std::numeric_limits<T>::max() -
 2040|      0|            static_cast<T>(acc - std::numeric_limits<T>::max()));
 2041|      0|        SCN_MSVC_POP
 2042|      0|    }
 2043|       |
 2044|  9.02k|    return static_cast<T>(acc);
 2045|  9.02k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_121get_eight_digits_wordEPKc:
 1897|  17.6k|{
 1898|  17.6k|    uint64_t val{};
 1899|  17.6k|    std::memcpy(&val, input, sizeof(uint64_t));
 1900|       |    if constexpr (SCN_IS_BIG_ENDIAN) {
 1901|       |        val = byteswap(val);
 1902|       |    }
 1903|  17.6k|    return val;
 1904|  17.6k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_140parse_eight_decimal_digits_unrolled_fastEm:
 1907|  8.49k|{
 1908|  8.49k|    constexpr uint64_t mask = 0x000000FF000000FF;
 1909|  8.49k|    constexpr uint64_t mul1 = 0x000F424000000064;  // 100 + (1000000ULL << 32)
 1910|  8.49k|    constexpr uint64_t mul2 = 0x0000271000000001;  // 1 + (10000ULL << 32)
 1911|  8.49k|    word -= 0x3030303030303030;
 1912|  8.49k|    word = (word * 10) + (word >> 8);  // val = (val * 2561) >> 8;
 1913|  8.49k|    word = (((word & mask) * mul1) + (((word >> 16) & mask) * mul2)) >> 32;
 1914|  8.49k|    return static_cast<uint32_t>(word);
 1915|  8.49k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_141is_word_made_of_eight_decimal_digits_fastEm:
 1918|  9.13k|{
 1919|  9.13k|    return !((((word + 0x4646464646464646) | (word - 0x3030303030303030)) &
 1920|  9.13k|              0x8080808080808080));
 1921|  9.13k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   943k|{
  131|   943k|    auto it = source.begin();
  132|       |
  133|  2.85M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 2.21M, False: 646k]
  ------------------
  134|  2.21M|        auto sv =
  135|  2.21M|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|  2.21M|                .substr(0, 8);
  137|       |
  138|  2.21M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 2.13M, False: 75.8k]
  ------------------
  139|  2.13M|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|  2.13M|            it = detail::make_string_view_iterator(source, tmp_it);
  141|  2.13M|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 268k, False: 1.86M]
  ------------------
  142|   268k|                break;
  143|   268k|            }
  144|  1.86M|            continue;
  145|  2.13M|        }
  146|       |
  147|   253k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 207k, False: 46.2k]
  ------------------
  148|   207k|            auto tmp =
  149|   207k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   207k|            auto res = get_next_code_point(tmp);
  151|   207k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 29.5k, False: 178k]
  ------------------
  152|  29.5k|                return it;
  153|  29.5k|            }
  154|   178k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   178k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   178k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|   178k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   178k|        }
  158|  75.8k|    }
  159|       |
  160|   914k|    return detail::make_string_view_iterator(source, it);
  161|   943k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|  2.96M|{
  118|  2.96M|    static_assert(sizeof(*source.data()) == 1);
  119|  2.96M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1104|  2.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|  2.96M|    uint64_t word{};
  121|  2.96M|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|  2.96M|    return has_byte_greater(word, 127) != 0;
  124|  2.96M|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  12.2M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   207k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|  1.20M|{
  131|  1.20M|    auto it = source.begin();
  132|       |
  133|  1.30M|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 753k, False: 549k]
  ------------------
  134|   753k|        auto sv =
  135|   753k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   753k|                .substr(0, 8);
  137|       |
  138|   753k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 696k, False: 57.6k]
  ------------------
  139|   696k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   696k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   696k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 604k, False: 91.8k]
  ------------------
  142|   604k|                break;
  143|   604k|            }
  144|  91.8k|            continue;
  145|   696k|        }
  146|       |
  147|  91.7k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 87.8k, False: 3.93k]
  ------------------
  148|  87.8k|            auto tmp =
  149|  87.8k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|  87.8k|            auto res = get_next_code_point(tmp);
  151|  87.8k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 53.7k, False: 34.0k]
  ------------------
  152|  53.7k|                return it;
  153|  53.7k|            }
  154|  34.0k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  34.0k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  34.0k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|  34.0k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  34.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  34.0k|        }
  158|  57.6k|    }
  159|       |
  160|  1.15M|    return detail::make_string_view_iterator(source, it);
  161|  1.20M|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|  1.02M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|  87.8k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIcfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   357k|{
 1737|   357k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 2.81k, False: 354k]
  ------------------
 1738|  2.81k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|  2.81k|            value = std::numeric_limits<T>::infinity();
 1740|  2.81k|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|  2.81k|    }
 1748|   357k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 1.70k, False: 356k]
  ------------------
 1749|  1.70k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|  1.70k|            value = std::numeric_limits<T>::infinity();
 1751|  1.70k|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|  1.70k|    }
 1759|   357k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 17.1k, False: 340k]
  ------------------
 1760|  17.1k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|  17.1k|            value = std::numeric_limits<T>::quiet_NaN();
 1762|  17.1k|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|  17.1k|    }
 1770|   357k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 4.04k, False: 353k]
  ------------------
 1771|  4.04k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|  4.04k|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|  4.04k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|  4.04k|#if SCN_HAS_INT128
 1777|  4.04k|                using payload_type =
 1778|  4.04k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|  4.04k|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|  4.04k|                payload_type payload{};
 1784|  4.04k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 3.09k, False: 950]
  ------------------
 1785|  4.04k|                        nan_payload.view(), payload, {})) {
 1786|  3.09k|                    apply_nan_payload(value, payload);
 1787|  3.09k|                }
 1788|    950|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 410, False: 540]
  ------------------
 1789|    950|                         scan_error::value_positive_overflow) {
 1790|    410|                    apply_nan_payload(value,
 1791|    410|                                      std::numeric_limits<payload_type>::max());
 1792|    410|                }
 1793|  4.04k|            }
 1794|       |
 1795|  4.04k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|  4.04k|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|  4.04k|    }
 1804|       |
 1805|   357k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   357k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   332k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 71.6k, False: 260k]
  ------------------
 1807|  71.6k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  71.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.42k, False: 69.1k]
  |  |  ------------------
  ------------------
 1808|  2.42k|            return detail::unexpected_scan_error(
 1809|  2.42k|                scan_error::invalid_scanned_value,
 1810|  2.42k|                "Invalid floating-point digit");
 1811|  2.42k|        }
 1812|  71.6k|    }
 1813|   329k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   329k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.40k, False: 323k]
  |  |  ------------------
  ------------------
 1814|  6.40k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  6.40k|                                             "Invalid floating-point digit");
 1816|  6.40k|    }
 1817|       |
 1818|   323k|    return dispatch_parse_float_value<
 1819|   323k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   323k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   323k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   329k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIfmEEvRT_T0_:
 1606|  3.50k|{
 1607|       |    if constexpr (!std::is_same_v<F, long double> ||
 1608|       |                  !std::is_same_v<float_traits_for_long_double,
 1609|  3.50k|                                  nil_float_traits>) {
 1610|  3.50k|        using traits = float_traits<F>;
 1611|  3.50k|        typename traits::nan_repr bits{};
 1612|  3.50k|        std::memcpy(&bits, &value, sizeof(bits));
 1613|  3.50k|        traits::apply_nan_payload(bits, payload);
 1614|  3.50k|        std::memcpy(&value, &bits, sizeof(bits));
 1615|       |    }
 1616|       |    else {
 1617|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1618|       |                                              Payload>::value,
 1619|       |                      "");
 1620|       |    }
 1621|  3.50k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112float_traitsIfE17apply_nan_payloadERNS4_8nan_reprEm:
  376|  3.50k|    {
  377|  3.50k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1104|  3.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  378|  3.50k|        SCN_EXPECT(r.exponent == 0xff);
  ------------------
  |  | 1104|  3.50k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.50k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  379|  3.50k|        r.mantissa = payload;
  380|  3.50k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEcfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   323k|{
 1711|   323k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   323k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   323k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEcfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   323k|{
 1711|   323k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   323k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   323k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   323k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   323k|    else {
 1715|   323k|        auto next =
 1716|   323k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   323k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   323k|                if (!err.has_value()) {
 1721|   323k|                    return unexpected(err.error());
 1722|   323k|                }
 1723|   323k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   323k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   323k|        };
 1727|   323k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   323k|    }
 1729|   323k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEERZNS2_26dispatch_parse_float_valueIcfS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   323k|{
 1686|   323k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   323k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   323k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   323k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEC2ERNS2_14impl_init_dataIcEE:
 1071|   323k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   323k|    {
 1073|   323k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfEclIRZNS2_26dispatch_parse_float_valueIcfNS2_10float_implINS2_18strtod_impl_traitsEcfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RfOSD_:
 1077|   323k|    {
 1078|   323k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   323k|                           generic_strtod);
 1080|   323k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIcPFfPKcPPcEEENS0_13scan_expectedIlEERfPKT_T0_:
  872|   323k|    {
  873|   323k|        CharT* end{};
  874|   323k|        errno = 0;
  875|   323k|        value = strtod_cb(src, &end);
  876|   323k|        const auto saved_errno = errno;
  877|   323k|        auto chars_read = end - src;
  878|       |
  879|   323k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   323k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   323k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.92k, False: 319k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.92k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.92k|    }
  ------------------
  880|       |
  881|   319k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 68.6k, False: 250k]
  ------------------
  882|   319k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 68.6k, False: 0]
  ------------------
  883|  68.6k|            chars_read -= 2;
  884|  68.6k|        }
  885|       |
  886|   319k|        return chars_read;
  887|   323k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE11check_errorElif:
  915|   550k|    {
  916|   550k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (916:13): [True: 283k, False: 266k]
  |  Branch (916:41): [True: 0, False: 283k]
  ------------------
  917|      0|            SCN_UNLIKELY_ATTR
  918|      0|            return detail::unexpected_scan_error(
  919|      0|                scan_error::invalid_scanned_value,
  920|      0|                "strtod failed: No conversion");
  921|      0|        }
  922|       |
  923|   550k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (923:13): [True: 12.4k, False: 537k]
  ------------------
  924|   550k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (924:13): [True: 0, False: 12.4k]
  ------------------
  925|      0|            SCN_UNLIKELY_ATTR
  926|      0|            return detail::unexpected_scan_error(
  927|      0|                scan_error::invalid_scanned_value,
  928|      0|                "strtod failed: Hexfloats parsed, "
  929|      0|                "but they're disallowed by the format string");
  930|      0|        }
  931|       |
  932|   550k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (932:13): [True: 7.40k, False: 542k]
  |  Branch (932:34): [True: 1.33k, False: 6.07k]
  ------------------
  933|  1.33k|            SCN_UNLIKELY_ATTR
  934|  1.33k|            return detail::unexpected_scan_error(
  935|  1.33k|                scan_error::value_positive_underflow,
  936|  1.33k|                "strtod failed: Value too small");
  937|  1.33k|        }
  938|   548k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (938:13): [True: 6.07k, False: 542k]
  |  Branch (938:34): [True: 0, False: 6.07k]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::value_negative_underflow,
  942|      0|                "strtod failed: Value too small");
  943|      0|        }
  944|       |
  945|       |        // This doesn't set ERANGE on all C standard library implementations,
  946|       |        // so we need to check whether we were actually expecting infinity
  947|   548k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (947:13): [True: 548k, False: 0]
  ------------------
  948|   548k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (948:13): [True: 548k, False: 0]
  ------------------
  949|   548k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (949:13): [True: 5.92k, False: 542k]
  ------------------
  950|  5.92k|            SCN_UNLIKELY_ATTR
  951|  5.92k|            return detail::unexpected_scan_error(
  952|  5.92k|                scan_error::value_positive_overflow,
  953|  5.92k|                "strtod failed: Value too large");
  954|  5.92k|        }
  955|   542k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (955:13): [True: 542k, False: 0]
  ------------------
  956|   542k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (956:13): [True: 542k, False: 0]
  ------------------
  957|   542k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (957:13): [True: 0, False: 542k]
  ------------------
  958|      0|            SCN_UNLIKELY_ATTR
  959|      0|            return detail::unexpected_scan_error(
  960|      0|                scan_error::value_negative_overflow,
  961|      0|                "strtod failed: Value too large");
  962|      0|        }
  963|       |
  964|   542k|        return {};
  965|   542k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIfEEbT_:
  754|   550k|{
  755|   550k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (755:12): [True: 283k, False: 266k]
  |  Branch (755:44): [True: 0, False: 266k]
  ------------------
  756|   550k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIfEEbT_:
  761|  7.40k|{
  762|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  763|       |    using repr = typename float_traits<T>::value_repr;
  764|       |    repr expected{};
  765|       |    repr received{};
  766|       |    std::memcpy(&received, &value, sizeof(repr));
  767|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  768|       |        received.padding = 0;
  769|       |    }
  770|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  771|       |#else
  772|  7.40k|    return value == static_cast<T>(0.0);
  773|  7.40k|#endif
  774|  7.40k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIfEEbT_:
  778|  6.07k|{
  779|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  780|       |    using repr = typename float_traits<T>::value_repr;
  781|       |    repr expected{};
  782|       |    expected.negative = 1;
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|  6.07k|    return value == static_cast<T>(-0.0);
  791|  6.07k|#endif
  792|  6.07k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIfEEbT_:
  797|   548k|{
  798|   548k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  799|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  800|       |        using repr = typename float_traits<T>::value_repr;
  801|       |        repr expected{};
  802|       |        SCN_GCC_PUSH
  803|       |        SCN_GCC_IGNORE("-Woverflow")
  804|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  805|       |        SCN_GCC_POP
  806|       |        repr received{};
  807|       |        std::memcpy(&received, &value, sizeof(repr));
  808|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  809|       |            expected.one = 1;
  810|       |            received.padding = 0;
  811|       |        }
  812|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  813|       |#else
  814|   548k|        return value == std::numeric_limits<T>::infinity();
  815|   548k|#endif
  816|       |    }
  817|       |    else {
  818|       |        return false;
  819|       |    }
  820|   548k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIfEEbT_:
  824|   542k|{
  825|   542k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  826|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  827|       |        using repr = typename float_traits<T>::value_repr;
  828|       |        repr expected{};
  829|       |        SCN_GCC_PUSH
  830|       |        SCN_GCC_IGNORE("-Woverflow")
  831|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  832|       |        SCN_GCC_POP
  833|       |        expected.negative = 1;
  834|       |        repr received{};
  835|       |        std::memcpy(&received, &value, sizeof(repr));
  836|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  837|       |            expected.one = 1;
  838|       |            received.padding = 0;
  839|       |        }
  840|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  841|       |#else
  842|   542k|        return value == -std::numeric_limits<T>::infinity();
  843|   542k|#endif
  844|       |    }
  845|       |    else {
  846|       |        return false;
  847|       |    }
  848|   542k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   323k|    {
  893|   323k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 305k, False: 18.0k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   305k|            auto first_space = read_until_classic_space(input.view());
  896|   305k|            input.assign(
  897|   305k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   305k|        }
  899|       |
  900|   323k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 69.0k, False: 254k]
  ------------------
  901|  69.0k|            if constexpr (std::is_same_v<CharT, char>) {
  902|  69.0k|                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|       |            else {
  905|       |                input.get_allocated_string().insert(0, L"0x");
  906|       |            }
  907|  69.0k|        }
  908|       |
  909|   323k|        return input.get_allocated_string().c_str();
  910|   323k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcfE14generic_strtodEPKcPPc:
 1084|   323k|    {
 1085|   323k|        if constexpr (std::is_same_v<CharT, char>) {
 1086|   323k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|       |        else {
 1089|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|       |        }
 1091|   323k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE21generic_narrow_strtodEPKcPPc:
  968|   323k|    {
  969|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  970|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  971|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  972|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  973|       |        }
  974|       |#endif
  975|       |
  976|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  977|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  978|       |        if constexpr (std::is_same_v<T, float>) {
  979|       |            return ::strtof_l(str, str_end, cloc);
  980|       |        }
  981|       |        else if constexpr (std::is_same_v<T, double>) {
  982|       |            return ::strtod_l(str, str_end, cloc);
  983|       |        }
  984|       |        else if constexpr (std::is_same_v<T, long double>) {
  985|       |            return ::strtold_l(str, str_end, cloc);
  986|       |        }
  987|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  988|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  989|       |        if constexpr (std::is_same_v<T, float>) {
  990|       |            return ::_strtof_l(str, str_end, cloc);
  991|       |        }
  992|       |        else if constexpr (std::is_same_v<T, double>) {
  993|       |            return ::_strtod_l(str, str_end, cloc);
  994|       |        }
  995|       |        else if constexpr (std::is_same_v<T, long double>) {
  996|       |            return ::_strtold_l(str, str_end, cloc);
  997|       |        }
  998|       |#else
  999|   323k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1000|   323k|        if constexpr (std::is_same_v<T, float>) {
 1001|   323k|            return std::strtof(str, str_end);
 1002|       |        }
 1003|       |        else if constexpr (std::is_same_v<T, double>) {
 1004|       |            return std::strtod(str, str_end);
 1005|       |        }
 1006|       |        else if constexpr (std::is_same_v<T, long double>) {
 1007|       |            return std::strtold(str, str_end);
 1008|       |        }
 1009|      0|#endif
 1010|       |
 1011|   323k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   323k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   323k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1012|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1013|   323k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIwfEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   249k|{
 1737|   249k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 0, False: 249k]
  ------------------
 1738|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|      0|            value = std::numeric_limits<T>::infinity();
 1740|      0|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|      0|    }
 1748|   249k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 0, False: 249k]
  ------------------
 1749|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|      0|            value = std::numeric_limits<T>::infinity();
 1751|      0|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|      0|    }
 1759|   249k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 0, False: 249k]
  ------------------
 1760|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1762|      0|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|      0|    }
 1770|   249k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 249k]
  ------------------
 1771|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|      0|#if SCN_HAS_INT128
 1777|      0|                using payload_type =
 1778|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|      0|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|      0|                payload_type payload{};
 1784|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 0, False: 0]
  ------------------
 1785|      0|                        nan_payload.view(), payload, {})) {
 1786|      0|                    apply_nan_payload(value, payload);
 1787|      0|                }
 1788|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 0, False: 0]
  ------------------
 1789|      0|                         scan_error::value_positive_overflow) {
 1790|      0|                    apply_nan_payload(value,
 1791|      0|                                      std::numeric_limits<payload_type>::max());
 1792|      0|                }
 1793|      0|            }
 1794|       |
 1795|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|      0|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|      0|    }
 1804|       |
 1805|   249k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   249k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   249k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   249k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 59.1k, False: 190k]
  ------------------
 1807|  59.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  59.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.63k, False: 52.5k]
  |  |  ------------------
  ------------------
 1808|  6.63k|            return detail::unexpected_scan_error(
 1809|  6.63k|                scan_error::invalid_scanned_value,
 1810|  6.63k|                "Invalid floating-point digit");
 1811|  6.63k|        }
 1812|  59.1k|    }
 1813|   242k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16.0k, False: 226k]
  |  |  ------------------
  ------------------
 1814|  16.0k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  16.0k|                                             "Invalid floating-point digit");
 1816|  16.0k|    }
 1817|       |
 1818|   226k|    return dispatch_parse_float_value<
 1819|   226k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   226k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   226k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   242k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEwfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   226k|{
 1711|   226k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   226k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   226k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEwfEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   226k|{
 1711|   226k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   226k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   226k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   226k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   226k|    else {
 1715|   226k|        auto next =
 1716|   226k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   226k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   226k|                if (!err.has_value()) {
 1721|   226k|                    return unexpected(err.error());
 1722|   226k|                }
 1723|   226k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   226k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   226k|        };
 1727|   226k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   226k|    }
 1729|   226k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEERZNS2_26dispatch_parse_float_valueIwfS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   226k|{
 1686|   226k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   226k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   226k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   226k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEC2ERNS2_14impl_init_dataIwEE:
 1071|   226k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   226k|    {
 1073|   226k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfEclIRZNS2_26dispatch_parse_float_valueIwfNS2_10float_implINS2_18strtod_impl_traitsEwfEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RfOSD_:
 1077|   226k|    {
 1078|   226k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   226k|                           generic_strtod);
 1080|   226k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE5parseIwPFfPKwPPwEEENS0_13scan_expectedIlEERfPKT_T0_:
  872|   226k|    {
  873|   226k|        CharT* end{};
  874|   226k|        errno = 0;
  875|   226k|        value = strtod_cb(src, &end);
  876|   226k|        const auto saved_errno = errno;
  877|   226k|        auto chars_read = end - src;
  878|       |
  879|   226k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   226k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.32k, False: 223k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.32k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.32k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.32k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.32k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.32k|    }
  ------------------
  880|       |
  881|   223k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 52.3k, False: 171k]
  ------------------
  882|   223k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 52.3k, False: 0]
  ------------------
  883|  52.3k|            chars_read -= 2;
  884|  52.3k|        }
  885|       |
  886|   223k|        return chars_read;
  887|   226k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   226k|    {
  893|   226k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 221k, False: 5.40k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   221k|            auto first_space = read_until_classic_space(input.view());
  896|   221k|            input.assign(
  897|   221k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   221k|        }
  899|       |
  900|   226k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 52.4k, False: 174k]
  ------------------
  901|       |            if constexpr (std::is_same_v<CharT, char>) {
  902|       |                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|  52.4k|            else {
  905|  52.4k|                input.get_allocated_string().insert(0, L"0x");
  906|  52.4k|            }
  907|  52.4k|        }
  908|       |
  909|   226k|        return input.get_allocated_string().c_str();
  910|   226k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwfE14generic_strtodEPKwPPw:
 1084|   226k|    {
 1085|       |        if constexpr (std::is_same_v<CharT, char>) {
 1086|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|   226k|        else {
 1089|   226k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|   226k|        }
 1091|   226k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIfE19generic_wide_strtodEPKwPPw:
 1016|   226k|    {
 1017|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1018|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1019|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1020|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1021|       |        }
 1022|       |#endif
 1023|       |
 1024|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1025|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1026|       |        if constexpr (std::is_same_v<T, float>) {
 1027|       |            return ::wcstof_l(str, str_end, cloc);
 1028|       |        }
 1029|       |        else if constexpr (std::is_same_v<T, double>) {
 1030|       |            return ::wcstod_l(str, str_end, cloc);
 1031|       |        }
 1032|       |        else if constexpr (std::is_same_v<T, long double>) {
 1033|       |            return ::wcstold_l(str, str_end, cloc);
 1034|       |        }
 1035|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1036|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1037|       |        if constexpr (std::is_same_v<T, float>) {
 1038|       |            return ::_wcstof_l(str, str_end, cloc);
 1039|       |        }
 1040|       |        else if constexpr (std::is_same_v<T, double>) {
 1041|       |            return ::_wcstod_l(str, str_end, cloc);
 1042|       |        }
 1043|       |        else if constexpr (std::is_same_v<T, long double>) {
 1044|       |            return ::_wcstold_l(str, str_end, cloc);
 1045|       |        }
 1046|       |#else
 1047|   226k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1048|   226k|        if constexpr (std::is_same_v<T, float>) {
 1049|   226k|            return std::wcstof(str, str_end);
 1050|       |        }
 1051|       |        else if constexpr (std::is_same_v<T, double>) {
 1052|       |            return std::wcstod(str, str_end);
 1053|       |        }
 1054|       |        else if constexpr (std::is_same_v<T, long double>) {
 1055|       |            return std::wcstold(str, str_end);
 1056|       |        }
 1057|      0|#endif
 1058|       |
 1059|   226k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   226k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   226k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1060|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1061|   226k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIcdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   371k|{
 1737|   371k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 3.15k, False: 368k]
  ------------------
 1738|  3.15k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|  3.15k|            value = std::numeric_limits<T>::infinity();
 1740|  3.15k|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|  3.15k|    }
 1748|   371k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 1.81k, False: 369k]
  ------------------
 1749|  1.81k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|  1.81k|            value = std::numeric_limits<T>::infinity();
 1751|  1.81k|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|  1.81k|    }
 1759|   371k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 17.6k, False: 353k]
  ------------------
 1760|  17.6k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|  17.6k|            value = std::numeric_limits<T>::quiet_NaN();
 1762|  17.6k|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|  17.6k|    }
 1770|   371k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 4.32k, False: 367k]
  ------------------
 1771|  4.32k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|  4.32k|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|  4.32k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|  4.32k|#if SCN_HAS_INT128
 1777|  4.32k|                using payload_type =
 1778|  4.32k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|  4.32k|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|  4.32k|                payload_type payload{};
 1784|  4.32k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 3.30k, False: 1.02k]
  ------------------
 1785|  4.32k|                        nan_payload.view(), payload, {})) {
 1786|  3.30k|                    apply_nan_payload(value, payload);
 1787|  3.30k|                }
 1788|  1.02k|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 410, False: 610]
  ------------------
 1789|  1.02k|                         scan_error::value_positive_overflow) {
 1790|    410|                    apply_nan_payload(value,
 1791|    410|                                      std::numeric_limits<payload_type>::max());
 1792|    410|                }
 1793|  4.32k|            }
 1794|       |
 1795|  4.32k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|  4.32k|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|  4.32k|    }
 1804|       |
 1805|   371k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   371k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   371k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   344k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 73.1k, False: 271k]
  ------------------
 1807|  73.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  73.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.46k, False: 70.7k]
  |  |  ------------------
  ------------------
 1808|  2.46k|            return detail::unexpected_scan_error(
 1809|  2.46k|                scan_error::invalid_scanned_value,
 1810|  2.46k|                "Invalid floating-point digit");
 1811|  2.46k|        }
 1812|  73.1k|    }
 1813|   342k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.67k, False: 335k]
  |  |  ------------------
  ------------------
 1814|  6.67k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  6.67k|                                             "Invalid floating-point digit");
 1816|  6.67k|    }
 1817|       |
 1818|   335k|    return dispatch_parse_float_value<
 1819|   335k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   335k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   335k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   342k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIdmEEvRT_T0_:
 1606|  3.71k|{
 1607|       |    if constexpr (!std::is_same_v<F, long double> ||
 1608|       |                  !std::is_same_v<float_traits_for_long_double,
 1609|  3.71k|                                  nil_float_traits>) {
 1610|  3.71k|        using traits = float_traits<F>;
 1611|  3.71k|        typename traits::nan_repr bits{};
 1612|  3.71k|        std::memcpy(&bits, &value, sizeof(bits));
 1613|  3.71k|        traits::apply_nan_payload(bits, payload);
 1614|  3.71k|        std::memcpy(&value, &bits, sizeof(bits));
 1615|       |    }
 1616|       |    else {
 1617|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1618|       |                                              Payload>::value,
 1619|       |                      "");
 1620|       |    }
 1621|  3.71k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_112float_traitsIdE17apply_nan_payloadERNS4_8nan_reprEm:
  429|  3.71k|    {
  430|  3.71k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1104|  3.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  431|  3.71k|        SCN_EXPECT(r.exponent == (1u << 11u) - 1u);
  ------------------
  |  | 1104|  3.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  432|  3.71k|        r.mantissa0 = payload >> 32;
  433|  3.71k|        r.mantissa1 = payload;
  434|  3.71k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEcdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   335k|{
 1711|   335k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   335k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   335k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEcdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   335k|{
 1711|   335k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   335k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   335k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   335k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   335k|    else {
 1715|   335k|        auto next =
 1716|   335k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   335k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   335k|                if (!err.has_value()) {
 1721|   335k|                    return unexpected(err.error());
 1722|   335k|                }
 1723|   335k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   335k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   335k|        };
 1727|   335k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   335k|    }
 1729|   335k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEERZNS2_26dispatch_parse_float_valueIcdS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   335k|{
 1686|   335k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   335k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   335k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   335k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEC2ERNS2_14impl_init_dataIcEE:
 1071|   335k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   335k|    {
 1073|   335k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdEclIRZNS2_26dispatch_parse_float_valueIcdNS2_10float_implINS2_18strtod_impl_traitsEcdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RdOSD_:
 1077|   335k|    {
 1078|   335k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   335k|                           generic_strtod);
 1080|   335k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIcPFdPKcPPcEEENS0_13scan_expectedIlEERdPKT_T0_:
  872|   335k|    {
  873|   335k|        CharT* end{};
  874|   335k|        errno = 0;
  875|   335k|        value = strtod_cb(src, &end);
  876|   335k|        const auto saved_errno = errno;
  877|   335k|        auto chars_read = end - src;
  878|       |
  879|   335k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   335k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   335k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.27k, False: 333k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  2.27k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  2.27k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.27k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.27k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  2.27k|    }
  ------------------
  880|       |
  881|   333k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 70.3k, False: 262k]
  ------------------
  882|   333k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 70.3k, False: 0]
  ------------------
  883|  70.3k|            chars_read -= 2;
  884|  70.3k|        }
  885|       |
  886|   333k|        return chars_read;
  887|   335k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE11check_errorElid:
  915|   591k|    {
  916|   591k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (916:13): [True: 306k, False: 285k]
  |  Branch (916:41): [True: 0, False: 306k]
  ------------------
  917|      0|            SCN_UNLIKELY_ATTR
  918|      0|            return detail::unexpected_scan_error(
  919|      0|                scan_error::invalid_scanned_value,
  920|      0|                "strtod failed: No conversion");
  921|      0|        }
  922|       |
  923|   591k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (923:13): [True: 13.8k, False: 577k]
  ------------------
  924|   591k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (924:13): [True: 0, False: 13.8k]
  ------------------
  925|      0|            SCN_UNLIKELY_ATTR
  926|      0|            return detail::unexpected_scan_error(
  927|      0|                scan_error::invalid_scanned_value,
  928|      0|                "strtod failed: Hexfloats parsed, "
  929|      0|                "but they're disallowed by the format string");
  930|      0|        }
  931|       |
  932|   591k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (932:13): [True: 4.56k, False: 586k]
  |  Branch (932:34): [True: 419, False: 4.14k]
  ------------------
  933|    419|            SCN_UNLIKELY_ATTR
  934|    419|            return detail::unexpected_scan_error(
  935|    419|                scan_error::value_positive_underflow,
  936|    419|                "strtod failed: Value too small");
  937|    419|        }
  938|   591k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (938:13): [True: 4.14k, False: 586k]
  |  Branch (938:34): [True: 0, False: 4.14k]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::value_negative_underflow,
  942|      0|                "strtod failed: Value too small");
  943|      0|        }
  944|       |
  945|       |        // This doesn't set ERANGE on all C standard library implementations,
  946|       |        // so we need to check whether we were actually expecting infinity
  947|   591k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (947:13): [True: 591k, False: 0]
  ------------------
  948|   591k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (948:13): [True: 591k, False: 0]
  ------------------
  949|   591k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (949:13): [True: 3.53k, False: 587k]
  ------------------
  950|  3.53k|            SCN_UNLIKELY_ATTR
  951|  3.53k|            return detail::unexpected_scan_error(
  952|  3.53k|                scan_error::value_positive_overflow,
  953|  3.53k|                "strtod failed: Value too large");
  954|  3.53k|        }
  955|   587k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (955:13): [True: 587k, False: 0]
  ------------------
  956|   587k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (956:13): [True: 587k, False: 0]
  ------------------
  957|   587k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (957:13): [True: 0, False: 587k]
  ------------------
  958|      0|            SCN_UNLIKELY_ATTR
  959|      0|            return detail::unexpected_scan_error(
  960|      0|                scan_error::value_negative_overflow,
  961|      0|                "strtod failed: Value too large");
  962|      0|        }
  963|       |
  964|   587k|        return {};
  965|   587k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIdEEbT_:
  754|   591k|{
  755|   591k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (755:12): [True: 306k, False: 285k]
  |  Branch (755:44): [True: 0, False: 285k]
  ------------------
  756|   591k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIdEEbT_:
  761|  4.56k|{
  762|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  763|       |    using repr = typename float_traits<T>::value_repr;
  764|       |    repr expected{};
  765|       |    repr received{};
  766|       |    std::memcpy(&received, &value, sizeof(repr));
  767|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  768|       |        received.padding = 0;
  769|       |    }
  770|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  771|       |#else
  772|  4.56k|    return value == static_cast<T>(0.0);
  773|  4.56k|#endif
  774|  4.56k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIdEEbT_:
  778|  4.14k|{
  779|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  780|       |    using repr = typename float_traits<T>::value_repr;
  781|       |    repr expected{};
  782|       |    expected.negative = 1;
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|  4.14k|    return value == static_cast<T>(-0.0);
  791|  4.14k|#endif
  792|  4.14k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIdEEbT_:
  797|   591k|{
  798|   591k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  799|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  800|       |        using repr = typename float_traits<T>::value_repr;
  801|       |        repr expected{};
  802|       |        SCN_GCC_PUSH
  803|       |        SCN_GCC_IGNORE("-Woverflow")
  804|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  805|       |        SCN_GCC_POP
  806|       |        repr received{};
  807|       |        std::memcpy(&received, &value, sizeof(repr));
  808|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  809|       |            expected.one = 1;
  810|       |            received.padding = 0;
  811|       |        }
  812|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  813|       |#else
  814|   591k|        return value == std::numeric_limits<T>::infinity();
  815|   591k|#endif
  816|       |    }
  817|       |    else {
  818|       |        return false;
  819|       |    }
  820|   591k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIdEEbT_:
  824|   587k|{
  825|   587k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  826|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  827|       |        using repr = typename float_traits<T>::value_repr;
  828|       |        repr expected{};
  829|       |        SCN_GCC_PUSH
  830|       |        SCN_GCC_IGNORE("-Woverflow")
  831|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  832|       |        SCN_GCC_POP
  833|       |        expected.negative = 1;
  834|       |        repr received{};
  835|       |        std::memcpy(&received, &value, sizeof(repr));
  836|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  837|       |            expected.one = 1;
  838|       |            received.padding = 0;
  839|       |        }
  840|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  841|       |#else
  842|   587k|        return value == -std::numeric_limits<T>::infinity();
  843|   587k|#endif
  844|       |    }
  845|       |    else {
  846|       |        return false;
  847|       |    }
  848|   587k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   335k|    {
  893|   335k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 316k, False: 19.2k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   316k|            auto first_space = read_until_classic_space(input.view());
  896|   316k|            input.assign(
  897|   316k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   316k|        }
  899|       |
  900|   335k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 70.6k, False: 264k]
  ------------------
  901|  70.6k|            if constexpr (std::is_same_v<CharT, char>) {
  902|  70.6k|                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|       |            else {
  905|       |                input.get_allocated_string().insert(0, L"0x");
  906|       |            }
  907|  70.6k|        }
  908|       |
  909|   335k|        return input.get_allocated_string().c_str();
  910|   335k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIcdE14generic_strtodEPKcPPc:
 1084|   335k|    {
 1085|   335k|        if constexpr (std::is_same_v<CharT, char>) {
 1086|   335k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|       |        else {
 1089|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|       |        }
 1091|   335k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE21generic_narrow_strtodEPKcPPc:
  968|   335k|    {
  969|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  970|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  971|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  972|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  973|       |        }
  974|       |#endif
  975|       |
  976|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  977|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  978|       |        if constexpr (std::is_same_v<T, float>) {
  979|       |            return ::strtof_l(str, str_end, cloc);
  980|       |        }
  981|       |        else if constexpr (std::is_same_v<T, double>) {
  982|       |            return ::strtod_l(str, str_end, cloc);
  983|       |        }
  984|       |        else if constexpr (std::is_same_v<T, long double>) {
  985|       |            return ::strtold_l(str, str_end, cloc);
  986|       |        }
  987|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  988|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  989|       |        if constexpr (std::is_same_v<T, float>) {
  990|       |            return ::_strtof_l(str, str_end, cloc);
  991|       |        }
  992|       |        else if constexpr (std::is_same_v<T, double>) {
  993|       |            return ::_strtod_l(str, str_end, cloc);
  994|       |        }
  995|       |        else if constexpr (std::is_same_v<T, long double>) {
  996|       |            return ::_strtold_l(str, str_end, cloc);
  997|       |        }
  998|       |#else
  999|   335k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1000|       |        if constexpr (std::is_same_v<T, float>) {
 1001|       |            return std::strtof(str, str_end);
 1002|       |        }
 1003|   335k|        else if constexpr (std::is_same_v<T, double>) {
 1004|   335k|            return std::strtod(str, str_end);
 1005|       |        }
 1006|       |        else if constexpr (std::is_same_v<T, long double>) {
 1007|       |            return std::strtold(str, str_end);
 1008|       |        }
 1009|      0|#endif
 1010|       |
 1011|   335k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   335k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   335k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1012|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1013|   335k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIwdEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   279k|{
 1737|   279k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 0, False: 279k]
  ------------------
 1738|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|      0|            value = std::numeric_limits<T>::infinity();
 1740|      0|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|      0|    }
 1748|   279k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 0, False: 279k]
  ------------------
 1749|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|      0|            value = std::numeric_limits<T>::infinity();
 1751|      0|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|      0|    }
 1759|   279k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 0, False: 279k]
  ------------------
 1760|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1762|      0|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|      0|    }
 1770|   279k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 279k]
  ------------------
 1771|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|      0|#if SCN_HAS_INT128
 1777|      0|                using payload_type =
 1778|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|      0|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|      0|                payload_type payload{};
 1784|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 0, False: 0]
  ------------------
 1785|      0|                        nan_payload.view(), payload, {})) {
 1786|      0|                    apply_nan_payload(value, payload);
 1787|      0|                }
 1788|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 0, False: 0]
  ------------------
 1789|      0|                         scan_error::value_positive_overflow) {
 1790|      0|                    apply_nan_payload(value,
 1791|      0|                                      std::numeric_limits<payload_type>::max());
 1792|      0|                }
 1793|      0|            }
 1794|       |
 1795|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|      0|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|      0|    }
 1804|       |
 1805|   279k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   279k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   279k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   279k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 59.1k, False: 220k]
  ------------------
 1807|  59.1k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  59.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.64k, False: 52.5k]
  |  |  ------------------
  ------------------
 1808|  6.64k|            return detail::unexpected_scan_error(
 1809|  6.64k|                scan_error::invalid_scanned_value,
 1810|  6.64k|                "Invalid floating-point digit");
 1811|  6.64k|        }
 1812|  59.1k|    }
 1813|   272k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   272k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16.5k, False: 256k]
  |  |  ------------------
  ------------------
 1814|  16.5k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  16.5k|                                             "Invalid floating-point digit");
 1816|  16.5k|    }
 1817|       |
 1818|   256k|    return dispatch_parse_float_value<
 1819|   256k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   256k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   256k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   272k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   256k|{
 1711|   256k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   256k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   256k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEwdEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   256k|{
 1711|   256k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   256k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   256k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   256k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   256k|    else {
 1715|   256k|        auto next =
 1716|   256k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   256k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   256k|                if (!err.has_value()) {
 1721|   256k|                    return unexpected(err.error());
 1722|   256k|                }
 1723|   256k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   256k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   256k|        };
 1727|   256k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   256k|    }
 1729|   256k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEERZNS2_26dispatch_parse_float_valueIwdS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   256k|{
 1686|   256k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   256k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   256k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   256k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEC2ERNS2_14impl_init_dataIwEE:
 1071|   256k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   256k|    {
 1073|   256k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdEclIRZNS2_26dispatch_parse_float_valueIwdNS2_10float_implINS2_18strtod_impl_traitsEwdEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_RdOSD_:
 1077|   256k|    {
 1078|   256k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   256k|                           generic_strtod);
 1080|   256k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE5parseIwPFdPKwPPwEEENS0_13scan_expectedIlEERdPKT_T0_:
  872|   256k|    {
  873|   256k|        CharT* end{};
  874|   256k|        errno = 0;
  875|   256k|        value = strtod_cb(src, &end);
  876|   256k|        const auto saved_errno = errno;
  877|   256k|        auto chars_read = end - src;
  878|       |
  879|   256k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   256k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 1.68k, False: 254k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  1.68k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  1.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  1.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  1.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  1.68k|    }
  ------------------
  880|       |
  881|   254k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 52.3k, False: 202k]
  ------------------
  882|   254k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 52.3k, False: 0]
  ------------------
  883|  52.3k|            chars_read -= 2;
  884|  52.3k|        }
  885|       |
  886|   254k|        return chars_read;
  887|   256k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   256k|    {
  893|   256k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 250k, False: 6.09k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   250k|            auto first_space = read_until_classic_space(input.view());
  896|   250k|            input.assign(
  897|   250k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   250k|        }
  899|       |
  900|   256k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 52.4k, False: 203k]
  ------------------
  901|       |            if constexpr (std::is_same_v<CharT, char>) {
  902|       |                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|  52.4k|            else {
  905|  52.4k|                input.get_allocated_string().insert(0, L"0x");
  906|  52.4k|            }
  907|  52.4k|        }
  908|       |
  909|   256k|        return input.get_allocated_string().c_str();
  910|   256k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIwdE14generic_strtodEPKwPPw:
 1084|   256k|    {
 1085|       |        if constexpr (std::is_same_v<CharT, char>) {
 1086|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|   256k|        else {
 1089|   256k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|   256k|        }
 1091|   256k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIdE19generic_wide_strtodEPKwPPw:
 1016|   256k|    {
 1017|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1018|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1019|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1020|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1021|       |        }
 1022|       |#endif
 1023|       |
 1024|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1025|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1026|       |        if constexpr (std::is_same_v<T, float>) {
 1027|       |            return ::wcstof_l(str, str_end, cloc);
 1028|       |        }
 1029|       |        else if constexpr (std::is_same_v<T, double>) {
 1030|       |            return ::wcstod_l(str, str_end, cloc);
 1031|       |        }
 1032|       |        else if constexpr (std::is_same_v<T, long double>) {
 1033|       |            return ::wcstold_l(str, str_end, cloc);
 1034|       |        }
 1035|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1036|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1037|       |        if constexpr (std::is_same_v<T, float>) {
 1038|       |            return ::_wcstof_l(str, str_end, cloc);
 1039|       |        }
 1040|       |        else if constexpr (std::is_same_v<T, double>) {
 1041|       |            return ::_wcstod_l(str, str_end, cloc);
 1042|       |        }
 1043|       |        else if constexpr (std::is_same_v<T, long double>) {
 1044|       |            return ::_wcstold_l(str, str_end, cloc);
 1045|       |        }
 1046|       |#else
 1047|   256k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1048|       |        if constexpr (std::is_same_v<T, float>) {
 1049|       |            return std::wcstof(str, str_end);
 1050|       |        }
 1051|   256k|        else if constexpr (std::is_same_v<T, double>) {
 1052|   256k|            return std::wcstod(str, str_end);
 1053|       |        }
 1054|       |        else if constexpr (std::is_same_v<T, long double>) {
 1055|       |            return std::wcstold(str, str_end);
 1056|       |        }
 1057|      0|#endif
 1058|       |
 1059|   256k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   256k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   256k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1060|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1061|   256k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIceEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   379k|{
 1737|   379k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 3.26k, False: 375k]
  ------------------
 1738|  3.26k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|  3.26k|            value = std::numeric_limits<T>::infinity();
 1740|  3.26k|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|  3.26k|    }
 1748|   379k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 1.91k, False: 377k]
  ------------------
 1749|  1.91k|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|  1.91k|            value = std::numeric_limits<T>::infinity();
 1751|  1.91k|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|  1.91k|    }
 1759|   379k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 17.8k, False: 361k]
  ------------------
 1760|  17.8k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|  17.8k|            value = std::numeric_limits<T>::quiet_NaN();
 1762|  17.8k|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|  17.8k|    }
 1770|   379k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 4.42k, False: 374k]
  ------------------
 1771|  4.42k|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|  4.42k|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|  4.42k|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|  4.42k|#if SCN_HAS_INT128
 1777|  4.42k|                using payload_type =
 1778|  4.42k|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|  4.42k|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|  4.42k|                payload_type payload{};
 1784|  4.42k|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 3.36k, False: 1.06k]
  ------------------
 1785|  4.42k|                        nan_payload.view(), payload, {})) {
 1786|  3.36k|                    apply_nan_payload(value, payload);
 1787|  3.36k|                }
 1788|  1.06k|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 418, False: 642]
  ------------------
 1789|  1.06k|                         scan_error::value_positive_overflow) {
 1790|    418|                    apply_nan_payload(value,
 1791|    418|                                      std::numeric_limits<payload_type>::max());
 1792|    418|                }
 1793|  4.42k|            }
 1794|       |
 1795|  4.42k|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|  4.42k|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|  4.42k|    }
 1804|       |
 1805|   379k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   379k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   379k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   351k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 73.4k, False: 278k]
  ------------------
 1807|  73.4k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  73.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.51k, False: 70.9k]
  |  |  ------------------
  ------------------
 1808|  2.51k|            return detail::unexpected_scan_error(
 1809|  2.51k|                scan_error::invalid_scanned_value,
 1810|  2.51k|                "Invalid floating-point digit");
 1811|  2.51k|        }
 1812|  73.4k|    }
 1813|   348k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   348k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.95k, False: 342k]
  |  |  ------------------
  ------------------
 1814|  6.95k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  6.95k|                                             "Invalid floating-point digit");
 1816|  6.95k|    }
 1817|       |
 1818|   342k|    return dispatch_parse_float_value<
 1819|   342k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   342k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   342k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   348k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117apply_nan_payloadIemEEvRT_T0_:
 1606|  3.77k|{
 1607|       |    if constexpr (!std::is_same_v<F, long double> ||
 1608|       |                  !std::is_same_v<float_traits_for_long_double,
 1609|  3.77k|                                  nil_float_traits>) {
 1610|  3.77k|        using traits = float_traits<F>;
 1611|  3.77k|        typename traits::nan_repr bits{};
 1612|  3.77k|        std::memcpy(&bits, &value, sizeof(bits));
 1613|  3.77k|        traits::apply_nan_payload(bits, payload);
 1614|  3.77k|        std::memcpy(&value, &bits, sizeof(bits));
 1615|       |    }
 1616|       |    else {
 1617|       |        static_assert(detail::dependent_false<F, float_traits_for_long_double,
 1618|       |                                              Payload>::value,
 1619|       |                      "");
 1620|       |    }
 1621|  3.77k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116float_traits_x8717apply_nan_payloadERNS3_8nan_reprEm:
  494|  3.77k|    {
  495|  3.77k|        SCN_EXPECT(r.quiet_nan == 1);
  ------------------
  |  | 1104|  3.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  496|  3.77k|        SCN_EXPECT(r.exponent == (1u << 15u) - 1u);
  ------------------
  |  | 1104|  3.77k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.77k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  497|  3.77k|        r.mantissa0 = payload >> 32;
  498|  3.77k|        r.mantissa1 = payload;
  499|  3.77k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEceEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   342k|{
 1711|   342k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   342k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   342k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEceEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   342k|{
 1711|   342k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   342k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   342k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIceNS2_10float_implINS2_18strtod_impl_traitsEceEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   342k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   342k|    else {
 1715|   342k|        auto next =
 1716|   342k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   342k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   342k|                if (!err.has_value()) {
 1721|   342k|                    return unexpected(err.error());
 1722|   342k|                }
 1723|   342k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   342k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   342k|        };
 1727|   342k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   342k|    }
 1729|   342k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIceNS2_10float_implINS2_18strtod_impl_traitsEceEERZNS2_26dispatch_parse_float_valueIceS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   342k|{
 1686|   342k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   342k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   342k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   342k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEC2ERNS2_14impl_init_dataIcEE:
 1071|   342k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   342k|    {
 1073|   342k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceEclIRZNS2_26dispatch_parse_float_valueIceNS2_10float_implINS2_18strtod_impl_traitsEceEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_ReOSD_:
 1077|   342k|    {
 1078|   342k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   342k|                           generic_strtod);
 1080|   342k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIcPFePKcPPcEEENS0_13scan_expectedIlEERePKT_T0_:
  872|   342k|    {
  873|   342k|        CharT* end{};
  874|   342k|        errno = 0;
  875|   342k|        value = strtod_cb(src, &end);
  876|   342k|        const auto saved_errno = errno;
  877|   342k|        auto chars_read = end - src;
  878|       |
  879|   342k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   342k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   342k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 503, False: 341k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    503|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    503|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    503|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    503|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    503|    }
  ------------------
  880|       |
  881|   341k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 70.8k, False: 270k]
  ------------------
  882|   341k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 70.8k, False: 0]
  ------------------
  883|  70.8k|            chars_read -= 2;
  884|  70.8k|        }
  885|       |
  886|   341k|        return chars_read;
  887|   342k|    }
impl.cpp:_ZNK3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE11check_errorElie:
  915|   604k|    {
  916|   604k|        if (is_float_any_zero(value) && chars_read == 0) {
  ------------------
  |  Branch (916:13): [True: 311k, False: 292k]
  |  Branch (916:41): [True: 0, False: 311k]
  ------------------
  917|      0|            SCN_UNLIKELY_ATTR
  918|      0|            return detail::unexpected_scan_error(
  919|      0|                scan_error::invalid_scanned_value,
  920|      0|                "strtod failed: No conversion");
  921|      0|        }
  922|       |
  923|   604k|        if (m_kind == float_reader_base::float_kind::hex_with_prefix &&
  ------------------
  |  Branch (923:13): [True: 13.8k, False: 590k]
  ------------------
  924|   604k|            (m_options & float_reader_base::allow_hex) == 0) {
  ------------------
  |  Branch (924:13): [True: 0, False: 13.8k]
  ------------------
  925|      0|            SCN_UNLIKELY_ATTR
  926|      0|            return detail::unexpected_scan_error(
  927|      0|                scan_error::invalid_scanned_value,
  928|      0|                "strtod failed: Hexfloats parsed, "
  929|      0|                "but they're disallowed by the format string");
  930|      0|        }
  931|       |
  932|   604k|        if (c_errno == ERANGE && is_float_positive_zero(value)) {
  ------------------
  |  Branch (932:13): [True: 703, False: 603k]
  |  Branch (932:34): [True: 162, False: 541]
  ------------------
  933|    162|            SCN_UNLIKELY_ATTR
  934|    162|            return detail::unexpected_scan_error(
  935|    162|                scan_error::value_positive_underflow,
  936|    162|                "strtod failed: Value too small");
  937|    162|        }
  938|   604k|        if (c_errno == ERANGE && is_float_negative_zero(value)) {
  ------------------
  |  Branch (938:13): [True: 541, False: 603k]
  |  Branch (938:34): [True: 0, False: 541]
  ------------------
  939|      0|            SCN_UNLIKELY_ATTR
  940|      0|            return detail::unexpected_scan_error(
  941|      0|                scan_error::value_negative_underflow,
  942|      0|                "strtod failed: Value too small");
  943|      0|        }
  944|       |
  945|       |        // This doesn't set ERANGE on all C standard library implementations,
  946|       |        // so we need to check whether we were actually expecting infinity
  947|   604k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (947:13): [True: 604k, False: 0]
  ------------------
  948|   604k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (948:13): [True: 604k, False: 0]
  ------------------
  949|   604k|            is_float_positive_infinity(value)) {
  ------------------
  |  Branch (949:13): [True: 541, False: 603k]
  ------------------
  950|    541|            SCN_UNLIKELY_ATTR
  951|    541|            return detail::unexpected_scan_error(
  952|    541|                scan_error::value_positive_overflow,
  953|    541|                "strtod failed: Value too large");
  954|    541|        }
  955|   603k|        if (m_kind != float_reader_base::float_kind::inf_short &&
  ------------------
  |  Branch (955:13): [True: 603k, False: 0]
  ------------------
  956|   603k|            m_kind != float_reader_base::float_kind::inf_long &&
  ------------------
  |  Branch (956:13): [True: 603k, False: 0]
  ------------------
  957|   603k|            is_float_negative_infinity(value)) {
  ------------------
  |  Branch (957:13): [True: 0, False: 603k]
  ------------------
  958|      0|            SCN_UNLIKELY_ATTR
  959|      0|            return detail::unexpected_scan_error(
  960|      0|                scan_error::value_negative_overflow,
  961|      0|                "strtod failed: Value too large");
  962|      0|        }
  963|       |
  964|   603k|        return {};
  965|   603k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117is_float_any_zeroIeEEbT_:
  754|   604k|{
  755|   604k|    return value == static_cast<T>(0.0) || value == static_cast<T>(-0.0);
  ------------------
  |  Branch (755:12): [True: 311k, False: 292k]
  |  Branch (755:44): [True: 0, False: 292k]
  ------------------
  756|   604k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_positive_zeroIeEEbT_:
  761|    703|{
  762|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  763|       |    using repr = typename float_traits<T>::value_repr;
  764|       |    repr expected{};
  765|       |    repr received{};
  766|       |    std::memcpy(&received, &value, sizeof(repr));
  767|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  768|       |        received.padding = 0;
  769|       |    }
  770|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  771|       |#else
  772|    703|    return value == static_cast<T>(0.0);
  773|    703|#endif
  774|    703|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_122is_float_negative_zeroIeEEbT_:
  778|    541|{
  779|       |#if defined(__NO_SIGNED_ZEROS__) && __NO_SIGNED_ZEROS__
  780|       |    using repr = typename float_traits<T>::value_repr;
  781|       |    repr expected{};
  782|       |    expected.negative = 1;
  783|       |    repr received{};
  784|       |    std::memcpy(&received, &value, sizeof(repr));
  785|       |    if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  786|       |        received.padding = 0;
  787|       |    }
  788|       |    return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  789|       |#else
  790|    541|    return value == static_cast<T>(-0.0);
  791|    541|#endif
  792|    541|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_positive_infinityIeEEbT_:
  797|   604k|{
  798|   604k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  799|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  800|       |        using repr = typename float_traits<T>::value_repr;
  801|       |        repr expected{};
  802|       |        SCN_GCC_PUSH
  803|       |        SCN_GCC_IGNORE("-Woverflow")
  804|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  805|       |        SCN_GCC_POP
  806|       |        repr received{};
  807|       |        std::memcpy(&received, &value, sizeof(repr));
  808|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  809|       |            expected.one = 1;
  810|       |            received.padding = 0;
  811|       |        }
  812|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  813|       |#else
  814|   604k|        return value == std::numeric_limits<T>::infinity();
  815|   604k|#endif
  816|       |    }
  817|       |    else {
  818|       |        return false;
  819|       |    }
  820|   604k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126is_float_negative_infinityIeEEbT_:
  824|   603k|{
  825|   603k|    if constexpr (std::numeric_limits<T>::has_infinity) {
  826|       |#if defined(__FINITE_MATH_ONLY__) && __FINITE_MATH_ONLY__
  827|       |        using repr = typename float_traits<T>::value_repr;
  828|       |        repr expected{};
  829|       |        SCN_GCC_PUSH
  830|       |        SCN_GCC_IGNORE("-Woverflow")
  831|       |        expected.exponent = std::numeric_limits<unsigned>::max();
  832|       |        SCN_GCC_POP
  833|       |        expected.negative = 1;
  834|       |        repr received{};
  835|       |        std::memcpy(&received, &value, sizeof(repr));
  836|       |        if constexpr (std::is_base_of_v<float_traits_x87, float_traits<T>>) {
  837|       |            expected.one = 1;
  838|       |            received.padding = 0;
  839|       |        }
  840|       |        return std::memcmp(&received, &expected, sizeof(repr)) == 0;
  841|       |#else
  842|   603k|        return value == -std::numeric_limits<T>::infinity();
  843|   603k|#endif
  844|       |    }
  845|       |    else {
  846|       |        return false;
  847|       |    }
  848|   603k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIcEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   342k|    {
  893|   342k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 322k, False: 19.5k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   322k|            auto first_space = read_until_classic_space(input.view());
  896|   322k|            input.assign(
  897|   322k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   322k|        }
  899|       |
  900|   342k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 70.8k, False: 271k]
  ------------------
  901|  70.8k|            if constexpr (std::is_same_v<CharT, char>) {
  902|  70.8k|                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|       |            else {
  905|       |                input.get_allocated_string().insert(0, L"0x");
  906|       |            }
  907|  70.8k|        }
  908|       |
  909|   342k|        return input.get_allocated_string().c_str();
  910|   342k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIceE14generic_strtodEPKcPPc:
 1084|   342k|    {
 1085|   342k|        if constexpr (std::is_same_v<CharT, char>) {
 1086|   342k|            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|       |        else {
 1089|       |            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|       |        }
 1091|   342k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE21generic_narrow_strtodEPKcPPc:
  968|   342k|    {
  969|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
  970|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
  971|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
  972|       |            return static_cast<std::float16_t>(::strtof16(str, str_end));
  973|       |        }
  974|       |#endif
  975|       |
  976|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
  977|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
  978|       |        if constexpr (std::is_same_v<T, float>) {
  979|       |            return ::strtof_l(str, str_end, cloc);
  980|       |        }
  981|       |        else if constexpr (std::is_same_v<T, double>) {
  982|       |            return ::strtod_l(str, str_end, cloc);
  983|       |        }
  984|       |        else if constexpr (std::is_same_v<T, long double>) {
  985|       |            return ::strtold_l(str, str_end, cloc);
  986|       |        }
  987|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
  988|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
  989|       |        if constexpr (std::is_same_v<T, float>) {
  990|       |            return ::_strtof_l(str, str_end, cloc);
  991|       |        }
  992|       |        else if constexpr (std::is_same_v<T, double>) {
  993|       |            return ::_strtod_l(str, str_end, cloc);
  994|       |        }
  995|       |        else if constexpr (std::is_same_v<T, long double>) {
  996|       |            return ::_strtold_l(str, str_end, cloc);
  997|       |        }
  998|       |#else
  999|   342k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1000|       |        if constexpr (std::is_same_v<T, float>) {
 1001|       |            return std::strtof(str, str_end);
 1002|       |        }
 1003|       |        else if constexpr (std::is_same_v<T, double>) {
 1004|       |            return std::strtod(str, str_end);
 1005|       |        }
 1006|   342k|        else if constexpr (std::is_same_v<T, long double>) {
 1007|   342k|            return std::strtold(str, str_end);
 1008|   342k|        }
 1009|      0|#endif
 1010|       |
 1011|   342k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   342k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   342k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1012|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1013|   342k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117parse_float_valueIweEENS0_13scan_expectedIlEENS2_14impl_init_dataIT_EERNS1_24contiguous_range_factoryIS7_EERT0_:
 1736|   286k|{
 1737|   286k|    if (data.kind == float_reader_base::float_kind::inf_short) {
  ------------------
  |  Branch (1737:9): [True: 0, False: 286k]
  ------------------
 1738|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1739|      0|            value = std::numeric_limits<T>::infinity();
 1740|      0|            return std::strlen("inf");
 1741|       |        }
 1742|       |        else {
 1743|       |            return detail::unexpected_scan_error(
 1744|       |                scan_error::invalid_scanned_value,
 1745|       |                "Type doesn't support infinities");
 1746|       |        }
 1747|      0|    }
 1748|   286k|    if (data.kind == float_reader_base::float_kind::inf_long) {
  ------------------
  |  Branch (1748:9): [True: 0, False: 286k]
  ------------------
 1749|      0|        if constexpr (std::numeric_limits<T>::has_infinity) {
 1750|      0|            value = std::numeric_limits<T>::infinity();
 1751|      0|            return std::strlen("infinity");
 1752|       |        }
 1753|       |        else {
 1754|       |            return detail::unexpected_scan_error(
 1755|       |                scan_error::invalid_scanned_value,
 1756|       |                "Type doesn't support infinities");
 1757|       |        }
 1758|      0|    }
 1759|   286k|    if (data.kind == float_reader_base::float_kind::nan_simple) {
  ------------------
  |  Branch (1759:9): [True: 0, False: 286k]
  ------------------
 1760|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1761|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1762|      0|            return std::strlen("nan");
 1763|       |        }
 1764|       |        else {
 1765|       |            return detail::unexpected_scan_error(
 1766|       |                scan_error::invalid_scanned_value,
 1767|       |                "Type doesn't support quiet NaNs");
 1768|       |        }
 1769|      0|    }
 1770|   286k|    if (data.kind == float_reader_base::float_kind::nan_with_payload) {
  ------------------
  |  Branch (1770:9): [True: 0, False: 286k]
  ------------------
 1771|      0|        if constexpr (std::numeric_limits<T>::has_quiet_NaN) {
 1772|      0|            value = std::numeric_limits<T>::quiet_NaN();
 1773|       |
 1774|      0|            if constexpr (std::numeric_limits<T>::is_iec559) {
 1775|       |                // Use uint64, if the mantissa of T has 64 (or less) bits.
 1776|      0|#if SCN_HAS_INT128
 1777|      0|                using payload_type =
 1778|      0|                    std::conditional_t<std::numeric_limits<T>::digits <= 64,
 1779|      0|                                       std::uint64_t, uint128>;
 1780|       |#else
 1781|       |                using payload_type = std::uint64_t;
 1782|       |#endif
 1783|      0|                payload_type payload{};
 1784|      0|                if (auto result = reader_impl_for_int<CharT>{}.read_default(
  ------------------
  |  Branch (1784:26): [True: 0, False: 0]
  ------------------
 1785|      0|                        nan_payload.view(), payload, {})) {
 1786|      0|                    apply_nan_payload(value, payload);
 1787|      0|                }
 1788|      0|                else if (result.error().code() ==
  ------------------
  |  Branch (1788:26): [True: 0, False: 0]
  ------------------
 1789|      0|                         scan_error::value_positive_overflow) {
 1790|      0|                    apply_nan_payload(value,
 1791|      0|                                      std::numeric_limits<payload_type>::max());
 1792|      0|                }
 1793|      0|            }
 1794|       |
 1795|      0|            return static_cast<std::ptrdiff_t>(std::strlen("nan()") +
 1796|      0|                                               nan_payload.view().size());
 1797|       |        }
 1798|       |        else {
 1799|       |            return detail::unexpected_scan_error(
 1800|       |                scan_error::invalid_scanned_value,
 1801|       |                "Type doesn't support quiet NaNs");
 1802|       |        }
 1803|      0|    }
 1804|       |
 1805|   286k|    SCN_EXPECT(!data.input.view().empty());
  ------------------
  |  | 1104|   286k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   286k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1806|   286k|    if (data.kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (1806:9): [True: 59.2k, False: 226k]
  ------------------
 1807|  59.2k|        if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 16)) {
  ------------------
  |  | 1039|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.66k, False: 52.5k]
  |  |  ------------------
  ------------------
 1808|  6.66k|            return detail::unexpected_scan_error(
 1809|  6.66k|                scan_error::invalid_scanned_value,
 1810|  6.66k|                "Invalid floating-point digit");
 1811|  6.66k|        }
 1812|  59.2k|    }
 1813|   279k|    if (SCN_UNLIKELY(char_to_int(data.input.view().front()) >= 10)) {
  ------------------
  |  | 1039|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16.9k, False: 262k]
  |  |  ------------------
  ------------------
 1814|  16.9k|        return detail::unexpected_scan_error(scan_error::invalid_scanned_value,
 1815|  16.9k|                                             "Invalid floating-point digit");
 1816|  16.9k|    }
 1817|       |
 1818|   262k|    return dispatch_parse_float_value<
 1819|   262k|        CharT, T, get_float_impl_for<fast_float_impl_traits, CharT, T>,
 1820|   262k|        get_float_impl_for<from_chars_impl_traits, CharT, T>,
 1821|   262k|        get_float_impl_for<strtod_impl_traits, CharT, T>>(data, value);
 1822|   279k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_15float_null_implEJS4_NS2_10float_implINS2_18strtod_impl_traitsEweEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   262k|{
 1711|   262k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   262k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   262k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_15float_null_implEJNS2_10float_implINS2_18strtod_impl_traitsEweEEEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   262k|{
 1711|   262k|    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|   262k|        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|       |    else {
 1715|       |        auto next =
 1716|       |            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|       |            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|       |                if (!err.has_value()) {
 1721|       |                    return unexpected(err.error());
 1722|       |                }
 1723|       |            }
 1724|       |            // We still have valid impls to go, try those out
 1725|       |            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|       |        };
 1727|       |        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|       |    }
 1729|   262k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126dispatch_parse_float_valueIweNS2_10float_implINS2_18strtod_impl_traitsEweEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_:
 1710|   262k|{
 1711|       |    if constexpr (std::is_same_v<Impl, float_null_impl>) {
 1712|       |        return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1713|       |    }
 1714|   262k|    else {
 1715|   262k|        auto next =
 1716|   262k|            [&](scan_expected<void> err) -> scan_expected<std::ptrdiff_t> {
 1717|   262k|            if constexpr ((std::is_same_v<Impls, float_null_impl> && ...)) {
 1718|       |                // If this is the last valid impl we have,
 1719|       |                // propagate the error we got
 1720|   262k|                if (!err.has_value()) {
 1721|   262k|                    return unexpected(err.error());
 1722|   262k|                }
 1723|   262k|            }
 1724|       |            // We still have valid impls to go, try those out
 1725|   262k|            return dispatch_parse_float_value<CharT, T, Impls...>(data, value);
 1726|   262k|        };
 1727|   262k|        return parse_float_value_using_impl<CharT, T, Impl>(data, value, next);
 1728|   262k|    }
 1729|   262k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_128parse_float_value_using_implIweNS2_10float_implINS2_18strtod_impl_traitsEweEERZNS2_26dispatch_parse_float_valueIweS6_JEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNS8_IvEEE_EES9_SD_SF_OT2_:
 1685|   262k|{
 1686|   262k|    auto impl = typename Impl::impl_type{data};
 1687|       |
 1688|   262k|    if constexpr (std::is_same_v<T, typename Impl::float_type>) {
 1689|   262k|        return impl(value, fallback);
 1690|       |    }
 1691|       |    else {
 1692|       |        return impl(*reinterpret_cast<typename Impl::float_type*>(&value),
 1693|       |                    fallback);
 1694|       |    }
 1695|   262k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEC2ERNS2_14impl_init_dataIwEE:
 1071|   262k|        : strtod_impl_base<T>{data.kind, data.options}, m_input(data.input)
 1072|   262k|    {
 1073|   262k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweEclIRZNS2_26dispatch_parse_float_valueIweNS2_10float_implINS2_18strtod_impl_traitsEweEEJEEENS0_13scan_expectedIlEERNS2_14impl_init_dataIT_EERT0_EUlNSA_IvEEE_EESB_ReOSD_:
 1077|   262k|    {
 1078|   262k|        return this->parse(value, this->get_null_terminated_source(m_input),
 1079|   262k|                           generic_strtod);
 1080|   262k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE5parseIwPFePKwPPwEEENS0_13scan_expectedIlEERePKT_T0_:
  872|   262k|    {
  873|   262k|        CharT* end{};
  874|   262k|        errno = 0;
  875|   262k|        value = strtod_cb(src, &end);
  876|   262k|        const auto saved_errno = errno;
  877|   262k|        auto chars_read = end - src;
  878|       |
  879|   262k|        SCN_TRY_DISCARD(this->check_error(chars_read, saved_errno, value));
  ------------------
  |  | 3948|   262k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   262k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 200, False: 262k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|    200|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|    200|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|    200|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|    200|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|    200|    }
  ------------------
  880|       |
  881|   262k|        if (m_kind == float_reader_base::float_kind::hex_without_prefix &&
  ------------------
  |  Branch (881:13): [True: 52.4k, False: 209k]
  ------------------
  882|   262k|            chars_read >= 2) {
  ------------------
  |  Branch (882:13): [True: 52.4k, False: 0]
  ------------------
  883|  52.4k|            chars_read -= 2;
  884|  52.4k|        }
  885|       |
  886|   262k|        return chars_read;
  887|   262k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE26get_null_terminated_sourceIwEEPKT_RNS1_24contiguous_range_factoryIS6_EE:
  892|   262k|    {
  893|   262k|        if (!input.stores_allocated_string()) {
  ------------------
  |  Branch (893:13): [True: 256k, False: 6.36k]
  ------------------
  894|       |            // TODO: call float_reader::read_source?
  895|   256k|            auto first_space = read_until_classic_space(input.view());
  896|   256k|            input.assign(
  897|   256k|                std::basic_string<CharT>{input.view().begin(), first_space});
  898|   256k|        }
  899|       |
  900|   262k|        if (this->m_kind == float_reader_base::float_kind::hex_without_prefix) {
  ------------------
  |  Branch (900:13): [True: 52.4k, False: 209k]
  ------------------
  901|       |            if constexpr (std::is_same_v<CharT, char>) {
  902|       |                input.get_allocated_string().insert(0, "0x");
  903|       |            }
  904|  52.4k|            else {
  905|  52.4k|                input.get_allocated_string().insert(0, L"0x");
  906|  52.4k|            }
  907|  52.4k|        }
  908|       |
  909|   262k|        return input.get_allocated_string().c_str();
  910|   262k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_111strtod_implIweE14generic_strtodEPKwPPw:
 1084|   262k|    {
 1085|       |        if constexpr (std::is_same_v<CharT, char>) {
 1086|       |            return strtod_impl_base<T>::generic_narrow_strtod(str, str_end);
 1087|       |        }
 1088|   262k|        else {
 1089|   262k|            return strtod_impl_base<T>::generic_wide_strtod(str, str_end);
 1090|   262k|        }
 1091|   262k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_116strtod_impl_baseIeE19generic_wide_strtodEPKwPPw:
 1016|   262k|    {
 1017|       |#if SCN_HAS_STD_F16 && defined(__HAVE_FLOAT16) && __HAVE_FLOAT16
 1018|       |        if constexpr (std::is_same_v<T, std::float16_t>) {
 1019|       |            set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1020|       |            return static_cast<std::float16_t>(::wcstof16(str, str_end));
 1021|       |        }
 1022|       |#endif
 1023|       |
 1024|       |#if SCN_XLOCALE == SCN_XLOCALE_POSIX
 1025|       |        static locale_t cloc = ::newlocale(LC_ALL_MASK, "C", NULL);
 1026|       |        if constexpr (std::is_same_v<T, float>) {
 1027|       |            return ::wcstof_l(str, str_end, cloc);
 1028|       |        }
 1029|       |        else if constexpr (std::is_same_v<T, double>) {
 1030|       |            return ::wcstod_l(str, str_end, cloc);
 1031|       |        }
 1032|       |        else if constexpr (std::is_same_v<T, long double>) {
 1033|       |            return ::wcstold_l(str, str_end, cloc);
 1034|       |        }
 1035|       |#elif SCN_XLOCALE == SCN_XLOCALE_MSVC
 1036|       |        static _locale_t cloc = ::_create_locale(LC_ALL, "C");
 1037|       |        if constexpr (std::is_same_v<T, float>) {
 1038|       |            return ::_wcstof_l(str, str_end, cloc);
 1039|       |        }
 1040|       |        else if constexpr (std::is_same_v<T, double>) {
 1041|       |            return ::_wcstod_l(str, str_end, cloc);
 1042|       |        }
 1043|       |        else if constexpr (std::is_same_v<T, long double>) {
 1044|       |            return ::_wcstold_l(str, str_end, cloc);
 1045|       |        }
 1046|       |#else
 1047|   262k|        set_clocale_classic_guard clocale_guard{LC_NUMERIC};
 1048|       |        if constexpr (std::is_same_v<T, float>) {
 1049|       |            return std::wcstof(str, str_end);
 1050|       |        }
 1051|       |        else if constexpr (std::is_same_v<T, double>) {
 1052|       |            return std::wcstod(str, str_end);
 1053|       |        }
 1054|   262k|        else if constexpr (std::is_same_v<T, long double>) {
 1055|   262k|            return std::wcstold(str, str_end);
 1056|   262k|        }
 1057|      0|#endif
 1058|       |
 1059|   262k|        SCN_EXPECT(false);
  ------------------
  |  | 1104|   262k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   262k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1060|      0|        SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1061|   262k|    }
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_131parse_decimal_integer_fast_implEPKcS4_Rm:
 1939|  10.2k|{
 1940|  10.2k|    loop_parse_if_eight_decimal_digits(begin, end, val);
 1941|       |
 1942|  38.8k|    while (begin != end) {
  ------------------
  |  Branch (1942:12): [True: 29.4k, False: 9.42k]
  ------------------
 1943|  29.4k|        const auto digit = char_to_int(*begin);
 1944|  29.4k|        if (digit >= 10) {
  ------------------
  |  Branch (1944:13): [True: 838, False: 28.6k]
  ------------------
 1945|    838|            break;
 1946|    838|        }
 1947|  28.6k|        val = 10ull * val + static_cast<uint64_t>(digit);
 1948|  28.6k|        ++begin;
 1949|  28.6k|    }
 1950|       |
 1951|  10.2k|    return begin;
 1952|  10.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_134loop_parse_if_eight_decimal_digitsERPKcS4_Rm:
 1926|  10.2k|{
 1927|  10.2k|    while (
 1928|  18.7k|        std::distance(p, end) >= 8 &&
  ------------------
  |  Branch (1928:9): [True: 9.13k, False: 9.62k]
  ------------------
 1929|  18.7k|        is_word_made_of_eight_decimal_digits_fast(get_eight_digits_word(p))) {
  ------------------
  |  Branch (1929:9): [True: 8.49k, False: 640]
  ------------------
 1930|  8.49k|        val = val * 100'000'000 + parse_eight_decimal_digits_unrolled_fast(
 1931|  8.49k|                                      get_eight_digits_word(p));
 1932|  8.49k|        p += 8;
 1933|  8.49k|    }
 1934|  10.2k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_126parse_decimal_integer_fastImEENS0_13scan_expectedIPKcEENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEERT_b:
 2051|  10.2k|{
 2052|  10.2k|    static_assert(sizeof(T) <= sizeof(std::uint64_t));
 2053|       |
 2054|  10.2k|    uint64_t u64val{};
 2055|  10.2k|    auto ptr = parse_decimal_integer_fast_impl(
 2056|  10.2k|        input.data(), input.data() + input.size(), u64val);
 2057|       |
 2058|  10.2k|    auto digits_count = static_cast<size_t>(ptr - input.data());
 2059|  10.2k|    if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  10.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.23k, False: 9.02k]
  |  |  ------------------
  ------------------
 2060|  10.2k|            check_integer_overflow<T>(u64val, digits_count, 10, is_negative))) {
 2061|  1.23k|        return detail::unexpected_scan_error(
 2062|  1.23k|            is_negative ? scan_error::value_negative_overflow
  ------------------
  |  Branch (2062:13): [True: 0, False: 1.23k]
  ------------------
 2063|  1.23k|                        : scan_error::value_positive_overflow,
 2064|  1.23k|            "Integer overflow");
 2065|  1.23k|    }
 2066|       |
 2067|  9.02k|    val = store_result<T>(u64val, is_negative);
 2068|  9.02k|    return ptr;
 2069|  10.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2801|   566k|{
 2802|   566k|    const auto argcount = args.size();
 2803|   566k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2803:9): [True: 112k, False: 454k]
  |  Branch (2803:60): [True: 112k, False: 0]
  ------------------
 2804|   112k|        auto arg = args.get(0);
 2805|   112k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|   112k|    static_cast<    \
  |  | 1109|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2806|   112k|    }
 2807|       |
 2808|   454k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2808:9): [True: 0, False: 454k]
  ------------------
 2809|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2810|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2811|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2812|      0|        return vscan_parse_format_string(format, handler);
 2813|      0|    }
 2814|       |
 2815|   454k|    SCN_UNLIKELY_ATTR
 2816|   454k|    {
 2817|   454k|        auto handler = format_handler<false, CharT>{
 2818|   454k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   454k|    static_cast<    \
  |  | 1109|   454k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   454k|    static_cast<    \
  |  | 1109|   454k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2819|   454k|        return vscan_parse_format_string(format, handler);
 2820|   454k|    }
 2821|   454k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2349|  1.09M|{
 2350|  1.09M|    if (format.size() != 2) {
  ------------------
  |  Branch (2350:9): [True: 873k, False: 225k]
  ------------------
 2351|   873k|        return false;
 2352|   873k|    }
 2353|   225k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2353:12): [True: 225k, False: 0]
  |  Branch (2353:39): [True: 225k, False: 0]
  ------------------
 2354|  1.09M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2382|   168k|{
 2383|   168k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 168k]
  |  |  ------------------
  ------------------
 2384|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2385|      0|                                             "Argument #0 not found");
 2386|      0|    }
 2387|       |
 2388|   168k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|   168k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 168k]
  |  |  ------------------
  ------------------
 2389|      0|        auto reader = impl::default_arg_reader<
 2390|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2391|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2392|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2393|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2394|      0|    }
 2395|       |
 2396|   168k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2397|   168k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   168k|    static_cast<    \
  |  | 1109|   168k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2398|   168k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   168k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   168k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   168k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 15.8k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  15.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  15.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  15.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  15.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  15.8k|    }                                                  \
  |  |  |  | 3957|   168k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2399|   153k|    return it.position();
 2400|   168k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2625|   419k|        : format_handler_base{argcount},
 2626|   419k|          parse_ctx{source_tag<Source&&>, format},
 2627|   419k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   419k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   419k|    static_cast<    \
  |  | 1109|   419k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   419k|    static_cast<    \
  |  | 1109|   419k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|   419k|    {
 2629|   419k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2443|  1.61M|    format_handler_base(size_t argcount) : args_count(argcount)
 2444|  1.61M|    {
 2445|  1.61M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1039|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.61M]
  |  |  ------------------
  ------------------
 2446|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2447|      0|        }
 2448|  1.61M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2576|   419k|        : contiguous_ctx(source, args, loc)
 2577|   419k|    {
 2578|   419k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|   419k|{
 2767|   419k|    const auto beg = handler.get_ctx().begin();
 2768|   419k|    detail::parse_format_string<false>(format, handler);
 2769|   419k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 52.8k, False: 366k]
  |  |  ------------------
  ------------------
 2770|  52.8k|        return unexpected(err.error());
 2771|  52.8k|    }
 2772|   366k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|   419k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2750|  2.82M|    {
 2751|  2.82M|        return ctx.get();
 2752|  2.82M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2581|  2.82M|    {
 2582|  2.82M|        return contiguous_ctx;
 2583|  2.82M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2632|   785k|    {
 2633|   785k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 0, False: 785k]
  ------------------
 2634|      0|            auto it = get_ctx().begin();
 2635|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 0, False: 0]
  ------------------
 2636|      0|                SCN_UNLIKELY_ATTR
 2637|      0|                return on_error(
 2638|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|      0|            }
 2640|       |
 2641|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|      0|                    detail::make_string_view_from_pointers(begin, end));
 2643|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 0, False: 0]
  ------------------
 2644|      0|                SCN_UNLIKELY_ATTR
 2645|      0|                return on_error({scan_error::invalid_format_string,
 2646|      0|                                 "Invalid encoding in format string"});
 2647|      0|            }
 2648|      0|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 0, False: 0]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|      0|                get_ctx().advance_to(
 2651|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|      0|                auto begin_it = impl::read_while_classic_space(
 2654|      0|                    detail::make_string_view_from_pointers(
 2655|      0|                        detail::to_address(after_space_it),
 2656|      0|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|      0|                begin = detail::to_address(begin_it) - 1;
 2659|      0|                continue;
 2660|      0|            }
 2661|       |
 2662|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 0, False: 0]
  ------------------
 2663|      0|                SCN_UNLIKELY_ATTR
 2664|      0|                return on_error({scan_error::invalid_literal,
 2665|      0|                                 "Unexpected literal character in source"});
 2666|      0|            }
 2667|      0|            get_ctx().advance_to(ranges::next(it));
 2668|      0|        }
 2669|   785k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2492|   317k|    {
 2493|   317k|        error = unexpected(err);
 2494|   317k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2404|   419k|{
 2405|   419k|    auto arg = ctx.arg(id);
 2406|   419k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 419k]
  |  |  ------------------
  ------------------
 2407|      0|        handler.on_error("Failed to find argument with ID");
 2408|      0|    }
 2409|   419k|    return arg;
 2410|   419k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2518|  1.61M|    {
 2519|  1.61M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.61M]
  |  |  ------------------
  ------------------
 2520|      0|            on_error({scan_error::invalid_format_string,
 2521|      0|                      "Argument ID out-of-range"});
 2522|      0|            return;
 2523|      0|        }
 2524|       |
 2525|  1.61M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1039|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.61M]
  |  |  ------------------
  ------------------
 2526|      0|            on_error({scan_error::invalid_format_string,
 2527|      0|                      "Argument with this ID has already been scanned"});
 2528|      0|        }
 2529|       |
 2530|  1.61M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  1.61M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.61M, False: 0]
  |  |  ------------------
  ------------------
 2531|  1.61M|            visited_args_lower64 |= (1ull << id);
 2532|  1.61M|            return;
 2533|  1.61M|        }
 2534|       |
 2535|      0|        id -= 64;
 2536|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 2537|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2502|  1.61M|    {
 2503|  1.61M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.61M]
  |  |  ------------------
  ------------------
 2504|      0|            on_error({scan_error::invalid_format_string,
 2505|      0|                      "Argument ID out-of-range"});
 2506|      0|            return false;
 2507|      0|        }
 2508|       |
 2509|  1.61M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  1.61M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.61M, False: 0]
  |  |  ------------------
  ------------------
 2510|  1.61M|            return (visited_args_lower64 >> id) & 1ull;
 2511|  1.61M|        }
 2512|       |
 2513|      0|        id -= 64;
 2514|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2515|  1.61M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2672|   419k|    {
 2673|   419k|        return parse_ctx.next_arg_id();
 2674|   419k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2712|   419k|    {
 2713|   419k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|   419k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|   419k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 0, False: 419k]
  ------------------
 2717|      0|            parse_ctx.advance_to(begin);
 2718|      0|            on_visit_scan_arg(
 2719|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2720|      0|                    parse_ctx, get_custom_ctx()},
 2721|      0|                arg);
 2722|      0|            return parse_ctx.begin();
 2723|      0|        }
 2724|       |
 2725|   419k|        auto specs = detail::format_specs{};
 2726|   419k|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|   419k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|   419k|            detail::get_arg_type(arg)};
 2729|       |
 2730|   419k|        begin = detail::parse_format_specs(begin, end, handler);
 2731|   419k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 0, False: 419k]
  |  Branch (2731:29): [True: 0, False: 419k]
  ------------------
 2732|      0|            SCN_UNLIKELY_ATTR
 2733|      0|            on_error({scan_error::invalid_format_string,
 2734|      0|                      "Missing '}' in format string"});
 2735|      0|            return parse_ctx.begin();
 2736|      0|        }
 2737|   419k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 419k]
  |  |  ------------------
  ------------------
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|   419k|        parse_ctx.advance_to(begin);
 2741|       |
 2742|   419k|        on_visit_scan_arg(
 2743|   419k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|   419k|                                           get_ctx().locale()},
 2745|   419k|            arg);
 2746|   419k|        return parse_ctx.begin();
 2747|   419k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 2422|   419k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2423|   419k|    {
 2424|   419k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2683|   419k|    {
 2684|   419k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 0, False: 419k]
  |  Branch (2684:13): [True: 0, False: 419k]
  |  Branch (2684:29): [True: 0, False: 419k]
  ------------------
 2685|      0|            SCN_UNLIKELY_ATTR
 2686|      0|            return;
 2687|      0|        }
 2688|       |
 2689|   419k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   419k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|   419k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 52.8k, False: 366k]
  |  |  ------------------
  ------------------
 2691|  52.8k|            on_error(r.error());
 2692|  52.8k|        }
 2693|   366k|        else {
 2694|   366k|            get_ctx().advance_to(*r);
 2695|   366k|        }
 2696|   419k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2451|  1.61M|    {
 2452|  1.61M|        {
 2453|  1.61M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2453:45): [True: 0, False: 1.61M]
  ------------------
 2454|  1.61M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2454:35): [True: 0, False: 1.61M]
  ------------------
 2455|  1.61M|                                      ? std::numeric_limits<uint64_t>::max()
 2456|  1.61M|                                      : (1ull << args_count_lower64) - 1;
 2457|       |
 2458|  1.61M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2458:17): [True: 0, False: 1.61M]
  ------------------
 2459|      0|                return on_error({scan_error::invalid_format_string,
 2460|      0|                                 "Argument list not exhausted"});
 2461|      0|            }
 2462|  1.61M|        }
 2463|       |
 2464|  1.61M|        if (args_count < 64) {
  ------------------
  |  Branch (2464:13): [True: 1.61M, False: 0]
  ------------------
 2465|  1.61M|            return;
 2466|  1.61M|        }
 2467|       |
 2468|      0|        auto last_args_count = args_count - 64;
 2469|      0|        for (auto it = visited_args_upper.begin();
 2470|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2470:14): [True: 0, False: 0]
  ------------------
 2471|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2471:17): [True: 0, False: 0]
  ------------------
 2472|      0|                return on_error({scan_error::invalid_format_string,
 2473|      0|                                 "Argument list not exhausted"});
 2474|      0|            }
 2475|      0|            last_args_count -= 8;
 2476|      0|        }
 2477|       |
 2478|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2479|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2479:13): [True: 0, False: 0]
  ------------------
 2480|      0|            return on_error({scan_error::invalid_format_string,
 2481|      0|                             "Argument list not exhausted"});
 2482|      0|        }
 2483|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2497|  6.45M|    {
 2498|  6.45M|        return error;
 2499|  6.45M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 2625|   454k|        : format_handler_base{argcount},
 2626|   454k|          parse_ctx{source_tag<Source&&>, format},
 2627|   454k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   454k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   454k|    static_cast<    \
  |  | 1109|   454k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   454k|    static_cast<    \
  |  | 1109|   454k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|   454k|    {
 2629|   454k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 2552|   454k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|   454k|    static_cast<    \
  |  | 1109|   454k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2553|   454k|    {
 2554|   454k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|   454k|{
 2767|   454k|    const auto beg = handler.get_ctx().begin();
 2768|   454k|    detail::parse_format_string<false>(format, handler);
 2769|   454k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   454k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 52.8k, False: 401k]
  |  |  ------------------
  ------------------
 2770|  52.8k|        return unexpected(err.error());
 2771|  52.8k|    }
 2772|   401k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|   454k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2750|  3.07M|    {
 2751|  3.07M|        return ctx.get();
 2752|  3.07M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 2557|  3.07M|    {
 2558|  3.07M|        return ctx;
 2559|  3.07M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 2632|   855k|    {
 2633|   855k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 0, False: 855k]
  ------------------
 2634|      0|            auto it = get_ctx().begin();
 2635|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 0, False: 0]
  ------------------
 2636|      0|                SCN_UNLIKELY_ATTR
 2637|      0|                return on_error(
 2638|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|      0|            }
 2640|       |
 2641|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|      0|                    detail::make_string_view_from_pointers(begin, end));
 2643|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 0, False: 0]
  ------------------
 2644|      0|                SCN_UNLIKELY_ATTR
 2645|      0|                return on_error({scan_error::invalid_format_string,
 2646|      0|                                 "Invalid encoding in format string"});
 2647|      0|            }
 2648|      0|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 0, False: 0]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|      0|                get_ctx().advance_to(
 2651|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|      0|                auto begin_it = impl::read_while_classic_space(
 2654|      0|                    detail::make_string_view_from_pointers(
 2655|      0|                        detail::to_address(after_space_it),
 2656|      0|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|      0|                begin = detail::to_address(begin_it) - 1;
 2659|      0|                continue;
 2660|      0|            }
 2661|       |
 2662|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 0, False: 0]
  ------------------
 2663|      0|                SCN_UNLIKELY_ATTR
 2664|      0|                return on_error({scan_error::invalid_literal,
 2665|      0|                                 "Unexpected literal character in source"});
 2666|      0|            }
 2667|      0|            get_ctx().advance_to(ranges::next(it));
 2668|      0|        }
 2669|   855k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 2404|   454k|{
 2405|   454k|    auto arg = ctx.arg(id);
 2406|   454k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   454k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 454k]
  |  |  ------------------
  ------------------
 2407|      0|        handler.on_error("Failed to find argument with ID");
 2408|      0|    }
 2409|   454k|    return arg;
 2410|   454k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 2672|   454k|    {
 2673|   454k|        return parse_ctx.next_arg_id();
 2674|   454k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2712|   454k|    {
 2713|   454k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|   454k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|   454k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 0, False: 454k]
  ------------------
 2717|      0|            parse_ctx.advance_to(begin);
 2718|      0|            on_visit_scan_arg(
 2719|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2720|      0|                    parse_ctx, get_custom_ctx()},
 2721|      0|                arg);
 2722|      0|            return parse_ctx.begin();
 2723|      0|        }
 2724|       |
 2725|   454k|        auto specs = detail::format_specs{};
 2726|   454k|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|   454k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|   454k|            detail::get_arg_type(arg)};
 2729|       |
 2730|   454k|        begin = detail::parse_format_specs(begin, end, handler);
 2731|   454k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 0, False: 454k]
  |  Branch (2731:29): [True: 0, False: 454k]
  ------------------
 2732|      0|            SCN_UNLIKELY_ATTR
 2733|      0|            on_error({scan_error::invalid_format_string,
 2734|      0|                      "Missing '}' in format string"});
 2735|      0|            return parse_ctx.begin();
 2736|      0|        }
 2737|   454k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   454k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 454k]
  |  |  ------------------
  ------------------
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|   454k|        parse_ctx.advance_to(begin);
 2741|       |
 2742|   454k|        on_visit_scan_arg(
 2743|   454k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|   454k|                                           get_ctx().locale()},
 2745|   454k|            arg);
 2746|   454k|        return parse_ctx.begin();
 2747|   454k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 2422|   454k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2423|   454k|    {
 2424|   454k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2683|   454k|    {
 2684|   454k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 0, False: 454k]
  |  Branch (2684:13): [True: 0, False: 454k]
  |  Branch (2684:29): [True: 0, False: 454k]
  ------------------
 2685|      0|            SCN_UNLIKELY_ATTR
 2686|      0|            return;
 2687|      0|        }
 2688|       |
 2689|   454k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   454k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|   454k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   454k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 52.8k, False: 401k]
  |  |  ------------------
  ------------------
 2691|  52.8k|            on_error(r.error());
 2692|  52.8k|        }
 2693|   401k|        else {
 2694|   401k|            get_ctx().advance_to(*r);
 2695|   401k|        }
 2696|   454k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2781|   532k|{
 2782|   532k|    const auto argcount = args.size();
 2783|   532k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2783:9): [True: 112k, False: 419k]
  |  Branch (2783:60): [True: 112k, False: 0]
  ------------------
 2784|   112k|        auto arg = args.get(0);
 2785|   112k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|   112k|    static_cast<    \
  |  | 1109|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2786|   112k|    }
 2787|       |
 2788|   419k|    auto handler = format_handler<true, CharT>{
 2789|   419k|        ranges::subrange<const CharT*>{source.data(),
 2790|   419k|                                       source.data() + source.size()},
 2791|   419k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   419k|    static_cast<    \
  |  | 1109|   419k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   419k|    static_cast<    \
  |  | 1109|   419k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2792|   419k|    return vscan_parse_format_string(format, handler);
 2793|   532k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2362|   169k|{
 2363|   169k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 169k]
  |  |  ------------------
  ------------------
 2364|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2365|      0|                                             "Argument #0 not found");
 2366|      0|    }
 2367|       |
 2368|   169k|    auto reader =
 2369|   169k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2370|   169k|            ranges::subrange<const CharT*>{source.data(),
 2371|   169k|                                           source.data() + source.size()},
 2372|   169k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   169k|    static_cast<    \
  |  | 1109|   169k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2373|   169k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   169k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   169k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   169k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 15.8k, False: 153k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  15.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  15.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  15.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  15.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  15.8k|    }                                                  \
  |  |  |  | 3957|   169k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   153k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2374|   153k|    return ranges::distance(source.data(), it);
 2375|   169k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2881|   623k|{
 2882|   623k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|   623k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 554k, False: 68.7k]
  |  |  ------------------
  ------------------
 2883|   554k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|   554k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 554k]
  |  |  ------------------
  ------------------
 2884|      0|            return detail::unexpected_scan_error(
 2885|      0|                scan_error::invalid_source_state,
 2886|      0|                "Failed to sync with underlying source");
 2887|      0|        }
 2888|   554k|    }
 2889|  68.7k|    else {
 2890|  68.7k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|  68.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 68.7k]
  |  |  ------------------
  ------------------
 2891|      0|            return detail::unexpected_scan_error(
 2892|      0|                scan_error::invalid_source_state,
 2893|      0|                "Failed to sync with underlying source");
 2894|      0|        }
 2895|  68.7k|    }
 2896|   623k|    return result;
 2897|   623k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2781|   462k|{
 2782|   462k|    const auto argcount = args.size();
 2783|   462k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2783:9): [True: 91.3k, False: 370k]
  |  Branch (2783:60): [True: 91.3k, False: 0]
  ------------------
 2784|  91.3k|        auto arg = args.get(0);
 2785|  91.3k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|  91.3k|    static_cast<    \
  |  | 1109|  91.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2786|  91.3k|    }
 2787|       |
 2788|   370k|    auto handler = format_handler<true, CharT>{
 2789|   370k|        ranges::subrange<const CharT*>{source.data(),
 2790|   370k|                                       source.data() + source.size()},
 2791|   370k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   370k|    static_cast<    \
  |  | 1109|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   370k|    static_cast<    \
  |  | 1109|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2792|   370k|    return vscan_parse_format_string(format, handler);
 2793|   462k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2349|   923k|{
 2350|   923k|    if (format.size() != 2) {
  ------------------
  |  Branch (2350:9): [True: 741k, False: 182k]
  ------------------
 2351|   741k|        return false;
 2352|   741k|    }
 2353|   182k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2353:12): [True: 182k, False: 0]
  |  Branch (2353:39): [True: 182k, False: 0]
  ------------------
 2354|   923k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2362|   136k|{
 2363|   136k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
 2364|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2365|      0|                                             "Argument #0 not found");
 2366|      0|    }
 2367|       |
 2368|   136k|    auto reader =
 2369|   136k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2370|   136k|            ranges::subrange<const CharT*>{source.data(),
 2371|   136k|                                           source.data() + source.size()},
 2372|   136k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   136k|    static_cast<    \
  |  | 1109|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2373|   136k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   136k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 31.7k, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  31.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  31.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  31.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  31.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  31.7k|    }                                                  \
  |  |  |  | 3957|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2374|   105k|    return ranges::distance(source.data(), it);
 2375|   136k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2625|   370k|        : format_handler_base{argcount},
 2626|   370k|          parse_ctx{source_tag<Source&&>, format},
 2627|   370k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   370k|    static_cast<    \
  |  | 1109|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   370k|    static_cast<    \
  |  | 1109|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|   370k|    {
 2629|   370k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2576|   370k|        : contiguous_ctx(source, args, loc)
 2577|   370k|    {
 2578|   370k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|   370k|{
 2767|   370k|    const auto beg = handler.get_ctx().begin();
 2768|   370k|    detail::parse_format_string<false>(format, handler);
 2769|   370k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 105k, False: 265k]
  |  |  ------------------
  ------------------
 2770|   105k|        return unexpected(err.error());
 2771|   105k|    }
 2772|   265k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|   370k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2750|  2.38M|    {
 2751|  2.38M|        return ctx.get();
 2752|  2.38M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2581|  2.38M|    {
 2582|  2.38M|        return contiguous_ctx;
 2583|  2.38M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2632|   635k|    {
 2633|   635k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 0, False: 635k]
  ------------------
 2634|      0|            auto it = get_ctx().begin();
 2635|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 0, False: 0]
  ------------------
 2636|      0|                SCN_UNLIKELY_ATTR
 2637|      0|                return on_error(
 2638|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|      0|            }
 2640|       |
 2641|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|      0|                    detail::make_string_view_from_pointers(begin, end));
 2643|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 0, False: 0]
  ------------------
 2644|      0|                SCN_UNLIKELY_ATTR
 2645|      0|                return on_error({scan_error::invalid_format_string,
 2646|      0|                                 "Invalid encoding in format string"});
 2647|      0|            }
 2648|      0|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 0, False: 0]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|      0|                get_ctx().advance_to(
 2651|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|      0|                auto begin_it = impl::read_while_classic_space(
 2654|      0|                    detail::make_string_view_from_pointers(
 2655|      0|                        detail::to_address(after_space_it),
 2656|      0|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|      0|                begin = detail::to_address(begin_it) - 1;
 2659|      0|                continue;
 2660|      0|            }
 2661|       |
 2662|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 0, False: 0]
  ------------------
 2663|      0|                SCN_UNLIKELY_ATTR
 2664|      0|                return on_error({scan_error::invalid_literal,
 2665|      0|                                 "Unexpected literal character in source"});
 2666|      0|            }
 2667|      0|            get_ctx().advance_to(ranges::next(it));
 2668|      0|        }
 2669|   635k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2404|   370k|{
 2405|   370k|    auto arg = ctx.arg(id);
 2406|   370k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 2407|      0|        handler.on_error("Failed to find argument with ID");
 2408|      0|    }
 2409|   370k|    return arg;
 2410|   370k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2672|   370k|    {
 2673|   370k|        return parse_ctx.next_arg_id();
 2674|   370k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2712|   370k|    {
 2713|   370k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|   370k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|   370k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 0, False: 370k]
  ------------------
 2717|      0|            parse_ctx.advance_to(begin);
 2718|      0|            on_visit_scan_arg(
 2719|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2720|      0|                    parse_ctx, get_custom_ctx()},
 2721|      0|                arg);
 2722|      0|            return parse_ctx.begin();
 2723|      0|        }
 2724|       |
 2725|   370k|        auto specs = detail::format_specs{};
 2726|   370k|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|   370k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|   370k|            detail::get_arg_type(arg)};
 2729|       |
 2730|   370k|        begin = detail::parse_format_specs(begin, end, handler);
 2731|   370k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 0, False: 370k]
  |  Branch (2731:29): [True: 0, False: 370k]
  ------------------
 2732|      0|            SCN_UNLIKELY_ATTR
 2733|      0|            on_error({scan_error::invalid_format_string,
 2734|      0|                      "Missing '}' in format string"});
 2735|      0|            return parse_ctx.begin();
 2736|      0|        }
 2737|   370k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|   370k|        parse_ctx.advance_to(begin);
 2741|       |
 2742|   370k|        on_visit_scan_arg(
 2743|   370k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|   370k|                                           get_ctx().locale()},
 2745|   370k|            arg);
 2746|   370k|        return parse_ctx.begin();
 2747|   370k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 2422|   370k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2423|   370k|    {
 2424|   370k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2683|   370k|    {
 2684|   370k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 0, False: 370k]
  |  Branch (2684:13): [True: 0, False: 370k]
  |  Branch (2684:29): [True: 0, False: 370k]
  ------------------
 2685|      0|            SCN_UNLIKELY_ATTR
 2686|      0|            return;
 2687|      0|        }
 2688|       |
 2689|   370k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|   370k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 105k, False: 265k]
  |  |  ------------------
  ------------------
 2691|   105k|            on_error(r.error());
 2692|   105k|        }
 2693|   265k|        else {
 2694|   265k|            get_ctx().advance_to(*r);
 2695|   265k|        }
 2696|   370k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2801|   461k|{
 2802|   461k|    const auto argcount = args.size();
 2803|   461k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2803:9): [True: 91.2k, False: 370k]
  |  Branch (2803:60): [True: 91.2k, False: 0]
  ------------------
 2804|  91.2k|        auto arg = args.get(0);
 2805|  91.2k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|  91.2k|    static_cast<    \
  |  | 1109|  91.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2806|  91.2k|    }
 2807|       |
 2808|   370k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2808:9): [True: 0, False: 370k]
  ------------------
 2809|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2810|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2811|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2812|      0|        return vscan_parse_format_string(format, handler);
 2813|      0|    }
 2814|       |
 2815|   370k|    SCN_UNLIKELY_ATTR
 2816|   370k|    {
 2817|   370k|        auto handler = format_handler<false, CharT>{
 2818|   370k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   370k|    static_cast<    \
  |  | 1109|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   370k|    static_cast<    \
  |  | 1109|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2819|   370k|        return vscan_parse_format_string(format, handler);
 2820|   370k|    }
 2821|   370k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2382|   136k|{
 2383|   136k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
 2384|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2385|      0|                                             "Argument #0 not found");
 2386|      0|    }
 2387|       |
 2388|   136k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|   136k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 136k]
  |  |  ------------------
  ------------------
 2389|      0|        auto reader = impl::default_arg_reader<
 2390|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2391|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2392|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2393|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2394|      0|    }
 2395|       |
 2396|   136k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2397|   136k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   136k|    static_cast<    \
  |  | 1109|   136k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2398|   136k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   136k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 31.7k, False: 105k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  31.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  31.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  31.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  31.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  31.7k|    }                                                  \
  |  |  |  | 3957|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2399|   105k|    return it.position();
 2400|   136k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 2625|   370k|        : format_handler_base{argcount},
 2626|   370k|          parse_ctx{source_tag<Source&&>, format},
 2627|   370k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   370k|    static_cast<    \
  |  | 1109|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   370k|    static_cast<    \
  |  | 1109|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2628|   370k|    {
 2629|   370k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 2552|   370k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|   370k|    static_cast<    \
  |  | 1109|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2553|   370k|    {
 2554|   370k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2766|   370k|{
 2767|   370k|    const auto beg = handler.get_ctx().begin();
 2768|   370k|    detail::parse_format_string<false>(format, handler);
 2769|   370k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 105k, False: 264k]
  |  |  ------------------
  ------------------
 2770|   105k|        return unexpected(err.error());
 2771|   105k|    }
 2772|   264k|    return ranges::distance(beg, handler.get_ctx().begin());
 2773|   370k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2750|  2.38M|    {
 2751|  2.38M|        return ctx.get();
 2752|  2.38M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 2557|  2.38M|    {
 2558|  2.38M|        return ctx;
 2559|  2.38M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 2632|   635k|    {
 2633|   635k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2633:16): [True: 0, False: 635k]
  ------------------
 2634|      0|            auto it = get_ctx().begin();
 2635|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2635:17): [True: 0, False: 0]
  ------------------
 2636|      0|                SCN_UNLIKELY_ATTR
 2637|      0|                return on_error(
 2638|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2639|      0|            }
 2640|       |
 2641|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2642|      0|                    detail::make_string_view_from_pointers(begin, end));
 2643|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2643:17): [True: 0, False: 0]
  ------------------
 2644|      0|                SCN_UNLIKELY_ATTR
 2645|      0|                return on_error({scan_error::invalid_format_string,
 2646|      0|                                 "Invalid encoding in format string"});
 2647|      0|            }
 2648|      0|            else if (is_space) {
  ------------------
  |  Branch (2648:22): [True: 0, False: 0]
  ------------------
 2649|       |                // Skip all whitespace in input
 2650|      0|                get_ctx().advance_to(
 2651|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2652|       |                // And, skip all whitespace in the format string
 2653|      0|                auto begin_it = impl::read_while_classic_space(
 2654|      0|                    detail::make_string_view_from_pointers(
 2655|      0|                        detail::to_address(after_space_it),
 2656|      0|                        detail::to_address(end)));
 2657|       |                // (-1 because of the for loop ++begin)
 2658|      0|                begin = detail::to_address(begin_it) - 1;
 2659|      0|                continue;
 2660|      0|            }
 2661|       |
 2662|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2662:17): [True: 0, False: 0]
  ------------------
 2663|      0|                SCN_UNLIKELY_ATTR
 2664|      0|                return on_error({scan_error::invalid_literal,
 2665|      0|                                 "Unexpected literal character in source"});
 2666|      0|            }
 2667|      0|            get_ctx().advance_to(ranges::next(it));
 2668|      0|        }
 2669|   635k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 2404|   370k|{
 2405|   370k|    auto arg = ctx.arg(id);
 2406|   370k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 2407|      0|        handler.on_error("Failed to find argument with ID");
 2408|      0|    }
 2409|   370k|    return arg;
 2410|   370k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 2672|   370k|    {
 2673|   370k|        return parse_ctx.next_arg_id();
 2674|   370k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2712|   370k|    {
 2713|   370k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2714|   370k|        set_arg_as_visited(arg_id);
 2715|       |
 2716|   370k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2716:13): [True: 0, False: 370k]
  ------------------
 2717|      0|            parse_ctx.advance_to(begin);
 2718|      0|            on_visit_scan_arg(
 2719|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2720|      0|                    parse_ctx, get_custom_ctx()},
 2721|      0|                arg);
 2722|      0|            return parse_ctx.begin();
 2723|      0|        }
 2724|       |
 2725|   370k|        auto specs = detail::format_specs{};
 2726|   370k|        detail::specs_checker<specs_handler<context_type>> handler{
 2727|   370k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2728|   370k|            detail::get_arg_type(arg)};
 2729|       |
 2730|   370k|        begin = detail::parse_format_specs(begin, end, handler);
 2731|   370k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2731:13): [True: 0, False: 370k]
  |  Branch (2731:29): [True: 0, False: 370k]
  ------------------
 2732|      0|            SCN_UNLIKELY_ATTR
 2733|      0|            on_error({scan_error::invalid_format_string,
 2734|      0|                      "Missing '}' in format string"});
 2735|      0|            return parse_ctx.begin();
 2736|      0|        }
 2737|   370k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|   370k|        parse_ctx.advance_to(begin);
 2741|       |
 2742|   370k|        on_visit_scan_arg(
 2743|   370k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2744|   370k|                                           get_ctx().locale()},
 2745|   370k|            arg);
 2746|   370k|        return parse_ctx.begin();
 2747|   370k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 2422|   370k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2423|   370k|    {
 2424|   370k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2683|   370k|    {
 2684|   370k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2684:13): [True: 0, False: 370k]
  |  Branch (2684:13): [True: 0, False: 370k]
  |  Branch (2684:29): [True: 0, False: 370k]
  ------------------
 2685|      0|            SCN_UNLIKELY_ATTR
 2686|      0|            return;
 2687|      0|        }
 2688|       |
 2689|   370k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2690|   370k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 105k, False: 264k]
  |  |  ------------------
  ------------------
 2691|   105k|            on_error(r.error());
 2692|   105k|        }
 2693|   264k|        else {
 2694|   264k|            get_ctx().advance_to(*r);
 2695|   264k|        }
 2696|   370k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2881|   507k|{
 2882|   507k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|   507k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 369k, False: 137k]
  |  |  ------------------
  ------------------
 2883|   369k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|   369k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 369k]
  |  |  ------------------
  ------------------
 2884|      0|            return detail::unexpected_scan_error(
 2885|      0|                scan_error::invalid_source_state,
 2886|      0|                "Failed to sync with underlying source");
 2887|      0|        }
 2888|   369k|    }
 2889|   137k|    else {
 2890|   137k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 137k]
  |  |  ------------------
  ------------------
 2891|      0|            return detail::unexpected_scan_error(
 2892|      0|                scan_error::invalid_source_state,
 2893|      0|                "Failed to sync with underlying source");
 2894|      0|        }
 2895|   137k|    }
 2896|   507k|    return result;
 2897|   507k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2827|  56.4k|{
 2828|  56.4k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  56.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2829|  56.4k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2827|  56.3k|{
 2828|  56.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  56.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2829|  56.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2827|  45.6k|{
 2828|  45.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  45.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2829|  45.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2827|  45.6k|{
 2828|  45.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  45.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2829|  45.6k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|  1.76k|{
 1462|  1.76k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|  1.76k|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|  1.76k|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|  1.76k|            return transcode_to_string_impl_to32(src, dest);
 1473|  1.76k|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|  1.76k|    SCN_EXPECT(false);
  ------------------
  |  | 1104|  1.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|  1.76k|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|  1.76k|{
 1355|  1.76k|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|  1.76k|    auto it = src.begin();
 1358|   417k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 415k, False: 1.76k]
  ------------------
 1359|   415k|        auto res = get_next_code_point(
 1360|   415k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   415k|                                                                 src.end()));
 1362|   415k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1039|   415k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.01k, False: 413k]
  |  |  ------------------
  ------------------
 1363|  2.01k|            dest.push_back(DestCharT{0xfffd});
 1364|  2.01k|        }
 1365|   413k|        else {
 1366|   413k|            dest.push_back(res.value);
 1367|   413k|        }
 1368|   415k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   415k|    }
 1370|  1.76k|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   711k|{
 1279|   711k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1104|   711k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   711k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   711k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   711k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   711k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.1k, False: 689k]
  |  |  ------------------
  ------------------
 1283|  22.1k|        return {get_start_for_next_code_point(input),
 1284|  22.1k|                detail::invalid_code_point};
 1285|  22.1k|    }
 1286|   689k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1039|   689k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.80k, False: 685k]
  |  |  ------------------
  ------------------
 1287|  3.80k|        return {input.end(), detail::invalid_code_point};
 1288|  3.80k|    }
 1289|       |
 1290|   685k|    return {input.begin() + len,
 1291|   685k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   689k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  22.1k|{
 1265|  22.1k|    auto it = input.begin();
 1266|   136k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 130k, False: 6.73k]
  ------------------
 1267|   130k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 15.4k, False: 114k]
  ------------------
 1268|  15.4k|            break;
 1269|  15.4k|        }
 1270|   130k|    }
 1271|  22.1k|    return it;
 1272|  22.1k|}
_ZN3scn2v44impl11parse_errorC2ENS2_4codeE:
  807|  20.0M|    constexpr parse_error(code c) : m_code(c)
  808|  20.0M|    {
  809|  20.0M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|  20.0M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  810|  20.0M|    }
_ZN3scn2v44impleqENS1_11parse_errorES2_:
  822|  9.08M|    {
  823|  9.08M|        return a.m_code == b.m_code;
  824|  9.08M|    }
_ZN3scn2v44implneENS1_11parse_errorES2_:
  826|  2.36M|    {
  827|  2.36M|        return !(a == b);
  828|  2.36M|    }
_ZN3scn2v44impl16clocale_restorerC2Ei:
 1825|  1.74M|    clocale_restorer(int cat) : m_category(cat)
 1826|  1.74M|    {
 1827|  1.74M|        const auto loc = std::setlocale(cat, nullptr);
 1828|  1.74M|        std::strcpy(m_locbuf, loc);
 1829|  1.74M|    }
_ZN3scn2v44impl16clocale_restorerD2Ev:
 1831|  1.74M|    {
 1832|       |        // Restore locale to what it was before
 1833|  1.74M|        std::setlocale(m_category, m_locbuf);
 1834|  1.74M|    }
_ZN3scn2v44impl25set_clocale_classic_guardC2Ei:
 1854|  1.74M|    set_clocale_classic_guard(int cat) : m_restorer(cat)
 1855|  1.74M|    {
 1856|  1.74M|        std::setlocale(cat, "C");
 1857|  1.74M|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3082|  1.61M|    {
 3083|  1.61M|        return m_msg == nullptr;
 3084|  1.61M|    }
_ZN3scn2v44impl17float_reader_baseC2Ej:
 3718|  1.59M|    explicit constexpr float_reader_base(unsigned opt) : m_options(opt) {}
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  13.3M|{
  458|  13.3M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  13.3M|        static_cast<unsigned char>(ch))];
  460|  13.3M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|   336k|{
  469|   336k|    return static_cast<unsigned char>(ch) <= 127;
  470|   336k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|  2.96M|{
  539|  2.96M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  2.96M|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  7.34M|{
  784|  7.34M|    return e != eof_error::good;
  785|  7.34M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  28.0k|{
  798|  28.0k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|  28.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  28.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  28.0k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  28.0k|}
_ZN3scn2v44impl20make_eof_parse_errorENS1_9eof_errorE:
  844|   183k|{
  845|   183k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|   183k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   183k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  846|   183k|    return parse_error::eof;
  847|   183k|}
_ZN3scn2v44impl32make_scan_error_from_parse_errorENS1_11parse_errorENS0_10scan_error4codeEPKc:
  853|  2.36M|{
  854|  2.36M|    if (err == parse_error::good) {
  ------------------
  |  Branch (854:9): [True: 0, False: 2.36M]
  ------------------
  855|      0|        return {};
  856|      0|    }
  857|       |
  858|  2.36M|    if (err == parse_error::eof) {
  ------------------
  |  Branch (858:9): [True: 70.1k, False: 2.29M]
  ------------------
  859|  70.1k|        return detail::unexpected_scan_error(scan_error::end_of_input, "EOF");
  860|  70.1k|    }
  861|       |
  862|  2.29M|    return detail::unexpected_scan_error(code, msg);
  863|  2.36M|}
_ZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKc:
  867|  2.36M|{
  868|  2.36M|    return [code, msg](parse_error err) {
  869|  2.36M|        assert(err != parse_error::good);
  870|  2.36M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  2.36M|    };
  872|  2.36M|}
_ZN3scn2v44impl17fast_streq_nocaseEPKcS3_m:
 2352|  1.50M|{
 2353|  1.50M|    unsigned char running_diff{0};
 2354|  5.65M|    for (size_t i = 0; i < len; ++i) {
  ------------------
  |  Branch (2354:24): [True: 4.15M, False: 1.50M]
  ------------------
 2355|  4.15M|        running_diff |= static_cast<unsigned char>(a[i] ^ b[i]);
 2356|  4.15M|    }
 2357|  1.50M|    return running_diff == 0 || running_diff == 32;
  ------------------
  |  Branch (2357:12): [True: 41.9k, False: 1.46M]
  |  Branch (2357:33): [True: 18.7k, False: 1.44M]
  ------------------
 2358|  1.50M|}
_ZN3scn2v44impl11char_to_intEc:
 3271|  8.77M|{
 3272|  8.77M|    return char_to_int_table[static_cast<unsigned char>(ch)];
 3273|  8.77M|}
_ZN3scn2v44impl11char_to_intEw:
 3275|  2.83M|{
 3276|  2.83M|#if WCHAR_MIN < 0
 3277|  2.83M|    if (ch >= 0 && ch <= 255) {
  ------------------
  |  Branch (3277:9): [True: 2.81M, False: 13.6k]
  |  Branch (3277:20): [True: 1.79M, False: 1.01M]
  ------------------
 3278|       |#else
 3279|       |    if (ch <= 255) {
 3280|       |#endif
 3281|  1.79M|        return char_to_int(static_cast<char>(ch));
 3282|  1.79M|    }
 3283|  1.03M|    return 255;
 3284|  2.83M|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6097|  1.29M|{
 6098|  1.29M|    if (specs.width != 0) {
  ------------------
  |  Branch (6098:9): [True: 0, False: 1.29M]
  ------------------
 6099|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6099:13): [True: 0, False: 0]
  ------------------
 6100|      0|            return detail::unexpected_scan_error(
 6101|      0|                scan_error::length_too_short,
 6102|      0|                "Scanned value too narrow, width did not exceed what "
 6103|      0|                "was specified in the format string");
 6104|      0|        }
 6105|      0|    }
 6106|  1.29M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6106:9): [True: 0, False: 1.29M]
  ------------------
 6107|       |        // Ensured by take_width_view
 6108|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6109|      0|                   specs.precision);
 6110|      0|    }
 6111|  1.29M|    return {};
 6112|  1.29M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  2.13M|    {
  304|  2.13M|        ranges::advance(x, n);
  305|  2.13M|        return x;
  306|  2.13M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  2.13M|    {
  268|  2.13M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.13M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  2.13M|    {
  151|  2.13M|        i += n;
  152|  2.13M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.52M|    {
  108|  2.52M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.52M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.52M|    {
   87|  2.52M|        return s - i;
   88|  2.52M|    }
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.64M|    {
  304|  1.64M|        ranges::advance(x, n);
  305|  1.64M|        return x;
  306|  1.64M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.64M|    {
  268|  1.64M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.64M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKwEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.64M|    {
  151|  1.64M|        i += n;
  152|  1.64M|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   492k|    {
  108|   492k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   492k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   492k|    {
   87|   492k|        return s - i;
   88|   492k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3024|  1.20M|    {
 3025|  1.20M|        return m_current;
 3026|  1.20M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3024|  1.00M|    {
 3025|  1.00M|        return m_current;
 3026|  1.00M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   623k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   623k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   623k|        auto beg = r.begin();
  991|   623k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 623k, False: 0]
  ------------------
  992|   623k|            return false;
  993|   623k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   623k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  1.61M|{
 1956|  1.61M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  1.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.61M|    else {
 1967|  1.61M|        auto it = range.begin();
 1968|  1.61M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 984k, False: 634k]
  ------------------
 1969|   984k|            return ranges::next(it, count);
 1970|   984k|        }
 1971|       |
 1972|  2.50M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.89M, False: 606k]
  ------------------
 1973|  1.89M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 27.7k, False: 1.86M]
  ------------------
 1974|  27.7k|                return unexpected(eof_error::eof);
 1975|  27.7k|            }
 1976|  1.89M|        }
 1977|       |
 1978|   606k|        return it;
 1979|   634k|    }
 1980|  1.61M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  1.61M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  1.61M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  1.61M|        else {
 1107|  1.61M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 1.61M, False: 0]
  ------------------
 1108|  1.61M|                return static_cast<size_t>(
 1109|  1.61M|                    r.begin().parent()->chars_available() -
 1110|  1.61M|                    r.begin().position());
 1111|  1.61M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  1.61M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  1.61M|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  12.0M|    {
  763|  12.0M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  12.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  12.0M|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.48M|        : m_fptr([](storage fn,
  743|  1.48M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.48M|              cvref<T> obj = *get<T>(fn);
  745|  1.48M|              if constexpr (std::is_void_v<R>) {
  746|  1.48M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.48M|              }
  748|  1.48M|              else {
  749|  1.48M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.48M|              }
  751|  1.48M|          }),
  752|  1.48M|          m_storage(std::addressof(f))
  753|  1.48M|    {
  754|  1.48M|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  6.00M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.00M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.00M|              else {
  749|  6.00M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.00M|              }
  751|  6.00M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  6.00M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.00M|        else if constexpr (std::is_object_v<T>) {
  688|  6.00M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.00M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.48M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.48M|        {
  662|  1.48M|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  6.71M|    {
  763|  6.71M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  6.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  6.71M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.55M|        : m_fptr([](storage fn,
  743|  1.55M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.55M|              cvref<T> obj = *get<T>(fn);
  745|  1.55M|              if constexpr (std::is_void_v<R>) {
  746|  1.55M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.55M|              }
  748|  1.55M|              else {
  749|  1.55M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.55M|              }
  751|  1.55M|          }),
  752|  1.55M|          m_storage(std::addressof(f))
  753|  1.55M|    {
  754|  1.55M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  2.70M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.70M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.70M|              else {
  749|  2.70M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.70M|              }
  751|  2.70M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  2.70M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.70M|        else if constexpr (std::is_object_v<T>) {
  688|  2.70M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.70M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.55M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.55M|        {
  662|  1.55M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6125|   454k|    {
 6126|   454k|        const bool need_skipped_width =
 6127|   454k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6127:13): [True: 0, False: 454k]
  |  Branch (6127:33): [True: 0, False: 454k]
  ------------------
 6128|   454k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6129|       |
 6130|       |        // Read prefix
 6131|   454k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6131:13): [True: 0, False: 454k]
  ------------------
 6132|   454k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 454k]
  ------------------
 6133|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6134|      0|                             need_skipped_width);
 6135|      0|        }
 6136|   454k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6136:13): [True: 454k, False: 0]
  |  Branch (6136:56): [True: 454k, False: 0]
  ------------------
 6137|       |            // Default alignment:
 6138|       |            // Skip preceding whitespace, if required by the reader
 6139|   454k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6139:17): [True: 0, False: 454k]
  ------------------
 6140|      0|                auto max_width_view = take_width(rng, specs.precision);
 6141|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|                                  .transform_error(make_eof_scan_error));
 6143|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6144|      0|            }
 6145|   900k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   454k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   454k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   454k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   454k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 7.80k, False: 446k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  7.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  7.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  7.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  7.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  7.80k|    }                                                  \
  |  |  |  | 3957|   454k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   446k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|   900k|                            make_eof_scan_error));
 6147|       |
 6148|   900k|            if (need_skipped_width) {
  ------------------
  |  Branch (6148:17): [True: 0, False: 446k]
  ------------------
 6149|      0|                return result_type{
 6150|      0|                    it,
 6151|      0|                    calculate_text_width(make_contiguous_buffer(
 6152|      0|                                             ranges::subrange{rng.begin(), it})
 6153|      0|                                             .view())};
 6154|      0|            }
 6155|   446k|            return result_type{it, 0};
 6156|   900k|        }
 6157|       |
 6158|      0|        return result_type{rng.begin(), 0};
 6159|   454k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|  1.14M|{
 2108|  1.14M|    return read_until_code_unit(range, std::not_fn(pred));
 2109|  1.14M|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  1.14M|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|  1.14M|    else {
 2079|  1.14M|        auto first = range.begin();
 2080|  4.67M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 4.65M, False: 14.6k]
  ------------------
 2081|  4.65M|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 1.13M, False: 3.52M]
  ------------------
 2082|  1.13M|                return first;
 2083|  1.13M|            }
 2084|  4.65M|        }
 2085|  14.6k|        return first;
 2086|  1.14M|    }
 2087|  1.14M|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.00M|    {
  108|  1.00M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.00M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.00M|    {
   94|  1.00M|        iter_difference_t<I> counter{0};
   95|  7.28M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 6.28M, False: 1.00M]
  ------------------
   96|  6.28M|            ++i;
   97|  6.28M|            ++counter;
   98|  6.28M|        }
   99|  1.00M|        return counter;
  100|  1.00M|    }
_ZZN3scn2v44impl29map_parse_error_to_scan_errorENS0_10scan_error4codeEPKcENKUlNS1_11parse_errorEE_clES6_:
  868|  2.36M|    return [code, msg](parse_error err) {
  869|  2.36M|        assert(err != parse_error::good);
  870|  2.36M|        return make_scan_error_from_parse_error(err, code, msg).error();
  871|  2.36M|    };
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2ENS0_6detail10locale_refE:
 1878|   233k|    {
 1879|   233k|        auto stdloc = loc.get<std::locale>();
 1880|   233k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   233k|        grouping = numpunct.grouping();
 1882|   233k|        thousands_sep =
 1883|   233k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 233k]
  ------------------
 1884|   233k|        decimal_point = numpunct.decimal_point();
 1885|   233k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIcEEEERKT_RNS3_6localeE:
 1815|   233k|{
 1816|   233k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 233k, False: 0]
  ------------------
 1817|   233k|        return std::use_facet<Facet>(stdloc);
 1818|   233k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   233k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  1.69M|{
 1945|  1.69M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  1.69M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.9k, False: 1.68M]
  |  |  ------------------
  ------------------
 1946|  10.9k|        return unexpected(e);
 1947|  10.9k|    }
 1948|       |
 1949|  1.68M|    return ranges::next(range.begin());
 1950|  1.69M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  2.48M|{
  951|  2.48M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  2.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 21.0k, False: 2.46M]
  |  |  ------------------
  ------------------
  952|  21.0k|        return eof_error::eof;
  953|  21.0k|    }
  954|  2.46M|    return eof_error::good;
  955|  2.48M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  3.42M|{
  945|  3.42M|    return is_range_eof(r.begin(), r.end());
  946|  3.42M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  3.42M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.42M|    {
  938|  3.42M|        return begin == end;
  939|  3.42M|    }
  940|  3.42M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.68M|    {
  296|  1.68M|        ++x;
  297|  1.68M|        return x;
  298|  1.68M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3289|   654k|{
 3290|   654k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   654k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 505k, False: 149k]
  ------------------
 3292|   505k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 505k, False: 212]
  ------------------
 3293|   505k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   505k|        }
 3295|    212|        return unexpected(eof_error::eof);
 3296|   505k|    }
 3297|       |
 3298|   149k|    auto& it = *r;
 3299|   149k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 66.6k, False: 82.3k]
  ------------------
 3300|  66.6k|        return std::pair{it, sign_type::minus_sign};
 3301|  66.6k|    }
 3302|  82.3k|    return std::pair{it, sign_type::plus_sign};
 3303|   149k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2404|  1.12M|{
 2405|  1.12M|    auto it = read_code_unit(range);
 2406|  1.12M|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  1.12M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.54k, False: 1.11M]
  |  |  ------------------
  ------------------
 2407|  5.54k|        return unexpected(make_eof_parse_error(it.error()));
 2408|  5.54k|    }
 2409|       |
 2410|  2.12M|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 2.12M, False: 926k]
  ------------------
 2411|  2.12M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 190k, False: 1.93M]
  ------------------
 2412|   190k|            return *it;
 2413|   190k|        }
 2414|  2.12M|    }
 2415|       |
 2416|   926k|    return unexpected(parse_error::error);
 2417|  1.11M|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2363|  1.61M|{
 2364|  1.61M|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  1.61M|    else {
 2377|  1.61M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.61M|            if (ch < 'A' || ch > 'Z') {
 2379|  1.61M|                return ch;
 2380|  1.61M|            }
 2381|  1.61M|            return static_cast<char_type>(ch +
 2382|  1.61M|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.61M|        };
 2384|       |
 2385|  1.61M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  1.61M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.61M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.61M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 27.7k, False: 1.59M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  27.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  27.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  27.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  27.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  27.7k|    }                                                  \
  |  |  |  | 3957|  1.61M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.59M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  1.59M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  1.59M|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  1.59M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  1.59M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.52M, False: 67.5k]
  |  |  ------------------
  ------------------
 2390|  1.59M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  1.59M|                    return ascii_tolower(a) ==
 2392|  1.59M|                           static_cast<detail::char_t<Range>>(b);
 2393|  1.59M|                }))) {
 2394|  1.52M|            return unexpected(parse_error::error);
 2395|  1.52M|        }
 2396|       |
 2397|  67.5k|        return it;
 2398|  1.59M|    }
 2399|  1.61M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlcE_clEc:
 2377|  1.84M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.84M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 1.61M, False: 232k]
  |  Branch (2378:29): [True: 166k, False: 66.0k]
  ------------------
 2379|  1.77M|                return ch;
 2380|  1.77M|            }
 2381|  66.0k|            return static_cast<char_type>(ch +
 2382|  66.0k|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.84M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2278|   569k|{
 2279|   569k|    auto it = read_code_unit(range);
 2280|   569k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   569k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.42k, False: 563k]
  |  |  ------------------
  ------------------
 2281|  5.42k|        return unexpected(make_eof_parse_error(it.error()));
 2282|  5.42k|    }
 2283|       |
 2284|   563k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|   563k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 467k, False: 96.6k]
  |  |  ------------------
  ------------------
 2285|   563k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|   467k|        return unexpected(parse_error::error);
 2287|   467k|    }
 2288|       |
 2289|  96.6k|    return *it;
 2290|   563k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2127|  1.13M|{
 2128|  1.13M|    auto it = read_while_code_unit(range, pred);
 2129|  1.13M|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 499k, False: 639k]
  ------------------
 2130|   499k|        return unexpected(parse_error::error);
 2131|   499k|    }
 2132|   639k|    return it;
 2133|  1.13M|}
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   525k|    {
 1720|   525k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   525k|                           ranges::common_range<Range>) {
 1737|   525k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   525k|            auto end_seg = range.end().contiguous_segment();
 1739|   525k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1039|   525k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 63.7k, False: 461k]
  |  |  ------------------
  ------------------
 1740|   525k|                             detail::to_address(end_seg.end()))) {
 1741|  63.7k|                auto& str = m_storage.emplace();
 1742|  63.7k|                str.reserve(range.end().position() - range.begin().position());
 1743|  63.7k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  63.7k|                m_view = string_view_type{str};
 1745|  63.7k|                return;
 1746|  63.7k|            }
 1747|       |
 1748|   461k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   461k|                                                            end_seg.data());
 1750|   461k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   525k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|  4.18M|    {
 1681|  4.18M|        return m_view;
 1682|  4.18M|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  2.38M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6167|   395k|    {
 6168|   395k|        const bool need_skipped_width =
 6169|   395k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6169:13): [True: 0, False: 395k]
  |  Branch (6169:33): [True: 0, False: 395k]
  ------------------
 6170|   395k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6171|       |
 6172|   395k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6172:13): [True: 0, False: 395k]
  ------------------
 6173|   395k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 395k]
  ------------------
 6174|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6174:17): [True: 0, False: 0]
  ------------------
 6175|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6175:17): [True: 0, False: 0]
  ------------------
 6176|      0|                return result_type{rng.begin(), 0};
 6177|      0|            }
 6178|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6179|      0|                             specs.fill, need_skipped_width);
 6180|      0|        }
 6181|   395k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6181:13): [True: 395k, False: 0]
  ------------------
 6182|   395k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6182:13): [True: 0, False: 395k]
  ------------------
 6183|   395k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6183:15): [True: 0, False: 0]
  |  Branch (6183:35): [True: 0, False: 0]
  ------------------
 6184|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6184:15): [True: 0, False: 0]
  ------------------
 6185|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6185:15): [True: 0, False: 0]
  ------------------
 6186|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6186:17): [True: 0, False: 0]
  ------------------
 6187|      0|                const auto initial_width =
 6188|      0|                    specs.precision - prefix_width - value_width;
 6189|      0|                auto max_width_view = take_width(rng, initial_width);
 6190|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6191|      0|                                  .transform_error(make_eof_scan_error));
 6192|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6193|      0|            }
 6194|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|                            make_eof_scan_error));
 6196|       |
 6197|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|      0|                return result_type{
 6199|      0|                    it,
 6200|      0|                    calculate_text_width(make_contiguous_buffer(
 6201|      0|                                             ranges::subrange{rng.begin(), it})
 6202|      0|                                             .view())};
 6203|      0|            }
 6204|      0|            return result_type{it, 0};
 6205|      0|        }
 6206|   395k|        return result_type{rng.begin(), 0};
 6207|   395k|    }
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   878k|{
 1945|   878k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   878k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.04k, False: 875k]
  |  |  ------------------
  ------------------
 1946|  3.04k|        return unexpected(e);
 1947|  3.04k|    }
 1948|       |
 1949|   875k|    return ranges::next(range.begin());
 1950|   878k|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|  1.64M|{
  951|  1.64M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.2k, False: 1.63M]
  |  |  ------------------
  ------------------
  952|  11.2k|        return eof_error::eof;
  953|  11.2k|    }
  954|  1.63M|    return eof_error::good;
  955|  1.64M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|  1.64M|{
  945|  1.64M|    return is_range_eof(r.begin(), r.end());
  946|  1.64M|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|  1.65M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.65M|    {
  938|  1.65M|        return begin == end;
  939|  1.65M|    }
  940|  1.65M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   886k|    {
  296|   886k|        ++x;
  297|   886k|        return x;
  298|   886k|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3289|   593k|{
 3290|   593k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   593k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 456k, False: 137k]
  ------------------
 3292|   456k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 455k, False: 60]
  ------------------
 3293|   455k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   455k|        }
 3295|     60|        return unexpected(eof_error::eof);
 3296|   456k|    }
 3297|       |
 3298|   137k|    auto& it = *r;
 3299|   137k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 64.5k, False: 72.7k]
  ------------------
 3300|  64.5k|        return std::pair{it, sign_type::minus_sign};
 3301|  64.5k|    }
 3302|  72.7k|    return std::pair{it, sign_type::plus_sign};
 3303|   137k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2404|   687k|{
 2405|   687k|    auto it = read_code_unit(range);
 2406|   687k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   687k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 976, False: 686k]
  |  |  ------------------
  ------------------
 2407|    976|        return unexpected(make_eof_parse_error(it.error()));
 2408|    976|    }
 2409|       |
 2410|  1.29M|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 1.29M, False: 536k]
  ------------------
 2411|  1.29M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 150k, False: 1.14M]
  ------------------
 2412|   150k|            return *it;
 2413|   150k|        }
 2414|  1.29M|    }
 2415|       |
 2416|   536k|    return unexpected(parse_error::error);
 2417|   686k|}
_ZN3scn2v44impl25parse_integer_base_prefixINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENSt3__15tupleIJDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSA_9add_constIT_E4typeEEEEEibEEESD_i:
 3375|  11.0k|{
 3376|  11.0k|    switch (base) {
 3377|      0|        case 2:
  ------------------
  |  Branch (3377:9): [True: 0, False: 11.0k]
  ------------------
 3378|       |            // allow 0b/0B
 3379|      0|            return {apply_opt(parse_integer_bin_base_prefix(range), range), 2,
 3380|      0|                    false};
 3381|       |
 3382|      0|        case 8: {
  ------------------
  |  Branch (3382:9): [True: 0, False: 11.0k]
  ------------------
 3383|       |            // allow 0o/0O/0
 3384|      0|            bool zero_parsed = false;
 3385|      0|            auto it = apply_opt(
 3386|      0|                parse_integer_oct_base_prefix(range, zero_parsed), range);
 3387|      0|            return {it, 8, zero_parsed};
 3388|      0|        }
 3389|       |
 3390|      0|        case 16:
  ------------------
  |  Branch (3390:9): [True: 0, False: 11.0k]
  ------------------
 3391|       |            // allow 0x/0X
 3392|      0|            return {apply_opt(parse_integer_hex_base_prefix(range), range), 16,
 3393|      0|                    false};
 3394|       |
 3395|      0|        case 0:
  ------------------
  |  Branch (3395:9): [True: 0, False: 11.0k]
  ------------------
 3396|       |            // detect base
 3397|      0|            return parse_integer_base_prefix_for_detection(range);
 3398|       |
 3399|  11.0k|        default:
  ------------------
  |  Branch (3399:9): [True: 11.0k, False: 0]
  ------------------
 3400|       |            // no base prefix allowed
 3401|  11.0k|            return {range.begin(), base, false};
 3402|  11.0k|    }
 3403|  11.0k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2363|  1.53M|{
 2364|  1.53M|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|  1.53M|                  std::is_same_v<char_type, char>) {
 2368|  1.53M|        if (range.size() < str.size()) {
  ------------------
  |  Branch (2368:13): [True: 28.7k, False: 1.50M]
  ------------------
 2369|  28.7k|            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|  28.7k|        }
 2371|  1.50M|        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
  ------------------
  |  Branch (2371:13): [True: 1.44M, False: 60.7k]
  ------------------
 2372|  1.44M|            return unexpected(parse_error::error);
 2373|  1.44M|        }
 2374|  60.7k|        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|       |    else {
 2377|       |        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|       |            if (ch < 'A' || ch > 'Z') {
 2379|       |                return ch;
 2380|       |            }
 2381|       |            return static_cast<char_type>(ch +
 2382|       |                                          static_cast<char_type>('a' - 'A'));
 2383|       |        };
 2384|       |
 2385|       |        SCN_TRY(it, read_exactly_n_code_units(
 2386|       |                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|       |                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|       |        if (SCN_UNLIKELY(!std::equal(
 2390|       |                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|       |                    return ascii_tolower(a) ==
 2392|       |                           static_cast<detail::char_t<Range>>(b);
 2393|       |                }))) {
 2394|       |            return unexpected(parse_error::error);
 2395|       |        }
 2396|       |
 2397|       |        return it;
 2398|       |    }
 2399|  1.53M|}
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2278|   190k|{
 2279|   190k|    auto it = read_code_unit(range);
 2280|   190k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.07k, False: 188k]
  |  |  ------------------
  ------------------
 2281|  2.07k|        return unexpected(make_eof_parse_error(it.error()));
 2282|  2.07k|    }
 2283|       |
 2284|   188k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 151k, False: 37.0k]
  |  |  ------------------
  ------------------
 2285|   188k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|   151k|        return unexpected(parse_error::error);
 2287|   151k|    }
 2288|       |
 2289|  37.0k|    return *it;
 2290|   188k|}
_ZN3scn2v44impl34parse_integer_digits_without_thsepINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_i:
 3442|  11.0k|{
 3443|  11.0k|    using char_type = detail::char_t<Range>;
 3444|       |
 3445|  11.0k|    if constexpr (ranges::contiguous_range<Range>) {
 3446|  11.0k|        if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 11.0k]
  |  |  ------------------
  ------------------
 3447|      0|            return detail::unexpected_scan_error(
 3448|      0|                scan_error::invalid_scanned_value,
 3449|      0|                "Failed to parse integer: No digits found");
 3450|      0|        }
 3451|  11.0k|        return range.end();
 3452|       |    }
 3453|       |    else {
 3454|       |        return read_while1_code_unit(range,
 3455|       |                                     [&](char_type ch) noexcept {
 3456|       |                                         return char_to_int(ch) < base;
 3457|       |                                     })
 3458|       |            .transform_error(map_parse_error_to_scan_error(
 3459|       |                scan_error::invalid_scanned_value,
 3460|       |                "Failed to parse integer: No digits found"));
 3461|       |    }
 3462|  11.0k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|  11.0k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  11.0k|                  ranges::sized_range<Range>) {
 1785|  11.0k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  11.0k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  11.0k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  11.0k|    {
 1589|  11.0k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  3.08M|    {
 1602|  3.08M|        return sv;
 1603|  3.08M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2107|   337k|{
 2108|   337k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|   337k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   337k|{
 2075|   337k|    if constexpr (ranges::common_range<Range>) {
 2076|   337k|        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|       |    else {
 2079|       |        auto first = range.begin();
 2080|       |        for (; first != range.end(); ++first) {
 2081|       |            if (pred(*first)) {
 2082|       |                return first;
 2083|       |            }
 2084|       |        }
 2085|       |        return first;
 2086|       |    }
 2087|   337k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|   586k|{
 3098|   586k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 586k, False: 0]
  ------------------
 3099|   586k|        auto it = read_while_classic_space(range);
 3100|   586k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   586k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   586k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.34k, False: 580k]
  |  |  ------------------
  ------------------
 3102|  6.34k|            return unexpected(e);
 3103|  6.34k|        }
 3104|       |
 3105|   580k|        return it;
 3106|   586k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   586k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|   586k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|   586k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|   586k|        auto buf = make_contiguous_buffer(range);
 2253|   586k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|   586k|        return ranges::next(range.begin(),
 2255|   586k|                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|       |    else {
 2258|       |        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|       |            return detail::is_cp_space(cp);
 2271|       |        });
 2272|       |    }
 2273|   586k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   586k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   586k|                  ranges::sized_range<Range>) {
 1785|   586k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|   586k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   586k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   586k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   586k|    {
 1589|   586k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.61M|    {
  304|  1.61M|        ranges::advance(x, n);
  305|  1.61M|        return x;
  306|  1.61M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  2.16M|    {
  268|  2.16M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  2.16M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  2.16M|    {
  181|  8.58M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 6.42M, False: 2.16M]
  ------------------
  182|  6.42M|            ++i;
  183|  6.42M|        }
  184|  2.16M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6277|   146k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|       |                          basic_contiguous_scan_context<char_type>>) {
 6282|       |            auto rd = make_reader<T, char_type>();
 6283|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6284|       |            return impl(rd, range, value);
 6285|       |        }
 6286|   146k|        else if constexpr (!detail::is_type_disabled<T>) {
 6287|   146k|            auto rd = make_reader<T, char_type>();
 6288|   146k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   146k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 146k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|       |
 6290|   146k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6290:17): [True: 146k, False: 0]
  |  Branch (6290:50): [True: 0, False: 0]
  ------------------
 6291|   146k|                specs.width != 0) {
  ------------------
  |  Branch (6291:17): [True: 0, False: 0]
  ------------------
 6292|   146k|                return impl(rd, range, value);
 6293|   146k|            }
 6294|       |
 6295|      0|            auto crange = get_as_contiguous(range);
 6296|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6297|      0|            return ranges::next(range.begin(),
 6298|      0|                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   146k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3187|   873k|    {
 3188|   873k|        reader_error_handler eh{};
 3189|   873k|        get_derived().check_specs_impl(specs, eh);
 3190|   873k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|   873k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 873k]
  |  |  ------------------
  ------------------
 3191|      0|            return detail::unexpected_scan_error(
 3192|      0|                scan_error::invalid_format_string, eh.m_msg);
 3193|      0|        }
 3194|   873k|        return {};
 3195|   873k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE11get_derivedEv:
 3199|   873k|    {
 3200|   873k|        return static_cast<Derived&>(*this);
 3201|   873k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4230|   873k|    {
 4231|   873k|        detail::check_float_type_specs(specs, eh);
 4232|   873k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6212|   146k|    {
 6213|   146k|        const bool need_skipped_width =
 6214|   146k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 146k]
  |  Branch (6214:33): [True: 0, False: 146k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   146k|        auto it = rng.begin();
 6218|   146k|        std::ptrdiff_t prefix_width = 0;
 6219|   146k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 146k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   146k|        else {
 6227|   146k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   146k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   146k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   146k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.34k, False: 143k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.34k|    }                                                  \
  |  |  |  | 3957|   146k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   143k|            std::tie(it, prefix_width) = prefix_result;
 6229|   143k|        }
 6230|   143k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   143k|        std::ptrdiff_t value_width = 0;
 6234|   143k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 143k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   143k|        else {
 6250|   143k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   143k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   143k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   143k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 15.2k, False: 128k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  15.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  15.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  15.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  15.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  15.2k|    }                                                  \
  |  | 3957|   143k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   128k|                                             specs, value, loc));
 6252|       |
 6253|   128k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 128k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   128k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   128k|        std::ptrdiff_t postfix_width = 0;
 6262|   128k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 126k, False: 1.68k]
  ------------------
 6263|   126k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   126k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   126k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   126k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   126k|                                 value_width));
 6267|   126k|            std::tie(it, postfix_width) = postfix_result;
 6268|   126k|        }
 6269|       |
 6270|   128k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   128k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 128k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   128k|            specs, prefix_width, value_width, postfix_width));
 6272|   128k|        return it;
 6273|   128k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIcEEcE19skip_ws_before_readEv:
 3182|  1.96M|    {
 3183|  1.96M|        return true;
 3184|  1.96M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE11get_optionsERKNS0_6detail12format_specsE:
 4302|   859k|    {
 4303|   859k|        unsigned options{};
 4304|   859k|        if (specs.localized) {
  ------------------
  |  Branch (4304:13): [True: 233k, False: 625k]
  ------------------
 4305|   233k|            options |= float_reader_base::allow_thsep;
 4306|   233k|        }
 4307|       |
 4308|   859k|        SCN_GCC_COMPAT_PUSH
 4309|   859k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4310|       |
 4311|   859k|        switch (specs.type) {
 4312|   139k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4312:13): [True: 139k, False: 719k]
  ------------------
 4313|   139k|                return options | float_reader_base::allow_fixed;
 4314|       |
 4315|  28.5k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4315:13): [True: 28.5k, False: 831k]
  ------------------
 4316|  28.5k|                return options | float_reader_base::allow_scientific;
 4317|       |
 4318|   254k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4318:13): [True: 254k, False: 604k]
  ------------------
 4319|   254k|                return options | float_reader_base::allow_hex;
 4320|       |
 4321|   202k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4321:13): [True: 202k, False: 656k]
  ------------------
 4322|   202k|                return options | float_reader_base::allow_scientific |
 4323|   202k|                       float_reader_base::allow_fixed;
 4324|       |
 4325|   233k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4325:13): [True: 233k, False: 625k]
  ------------------
 4326|   233k|                return options | float_reader_base::allow_scientific |
 4327|   233k|                       float_reader_base::allow_fixed |
 4328|   233k|                       float_reader_base::allow_hex;
 4329|       |
 4330|      0|            default:
  ------------------
  |  Branch (4330:13): [True: 0, False: 859k]
  ------------------
 4331|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4332|   859k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4333|   859k|        }
 4334|       |
 4335|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4336|   859k|    }
_ZN3scn2v44impl12float_readerIcEC2Ej:
 3733|   859k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIcEC2Ev:
 1869|  1.19M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIcEC2Ev:
 1630|  2.38M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIcE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3764|   357k|    {
 3765|   357k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   357k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3766|       |
 3767|   357k|        const std::ptrdiff_t sign_len =
 3768|   357k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3768:13): [True: 83.9k, False: 273k]
  ------------------
 3769|       |
 3770|   357k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   357k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   357k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   357k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 12.7k, False: 344k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  12.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  12.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  12.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  12.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  12.7k|    }                                                  \
  |  |  |  | 3957|   357k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   344k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3771|   344k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3772|   357k|    }
_ZN3scn2v44impl12float_readerIcE17handle_separatorsEv:
 4121|  1.10M|    {
 4122|  1.10M|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4122:13): [True: 1.10M, False: 0]
  ------------------
 4123|  1.10M|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4123:13): [True: 1.10M, False: 0]
  ------------------
 4124|  1.10M|            return;
 4125|  1.10M|        }
 4126|       |
 4127|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4128|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4128:13): [True: 0, False: 0]
  ------------------
 4129|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4129:27): [True: 0, False: 0]
  ------------------
 4130|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4130:21): [True: 0, False: 0]
  ------------------
 4131|      0|                    ch = CharT{'.'};
 4132|      0|                }
 4133|      0|            }
 4134|      0|        }
 4135|       |
 4136|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 0]
  ------------------
 4137|      0|            return;
 4138|      0|        }
 4139|       |
 4140|      0|        auto first =
 4141|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4142|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4142:13): [True: 0, False: 0]
  ------------------
 4143|      0|            return;
 4144|      0|        }
 4145|       |
 4146|      0|        m_thsep_indices.push_back(
 4147|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4148|       |
 4149|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4149:31): [True: 0, False: 0]
  ------------------
 4150|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4150:17): [True: 0, False: 0]
  ------------------
 4151|      0|                *first++ = std::move(*it);
 4152|      0|            }
 4153|      0|            else {
 4154|      0|                m_thsep_indices.push_back(
 4155|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4156|      0|            }
 4157|      0|        }
 4158|       |
 4159|      0|        str.erase(first, str.end());
 4160|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|  2.21M|    {
 1686|  2.21M|        return m_storage.has_value();
 1687|  2.21M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  1.21M|    {
 1691|  1.21M|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1104|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.21M|        return *m_storage;
 1693|  1.21M|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4255|   143k|    {
 4256|   143k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   143k|#if !SCN_DISABLE_LOCALE
 4259|   143k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 38.8k, False: 105k]
  ------------------
 4260|  38.8k|            return read_impl<Range>(
 4261|  38.8k|                range, rd,
 4262|  38.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  38.8k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  38.8k|                },
 4265|  38.8k|                value, loc);
 4266|  38.8k|        }
 4267|   105k|#endif
 4268|       |
 4269|   105k|        return read_impl<Range>(
 4270|   105k|            range, rd,
 4271|   105k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   105k|                return r.read_source(SCN_FWD(args)...);
 4273|   105k|            },
 4274|   105k|            value);
 4275|   143k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4291|   197k|    {
 4292|   197k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   197k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   197k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.8k, False: 179k]
  |  |  ------------------
  ------------------
 4294|  17.8k|            return unexpected(r.error());
 4295|  17.8k|        }
 4296|       |
 4297|   179k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   179k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   179k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   179k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   179k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.10k, False: 177k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.10k|    }                                                  \
  |  |  |  | 3957|   179k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   177k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   177k|        return ranges::next(range.begin(), n);
 4299|   179k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   613k|    {
  763|   613k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|   613k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   613k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  38.8k|        : m_fptr([](storage fn,
  743|  38.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.8k|              cvref<T> obj = *get<T>(fn);
  745|  38.8k|              if constexpr (std::is_void_v<R>) {
  746|  38.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.8k|              }
  748|  38.8k|              else {
  749|  38.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.8k|              }
  751|  38.8k|          }),
  752|  38.8k|          m_storage(std::addressof(f))
  753|  38.8k|    {
  754|  38.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  38.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.8k|              else {
  749|  38.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.8k|              }
  751|  38.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  38.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.8k|        else if constexpr (std::is_object_v<T>) {
  688|  38.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4262|  38.8k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  38.8k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  38.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  38.8k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3752|   122k|    {
 3753|   122k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3754|   122k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|   122k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 122k]
  |  |  ------------------
  ------------------
 3755|      0|            m_locale_options.thousands_sep = CharT{0};
 3756|      0|        }
 3757|       |
 3758|   122k|        return read_source_impl(range);
 3759|   122k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3778|   613k|    {
 3779|   613k|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|   613k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   613k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   613k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   613k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 613k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   613k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   613k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3780|   613k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3781|   613k|        auto it = sign_result.first;
 3782|   613k|        m_sign = sign_result.second;
 3783|       |
 3784|   613k|        auto digits_begin = it;
 3785|   613k|        auto r = ranges::subrange{it, range.end()};
 3786|       |        if constexpr (ranges::contiguous_range<Range> &&
 3787|       |                      ranges::sized_range<Range>) {
 3788|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3789|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3790|       |                SCN_TRY_ASSIGN(
 3791|       |                    it,
 3792|       |                    do_read_source_impl(
 3793|       |                        r,
 3794|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3795|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3796|       |            }
 3797|       |            else {
 3798|       |                auto cb = [&](const auto& rr)
 3799|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|       |                    auto res = read_all(rr);
 3801|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3802|       |                        return detail::unexpected_scan_error(
 3803|       |                            scan_error::invalid_scanned_value,
 3804|       |                            "Invalid float value");
 3805|       |                    }
 3806|       |                    return res;
 3807|       |                };
 3808|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3809|       |            }
 3810|       |        }
 3811|   613k|        else {
 3812|   613k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|   613k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   613k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   613k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 55.0k, False: 558k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  55.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  55.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  55.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  55.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  55.0k|    }                                                  \
  |  | 3957|   613k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   613k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3813|   558k|                it,
 3814|   558k|                do_read_source_impl(
 3815|   558k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3816|   558k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3817|   558k|        }
 3818|       |
 3819|   613k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   613k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   613k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3820|       |
 3821|   558k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3821:13): [True: 553k, False: 4.67k]
  |  Branch (3821:48): [True: 550k, False: 2.80k]
  ------------------
 3822|   558k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3822:13): [True: 523k, False: 26.5k]
  ------------------
 3823|   558k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3823:13): [True: 517k, False: 6.59k]
  ------------------
 3824|   517k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3825|   517k|        }
 3826|       |
 3827|   558k|        handle_separators();
 3828|       |
 3829|   558k|        return it;
 3830|   613k|    }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4064|   613k|    {
 4065|   613k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4066|   613k|        const bool allowed_nonhex =
 4067|   613k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4068|   613k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4069|       |
 4070|   613k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4070:39): [True: 605k, False: 7.47k]
  |  Branch (4070:45): [True: 0, False: 605k]
  ------------------
 4071|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4072|      0|                scan_error::invalid_scanned_value,
 4073|      0|                "Invalid infinite floating-point value"));
 4074|      0|        }
 4075|   613k|        else if (r) {
  ------------------
  |  Branch (4075:18): [True: 7.47k, False: 605k]
  ------------------
 4076|  7.47k|            return *r;
 4077|  7.47k|        }
 4078|       |
 4079|   605k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4079:39): [True: 572k, False: 33.1k]
  |  Branch (4079:45): [True: 1.53k, False: 570k]
  ------------------
 4080|  1.53k|            return unexpected(r.error());
 4081|  1.53k|        }
 4082|   604k|        else if (r) {
  ------------------
  |  Branch (4082:18): [True: 33.1k, False: 570k]
  ------------------
 4083|  33.1k|            return *r;
 4084|  33.1k|        }
 4085|       |
 4086|   570k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4086:13): [True: 393k, False: 177k]
  |  Branch (4086:28): [True: 124k, False: 269k]
  ------------------
 4087|       |            // only hex allowed:
 4088|       |            // prefix "0x" allowed, not required
 4089|   124k|            auto it = range.begin();
 4090|       |
 4091|   124k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4091:22): [True: 6.69k, False: 117k]
  ------------------
 4092|  6.69k|                m_kind = float_kind::hex_with_prefix;
 4093|  6.69k|                it = *r;
 4094|  6.69k|            }
 4095|   117k|            else {
 4096|   117k|                m_kind = float_kind::hex_without_prefix;
 4097|   117k|            }
 4098|       |
 4099|   124k|            return read_hex(ranges::subrange{it, range.end()});
 4100|   124k|        }
 4101|   446k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4101:13): [True: 177k, False: 269k]
  |  Branch (4101:29): [True: 177k, False: 0]
  ------------------
 4102|       |            // only nonhex allowed:
 4103|       |            // no prefix allowed
 4104|   177k|            m_kind = float_kind::generic;
 4105|   177k|            return read_regular_float(range);
 4106|   177k|        }
 4107|       |        // both hex and nonhex allowed:
 4108|       |        // check for "0x" prefix -> hex,
 4109|       |        // regular otherwise
 4110|       |
 4111|   269k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|   269k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 15.8k, False: 253k]
  |  |  ------------------
  ------------------
 4112|  15.8k|            m_kind = float_kind::hex_with_prefix;
 4113|  15.8k|            return read_hex(ranges::subrange{*r, range.end()});
 4114|  15.8k|        }
 4115|       |
 4116|   253k|        m_kind = float_kind::generic;
 4117|   253k|        return read_regular(range);
 4118|   269k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3872|   613k|    {
 3873|   613k|        auto it = range.begin();
 3874|   613k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3874:73): [True: 605k, False: 7.47k]
  ------------------
 3875|   605k|            return unexpected(r.error());
 3876|   605k|        }
 3877|  7.47k|        else {
 3878|  7.47k|            it = *r;
 3879|  7.47k|        }
 3880|       |
 3881|  7.47k|        if (auto r = read_matching_string_classic_nocase(
 3882|  7.47k|                ranges::subrange{it, range.end()}, "inity");
 3883|  7.47k|            !r) {
  ------------------
  |  Branch (3883:13): [True: 4.67k, False: 2.80k]
  ------------------
 3884|  4.67k|            m_kind = float_kind::inf_short;
 3885|  4.67k|            return it;
 3886|  4.67k|        }
 3887|  2.80k|        else {
 3888|  2.80k|            m_kind = float_kind::inf_long;
 3889|  2.80k|            return *r;
 3890|  2.80k|        }
 3891|  7.47k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3895|   605k|    {
 3896|   605k|        auto it = range.begin();
 3897|   605k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3897:73): [True: 570k, False: 34.7k]
  ------------------
 3898|   570k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|   570k|                scan_error::invalid_scanned_value,
 3900|   570k|                "Invalid floating-point NaN value"));
 3901|   570k|        }
 3902|  34.7k|        else {
 3903|  34.7k|            it = *r;
 3904|  34.7k|        }
 3905|       |
 3906|  34.7k|        if (auto r =
 3907|  34.7k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3908|  34.7k|            !r) {
  ------------------
  |  Branch (3908:13): [True: 26.5k, False: 8.12k]
  ------------------
 3909|  26.5k|            m_kind = float_kind::nan_simple;
 3910|  26.5k|            return it;
 3911|  26.5k|        }
 3912|  8.12k|        else {
 3913|  8.12k|            it = *r;
 3914|  8.12k|        }
 3915|       |
 3916|  8.12k|        auto payload_beg_it = it;
 3917|  8.12k|        it = read_while_code_unit(
 3918|  8.12k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3919|  8.12k|                return is_ascii_char(ch) &&
 3920|  8.12k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3921|  8.12k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3922|  8.12k|            });
 3923|  8.12k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3924|       |
 3925|  8.12k|        m_kind = float_kind::nan_with_payload;
 3926|  8.12k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3926:18): [True: 6.59k, False: 1.53k]
  ------------------
 3927|  8.12k|                                             ')')) {
 3928|  6.59k|            return *r;
 3929|  6.59k|        }
 3930|  1.53k|        return detail::unexpected_scan_error(
 3931|  1.53k|            scan_error::invalid_scanned_value,
 3932|  1.53k|            "Invalid floating-point NaN payload");
 3933|  8.12k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|  8.12k|        : m_fptr([](storage fn,
  743|  8.12k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.12k|              cvref<T> obj = *get<T>(fn);
  745|  8.12k|              if constexpr (std::is_void_v<R>) {
  746|  8.12k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.12k|              }
  748|  8.12k|              else {
  749|  8.12k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.12k|              }
  751|  8.12k|          }),
  752|  8.12k|          m_storage(std::addressof(f))
  753|  8.12k|    {
  754|  8.12k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|   172k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   172k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   172k|              else {
  749|   172k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   172k|              }
  751|   172k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_EUlcE_EEDaNS3_7storageE:
  683|   172k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   172k|        else if constexpr (std::is_object_v<T>) {
  688|   172k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   172k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_ENKUlcE_clEc:
 3918|   172k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3919|   172k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3919:24): [True: 172k, False: 83]
  ------------------
 3920|   172k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3920:26): [True: 165k, False: 7.02k]
  |  Branch (3920:39): [True: 157k, False: 8.61k]
  |  Branch (3920:54): [True: 2.89k, False: 12.7k]
  |  Branch (3920:67): [True: 2.80k, False: 83]
  ------------------
 3921|   172k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3921:26): [True: 5.81k, False: 7.02k]
  |  Branch (3921:39): [True: 3.00k, False: 2.80k]
  |  Branch (3921:53): [True: 2.72k, False: 7.10k]
  ------------------
 3922|   172k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_EUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  8.12k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  8.12k|        {
  662|  8.12k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3865|   393k|    {
 3866|   393k|        return read_matching_string_classic_nocase(range, "0x");
 3867|   393k|    }
_ZN3scn2v44impl12float_readerIcE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3966|   140k|    {
 3967|   140k|        auto it = range.begin();
 3968|       |
 3969|   140k|        std::ptrdiff_t digits_count = 0;
 3970|   140k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3971|   140k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.19k, False: 132k]
  |  |  ------------------
  ------------------
 3972|  7.19k|            return r.transform_error(map_parse_error_to_scan_error(
 3973|  7.19k|                scan_error::invalid_scanned_value,
 3974|  7.19k|                "Invalid hexadecimal floating-point value"));
 3975|  7.19k|        }
 3976|   132k|        else {
 3977|   132k|            digits_count += ranges::distance(it, *r);
 3978|   132k|            it = *r;
 3979|   132k|        }
 3980|       |
 3981|   132k|        m_integral_part_length = digits_count;
 3982|   132k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3982:18): [True: 17.7k, False: 115k]
  ------------------
 3983|   132k|                                             m_locale_options.decimal_point)) {
 3984|  17.7k|            it = *r;
 3985|  17.7k|        }
 3986|       |
 3987|   132k|        if (auto r =
  ------------------
  |  Branch (3987:18): [True: 15.1k, False: 117k]
  ------------------
 3988|   132k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3989|  15.1k|            digits_count += ranges::distance(it, *r);
 3990|  15.1k|            it = *r;
 3991|  15.1k|        }
 3992|       |
 3993|   132k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 132k]
  |  |  ------------------
  ------------------
 3994|      0|            return detail::unexpected_scan_error(
 3995|      0|                scan_error::invalid_scanned_value,
 3996|      0|                "No significand digits in hexfloat");
 3997|      0|        }
 3998|       |
 3999|   132k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4000|       |
 4001|   132k|        return it;
 4002|   132k|    }
_ZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3850|   272k|    {
 3851|   272k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   272k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 272k]
  |  |  |  Branch (1039:45): [True: 0, False: 272k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3852|   272k|                         thsep_allowed)) {
 3853|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3854|      0|                return char_to_int(ch) < 16 ||
 3855|      0|                       ch == m_locale_options.thousands_sep;
 3856|      0|            });
 3857|      0|        }
 3858|       |
 3859|   272k|        return read_while1_code_unit(
 3860|   272k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3861|   272k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   272k|        : m_fptr([](storage fn,
  743|   272k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   272k|              cvref<T> obj = *get<T>(fn);
  745|   272k|              if constexpr (std::is_void_v<R>) {
  746|   272k|                  obj(static_cast<decltype(args)>(args)...);
  747|   272k|              }
  748|   272k|              else {
  749|   272k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   272k|              }
  751|   272k|          }),
  752|   272k|          m_storage(std::addressof(f))
  753|   272k|    {
  754|   272k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  1.08M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.08M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.08M|              else {
  749|  1.08M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.08M|              }
  751|  1.08M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  1.08M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.08M|        else if constexpr (std::is_object_v<T>) {
  688|  1.08M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.08M|    }
_ZZN3scn2v44impl12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3860|  1.08M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   272k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   272k|        {
  662|   272k|        }
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3938|   467k|    {
 3939|   467k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3939:18): [True: 41.5k, False: 426k]
  ------------------
 3940|  41.5k|            auto beg_exp_it = range.begin();
 3941|  41.5k|            auto it = *r;
 3942|       |
 3943|  41.5k|            if (auto r_sign =
  ------------------
  |  Branch (3943:22): [True: 41.3k, False: 212]
  ------------------
 3944|  41.5k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3945|  41.3k|                it = r_sign->first;
 3946|  41.3k|            }
 3947|       |
 3948|  41.5k|            if (auto r_exp = read_while1_code_unit(
 3949|  41.5k|                    ranges::subrange{it, range.end()},
 3950|  41.5k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3951|  41.5k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|  41.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.42k, False: 40.1k]
  |  |  ------------------
  ------------------
 3952|  1.42k|                it = beg_exp_it;
 3953|  1.42k|            }
 3954|  40.1k|            else {
 3955|  40.1k|                it = *r_exp;
 3956|  40.1k|            }
 3957|       |
 3958|  41.5k|            return it;
 3959|  41.5k|        }
 3960|   426k|        return range.begin();
 3961|   467k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  41.5k|        : m_fptr([](storage fn,
  743|  41.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.5k|              cvref<T> obj = *get<T>(fn);
  745|  41.5k|              if constexpr (std::is_void_v<R>) {
  746|  41.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  41.5k|              }
  748|  41.5k|              else {
  749|  41.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.5k|              }
  751|  41.5k|          }),
  752|  41.5k|          m_storage(std::addressof(f))
  753|  41.5k|    {
  754|  41.5k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEcE_clES15_c:
  743|   132k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   132k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   132k|              else {
  749|   132k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   132k|              }
  751|   132k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|   132k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   132k|        else if constexpr (std::is_object_v<T>) {
  688|   132k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   132k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlcE_clEc:
 3950|   132k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlcE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  41.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  41.5k|        {
  662|  41.5k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 4007|   430k|    {
 4008|   430k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4009|   430k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4009:35): [True: 362k, False: 67.9k]
  |  Branch (4009:50): [True: 13.0k, False: 349k]
  ------------------
 4010|       |
 4011|   430k|        auto it = ranges::begin(range);
 4012|   430k|        std::ptrdiff_t digits_count = 0;
 4013|       |
 4014|   430k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4015|   430k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   430k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 37.2k, False: 393k]
  |  |  ------------------
  ------------------
 4016|  37.2k|            return r.transform_error(
 4017|  37.2k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4018|  37.2k|                                              "Invalid floating-point value"));
 4019|  37.2k|        }
 4020|   393k|        else {
 4021|   393k|            digits_count += ranges::distance(it, *r);
 4022|   393k|            it = *r;
 4023|   393k|        }
 4024|       |
 4025|   393k|        m_integral_part_length = digits_count;
 4026|   393k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4026:18): [True: 64.1k, False: 329k]
  ------------------
 4027|   393k|                                             m_locale_options.decimal_point)) {
 4028|  64.1k|            it = *r;
 4029|  64.1k|        }
 4030|       |
 4031|   393k|        if (auto r =
  ------------------
  |  Branch (4031:18): [True: 57.3k, False: 336k]
  ------------------
 4032|   393k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4033|  57.3k|            digits_count += ranges::distance(it, *r);
 4034|  57.3k|            it = *r;
 4035|  57.3k|        }
 4036|       |
 4037|   393k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   393k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 393k]
  |  |  ------------------
  ------------------
 4038|      0|            return detail::unexpected_scan_error(
 4039|      0|                scan_error::invalid_scanned_value,
 4040|      0|                "No significand digits in float");
 4041|      0|        }
 4042|       |
 4043|   393k|        auto beg_exp_it = it;
 4044|   393k|        if (allowed_exp) {
  ------------------
  |  Branch (4044:13): [True: 334k, False: 58.6k]
  ------------------
 4045|   334k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4046|   334k|        }
 4047|   393k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4047:13): [True: 12.3k, False: 381k]
  |  Branch (4047:29): [True: 9.04k, False: 3.31k]
  ------------------
 4048|  9.04k|            return detail::unexpected_scan_error(
 4049|  9.04k|                scan_error::invalid_scanned_value,
 4050|  9.04k|                "No exponent given to scientific float");
 4051|  9.04k|        }
 4052|       |
 4053|   384k|        m_kind =
 4054|   384k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4054:13): [True: 345k, False: 39.4k]
  ------------------
 4055|       |
 4056|   384k|        return it;
 4057|   393k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3835|   824k|    {
 3836|   824k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   824k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 824k]
  |  |  |  Branch (1039:45): [True: 0, False: 824k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3837|   824k|                         thsep_allowed)) {
 3838|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3839|      0|                return char_to_int(ch) < 10 ||
 3840|      0|                       ch == m_locale_options.thousands_sep;
 3841|      0|            });
 3842|      0|        }
 3843|       |
 3844|   824k|        return read_while1_code_unit(
 3845|   824k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3846|   824k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   824k|        : m_fptr([](storage fn,
  743|   824k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   824k|              cvref<T> obj = *get<T>(fn);
  745|   824k|              if constexpr (std::is_void_v<R>) {
  746|   824k|                  obj(static_cast<decltype(args)>(args)...);
  747|   824k|              }
  748|   824k|              else {
  749|   824k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   824k|              }
  751|   824k|          }),
  752|   824k|          m_storage(std::addressof(f))
  753|   824k|    {
  754|   824k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  3.26M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.26M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.26M|              else {
  749|  3.26M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.26M|              }
  751|  3.26M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlcE0_EEDaNS3_7storageE:
  683|  3.26M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.26M|        else if constexpr (std::is_object_v<T>) {
  688|  3.26M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.26M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlcE0_clEc:
 3845|  3.26M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlcE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   824k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   824k|        {
  662|   824k|        }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   525k|    {
 1676|   525k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   525k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   525k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  38.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  38.8k|        {
  662|  38.8k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   105k|        : m_fptr([](storage fn,
  743|   105k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   105k|              cvref<T> obj = *get<T>(fn);
  745|   105k|              if constexpr (std::is_void_v<R>) {
  746|   105k|                  obj(static_cast<decltype(args)>(args)...);
  747|   105k|              }
  748|   105k|              else {
  749|   105k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   105k|              }
  751|   105k|          }),
  752|   105k|          m_storage(std::addressof(f))
  753|   105k|    {
  754|   105k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   105k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   105k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   105k|              else {
  749|   105k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   105k|              }
  751|   105k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   105k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   105k|        else if constexpr (std::is_object_v<T>) {
  688|   105k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   105k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4271|   105k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   105k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|   105k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3738|   490k|    {
 3739|   490k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|   490k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 490k]
  |  |  ------------------
  ------------------
 3740|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3741|      0|                classic_with_thsep_tag{}};
 3742|      0|        }
 3743|       |
 3744|   490k|        return read_source_impl(range);
 3745|   490k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   105k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   105k|        {
  662|   105k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4255|   134k|    {
 4256|   134k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   134k|#if !SCN_DISABLE_LOCALE
 4259|   134k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 35.6k, False: 98.6k]
  ------------------
 4260|  35.6k|            return read_impl<Range>(
 4261|  35.6k|                range, rd,
 4262|  35.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  35.6k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  35.6k|                },
 4265|  35.6k|                value, loc);
 4266|  35.6k|        }
 4267|  98.6k|#endif
 4268|       |
 4269|  98.6k|        return read_impl<Range>(
 4270|  98.6k|            range, rd,
 4271|  98.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|  98.6k|                return r.read_source(SCN_FWD(args)...);
 4273|  98.6k|            },
 4274|  98.6k|            value);
 4275|   134k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4291|   187k|    {
 4292|   187k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   187k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 9.82k, False: 177k]
  |  |  ------------------
  ------------------
 4294|  9.82k|            return unexpected(r.error());
 4295|  9.82k|        }
 4296|       |
 4297|   177k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   177k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   177k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   177k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   177k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10.6k, False: 167k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  10.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  10.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  10.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  10.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  10.6k|    }                                                  \
  |  |  |  | 3957|   177k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   167k|        return ranges::next(range.begin(), n);
 4299|   177k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   580k|    {
  763|   580k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|   580k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   580k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  35.6k|        : m_fptr([](storage fn,
  743|  35.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.6k|              cvref<T> obj = *get<T>(fn);
  745|  35.6k|              if constexpr (std::is_void_v<R>) {
  746|  35.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  35.6k|              }
  748|  35.6k|              else {
  749|  35.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.6k|              }
  751|  35.6k|          }),
  752|  35.6k|          m_storage(std::addressof(f))
  753|  35.6k|    {
  754|  35.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  35.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  35.6k|              else {
  749|  35.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.6k|              }
  751|  35.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  35.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  35.6k|        else if constexpr (std::is_object_v<T>) {
  688|  35.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  35.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4262|  35.6k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  35.6k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  35.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  35.6k|                },
_ZN3scn2v44impl12float_readerIcE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3752|   111k|    {
 3753|   111k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3754|   111k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|   111k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 3755|      0|            m_locale_options.thousands_sep = CharT{0};
 3756|      0|        }
 3757|       |
 3758|   111k|        return read_source_impl(range);
 3759|   111k|    }
_ZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3778|   580k|    {
 3779|   580k|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|   580k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   580k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   580k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   580k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 580k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   580k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   580k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3780|   580k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3781|   580k|        auto it = sign_result.first;
 3782|   580k|        m_sign = sign_result.second;
 3783|       |
 3784|   580k|        auto digits_begin = it;
 3785|   580k|        auto r = ranges::subrange{it, range.end()};
 3786|       |        if constexpr (ranges::contiguous_range<Range> &&
 3787|   580k|                      ranges::sized_range<Range>) {
 3788|   580k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1039|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 580k]
  |  |  |  Branch (1039:45): [True: 0, False: 580k]
  |  |  |  Branch (1039:45): [True: 0, False: 580k]
  |  |  ------------------
  ------------------
 3789|   580k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3790|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|      0|    }                                                  \
  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3791|      0|                    it,
 3792|      0|                    do_read_source_impl(
 3793|      0|                        r,
 3794|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3795|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3796|      0|            }
 3797|   580k|            else {
 3798|   580k|                auto cb = [&](const auto& rr)
 3799|   580k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|   580k|                    auto res = read_all(rr);
 3801|   580k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3802|   580k|                        return detail::unexpected_scan_error(
 3803|   580k|                            scan_error::invalid_scanned_value,
 3804|   580k|                            "Invalid float value");
 3805|   580k|                    }
 3806|   580k|                    return res;
 3807|   580k|                };
 3808|   580k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3953|   580k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   580k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   580k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 30.0k, False: 550k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  30.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  30.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  30.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  30.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  30.0k|    }                                                  \
  |  | 3957|   580k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   580k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3809|   550k|            }
 3810|       |        }
 3811|       |        else {
 3812|       |            SCN_TRY_ASSIGN(
 3813|       |                it,
 3814|       |                do_read_source_impl(
 3815|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3816|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3817|       |        }
 3818|       |
 3819|   580k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   580k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   580k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3820|       |
 3821|   550k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3821:13): [True: 545k, False: 4.55k]
  |  Branch (3821:48): [True: 543k, False: 2.63k]
  ------------------
 3822|   550k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3822:13): [True: 516k, False: 26.1k]
  ------------------
 3823|   550k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3823:13): [True: 510k, False: 6.19k]
  ------------------
 3824|   510k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3825|   510k|        }
 3826|       |
 3827|   550k|        handle_separators();
 3828|       |
 3829|   550k|        return it;
 3830|   580k|    }
_ZN3scn2v44impl12float_readerIcE8read_infINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3872|   580k|    {
 3873|   580k|        auto it = range.begin();
 3874|   580k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3874:73): [True: 573k, False: 7.18k]
  ------------------
 3875|   573k|            return unexpected(r.error());
 3876|   573k|        }
 3877|  7.18k|        else {
 3878|  7.18k|            it = *r;
 3879|  7.18k|        }
 3880|       |
 3881|  7.18k|        if (auto r = read_matching_string_classic_nocase(
 3882|  7.18k|                ranges::subrange{it, range.end()}, "inity");
 3883|  7.18k|            !r) {
  ------------------
  |  Branch (3883:13): [True: 4.55k, False: 2.63k]
  ------------------
 3884|  4.55k|            m_kind = float_kind::inf_short;
 3885|  4.55k|            return it;
 3886|  4.55k|        }
 3887|  2.63k|        else {
 3888|  2.63k|            m_kind = float_kind::inf_long;
 3889|  2.63k|            return *r;
 3890|  2.63k|        }
 3891|  7.18k|    }
_ZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3895|   573k|    {
 3896|   573k|        auto it = range.begin();
 3897|   573k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3897:73): [True: 539k, False: 33.8k]
  ------------------
 3898|   539k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|   539k|                scan_error::invalid_scanned_value,
 3900|   539k|                "Invalid floating-point NaN value"));
 3901|   539k|        }
 3902|  33.8k|        else {
 3903|  33.8k|            it = *r;
 3904|  33.8k|        }
 3905|       |
 3906|  33.8k|        if (auto r =
 3907|  33.8k|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3908|  33.8k|            !r) {
  ------------------
  |  Branch (3908:13): [True: 26.1k, False: 7.67k]
  ------------------
 3909|  26.1k|            m_kind = float_kind::nan_simple;
 3910|  26.1k|            return it;
 3911|  26.1k|        }
 3912|  7.67k|        else {
 3913|  7.67k|            it = *r;
 3914|  7.67k|        }
 3915|       |
 3916|  7.67k|        auto payload_beg_it = it;
 3917|  7.67k|        it = read_while_code_unit(
 3918|  7.67k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3919|  7.67k|                return is_ascii_char(ch) &&
 3920|  7.67k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3921|  7.67k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3922|  7.67k|            });
 3923|  7.67k|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3924|       |
 3925|  7.67k|        m_kind = float_kind::nan_with_payload;
 3926|  7.67k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3926:18): [True: 6.19k, False: 1.47k]
  ------------------
 3927|  7.67k|                                             ')')) {
 3928|  6.19k|            return *r;
 3929|  6.19k|        }
 3930|  1.47k|        return detail::unexpected_scan_error(
 3931|  1.47k|            scan_error::invalid_scanned_value,
 3932|  1.47k|            "Invalid floating-point NaN payload");
 3933|  7.67k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|  7.67k|        : m_fptr([](storage fn,
  743|  7.67k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.67k|              cvref<T> obj = *get<T>(fn);
  745|  7.67k|              if constexpr (std::is_void_v<R>) {
  746|  7.67k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.67k|              }
  748|  7.67k|              else {
  749|  7.67k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.67k|              }
  751|  7.67k|          }),
  752|  7.67k|          m_storage(std::addressof(f))
  753|  7.67k|    {
  754|  7.67k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|   163k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   163k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   163k|              else {
  749|   163k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   163k|              }
  751|   163k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_EUlcE_EEDaNS3_7storageE:
  683|   163k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   163k|        else if constexpr (std::is_object_v<T>) {
  688|   163k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   163k|    }
_ZZN3scn2v44impl12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlcE_clEc:
 3918|   163k|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3919|   163k|                return is_ascii_char(ch) &&
  ------------------
  |  Branch (3919:24): [True: 163k, False: 83]
  ------------------
 3920|   163k|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
  ------------------
  |  Branch (3920:26): [True: 157k, False: 6.58k]
  |  Branch (3920:39): [True: 148k, False: 8.45k]
  |  Branch (3920:54): [True: 2.82k, False: 12.2k]
  |  Branch (3920:67): [True: 2.74k, False: 83]
  ------------------
 3921|   163k|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
  ------------------
  |  Branch (3921:26): [True: 5.71k, False: 6.58k]
  |  Branch (3921:39): [True: 2.91k, False: 2.80k]
  |  Branch (3921:53): [True: 2.72k, False: 6.66k]
  ------------------
 3922|   163k|            });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  7.67k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.67k|        {
  662|  7.67k|        }
_ZN3scn2v44impl12float_readerIcE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3865|   371k|    {
 3866|   371k|        return read_matching_string_classic_nocase(range, "0x");
 3867|   371k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2127|   330k|{
 2128|   330k|    auto it = read_while_code_unit(range, pred);
 2129|   330k|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 148k, False: 181k]
  ------------------
 2130|   148k|        return unexpected(parse_error::error);
 2131|   148k|    }
 2132|   181k|    return it;
 2133|   330k|}
_ZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3938|  94.3k|    {
 3939|  94.3k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3939:18): [True: 13.0k, False: 81.3k]
  ------------------
 3940|  13.0k|            auto beg_exp_it = range.begin();
 3941|  13.0k|            auto it = *r;
 3942|       |
 3943|  13.0k|            if (auto r_sign =
  ------------------
  |  Branch (3943:22): [True: 12.9k, False: 60]
  ------------------
 3944|  13.0k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3945|  12.9k|                it = r_sign->first;
 3946|  12.9k|            }
 3947|       |
 3948|  13.0k|            if (auto r_exp = read_while1_code_unit(
 3949|  13.0k|                    ranges::subrange{it, range.end()},
 3950|  13.0k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3951|  13.0k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|  13.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 536, False: 12.4k]
  |  |  ------------------
  ------------------
 3952|    536|                it = beg_exp_it;
 3953|    536|            }
 3954|  12.4k|            else {
 3955|  12.4k|                it = *r_exp;
 3956|  12.4k|            }
 3957|       |
 3958|  13.0k|            return it;
 3959|  13.0k|        }
 3960|  81.3k|        return range.begin();
 3961|  94.3k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  13.0k|        : m_fptr([](storage fn,
  743|  13.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.0k|              cvref<T> obj = *get<T>(fn);
  745|  13.0k|              if constexpr (std::is_void_v<R>) {
  746|  13.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.0k|              }
  748|  13.0k|              else {
  749|  13.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.0k|              }
  751|  13.0k|          }),
  752|  13.0k|          m_storage(std::addressof(f))
  753|  13.0k|    {
  754|  13.0k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEcE_clES12_c:
  743|  38.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.9k|              else {
  749|  38.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.9k|              }
  751|  38.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlcE_EEDaNS3_7storageE:
  683|  38.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.9k|        else if constexpr (std::is_object_v<T>) {
  688|  38.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.9k|    }
_ZZN3scn2v44impl12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlcE_clEc:
 3950|  38.9k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlcE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  13.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  13.0k|        {
  662|  13.0k|        }
_ZN3scn2v44impl12float_readerIcE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4007|   167k|    {
 4008|   167k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4009|   167k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4009:35): [True: 103k, False: 64.3k]
  |  Branch (4009:50): [True: 12.9k, False: 90.7k]
  ------------------
 4010|       |
 4011|   167k|        auto it = ranges::begin(range);
 4012|   167k|        std::ptrdiff_t digits_count = 0;
 4013|       |
 4014|   167k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4015|   167k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   167k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 18.9k, False: 149k]
  |  |  ------------------
  ------------------
 4016|  18.9k|            return r.transform_error(
 4017|  18.9k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4018|  18.9k|                                              "Invalid floating-point value"));
 4019|  18.9k|        }
 4020|   149k|        else {
 4021|   149k|            digits_count += ranges::distance(it, *r);
 4022|   149k|            it = *r;
 4023|   149k|        }
 4024|       |
 4025|   149k|        m_integral_part_length = digits_count;
 4026|   149k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4026:18): [True: 23.1k, False: 125k]
  ------------------
 4027|   149k|                                             m_locale_options.decimal_point)) {
 4028|  23.1k|            it = *r;
 4029|  23.1k|        }
 4030|       |
 4031|   149k|        if (auto r =
  ------------------
  |  Branch (4031:18): [True: 20.3k, False: 128k]
  ------------------
 4032|   149k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4033|  20.3k|            digits_count += ranges::distance(it, *r);
 4034|  20.3k|            it = *r;
 4035|  20.3k|        }
 4036|       |
 4037|   149k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 149k]
  |  |  ------------------
  ------------------
 4038|      0|            return detail::unexpected_scan_error(
 4039|      0|                scan_error::invalid_scanned_value,
 4040|      0|                "No significand digits in float");
 4041|      0|        }
 4042|       |
 4043|   149k|        auto beg_exp_it = it;
 4044|   149k|        if (allowed_exp) {
  ------------------
  |  Branch (4044:13): [True: 94.3k, False: 54.6k]
  ------------------
 4045|  94.3k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4046|  94.3k|        }
 4047|   149k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4047:13): [True: 11.9k, False: 137k]
  |  Branch (4047:29): [True: 8.89k, False: 3.04k]
  ------------------
 4048|  8.89k|            return detail::unexpected_scan_error(
 4049|  8.89k|                scan_error::invalid_scanned_value,
 4050|  8.89k|                "No exponent given to scientific float");
 4051|  8.89k|        }
 4052|       |
 4053|   140k|        m_kind =
 4054|   140k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4054:13): [True: 127k, False: 12.4k]
  ------------------
 4055|       |
 4056|   140k|        return it;
 4057|   149k|    }
_ZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3835|   317k|    {
 3836|   317k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   317k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 317k]
  |  |  |  Branch (1039:45): [True: 0, False: 317k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3837|   317k|                         thsep_allowed)) {
 3838|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3839|      0|                return char_to_int(ch) < 10 ||
 3840|      0|                       ch == m_locale_options.thousands_sep;
 3841|      0|            });
 3842|      0|        }
 3843|       |
 3844|   317k|        return read_while1_code_unit(
 3845|   317k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3846|   317k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   317k|        : m_fptr([](storage fn,
  743|   317k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   317k|              cvref<T> obj = *get<T>(fn);
  745|   317k|              if constexpr (std::is_void_v<R>) {
  746|   317k|                  obj(static_cast<decltype(args)>(args)...);
  747|   317k|              }
  748|   317k|              else {
  749|   317k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   317k|              }
  751|   317k|          }),
  752|   317k|          m_storage(std::addressof(f))
  753|   317k|    {
  754|   317k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  1.15M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.15M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.15M|              else {
  749|  1.15M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.15M|              }
  751|  1.15M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlcE0_EEDaNS3_7storageE:
  683|  1.15M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.15M|        else if constexpr (std::is_object_v<T>) {
  688|  1.15M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.15M|    }
_ZZN3scn2v44impl12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlcE0_clEc:
 3845|  1.15M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIcE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlcE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   317k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   317k|        {
  662|   317k|        }
_ZN3scn2v44impl12float_readerIcE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4064|   580k|    {
 4065|   580k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4066|   580k|        const bool allowed_nonhex =
 4067|   580k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4068|   580k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4069|       |
 4070|   580k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4070:39): [True: 573k, False: 7.18k]
  |  Branch (4070:45): [True: 0, False: 573k]
  ------------------
 4071|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4072|      0|                scan_error::invalid_scanned_value,
 4073|      0|                "Invalid infinite floating-point value"));
 4074|      0|        }
 4075|   580k|        else if (r) {
  ------------------
  |  Branch (4075:18): [True: 7.18k, False: 573k]
  ------------------
 4076|  7.18k|            return *r;
 4077|  7.18k|        }
 4078|       |
 4079|   573k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4079:39): [True: 540k, False: 32.3k]
  |  Branch (4079:45): [True: 1.47k, False: 539k]
  ------------------
 4080|  1.47k|            return unexpected(r.error());
 4081|  1.47k|        }
 4082|   571k|        else if (r) {
  ------------------
  |  Branch (4082:18): [True: 32.3k, False: 539k]
  ------------------
 4083|  32.3k|            return *r;
 4084|  32.3k|        }
 4085|       |
 4086|   539k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4086:13): [True: 371k, False: 167k]
  |  Branch (4086:28): [True: 112k, False: 258k]
  ------------------
 4087|       |            // only hex allowed:
 4088|       |            // prefix "0x" allowed, not required
 4089|   112k|            auto it = range.begin();
 4090|       |
 4091|   112k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4091:22): [True: 4.90k, False: 107k]
  ------------------
 4092|  4.90k|                m_kind = float_kind::hex_with_prefix;
 4093|  4.90k|                it = *r;
 4094|  4.90k|            }
 4095|   107k|            else {
 4096|   107k|                m_kind = float_kind::hex_without_prefix;
 4097|   107k|            }
 4098|       |
 4099|   112k|            return read_hex(ranges::subrange{it, range.end()});
 4100|   112k|        }
 4101|   426k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4101:13): [True: 167k, False: 258k]
  |  Branch (4101:29): [True: 167k, False: 0]
  ------------------
 4102|       |            // only nonhex allowed:
 4103|       |            // no prefix allowed
 4104|   167k|            m_kind = float_kind::generic;
 4105|   167k|            return read_regular_float(range);
 4106|   167k|        }
 4107|       |        // both hex and nonhex allowed:
 4108|       |        // check for "0x" prefix -> hex,
 4109|       |        // regular otherwise
 4110|       |
 4111|   258k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|   258k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 12.1k, False: 246k]
  |  |  ------------------
  ------------------
 4112|  12.1k|            m_kind = float_kind::hex_with_prefix;
 4113|  12.1k|            return read_hex(ranges::subrange{*r, range.end()});
 4114|  12.1k|        }
 4115|       |
 4116|   246k|        m_kind = float_kind::generic;
 4117|   246k|        return read_regular(range);
 4118|   258k|    }
_ZZN3scn2v44impl12float_readerIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3799|   371k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|   371k|                    auto res = read_all(rr);
 3801|   371k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1039|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 708, False: 370k]
  |  |  ------------------
  ------------------
 3802|    708|                        return detail::unexpected_scan_error(
 3803|    708|                            scan_error::invalid_scanned_value,
 3804|    708|                            "Invalid float value");
 3805|    708|                    }
 3806|   370k|                    return res;
 3807|   371k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   371k|{
 1938|   371k|    return ranges::next(range.begin(), range.end());
 1939|   371k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   371k|    {
  313|   371k|        ranges::advance(x, bound);
  314|   371k|        return x;
  315|   371k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   371k|    {
  275|   371k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   371k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKcS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   371k|    {
  190|   371k|        i = std::move(bound);
  191|   371k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   518k|    {
 1676|   518k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   518k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   518k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEvOT_:
 1719|   518k|    {
 1720|   518k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   518k|                      ranges::sized_range<Range>) {
 1725|   518k|            m_storage.reset();
 1726|   518k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   518k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  35.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  35.6k|        {
  662|  35.6k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  98.6k|        : m_fptr([](storage fn,
  743|  98.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.6k|              cvref<T> obj = *get<T>(fn);
  745|  98.6k|              if constexpr (std::is_void_v<R>) {
  746|  98.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  98.6k|              }
  748|  98.6k|              else {
  749|  98.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.6k|              }
  751|  98.6k|          }),
  752|  98.6k|          m_storage(std::addressof(f))
  753|  98.6k|    {
  754|  98.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  98.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  98.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  98.6k|              else {
  749|  98.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  98.6k|              }
  751|  98.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|  98.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  98.6k|        else if constexpr (std::is_object_v<T>) {
  688|  98.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  98.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4271|  98.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|  98.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  98.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|  98.6k|            },
_ZN3scn2v44impl12float_readerIcE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3738|   468k|    {
 3739|   468k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|   468k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 468k]
  |  |  ------------------
  ------------------
 3740|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3741|      0|                classic_with_thsep_tag{}};
 3742|      0|        }
 3743|       |
 3744|   468k|        return read_source_impl(range);
 3745|   468k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  98.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  98.6k|        {
  662|  98.6k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6277|   152k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|       |                          basic_contiguous_scan_context<char_type>>) {
 6282|       |            auto rd = make_reader<T, char_type>();
 6283|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6284|       |            return impl(rd, range, value);
 6285|       |        }
 6286|   152k|        else if constexpr (!detail::is_type_disabled<T>) {
 6287|   152k|            auto rd = make_reader<T, char_type>();
 6288|   152k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   152k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 152k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|       |
 6290|   152k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6290:17): [True: 152k, False: 0]
  |  Branch (6290:50): [True: 0, False: 0]
  ------------------
 6291|   152k|                specs.width != 0) {
  ------------------
  |  Branch (6291:17): [True: 0, False: 0]
  ------------------
 6292|   152k|                return impl(rd, range, value);
 6293|   152k|            }
 6294|       |
 6295|      0|            auto crange = get_as_contiguous(range);
 6296|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6297|      0|            return ranges::next(range.begin(),
 6298|      0|                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   152k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6212|   152k|    {
 6213|   152k|        const bool need_skipped_width =
 6214|   152k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 152k]
  |  Branch (6214:33): [True: 0, False: 152k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   152k|        auto it = rng.begin();
 6218|   152k|        std::ptrdiff_t prefix_width = 0;
 6219|   152k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 152k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   152k|        else {
 6227|   152k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   152k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   152k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   152k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.62k, False: 149k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.62k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.62k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.62k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.62k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.62k|    }                                                  \
  |  |  |  | 3957|   152k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   149k|            std::tie(it, prefix_width) = prefix_result;
 6229|   149k|        }
 6230|   149k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   149k|        std::ptrdiff_t value_width = 0;
 6234|   149k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 149k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   149k|        else {
 6250|   149k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   149k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   149k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 15.0k, False: 134k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  15.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  15.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  15.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  15.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  15.0k|    }                                                  \
  |  | 3957|   149k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   134k|                                             specs, value, loc));
 6252|       |
 6253|   134k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 134k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   134k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   134k|        std::ptrdiff_t postfix_width = 0;
 6262|   134k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 132k, False: 1.89k]
  ------------------
 6263|   132k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   132k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   132k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   132k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 132k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   132k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   132k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   132k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   132k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   132k|                                 value_width));
 6267|   132k|            std::tie(it, postfix_width) = postfix_result;
 6268|   132k|        }
 6269|       |
 6270|   134k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   134k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 134k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   134k|            specs, prefix_width, value_width, postfix_width));
 6272|   134k|        return it;
 6273|   134k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3764|   371k|    {
 3765|   371k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   371k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   371k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3766|       |
 3767|   371k|        const std::ptrdiff_t sign_len =
 3768|   371k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3768:13): [True: 88.8k, False: 282k]
  ------------------
 3769|       |
 3770|   371k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   371k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   371k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   371k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   371k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 11.4k, False: 360k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  11.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  11.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  11.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  11.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  11.4k|    }                                                  \
  |  |  |  | 3957|   371k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   360k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3771|   360k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3772|   371k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4255|   149k|    {
 4256|   149k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   149k|#if !SCN_DISABLE_LOCALE
 4259|   149k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 41.0k, False: 108k]
  ------------------
 4260|  41.0k|            return read_impl<Range>(
 4261|  41.0k|                range, rd,
 4262|  41.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  41.0k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  41.0k|                },
 4265|  41.0k|                value, loc);
 4266|  41.0k|        }
 4267|   108k|#endif
 4268|       |
 4269|   108k|        return read_impl<Range>(
 4270|   108k|            range, rd,
 4271|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   108k|                return r.read_source(SCN_FWD(args)...);
 4273|   108k|            },
 4274|   108k|            value);
 4275|   149k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4291|   205k|    {
 4292|   205k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   205k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   205k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 18.3k, False: 187k]
  |  |  ------------------
  ------------------
 4294|  18.3k|            return unexpected(r.error());
 4295|  18.3k|        }
 4296|       |
 4297|   187k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   187k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   187k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   187k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.22k, False: 186k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.22k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.22k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.22k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.22k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.22k|    }                                                  \
  |  |  |  | 3957|   187k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   186k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   186k|        return ranges::next(range.begin(), n);
 4299|   187k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  41.0k|        : m_fptr([](storage fn,
  743|  41.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.0k|              cvref<T> obj = *get<T>(fn);
  745|  41.0k|              if constexpr (std::is_void_v<R>) {
  746|  41.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  41.0k|              }
  748|  41.0k|              else {
  749|  41.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.0k|              }
  751|  41.0k|          }),
  752|  41.0k|          m_storage(std::addressof(f))
  753|  41.0k|    {
  754|  41.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  41.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  41.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  41.0k|              else {
  749|  41.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  41.0k|              }
  751|  41.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  41.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  41.0k|        else if constexpr (std::is_object_v<T>) {
  688|  41.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  41.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4262|  41.0k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  41.0k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  41.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  41.0k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  41.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  41.0k|        {
  662|  41.0k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   108k|        : m_fptr([](storage fn,
  743|   108k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   108k|              cvref<T> obj = *get<T>(fn);
  745|   108k|              if constexpr (std::is_void_v<R>) {
  746|   108k|                  obj(static_cast<decltype(args)>(args)...);
  747|   108k|              }
  748|   108k|              else {
  749|   108k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   108k|              }
  751|   108k|          }),
  752|   108k|          m_storage(std::addressof(f))
  753|   108k|    {
  754|   108k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   108k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   108k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   108k|              else {
  749|   108k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   108k|              }
  751|   108k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   108k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   108k|        else if constexpr (std::is_object_v<T>) {
  688|   108k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   108k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4271|   108k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   108k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   108k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|   108k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   108k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   108k|        {
  662|   108k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4255|   138k|    {
 4256|   138k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   138k|#if !SCN_DISABLE_LOCALE
 4259|   138k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 37.2k, False: 100k]
  ------------------
 4260|  37.2k|            return read_impl<Range>(
 4261|  37.2k|                range, rd,
 4262|  37.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  37.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  37.2k|                },
 4265|  37.2k|                value, loc);
 4266|  37.2k|        }
 4267|   100k|#endif
 4268|       |
 4269|   100k|        return read_impl<Range>(
 4270|   100k|            range, rd,
 4271|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   100k|                return r.read_source(SCN_FWD(args)...);
 4273|   100k|            },
 4274|   100k|            value);
 4275|   138k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4291|   194k|    {
 4292|   194k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   194k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   194k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 9.98k, False: 184k]
  |  |  ------------------
  ------------------
 4294|  9.98k|            return unexpected(r.error());
 4295|  9.98k|        }
 4296|       |
 4297|   184k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   184k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   184k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   184k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   184k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10.1k, False: 173k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  10.1k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  10.1k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  10.1k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  10.1k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  10.1k|    }                                                  \
  |  |  |  | 3957|   184k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   173k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   173k|        return ranges::next(range.begin(), n);
 4299|   184k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  37.2k|        : m_fptr([](storage fn,
  743|  37.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  37.2k|              cvref<T> obj = *get<T>(fn);
  745|  37.2k|              if constexpr (std::is_void_v<R>) {
  746|  37.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  37.2k|              }
  748|  37.2k|              else {
  749|  37.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  37.2k|              }
  751|  37.2k|          }),
  752|  37.2k|          m_storage(std::addressof(f))
  753|  37.2k|    {
  754|  37.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  37.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  37.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  37.2k|              else {
  749|  37.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  37.2k|              }
  751|  37.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  37.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  37.2k|        else if constexpr (std::is_object_v<T>) {
  688|  37.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  37.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4262|  37.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  37.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  37.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  37.2k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  37.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  37.2k|        {
  662|  37.2k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   100k|        : m_fptr([](storage fn,
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|   100k|              if constexpr (std::is_void_v<R>) {
  746|   100k|                  obj(static_cast<decltype(args)>(args)...);
  747|   100k|              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
  752|   100k|          m_storage(std::addressof(f))
  753|   100k|    {
  754|   100k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   100k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   100k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   100k|              else {
  749|   100k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   100k|              }
  751|   100k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   100k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   100k|        else if constexpr (std::is_object_v<T>) {
  688|   100k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   100k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4271|   100k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   100k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|   100k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   100k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   100k|        {
  662|   100k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6277|   155k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|       |                          basic_contiguous_scan_context<char_type>>) {
 6282|       |            auto rd = make_reader<T, char_type>();
 6283|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6284|       |            return impl(rd, range, value);
 6285|       |        }
 6286|   155k|        else if constexpr (!detail::is_type_disabled<T>) {
 6287|   155k|            auto rd = make_reader<T, char_type>();
 6288|   155k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   155k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 155k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|       |
 6290|   155k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6290:17): [True: 155k, False: 0]
  |  Branch (6290:50): [True: 0, False: 0]
  ------------------
 6291|   155k|                specs.width != 0) {
  ------------------
  |  Branch (6291:17): [True: 0, False: 0]
  ------------------
 6292|   155k|                return impl(rd, range, value);
 6293|   155k|            }
 6294|       |
 6295|      0|            auto crange = get_as_contiguous(range);
 6296|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6297|      0|            return ranges::next(range.begin(),
 6298|      0|                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   155k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6212|   155k|    {
 6213|   155k|        const bool need_skipped_width =
 6214|   155k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 155k]
  |  Branch (6214:33): [True: 0, False: 155k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   155k|        auto it = rng.begin();
 6218|   155k|        std::ptrdiff_t prefix_width = 0;
 6219|   155k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 155k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   155k|        else {
 6227|   155k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   155k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   155k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   155k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   155k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.84k, False: 152k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.84k|    }                                                  \
  |  |  |  | 3957|   155k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   152k|            std::tie(it, prefix_width) = prefix_result;
 6229|   152k|        }
 6230|   152k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   152k|        std::ptrdiff_t value_width = 0;
 6234|   152k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 152k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   152k|        else {
 6250|   152k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   152k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   152k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 14.7k, False: 137k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  14.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  14.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  14.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  14.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  14.7k|    }                                                  \
  |  | 3957|   152k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   137k|                                             specs, value, loc));
 6252|       |
 6253|   137k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 137k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   137k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   137k|        std::ptrdiff_t postfix_width = 0;
 6262|   137k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 135k, False: 2.06k]
  ------------------
 6263|   135k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   135k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   135k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   135k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   135k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 135k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   135k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   135k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   135k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   135k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   135k|                                 value_width));
 6267|   135k|            std::tie(it, postfix_width) = postfix_result;
 6268|   135k|        }
 6269|       |
 6270|   137k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   137k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   137k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 137k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   137k|            specs, prefix_width, value_width, postfix_width));
 6272|   137k|        return it;
 6273|   137k|    }
_ZN3scn2v44impl12float_readerIcE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3764|   379k|    {
 3765|   379k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   379k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   379k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3766|       |
 3767|   379k|        const std::ptrdiff_t sign_len =
 3768|   379k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3768:13): [True: 93.2k, False: 285k]
  ------------------
 3769|       |
 3770|   379k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   379k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   379k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   379k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   379k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 9.96k, False: 369k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  9.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  9.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  9.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  9.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  9.96k|    }                                                  \
  |  |  |  | 3957|   379k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   369k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3771|   369k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3772|   379k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4255|   152k|    {
 4256|   152k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   152k|#if !SCN_DISABLE_LOCALE
 4259|   152k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 42.4k, False: 110k]
  ------------------
 4260|  42.4k|            return read_impl<Range>(
 4261|  42.4k|                range, rd,
 4262|  42.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  42.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  42.4k|                },
 4265|  42.4k|                value, loc);
 4266|  42.4k|        }
 4267|   110k|#endif
 4268|       |
 4269|   110k|        return read_impl<Range>(
 4270|   110k|            range, rd,
 4271|   110k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   110k|                return r.read_source(SCN_FWD(args)...);
 4273|   110k|            },
 4274|   110k|            value);
 4275|   152k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIcEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4291|   209k|    {
 4292|   209k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   209k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   209k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 18.9k, False: 190k]
  |  |  ------------------
  ------------------
 4294|  18.9k|            return unexpected(r.error());
 4295|  18.9k|        }
 4296|       |
 4297|   190k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   190k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   190k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   190k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   190k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 309, False: 190k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    309|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    309|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    309|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    309|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    309|    }                                                  \
  |  |  |  | 3957|   190k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   190k|        return ranges::next(range.begin(), n);
 4299|   190k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  42.4k|        : m_fptr([](storage fn,
  743|  42.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.4k|              cvref<T> obj = *get<T>(fn);
  745|  42.4k|              if constexpr (std::is_void_v<R>) {
  746|  42.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  42.4k|              }
  748|  42.4k|              else {
  749|  42.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.4k|              }
  751|  42.4k|          }),
  752|  42.4k|          m_storage(std::addressof(f))
  753|  42.4k|    {
  754|  42.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  42.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  42.4k|              else {
  749|  42.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.4k|              }
  751|  42.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  42.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  42.4k|        else if constexpr (std::is_object_v<T>) {
  688|  42.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  42.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4262|  42.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  42.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  42.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  42.4k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  42.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  42.4k|        {
  662|  42.4k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|   110k|        : m_fptr([](storage fn,
  743|   110k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   110k|              cvref<T> obj = *get<T>(fn);
  745|   110k|              if constexpr (std::is_void_v<R>) {
  746|   110k|                  obj(static_cast<decltype(args)>(args)...);
  747|   110k|              }
  748|   110k|              else {
  749|   110k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   110k|              }
  751|   110k|          }),
  752|   110k|          m_storage(std::addressof(f))
  753|   110k|    {
  754|   110k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|   110k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   110k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   110k|              else {
  749|   110k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   110k|              }
  751|   110k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   110k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   110k|        else if constexpr (std::is_object_v<T>) {
  688|   110k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   110k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4271|   110k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   110k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|   110k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   110k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   110k|        {
  662|   110k|        }
_ZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4255|   140k|    {
 4256|   140k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   140k|#if !SCN_DISABLE_LOCALE
 4259|   140k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 38.4k, False: 102k]
  ------------------
 4260|  38.4k|            return read_impl<Range>(
 4261|  38.4k|                range, rd,
 4262|  38.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  38.4k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  38.4k|                },
 4265|  38.4k|                value, loc);
 4266|  38.4k|        }
 4267|   102k|#endif
 4268|       |
 4269|   102k|        return read_impl<Range>(
 4270|   102k|            range, rd,
 4271|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   102k|                return r.read_source(SCN_FWD(args)...);
 4273|   102k|            },
 4274|   102k|            value);
 4275|   140k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIcEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4291|   198k|    {
 4292|   198k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   198k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   198k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.2k, False: 188k]
  |  |  ------------------
  ------------------
 4294|  10.2k|            return unexpected(r.error());
 4295|  10.2k|        }
 4296|       |
 4297|   188k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   188k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   188k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   188k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   188k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 9.66k, False: 178k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  9.66k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  9.66k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  9.66k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  9.66k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  9.66k|    }                                                  \
  |  |  |  | 3957|   188k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   178k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   178k|        return ranges::next(range.begin(), n);
 4299|   188k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  38.4k|        : m_fptr([](storage fn,
  743|  38.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.4k|              cvref<T> obj = *get<T>(fn);
  745|  38.4k|              if constexpr (std::is_void_v<R>) {
  746|  38.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  38.4k|              }
  748|  38.4k|              else {
  749|  38.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.4k|              }
  751|  38.4k|          }),
  752|  38.4k|          m_storage(std::addressof(f))
  753|  38.4k|    {
  754|  38.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  38.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  38.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  38.4k|              else {
  749|  38.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  38.4k|              }
  751|  38.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  38.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  38.4k|        else if constexpr (std::is_object_v<T>) {
  688|  38.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  38.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4262|  38.4k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  38.4k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  38.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  38.4k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  38.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  38.4k|        {
  662|  38.4k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|   102k|        : m_fptr([](storage fn,
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|   102k|              if constexpr (std::is_void_v<R>) {
  746|   102k|                  obj(static_cast<decltype(args)>(args)...);
  747|   102k|              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
  752|   102k|          m_storage(std::addressof(f))
  753|   102k|    {
  754|   102k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|   102k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   102k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   102k|              else {
  749|   102k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   102k|              }
  751|   102k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_EEDaNS3_7storageE:
  683|   102k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   102k|        else if constexpr (std::is_object_v<T>) {
  688|   102k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   102k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4271|   102k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|   102k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|   102k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   102k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   102k|        {
  662|   102k|        }
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   621k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   621k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   621k|        else {
 1055|   621k|            return r.begin().contiguous_segment();
 1056|   621k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   621k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|   543k|{
 2193|   543k|    auto it = range.begin();
 2194|   951k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 943k, False: 8.18k]
  ------------------
 2195|   943k|        const auto val =
 2196|   943k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|   943k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|   943k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 936k, False: 6.99k]
  |  |  ------------------
  ------------------
 2198|   936k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|   936k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|   936k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 535k, False: 400k]
  ------------------
 2201|   535k|                return it;
 2202|   535k|            }
 2203|   936k|        }
 2204|   407k|        it = val.iterator;
 2205|   407k|    }
 2206|       |
 2207|  8.18k|    return it;
 2208|   543k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   943k|{
 1998|   943k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|   943k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   943k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   943k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   943k|    auto it = range.begin();
 2002|   943k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   943k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   943k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.99k, False: 936k]
  |  |  ------------------
  ------------------
 2005|  6.99k|        ++it;
 2006|  6.99k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  6.99k|        return {it, {}};
 2008|  6.99k|    }
 2009|       |
 2010|   936k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 922k, False: 14.0k]
  ------------------
 2011|   922k|        ++it;
 2012|   922k|        return {it, string_type(1, *range.begin())};
 2013|   922k|    }
 2014|       |
 2015|  14.0k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  14.0k|    return {it, string_type{range.begin(), it}};
 2017|   936k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  6.99k|{
 1265|  6.99k|    auto it = input.begin();
 1266|  40.6k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 39.5k, False: 1.06k]
  ------------------
 1267|  39.5k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 5.93k, False: 33.6k]
  ------------------
 1268|  5.93k|            break;
 1269|  5.93k|        }
 1270|  39.5k|    }
 1271|  6.99k|    return it;
 1272|  6.99k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  14.0k|    {
  283|  14.0k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  14.0k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  14.0k|    {
  252|  14.0k|        constexpr iter_difference_t<I> zero{0};
  253|  14.0k|        iter_difference_t<I> counter{0};
  254|       |
  255|  42.8k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 29.6k, False: 13.2k]
  |  Branch (255:30): [True: 28.8k, False: 792]
  ------------------
  256|  28.8k|            ++i;
  257|  28.8k|            ++counter;
  258|  28.8k|        }
  259|       |
  260|  14.0k|        return counter;
  261|  14.0k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   943k|    {
 1989|   943k|        return !codepoint.empty();
 1990|   943k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|   543k|{
 2214|   543k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   543k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|   621k|{
 3098|   621k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 621k, False: 0]
  ------------------
 3099|   621k|        auto it = read_while_classic_space(range);
 3100|   621k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   621k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   621k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8.18k, False: 613k]
  |  |  ------------------
  ------------------
 3102|  8.18k|            return unexpected(e);
 3103|  8.18k|        }
 3104|       |
 3105|   613k|        return it;
 3106|   621k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   621k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|   621k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   621k|    else {
 2258|   621k|        auto it = range.begin();
 2259|       |
 2260|   621k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|   621k|            auto seg = get_contiguous_beginning(range);
 2262|   621k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|   621k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2263:17): [True: 77.6k, False: 543k]
  ------------------
 2264|  77.6k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|  77.6k|            }
 2266|   543k|            ranges::advance(it, seg.size());
 2267|   543k|        }
 2268|       |
 2269|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   621k|            return detail::is_cp_space(cp);
 2271|   621k|        });
 2272|   621k|    }
 2273|   621k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   543k|        : m_fptr([](storage fn,
  743|   543k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   543k|              cvref<T> obj = *get<T>(fn);
  745|   543k|              if constexpr (std::is_void_v<R>) {
  746|   543k|                  obj(static_cast<decltype(args)>(args)...);
  747|   543k|              }
  748|   543k|              else {
  749|   543k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   543k|              }
  751|   543k|          }),
  752|   543k|          m_storage(std::addressof(f))
  753|   543k|    {
  754|   543k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   936k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   936k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   936k|              else {
  749|   936k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   936k|              }
  751|   936k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   936k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   936k|        else if constexpr (std::is_object_v<T>) {
  688|   936k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   936k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|   936k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   936k|            return detail::is_cp_space(cp);
 2271|   936k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   543k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   543k|        {
  662|   543k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   507k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   507k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   507k|        auto beg = r.begin();
  991|   507k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 507k, False: 0]
  ------------------
  992|   507k|            return false;
  993|   507k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   507k|}
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_l:
 1955|  1.33M|{
 1956|  1.33M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  1.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|       |    if constexpr (ranges::sized_range<Range>) {
 1959|       |        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|       |        if (sz < count) {
 1961|       |            return unexpected(eof_error::eof);
 1962|       |        }
 1963|       |
 1964|       |        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|  1.33M|    else {
 1967|  1.33M|        auto it = range.begin();
 1968|  1.33M|        if (guaranteed_minimum_size(range) >= count) {
  ------------------
  |  Branch (1968:13): [True: 797k, False: 534k]
  ------------------
 1969|   797k|            return ranges::next(it, count);
 1970|   797k|        }
 1971|       |
 1972|  2.04M|        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
  ------------------
  |  Branch (1972:36): [True: 1.56M, False: 480k]
  ------------------
 1973|  1.56M|            if (it == range.end()) {
  ------------------
  |  Branch (1973:17): [True: 54.3k, False: 1.51M]
  ------------------
 1974|  54.3k|                return unexpected(eof_error::eof);
 1975|  54.3k|            }
 1976|  1.56M|        }
 1977|       |
 1978|   480k|        return it;
 1979|   534k|    }
 1980|  1.33M|}
_ZN3scn2v44impl23guaranteed_minimum_sizeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEmT_:
 1095|  1.33M|{
 1096|       |    if constexpr (ranges::sized_range<Range>) {
 1097|       |        return r.size();
 1098|       |    }
 1099|       |    else if constexpr (std::is_same_v<
 1100|       |                           ranges::const_iterator_t<Range>,
 1101|       |                           typename detail::basic_scan_buffer<
 1102|  1.33M|                               detail::char_t<Range>>::forward_iterator>) {
 1103|       |        if constexpr (ranges::common_range<Range>) {
 1104|       |            return static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1105|       |        }
 1106|  1.33M|        else {
 1107|  1.33M|            if (r.begin().stores_parent()) {
  ------------------
  |  Branch (1107:17): [True: 1.33M, False: 0]
  ------------------
 1108|  1.33M|                return static_cast<size_t>(
 1109|  1.33M|                    r.begin().parent()->chars_available() -
 1110|  1.33M|                    r.begin().position());
 1111|  1.33M|            }
 1112|      0|            return r.begin().contiguous_segment().size();
 1113|  1.33M|        }
 1114|       |    }
 1115|       |    else {
 1116|       |        return 0;
 1117|       |    }
 1118|  1.33M|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  3.71M|    {
  763|  3.71M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  3.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  3.71M|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.19M|        : m_fptr([](storage fn,
  743|  1.19M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.19M|              cvref<T> obj = *get<T>(fn);
  745|  1.19M|              if constexpr (std::is_void_v<R>) {
  746|  1.19M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.19M|              }
  748|  1.19M|              else {
  749|  1.19M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.19M|              }
  751|  1.19M|          }),
  752|  1.19M|          m_storage(std::addressof(f))
  753|  1.19M|    {
  754|  1.19M|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  1.85M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.85M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.85M|              else {
  749|  1.85M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.85M|              }
  751|  1.85M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  1.85M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.85M|        else if constexpr (std::is_object_v<T>) {
  688|  1.85M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.85M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.19M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.19M|        {
  662|  1.19M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6125|   370k|    {
 6126|   370k|        const bool need_skipped_width =
 6127|   370k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6127:13): [True: 0, False: 370k]
  |  Branch (6127:33): [True: 0, False: 370k]
  ------------------
 6128|   370k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6129|       |
 6130|       |        // Read prefix
 6131|   370k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6131:13): [True: 0, False: 370k]
  ------------------
 6132|   370k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 370k]
  ------------------
 6133|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6134|      0|                             need_skipped_width);
 6135|      0|        }
 6136|   370k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6136:13): [True: 370k, False: 0]
  |  Branch (6136:56): [True: 370k, False: 0]
  ------------------
 6137|       |            // Default alignment:
 6138|       |            // Skip preceding whitespace, if required by the reader
 6139|   370k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6139:17): [True: 0, False: 370k]
  ------------------
 6140|      0|                auto max_width_view = take_width(rng, specs.precision);
 6141|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|                                  .transform_error(make_eof_scan_error));
 6143|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6144|      0|            }
 6145|   738k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   370k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   370k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   370k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.96k, False: 367k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.96k|    }                                                  \
  |  |  |  | 3957|   370k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|   738k|                            make_eof_scan_error));
 6147|       |
 6148|   738k|            if (need_skipped_width) {
  ------------------
  |  Branch (6148:17): [True: 0, False: 367k]
  ------------------
 6149|      0|                return result_type{
 6150|      0|                    it,
 6151|      0|                    calculate_text_width(make_contiguous_buffer(
 6152|      0|                                             ranges::subrange{rng.begin(), it})
 6153|      0|                                             .view())};
 6154|      0|            }
 6155|   367k|            return result_type{it, 0};
 6156|   738k|        }
 6157|       |
 6158|      0|        return result_type{rng.begin(), 0};
 6159|   370k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|   893k|{
 2108|   893k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|   893k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|   893k|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|   893k|    else {
 2079|   893k|        auto first = range.begin();
 2080|  1.39M|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 1.39M, False: 3.40k]
  ------------------
 2081|  1.39M|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 890k, False: 502k]
  ------------------
 2082|   890k|                return first;
 2083|   890k|            }
 2084|  1.39M|        }
 2085|  3.40k|        return first;
 2086|   893k|    }
 2087|   893k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   646k|    {
  108|   646k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   646k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   646k|    {
   94|   646k|        iter_difference_t<I> counter{0};
   95|  1.74M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.10M, False: 646k]
  ------------------
   96|  1.10M|            ++i;
   97|  1.10M|            ++counter;
   98|  1.10M|        }
   99|   646k|        return counter;
  100|   646k|    }
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2ENS0_6detail10locale_refE:
 1878|   181k|    {
 1879|   181k|        auto stdloc = loc.get<std::locale>();
 1880|   181k|        const auto& numpunct = get_or_add_facet<std::numpunct<CharT>>(stdloc);
 1881|   181k|        grouping = numpunct.grouping();
 1882|   181k|        thousands_sep =
 1883|   181k|            grouping.length() != 0 ? numpunct.thousands_sep() : CharT{0};
  ------------------
  |  Branch (1883:13): [True: 0, False: 181k]
  ------------------
 1884|   181k|        decimal_point = numpunct.decimal_point();
 1885|   181k|    }
_ZN3scn2v44impl16get_or_add_facetINSt3__18numpunctIwEEEERKT_RNS3_6localeE:
 1815|   181k|{
 1816|   181k|    if (std::has_facet<Facet>(stdloc)) {
  ------------------
  |  Branch (1816:9): [True: 181k, False: 0]
  ------------------
 1817|   181k|        return std::use_facet<Facet>(stdloc);
 1818|   181k|    }
 1819|      0|    stdloc = std::locale(stdloc, new Facet{});
 1820|      0|    return std::use_facet<Facet>(stdloc);
 1821|   181k|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_:
 1944|  1.21M|{
 1945|  1.21M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.21k, False: 1.21M]
  |  |  ------------------
  ------------------
 1946|  2.21k|        return unexpected(e);
 1947|  2.21k|    }
 1948|       |
 1949|  1.21M|    return ranges::next(range.begin());
 1950|  1.21M|}
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  1.86M|{
  951|  1.86M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.86M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 6.19k, False: 1.85M]
  |  |  ------------------
  ------------------
  952|  6.19k|        return eof_error::eof;
  953|  6.19k|    }
  954|  1.85M|    return eof_error::good;
  955|  1.86M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  2.74M|{
  945|  2.74M|    return is_range_eof(r.begin(), r.end());
  946|  2.74M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  2.74M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  2.74M|    {
  938|  2.74M|        return begin == end;
  939|  2.74M|    }
  940|  2.74M|}
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_:
  295|  1.21M|    {
  296|  1.21M|        ++x;
  297|  1.21M|        return x;
  298|  1.21M|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSE_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESH_:
 3289|   517k|{
 3290|   517k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   517k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 511k, False: 5.90k]
  ------------------
 3292|   511k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 511k, False: 72]
  ------------------
 3293|   511k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   511k|        }
 3295|     72|        return unexpected(eof_error::eof);
 3296|   511k|    }
 3297|       |
 3298|  5.90k|    auto& it = *r;
 3299|  5.90k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 4.48k, False: 1.42k]
  ------------------
 3300|  4.48k|        return std::pair{it, sign_type::minus_sign};
 3301|  4.48k|    }
 3302|  1.42k|    return std::pair{it, sign_type::plus_sign};
 3303|  5.90k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2404|   842k|{
 2405|   842k|    auto it = read_code_unit(range);
 2406|   842k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   842k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.29k, False: 841k]
  |  |  ------------------
  ------------------
 2407|  1.29k|        return unexpected(make_eof_parse_error(it.error()));
 2408|  1.29k|    }
 2409|       |
 2410|  1.68M|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 1.68M, False: 820k]
  ------------------
 2411|  1.68M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 20.3k, False: 1.66M]
  ------------------
 2412|  20.3k|            return *it;
 2413|  20.3k|        }
 2414|  1.68M|    }
 2415|       |
 2416|   820k|    return unexpected(parse_error::error);
 2417|   841k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEE:
 2363|  1.33M|{
 2364|  1.33M|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  1.33M|    else {
 2377|  1.33M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.33M|            if (ch < 'A' || ch > 'Z') {
 2379|  1.33M|                return ch;
 2380|  1.33M|            }
 2381|  1.33M|            return static_cast<char_type>(ch +
 2382|  1.33M|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.33M|        };
 2384|       |
 2385|  1.33M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  1.33M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.33M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.33M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 54.3k, False: 1.27M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  54.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  54.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  54.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  54.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  54.3k|    }                                                  \
  |  |  |  | 3957|  1.33M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  1.27M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  1.27M|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  1.27M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.27M, False: 716]
  |  |  ------------------
  ------------------
 2390|  1.27M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  1.27M|                    return ascii_tolower(a) ==
 2392|  1.27M|                           static_cast<detail::char_t<Range>>(b);
 2393|  1.27M|                }))) {
 2394|  1.27M|            return unexpected(parse_error::error);
 2395|  1.27M|        }
 2396|       |
 2397|    716|        return it;
 2398|  1.27M|    }
 2399|  1.33M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NSE_17basic_string_viewIcNSE_11char_traitsIcEEEEENKUlwE_clEw:
 2377|  1.49M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.49M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 1.20M, False: 294k]
  |  Branch (2378:29): [True: 281k, False: 13.8k]
  ------------------
 2379|  1.48M|                return ch;
 2380|  1.48M|            }
 2381|  13.8k|            return static_cast<char_type>(ch +
 2382|  13.8k|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.49M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NDTcl4implISG_EEE4typeE:
 2278|   376k|{
 2279|   376k|    auto it = read_code_unit(range);
 2280|   376k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   376k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 912, False: 375k]
  |  |  ------------------
  ------------------
 2281|    912|        return unexpected(make_eof_parse_error(it.error()));
 2282|    912|    }
 2283|       |
 2284|   375k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 368k, False: 6.61k]
  |  |  ------------------
  ------------------
 2285|   375k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|   368k|        return unexpected(parse_error::error);
 2287|   368k|    }
 2288|       |
 2289|  6.61k|    return *it;
 2290|   375k|}
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_NS1_12function_refIFbNDTcl4implISG_EEE4typeEENS1_12fnref_detail11qual_fn_sigISP_E8functionEEE:
 2127|   893k|{
 2128|   893k|    auto it = read_while_code_unit(range, pred);
 2129|   893k|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 499k, False: 394k]
  ------------------
 2130|   499k|        return unexpected(parse_error::error);
 2131|   499k|    }
 2132|   394k|    return it;
 2133|   893k|}
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   372k|    {
 1720|   372k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   372k|                           ranges::common_range<Range>) {
 1737|   372k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   372k|            auto end_seg = range.end().contiguous_segment();
 1739|   372k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1039|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.8k, False: 354k]
  |  |  ------------------
  ------------------
 1740|   372k|                             detail::to_address(end_seg.end()))) {
 1741|  17.8k|                auto& str = m_storage.emplace();
 1742|  17.8k|                str.reserve(range.end().position() - range.begin().position());
 1743|  17.8k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  17.8k|                m_view = string_view_type{str};
 1745|  17.8k|                return;
 1746|  17.8k|            }
 1747|       |
 1748|   354k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   354k|                                                            end_seg.data());
 1750|   354k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   372k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  3.24M|    {
 1681|  3.24M|        return m_view;
 1682|  3.24M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|  2.01M|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6167|   263k|    {
 6168|   263k|        const bool need_skipped_width =
 6169|   263k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6169:13): [True: 0, False: 263k]
  |  Branch (6169:33): [True: 0, False: 263k]
  ------------------
 6170|   263k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6171|       |
 6172|   263k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6172:13): [True: 0, False: 263k]
  ------------------
 6173|   263k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 263k]
  ------------------
 6174|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6174:17): [True: 0, False: 0]
  ------------------
 6175|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6175:17): [True: 0, False: 0]
  ------------------
 6176|      0|                return result_type{rng.begin(), 0};
 6177|      0|            }
 6178|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6179|      0|                             specs.fill, need_skipped_width);
 6180|      0|        }
 6181|   263k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6181:13): [True: 263k, False: 0]
  ------------------
 6182|   263k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6182:13): [True: 0, False: 263k]
  ------------------
 6183|   263k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6183:15): [True: 0, False: 0]
  |  Branch (6183:35): [True: 0, False: 0]
  ------------------
 6184|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6184:15): [True: 0, False: 0]
  ------------------
 6185|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6185:15): [True: 0, False: 0]
  ------------------
 6186|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6186:17): [True: 0, False: 0]
  ------------------
 6187|      0|                const auto initial_width =
 6188|      0|                    specs.precision - prefix_width - value_width;
 6189|      0|                auto max_width_view = take_width(rng, initial_width);
 6190|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6191|      0|                                  .transform_error(make_eof_scan_error));
 6192|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6193|      0|            }
 6194|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|                            make_eof_scan_error));
 6196|       |
 6197|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|      0|                return result_type{
 6199|      0|                    it,
 6200|      0|                    calculate_text_width(make_contiguous_buffer(
 6201|      0|                                             ranges::subrange{rng.begin(), it})
 6202|      0|                                             .view())};
 6203|      0|            }
 6204|      0|            return result_type{it, 0};
 6205|      0|        }
 6206|   263k|        return result_type{rng.begin(), 0};
 6207|   263k|    }
_ZN3scn2v44impl25read_exactly_n_code_unitsINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_l:
 1955|  1.33M|{
 1956|  1.33M|    SCN_EXPECT(count >= 0);
  ------------------
  |  | 1104|  1.33M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.33M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1957|       |
 1958|  1.33M|    if constexpr (ranges::sized_range<Range>) {
 1959|  1.33M|        const auto sz = static_cast<std::ptrdiff_t>(range.size());
 1960|  1.33M|        if (sz < count) {
  ------------------
  |  Branch (1960:13): [True: 54.5k, False: 1.27M]
  ------------------
 1961|  54.5k|            return unexpected(eof_error::eof);
 1962|  54.5k|        }
 1963|       |
 1964|  1.27M|        return ranges::next(range.begin(), count);
 1965|       |    }
 1966|       |    else {
 1967|       |        auto it = range.begin();
 1968|       |        if (guaranteed_minimum_size(range) >= count) {
 1969|       |            return ranges::next(it, count);
 1970|       |        }
 1971|       |
 1972|       |        for (std::ptrdiff_t i = 0; i < count; ++i, (void)++it) {
 1973|       |            if (it == range.end()) {
 1974|       |                return unexpected(eof_error::eof);
 1975|       |            }
 1976|       |        }
 1977|       |
 1978|       |        return it;
 1979|       |    }
 1980|  1.33M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  2.18M|{
 1998|  2.18M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  2.18M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  2.18M|    auto it = range.begin();
 2002|  2.18M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  2.18M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.18M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  2.18M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 2.18M, False: 0]
  ------------------
 2011|  2.18M|        ++it;
 2012|  2.18M|        return {it, string_type(1, *range.begin())};
 2013|  2.18M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  2.18M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  3.52M|{
  945|  3.52M|    return is_range_eof(r.begin(), r.end());
  946|  3.52M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  3.52M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  3.52M|    {
  938|  3.52M|        return begin == end;
  939|  3.52M|    }
  940|  3.52M|}
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_sIPKwS7_EENSt3__19enable_ifIXsr3stdE15is_assignable_vIRT_T0_EEvE4typeESB_SC_NS0_6detail12priority_tagILm2EEE:
  189|   325k|    {
  190|   325k|        i = std::move(bound);
  191|   325k|    }
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  2.18M|    {
 1989|  2.18M|        return !codepoint.empty();
 1990|  2.18M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  1.34M|{
  951|  1.34M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.34M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 4.51k, False: 1.33M]
  |  |  ------------------
  ------------------
  952|  4.51k|        return eof_error::eof;
  953|  4.51k|    }
  954|  1.33M|    return eof_error::good;
  955|  1.34M|}
_ZN3scn2v44impl14read_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_:
 1944|   698k|{
 1945|   698k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   698k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 524, False: 697k]
  |  |  ------------------
  ------------------
 1946|    524|        return unexpected(e);
 1947|    524|    }
 1948|       |
 1949|   697k|    return ranges::next(range.begin());
 1950|   698k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_:
  295|   697k|    {
  296|   697k|        ++x;
  297|   697k|        return x;
  298|   697k|    }
_ZN3scn2v44impl18parse_numeric_signINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedINSt3__14pairIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSB_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESE_:
 3289|   508k|{
 3290|   508k|    auto r = read_one_of_code_unit(range, "+-");
 3291|   508k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 505k, False: 3.94k]
  ------------------
 3292|   505k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 505k, False: 24]
  ------------------
 3293|   505k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|   505k|        }
 3295|     24|        return unexpected(eof_error::eof);
 3296|   505k|    }
 3297|       |
 3298|  3.94k|    auto& it = *r;
 3299|  3.94k|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 2.70k, False: 1.24k]
  ------------------
 3300|  2.70k|        return std::pair{it, sign_type::minus_sign};
 3301|  2.70k|    }
 3302|  1.24k|    return std::pair{it, sign_type::plus_sign};
 3303|  3.94k|}
_ZN3scn2v44impl21read_one_of_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2404|   577k|{
 2405|   577k|    auto it = read_code_unit(range);
 2406|   577k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   577k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 290, False: 577k]
  |  |  ------------------
  ------------------
 2407|    290|        return unexpected(make_eof_parse_error(it.error()));
 2408|    290|    }
 2409|       |
 2410|  1.15M|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 1.15M, False: 568k]
  ------------------
 2411|  1.15M|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 9.18k, False: 1.14M]
  ------------------
 2412|  9.18k|            return *it;
 2413|  9.18k|        }
 2414|  1.15M|    }
 2415|       |
 2416|   568k|    return unexpected(parse_error::error);
 2417|   577k|}
_ZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEE:
 2363|  1.33M|{
 2364|  1.33M|    using char_type = detail::char_t<Range>;
 2365|       |
 2366|       |    if constexpr (ranges::contiguous_range<Range> &&
 2367|       |                  std::is_same_v<char_type, char>) {
 2368|       |        if (range.size() < str.size()) {
 2369|       |            return unexpected(make_eof_parse_error(eof_error::eof));
 2370|       |        }
 2371|       |        if (!fast_streq_nocase(range.data(), str.data(), str.size())) {
 2372|       |            return unexpected(parse_error::error);
 2373|       |        }
 2374|       |        return ranges::next(range.begin(), str.size());
 2375|       |    }
 2376|  1.33M|    else {
 2377|  1.33M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.33M|            if (ch < 'A' || ch > 'Z') {
 2379|  1.33M|                return ch;
 2380|  1.33M|            }
 2381|  1.33M|            return static_cast<char_type>(ch +
 2382|  1.33M|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.33M|        };
 2384|       |
 2385|  1.33M|        SCN_TRY(it, read_exactly_n_code_units(
  ------------------
  |  | 3958|  1.33M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  1.33M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  1.33M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  1.33M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 54.5k, False: 1.27M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  54.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  54.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  54.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  54.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  54.5k|    }                                                  \
  |  |  |  | 3957|  1.33M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  1.27M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2386|  1.27M|                        range, static_cast<std::ptrdiff_t>(str.size()))
 2387|  1.27M|                        .transform_error(make_eof_parse_error));
 2388|       |
 2389|  1.27M|        if (SCN_UNLIKELY(!std::equal(
  ------------------
  |  | 1039|  1.27M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.27M, False: 716]
  |  |  ------------------
  ------------------
 2390|  1.27M|                range.begin(), it, str.begin(), [&](auto a, auto b) {
 2391|  1.27M|                    return ascii_tolower(a) ==
 2392|  1.27M|                           static_cast<detail::char_t<Range>>(b);
 2393|  1.27M|                }))) {
 2394|  1.27M|            return unexpected(parse_error::error);
 2395|  1.27M|        }
 2396|       |
 2397|    716|        return it;
 2398|  1.27M|    }
 2399|  1.33M|}
_ZZN3scn2v44impl35read_matching_string_classic_nocaseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NSB_17basic_string_viewIcNSB_11char_traitsIcEEEEENKUlwE_clEw:
 2377|  1.49M|        auto ascii_tolower = [](char_type ch) -> char_type {
 2378|  1.49M|            if (ch < 'A' || ch > 'Z') {
  ------------------
  |  Branch (2378:17): [True: 1.20M, False: 295k]
  |  Branch (2378:29): [True: 281k, False: 13.9k]
  ------------------
 2379|  1.48M|                return ch;
 2380|  1.48M|            }
 2381|  13.9k|            return static_cast<char_type>(ch +
 2382|  13.9k|                                          static_cast<char_type>('a' - 'A'));
 2383|  1.49M|        };
_ZN3scn2v44impl23read_matching_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NDTcl4implISD_EEE4typeE:
 2278|   120k|{
 2279|   120k|    auto it = read_code_unit(range);
 2280|   120k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 234, False: 120k]
  |  |  ------------------
  ------------------
 2281|    234|        return unexpected(make_eof_parse_error(it.error()));
 2282|    234|    }
 2283|       |
 2284|   120k|    if (SCN_UNLIKELY(*range.begin() !=
  ------------------
  |  | 1039|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 117k, False: 2.48k]
  |  |  ------------------
  ------------------
 2285|   120k|                     static_cast<detail::char_t<Range>>(ch))) {
 2286|   117k|        return unexpected(parse_error::error);
 2287|   117k|    }
 2288|       |
 2289|  2.48k|    return *it;
 2290|   120k|}
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2107|   303k|{
 2108|   303k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|   303k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|   303k|{
 2075|   303k|    if constexpr (ranges::common_range<Range>) {
 2076|   303k|        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|       |    else {
 2079|       |        auto first = range.begin();
 2080|       |        for (; first != range.end(); ++first) {
 2081|       |            if (pred(*first)) {
 2082|       |                return first;
 2083|       |            }
 2084|       |        }
 2085|       |        return first;
 2086|       |    }
 2087|   303k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|   507k|{
 3098|   507k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 507k, False: 0]
  ------------------
 3099|   507k|        auto it = read_while_classic_space(range);
 3100|   507k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   507k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   507k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.48k, False: 503k]
  |  |  ------------------
  ------------------
 3102|  3.48k|            return unexpected(e);
 3103|  3.48k|        }
 3104|       |
 3105|   503k|        return it;
 3106|   507k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   507k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|   507k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   507k|    else {
 2258|   507k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|   507k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   507k|            return detail::is_cp_space(cp);
 2271|   507k|        });
 2272|   507k|    }
 2273|   507k|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2213|   507k|{
 2214|   507k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   507k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2192|  1.23M|{
 2193|  1.23M|    auto it = range.begin();
 2194|  2.66M|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 2.18M, False: 483k]
  ------------------
 2195|  2.18M|        const auto val =
 2196|  2.18M|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  2.18M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  2.18M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 2.18M, False: 0]
  |  |  ------------------
  ------------------
 2198|  2.18M|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  2.18M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  2.18M|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 751k, False: 1.43M]
  ------------------
 2201|   751k|                return it;
 2202|   751k|            }
 2203|  2.18M|        }
 2204|  1.43M|        it = val.iterator;
 2205|  1.43M|    }
 2206|       |
 2207|   483k|    return it;
 2208|  1.23M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|   507k|        : m_fptr([](storage fn,
  743|   507k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   507k|              cvref<T> obj = *get<T>(fn);
  745|   507k|              if constexpr (std::is_void_v<R>) {
  746|   507k|                  obj(static_cast<decltype(args)>(args)...);
  747|   507k|              }
  748|   507k|              else {
  749|   507k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   507k|              }
  751|   507k|          }),
  752|   507k|          m_storage(std::addressof(f))
  753|   507k|    {
  754|   507k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   886k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   886k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   886k|              else {
  749|   886k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   886k|              }
  751|   886k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   886k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   886k|        else if constexpr (std::is_object_v<T>) {
  688|   886k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   886k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2269|   886k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   886k|            return detail::is_cp_space(cp);
 2271|   886k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|   507k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   507k|        {
  662|   507k|        }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  1.16M|    {
  304|  1.16M|        ranges::advance(x, n);
  305|  1.16M|        return x;
  306|  1.16M|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|  1.16M|    {
  268|  1.16M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.16M|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|  1.16M|    {
  181|  3.74M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 2.57M, False: 1.16M]
  ------------------
  182|  2.57M|            ++i;
  183|  2.57M|        }
  184|  1.16M|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6277|   116k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|       |                          basic_contiguous_scan_context<char_type>>) {
 6282|       |            auto rd = make_reader<T, char_type>();
 6283|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6284|       |            return impl(rd, range, value);
 6285|       |        }
 6286|   116k|        else if constexpr (!detail::is_type_disabled<T>) {
 6287|   116k|            auto rd = make_reader<T, char_type>();
 6288|   116k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   116k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 116k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|       |
 6290|   116k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6290:17): [True: 116k, False: 0]
  |  Branch (6290:50): [True: 0, False: 0]
  ------------------
 6291|   116k|                specs.width != 0) {
  ------------------
  |  Branch (6291:17): [True: 0, False: 0]
  ------------------
 6292|   116k|                return impl(rd, range, value);
 6293|   116k|            }
 6294|       |
 6295|      0|            auto crange = get_as_contiguous(range);
 6296|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6297|      0|            return ranges::next(range.begin(),
 6298|      0|                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   116k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3187|   741k|    {
 3188|   741k|        reader_error_handler eh{};
 3189|   741k|        get_derived().check_specs_impl(specs, eh);
 3190|   741k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|   741k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 741k]
  |  |  ------------------
  ------------------
 3191|      0|            return detail::unexpected_scan_error(
 3192|      0|                scan_error::invalid_format_string, eh.m_msg);
 3193|      0|        }
 3194|   741k|        return {};
 3195|   741k|    }
_ZN3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE11get_derivedEv:
 3199|   741k|    {
 3200|   741k|        return static_cast<Derived&>(*this);
 3201|   741k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 4230|   741k|    {
 4231|   741k|        detail::check_float_type_specs(specs, eh);
 4232|   741k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6212|   116k|    {
 6213|   116k|        const bool need_skipped_width =
 6214|   116k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 116k]
  |  Branch (6214:33): [True: 0, False: 116k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   116k|        auto it = rng.begin();
 6218|   116k|        std::ptrdiff_t prefix_width = 0;
 6219|   116k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 116k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   116k|        else {
 6227|   116k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 918, False: 115k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    918|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    918|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    918|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    918|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    918|    }                                                  \
  |  |  |  | 3957|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   115k|            std::tie(it, prefix_width) = prefix_result;
 6229|   115k|        }
 6230|   115k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   115k|        std::ptrdiff_t value_width = 0;
 6234|   115k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 115k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   115k|        else {
 6250|   115k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   115k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   115k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   115k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 34.3k, False: 81.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  34.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  34.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  34.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  34.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  34.3k|    }                                                  \
  |  | 3957|   115k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   115k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|  81.6k|                                             specs, value, loc));
 6252|       |
 6253|  81.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 81.6k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|  81.6k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|  81.6k|        std::ptrdiff_t postfix_width = 0;
 6262|  81.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 81.2k, False: 414]
  ------------------
 6263|  81.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  81.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  81.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  81.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  81.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 81.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  81.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  81.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|  81.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|  81.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|  81.2k|                                 value_width));
 6267|  81.2k|            std::tie(it, postfix_width) = postfix_result;
 6268|  81.2k|        }
 6269|       |
 6270|  81.6k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  81.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 81.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|  81.6k|            specs, prefix_width, value_width, postfix_width));
 6272|  81.6k|        return it;
 6273|  81.6k|    }
_ZNK3scn2v44impl11reader_baseINS1_21reader_impl_for_floatIwEEwE19skip_ws_before_readEv:
 3182|  1.54M|    {
 3183|  1.54M|        return true;
 3184|  1.54M|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE11get_optionsERKNS0_6detail12format_specsE:
 4302|   735k|    {
 4303|   735k|        unsigned options{};
 4304|   735k|        if (specs.localized) {
  ------------------
  |  Branch (4304:13): [True: 181k, False: 554k]
  ------------------
 4305|   181k|            options |= float_reader_base::allow_thsep;
 4306|   181k|        }
 4307|       |
 4308|   735k|        SCN_GCC_COMPAT_PUSH
 4309|   735k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-enum")
 4310|       |
 4311|   735k|        switch (specs.type) {
 4312|   144k|            case detail::presentation_type::float_fixed:
  ------------------
  |  Branch (4312:13): [True: 144k, False: 590k]
  ------------------
 4313|   144k|                return options | float_reader_base::allow_fixed;
 4314|       |
 4315|  44.5k|            case detail::presentation_type::float_scientific:
  ------------------
  |  Branch (4315:13): [True: 44.5k, False: 690k]
  ------------------
 4316|  44.5k|                return options | float_reader_base::allow_scientific;
 4317|       |
 4318|   197k|            case detail::presentation_type::float_hex:
  ------------------
  |  Branch (4318:13): [True: 197k, False: 537k]
  ------------------
 4319|   197k|                return options | float_reader_base::allow_hex;
 4320|       |
 4321|   167k|            case detail::presentation_type::float_general:
  ------------------
  |  Branch (4321:13): [True: 167k, False: 568k]
  ------------------
 4322|   167k|                return options | float_reader_base::allow_scientific |
 4323|   167k|                       float_reader_base::allow_fixed;
 4324|       |
 4325|   181k|            case detail::presentation_type::none:
  ------------------
  |  Branch (4325:13): [True: 181k, False: 554k]
  ------------------
 4326|   181k|                return options | float_reader_base::allow_scientific |
 4327|   181k|                       float_reader_base::allow_fixed |
 4328|   181k|                       float_reader_base::allow_hex;
 4329|       |
 4330|      0|            default:
  ------------------
  |  Branch (4330:13): [True: 0, False: 735k]
  ------------------
 4331|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4332|   735k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4333|   735k|        }
 4334|       |
 4335|       |        SCN_GCC_COMPAT_POP  // -Wswitch-enum
 4336|   735k|    }
_ZN3scn2v44impl12float_readerIwEC2Ej:
 3733|   735k|    explicit constexpr float_reader(unsigned opt) : float_reader_base(opt) {}
_ZN3scn2v44impl35localized_number_formatting_optionsIwEC2Ev:
 1869|  1.00M|    localized_number_formatting_options() = default;
_ZN3scn2v44impl24contiguous_range_factoryIwEC2Ev:
 1630|  2.01M|    contiguous_range_factory() = default;
_ZN3scn2v44impl12float_readerIwE11parse_valueIfEENS0_13scan_expectedIlEERT_:
 3764|   249k|    {
 3765|   249k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   249k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   249k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3766|       |
 3767|   249k|        const std::ptrdiff_t sign_len =
 3768|   249k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3768:13): [True: 1.80k, False: 247k]
  ------------------
 3769|       |
 3770|   249k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   249k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   249k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   249k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   249k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 26.0k, False: 223k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  26.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  26.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  26.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  26.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  26.0k|    }                                                  \
  |  |  |  | 3957|   249k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   223k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3771|   223k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3772|   249k|    }
_ZN3scn2v44impl12float_readerIwE17handle_separatorsEv:
 4121|   814k|    {
 4122|   814k|        if (m_locale_options.thousands_sep == 0 &&
  ------------------
  |  Branch (4122:13): [True: 814k, False: 0]
  ------------------
 4123|   814k|            m_locale_options.decimal_point == CharT{'.'}) {
  ------------------
  |  Branch (4123:13): [True: 814k, False: 0]
  ------------------
 4124|   814k|            return;
 4125|   814k|        }
 4126|       |
 4127|      0|        auto& str = this->m_buffer.make_into_allocated_string();
 4128|      0|        if (m_locale_options.decimal_point != CharT{'.'}) {
  ------------------
  |  Branch (4128:13): [True: 0, False: 0]
  ------------------
 4129|      0|            for (auto& ch : str) {
  ------------------
  |  Branch (4129:27): [True: 0, False: 0]
  ------------------
 4130|      0|                if (ch == m_locale_options.decimal_point) {
  ------------------
  |  Branch (4130:21): [True: 0, False: 0]
  ------------------
 4131|      0|                    ch = CharT{'.'};
 4132|      0|                }
 4133|      0|            }
 4134|      0|        }
 4135|       |
 4136|      0|        if (m_locale_options.thousands_sep == 0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 0]
  ------------------
 4137|      0|            return;
 4138|      0|        }
 4139|       |
 4140|      0|        auto first =
 4141|      0|            std::find(str.begin(), str.end(), m_locale_options.thousands_sep);
 4142|      0|        if (first == str.end()) {
  ------------------
  |  Branch (4142:13): [True: 0, False: 0]
  ------------------
 4143|      0|            return;
 4144|      0|        }
 4145|       |
 4146|      0|        m_thsep_indices.push_back(
 4147|      0|            static_cast<char>(ranges::distance(str.begin(), first)));
 4148|       |
 4149|      0|        for (auto it = first; ++it != str.end();) {
  ------------------
  |  Branch (4149:31): [True: 0, False: 0]
  ------------------
 4150|      0|            if (*it != m_locale_options.thousands_sep) {
  ------------------
  |  Branch (4150:17): [True: 0, False: 0]
  ------------------
 4151|      0|                *first++ = std::move(*it);
 4152|      0|            }
 4153|      0|            else {
 4154|      0|                m_thsep_indices.push_back(
 4155|      0|                    static_cast<char>(ranges::distance(str.begin(), it)));
 4156|      0|            }
 4157|      0|        }
 4158|       |
 4159|      0|        str.erase(first, str.end());
 4160|      0|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|  1.64M|    {
 1686|  1.64M|        return m_storage.has_value();
 1687|  1.64M|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|   902k|    {
 1691|   902k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1104|   902k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   902k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|   902k|        return *m_storage;
 1693|   902k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4255|   115k|    {
 4256|   115k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   115k|#if !SCN_DISABLE_LOCALE
 4259|   115k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 26.9k, False: 89.0k]
  ------------------
 4260|  26.9k|            return read_impl<Range>(
 4261|  26.9k|                range, rd,
 4262|  26.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  26.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  26.9k|                },
 4265|  26.9k|                value, loc);
 4266|  26.9k|        }
 4267|  89.0k|#endif
 4268|       |
 4269|  89.0k|        return read_impl<Range>(
 4270|  89.0k|            range, rd,
 4271|  89.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|  89.0k|                return r.read_source(SCN_FWD(args)...);
 4273|  89.0k|            },
 4274|  89.0k|            value);
 4275|   115k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4291|   156k|    {
 4292|   156k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   156k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 42.9k, False: 113k]
  |  |  ------------------
  ------------------
 4294|  42.9k|            return unexpected(r.error());
 4295|  42.9k|        }
 4296|       |
 4297|   113k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   113k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   113k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   113k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.68k, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.68k|    }                                                  \
  |  |  |  | 3957|   113k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   111k|        return ranges::next(range.begin(), n);
 4299|   113k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EclESB_SH_SI_:
  762|   503k|    {
  763|   503k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|   503k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   503k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  26.9k|        : m_fptr([](storage fn,
  743|  26.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.9k|              cvref<T> obj = *get<T>(fn);
  745|  26.9k|              if constexpr (std::is_void_v<R>) {
  746|  26.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.9k|              }
  748|  26.9k|              else {
  749|  26.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.9k|              }
  751|  26.9k|          }),
  752|  26.9k|          m_storage(std::addressof(f))
  753|  26.9k|    {
  754|  26.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  26.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  26.9k|              else {
  749|  26.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.9k|              }
  751|  26.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  26.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  26.9k|        else if constexpr (std::is_object_v<T>) {
  688|  26.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  26.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4262|  26.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  26.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  26.9k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3752|  90.5k|    {
 3753|  90.5k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3754|  90.5k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|  90.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 90.5k]
  |  |  ------------------
  ------------------
 3755|      0|            m_locale_options.thousands_sep = CharT{0};
 3756|      0|        }
 3757|       |
 3758|  90.5k|        return read_source_impl(range);
 3759|  90.5k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3778|   503k|    {
 3779|   503k|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|   503k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   503k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   503k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   503k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 503k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   503k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   503k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3780|   503k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3781|   503k|        auto it = sign_result.first;
 3782|   503k|        m_sign = sign_result.second;
 3783|       |
 3784|   503k|        auto digits_begin = it;
 3785|   503k|        auto r = ranges::subrange{it, range.end()};
 3786|       |        if constexpr (ranges::contiguous_range<Range> &&
 3787|       |                      ranges::sized_range<Range>) {
 3788|       |            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
 3789|       |                             m_locale_options.decimal_point != CharT{'.'})) {
 3790|       |                SCN_TRY_ASSIGN(
 3791|       |                    it,
 3792|       |                    do_read_source_impl(
 3793|       |                        r,
 3794|       |                        [&](const auto& rr) { return read_regular_float(rr); },
 3795|       |                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3796|       |            }
 3797|       |            else {
 3798|       |                auto cb = [&](const auto& rr)
 3799|       |                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|       |                    auto res = read_all(rr);
 3801|       |                    if (SCN_UNLIKELY(res == r.begin())) {
 3802|       |                        return detail::unexpected_scan_error(
 3803|       |                            scan_error::invalid_scanned_value,
 3804|       |                            "Invalid float value");
 3805|       |                    }
 3806|       |                    return res;
 3807|       |                };
 3808|       |                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
 3809|       |            }
 3810|       |        }
 3811|   503k|        else {
 3812|   503k|            SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|   503k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   503k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   503k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 130k, False: 372k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|   130k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|   130k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|   130k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|   130k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|   130k|    }                                                  \
  |  | 3957|   503k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   503k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3813|   372k|                it,
 3814|   372k|                do_read_source_impl(
 3815|   372k|                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3816|   372k|                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3817|   372k|        }
 3818|       |
 3819|   503k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   503k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   503k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3820|       |
 3821|   372k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3821:13): [True: 372k, False: 0]
  |  Branch (3821:48): [True: 372k, False: 0]
  ------------------
 3822|   372k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3822:13): [True: 372k, False: 0]
  ------------------
 3823|   372k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3823:13): [True: 372k, False: 0]
  ------------------
 3824|   372k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3825|   372k|        }
 3826|       |
 3827|   372k|        handle_separators();
 3828|       |
 3829|   372k|        return it;
 3830|   503k|    }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEZNS3_16read_source_implISE_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_EUlRKSJ_E_ZNSF_ISE_EESO_SJ_EUlSQ_E0_EESO_SJ_OT0_OT1_:
 4064|   503k|    {
 4065|   503k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4066|   503k|        const bool allowed_nonhex =
 4067|   503k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4068|   503k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4069|       |
 4070|   503k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4070:39): [True: 503k, False: 0]
  |  Branch (4070:45): [True: 0, False: 503k]
  ------------------
 4071|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4072|      0|                scan_error::invalid_scanned_value,
 4073|      0|                "Invalid infinite floating-point value"));
 4074|      0|        }
 4075|   503k|        else if (r) {
  ------------------
  |  Branch (4075:18): [True: 0, False: 503k]
  ------------------
 4076|      0|            return *r;
 4077|      0|        }
 4078|       |
 4079|   503k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4079:39): [True: 503k, False: 0]
  |  Branch (4079:45): [True: 0, False: 503k]
  ------------------
 4080|      0|            return unexpected(r.error());
 4081|      0|        }
 4082|   503k|        else if (r) {
  ------------------
  |  Branch (4082:18): [True: 0, False: 503k]
  ------------------
 4083|      0|            return *r;
 4084|      0|        }
 4085|       |
 4086|   503k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4086:13): [True: 325k, False: 178k]
  |  Branch (4086:28): [True: 98.9k, False: 226k]
  ------------------
 4087|       |            // only hex allowed:
 4088|       |            // prefix "0x" allowed, not required
 4089|  98.9k|            auto it = range.begin();
 4090|       |
 4091|  98.9k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4091:22): [True: 216, False: 98.6k]
  ------------------
 4092|    216|                m_kind = float_kind::hex_with_prefix;
 4093|    216|                it = *r;
 4094|    216|            }
 4095|  98.6k|            else {
 4096|  98.6k|                m_kind = float_kind::hex_without_prefix;
 4097|  98.6k|            }
 4098|       |
 4099|  98.9k|            return read_hex(ranges::subrange{it, range.end()});
 4100|  98.9k|        }
 4101|   404k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4101:13): [True: 178k, False: 226k]
  |  Branch (4101:29): [True: 178k, False: 0]
  ------------------
 4102|       |            // only nonhex allowed:
 4103|       |            // no prefix allowed
 4104|   178k|            m_kind = float_kind::generic;
 4105|   178k|            return read_regular_float(range);
 4106|   178k|        }
 4107|       |        // both hex and nonhex allowed:
 4108|       |        // check for "0x" prefix -> hex,
 4109|       |        // regular otherwise
 4110|       |
 4111|   226k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 500, False: 225k]
  |  |  ------------------
  ------------------
 4112|    500|            m_kind = float_kind::hex_with_prefix;
 4113|    500|            return read_hex(ranges::subrange{*r, range.end()});
 4114|    500|        }
 4115|       |
 4116|   225k|        m_kind = float_kind::generic;
 4117|   225k|        return read_regular(range);
 4118|   226k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3872|   503k|    {
 3873|   503k|        auto it = range.begin();
 3874|   503k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3874:73): [True: 503k, False: 0]
  ------------------
 3875|   503k|            return unexpected(r.error());
 3876|   503k|        }
 3877|      0|        else {
 3878|      0|            it = *r;
 3879|      0|        }
 3880|       |
 3881|      0|        if (auto r = read_matching_string_classic_nocase(
 3882|      0|                ranges::subrange{it, range.end()}, "inity");
 3883|      0|            !r) {
  ------------------
  |  Branch (3883:13): [True: 0, False: 0]
  ------------------
 3884|      0|            m_kind = float_kind::inf_short;
 3885|      0|            return it;
 3886|      0|        }
 3887|      0|        else {
 3888|      0|            m_kind = float_kind::inf_long;
 3889|      0|            return *r;
 3890|      0|        }
 3891|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3895|   503k|    {
 3896|   503k|        auto it = range.begin();
 3897|   503k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3897:73): [True: 503k, False: 0]
  ------------------
 3898|   503k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|   503k|                scan_error::invalid_scanned_value,
 3900|   503k|                "Invalid floating-point NaN value"));
 3901|   503k|        }
 3902|      0|        else {
 3903|      0|            it = *r;
 3904|      0|        }
 3905|       |
 3906|      0|        if (auto r =
 3907|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3908|      0|            !r) {
  ------------------
  |  Branch (3908:13): [True: 0, False: 0]
  ------------------
 3909|      0|            m_kind = float_kind::nan_simple;
 3910|      0|            return it;
 3911|      0|        }
 3912|      0|        else {
 3913|      0|            it = *r;
 3914|      0|        }
 3915|       |
 3916|      0|        auto payload_beg_it = it;
 3917|      0|        it = read_while_code_unit(
 3918|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3919|      0|                return is_ascii_char(ch) &&
 3920|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3921|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3922|      0|            });
 3923|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3924|       |
 3925|      0|        m_kind = float_kind::nan_with_payload;
 3926|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3926:18): [True: 0, False: 0]
  ------------------
 3927|      0|                                             ')')) {
 3928|      0|            return *r;
 3929|      0|        }
 3930|      0|        return detail::unexpected_scan_error(
 3931|      0|            scan_error::invalid_scanned_value,
 3932|      0|            "Invalid floating-point NaN payload");
 3933|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3865|   325k|    {
 3866|   325k|        return read_matching_string_classic_nocase(range, "0x");
 3867|   325k|    }
_ZN3scn2v44impl12float_readerIwE13read_hexfloatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 3966|  99.4k|    {
 3967|  99.4k|        auto it = range.begin();
 3968|       |
 3969|  99.4k|        std::ptrdiff_t digits_count = 0;
 3970|  99.4k|        if (auto r = read_hex_digits(ranges::subrange{it, range.end()}, true);
 3971|  99.4k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  99.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 20.2k, False: 79.2k]
  |  |  ------------------
  ------------------
 3972|  20.2k|            return r.transform_error(map_parse_error_to_scan_error(
 3973|  20.2k|                scan_error::invalid_scanned_value,
 3974|  20.2k|                "Invalid hexadecimal floating-point value"));
 3975|  20.2k|        }
 3976|  79.2k|        else {
 3977|  79.2k|            digits_count += ranges::distance(it, *r);
 3978|  79.2k|            it = *r;
 3979|  79.2k|        }
 3980|       |
 3981|  79.2k|        m_integral_part_length = digits_count;
 3982|  79.2k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3982:18): [True: 1.21k, False: 77.9k]
  ------------------
 3983|  79.2k|                                             m_locale_options.decimal_point)) {
 3984|  1.21k|            it = *r;
 3985|  1.21k|        }
 3986|       |
 3987|  79.2k|        if (auto r =
  ------------------
  |  Branch (3987:18): [True: 1.01k, False: 78.1k]
  ------------------
 3988|  79.2k|                read_hex_digits(ranges::subrange{it, range.end()}, false)) {
 3989|  1.01k|            digits_count += ranges::distance(it, *r);
 3990|  1.01k|            it = *r;
 3991|  1.01k|        }
 3992|       |
 3993|  79.2k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|  79.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 79.2k]
  |  |  ------------------
  ------------------
 3994|      0|            return detail::unexpected_scan_error(
 3995|      0|                scan_error::invalid_scanned_value,
 3996|      0|                "No significand digits in hexfloat");
 3997|      0|        }
 3998|       |
 3999|  79.2k|        it = read_exponent(ranges::subrange{it, range.end()}, "pP");
 4000|       |
 4001|  79.2k|        return it;
 4002|  79.2k|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3850|   178k|    {
 3851|   178k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 178k]
  |  |  |  Branch (1039:45): [True: 0, False: 178k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3852|   178k|                         thsep_allowed)) {
 3853|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3854|      0|                return char_to_int(ch) < 16 ||
 3855|      0|                       ch == m_locale_options.thousands_sep;
 3856|      0|            });
 3857|      0|        }
 3858|       |
 3859|   178k|        return read_while1_code_unit(
 3860|   178k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
 3861|   178k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   178k|        : m_fptr([](storage fn,
  743|   178k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   178k|              cvref<T> obj = *get<T>(fn);
  745|   178k|              if constexpr (std::is_void_v<R>) {
  746|   178k|                  obj(static_cast<decltype(args)>(args)...);
  747|   178k|              }
  748|   178k|              else {
  749|   178k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   178k|              }
  751|   178k|          }),
  752|   178k|          m_storage(std::addressof(f))
  753|   178k|    {
  754|   178k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|   284k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   284k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   284k|              else {
  749|   284k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   284k|              }
  751|   284k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|   284k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   284k|        else if constexpr (std::is_object_v<T>) {
  688|   284k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   284k|    }
_ZZN3scn2v44impl12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3860|   284k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 16; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_hex_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   178k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   178k|        {
  662|   178k|        }
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEE:
 3938|   324k|    {
 3939|   324k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3939:18): [True: 14.4k, False: 310k]
  ------------------
 3940|  14.4k|            auto beg_exp_it = range.begin();
 3941|  14.4k|            auto it = *r;
 3942|       |
 3943|  14.4k|            if (auto r_sign =
  ------------------
  |  Branch (3943:22): [True: 14.3k, False: 72]
  ------------------
 3944|  14.4k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3945|  14.3k|                it = r_sign->first;
 3946|  14.3k|            }
 3947|       |
 3948|  14.4k|            if (auto r_exp = read_while1_code_unit(
 3949|  14.4k|                    ranges::subrange{it, range.end()},
 3950|  14.4k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3951|  14.4k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.28k, False: 13.1k]
  |  |  ------------------
  ------------------
 3952|  1.28k|                it = beg_exp_it;
 3953|  1.28k|            }
 3954|  13.1k|            else {
 3955|  13.1k|                it = *r_exp;
 3956|  13.1k|            }
 3957|       |
 3958|  14.4k|            return it;
 3959|  14.4k|        }
 3960|   310k|        return range.begin();
 3961|   324k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_:
  742|  14.4k|        : m_fptr([](storage fn,
  743|  14.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.4k|              cvref<T> obj = *get<T>(fn);
  745|  14.4k|              if constexpr (std::is_void_v<R>) {
  746|  14.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  14.4k|              }
  748|  14.4k|              else {
  749|  14.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.4k|              }
  751|  14.4k|          }),
  752|  14.4k|          m_storage(std::addressof(f))
  753|  14.4k|    {
  754|  14.4k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_SU_TnPNSJ_9enable_ifIXaaaasr6detailE11is_not_selfISL_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSW_EEvE4typeELPv0EEEOSL_ENKUlNS1_12fnref_detail4base7storageEwE_clES15_w:
  743|  42.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  42.8k|              else {
  749|  42.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.8k|              }
  751|  42.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESK_NSI_17basic_string_viewIcNSI_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  42.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  42.8k|        else if constexpr (std::is_object_v<T>) {
  688|  42.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  42.8k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEENKUlwE_clEw:
 3950|  42.8k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESL_NSJ_17basic_string_viewIcNSJ_11char_traitsIcEEEEEUlwE_TnPNSJ_9enable_ifIXsr3stdE11is_object_vISL_EEvE4typeELPv0EEEPSL_:
  660|  14.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  14.4k|        {
  662|  14.4k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_:
 4007|   404k|    {
 4008|   404k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4009|   404k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4009:35): [True: 331k, False: 72.3k]
  |  Branch (4009:50): [True: 22.2k, False: 309k]
  ------------------
 4010|       |
 4011|   404k|        auto it = ranges::begin(range);
 4012|   404k|        std::ptrdiff_t digits_count = 0;
 4013|       |
 4014|   404k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4015|   404k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   404k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 107k, False: 296k]
  |  |  ------------------
  ------------------
 4016|   107k|            return r.transform_error(
 4017|   107k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4018|   107k|                                              "Invalid floating-point value"));
 4019|   107k|        }
 4020|   296k|        else {
 4021|   296k|            digits_count += ranges::distance(it, *r);
 4022|   296k|            it = *r;
 4023|   296k|        }
 4024|       |
 4025|   296k|        m_integral_part_length = digits_count;
 4026|   296k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4026:18): [True: 5.40k, False: 291k]
  ------------------
 4027|   296k|                                             m_locale_options.decimal_point)) {
 4028|  5.40k|            it = *r;
 4029|  5.40k|        }
 4030|       |
 4031|   296k|        if (auto r =
  ------------------
  |  Branch (4031:18): [True: 4.51k, False: 292k]
  ------------------
 4032|   296k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4033|  4.51k|            digits_count += ranges::distance(it, *r);
 4034|  4.51k|            it = *r;
 4035|  4.51k|        }
 4036|       |
 4037|   296k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 296k]
  |  |  ------------------
  ------------------
 4038|      0|            return detail::unexpected_scan_error(
 4039|      0|                scan_error::invalid_scanned_value,
 4040|      0|                "No significand digits in float");
 4041|      0|        }
 4042|       |
 4043|   296k|        auto beg_exp_it = it;
 4044|   296k|        if (allowed_exp) {
  ------------------
  |  Branch (4044:13): [True: 245k, False: 51.5k]
  ------------------
 4045|   245k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4046|   245k|        }
 4047|   296k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4047:13): [True: 4.96k, False: 291k]
  |  Branch (4047:29): [True: 3.48k, False: 1.48k]
  ------------------
 4048|  3.48k|            return detail::unexpected_scan_error(
 4049|  3.48k|                scan_error::invalid_scanned_value,
 4050|  3.48k|                "No exponent given to scientific float");
 4051|  3.48k|        }
 4052|       |
 4053|   293k|        m_kind =
 4054|   293k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4054:13): [True: 280k, False: 12.9k]
  ------------------
 4055|       |
 4056|   293k|        return it;
 4057|   296k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_b:
 3835|   700k|    {
 3836|   700k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   700k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 700k]
  |  |  |  Branch (1039:45): [True: 0, False: 700k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3837|   700k|                         thsep_allowed)) {
 3838|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3839|      0|                return char_to_int(ch) < 10 ||
 3840|      0|                       ch == m_locale_options.thousands_sep;
 3841|      0|            });
 3842|      0|        }
 3843|       |
 3844|   700k|        return read_while1_code_unit(
 3845|   700k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3846|   700k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_:
  742|   700k|        : m_fptr([](storage fn,
  743|   700k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   700k|              cvref<T> obj = *get<T>(fn);
  745|   700k|              if constexpr (std::is_void_v<R>) {
  746|   700k|                  obj(static_cast<decltype(args)>(args)...);
  747|   700k|              }
  748|   700k|              else {
  749|   700k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   700k|              }
  751|   700k|          }),
  752|   700k|          m_storage(std::addressof(f))
  753|   700k|    {
  754|   700k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_SS_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  1.06M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.06M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.06M|              else {
  749|  1.06M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.06M|              }
  751|  1.06M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_bEUlwE0_EEDaNS3_7storageE:
  683|  1.06M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.06M|        else if constexpr (std::is_object_v<T>) {
  688|  1.06M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.06M|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bENKUlwE0_clEw:
 3845|  1.06M|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_bEUlwE0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|   700k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   700k|        {
  662|   700k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSG_:
 1675|   372k|    {
 1676|   372k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   372k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   372k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  26.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  26.9k|        {
  662|  26.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  89.0k|        : m_fptr([](storage fn,
  743|  89.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.0k|              cvref<T> obj = *get<T>(fn);
  745|  89.0k|              if constexpr (std::is_void_v<R>) {
  746|  89.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  89.0k|              }
  748|  89.0k|              else {
  749|  89.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.0k|              }
  751|  89.0k|          }),
  752|  89.0k|          m_storage(std::addressof(f))
  753|  89.0k|    {
  754|  89.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  89.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  89.0k|              else {
  749|  89.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.0k|              }
  751|  89.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  89.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  89.0k|        else if constexpr (std::is_object_v<T>) {
  688|  89.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  89.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4271|  89.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|  89.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  89.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|  89.0k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS9_10locale_refE:
 3738|   412k|    {
 3739|   412k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|   412k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 412k]
  |  |  ------------------
  ------------------
 3740|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3741|      0|                classic_with_thsep_tag{}};
 3742|      0|        }
 3743|       |
 3744|   412k|        return read_source_impl(range);
 3745|   412k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  89.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  89.0k|        {
  662|  89.0k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4255|   116k|    {
 4256|   116k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   116k|#if !SCN_DISABLE_LOCALE
 4259|   116k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 26.9k, False: 89.0k]
  ------------------
 4260|  26.9k|            return read_impl<Range>(
 4261|  26.9k|                range, rd,
 4262|  26.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  26.9k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  26.9k|                },
 4265|  26.9k|                value, loc);
 4266|  26.9k|        }
 4267|  89.0k|#endif
 4268|       |
 4269|  89.0k|        return read_impl<Range>(
 4270|  89.0k|            range, rd,
 4271|  89.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|  89.0k|                return r.read_source(SCN_FWD(args)...);
 4273|  89.0k|            },
 4274|  89.0k|            value);
 4275|   116k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4291|   156k|    {
 4292|   156k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   156k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 20.2k, False: 136k]
  |  |  ------------------
  ------------------
 4294|  20.2k|            return unexpected(r.error());
 4295|  20.2k|        }
 4296|       |
 4297|   136k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   136k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 24.3k, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  24.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  24.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  24.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  24.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  24.3k|    }                                                  \
  |  |  |  | 3957|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   111k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   111k|        return ranges::next(range.begin(), n);
 4299|   136k|    }
_ZNK3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EclES9_SE_SG_:
  762|   503k|    {
  763|   503k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|   503k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   503k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  26.9k|        : m_fptr([](storage fn,
  743|  26.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.9k|              cvref<T> obj = *get<T>(fn);
  745|  26.9k|              if constexpr (std::is_void_v<R>) {
  746|  26.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  26.9k|              }
  748|  26.9k|              else {
  749|  26.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.9k|              }
  751|  26.9k|          }),
  752|  26.9k|          m_storage(std::addressof(f))
  753|  26.9k|    {
  754|  26.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  26.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  26.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  26.9k|              else {
  749|  26.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  26.9k|              }
  751|  26.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  26.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  26.9k|        else if constexpr (std::is_object_v<T>) {
  688|  26.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  26.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4262|  26.9k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  26.9k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  26.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  26.9k|                },
_ZN3scn2v44impl12float_readerIwE21read_source_localizedINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3752|  90.6k|    {
 3753|  90.6k|        m_locale_options = localized_number_formatting_options<CharT>{loc};
 3754|  90.6k|        if (SCN_LIKELY((m_options & float_reader_base::allow_thsep) == 0)) {
  ------------------
  |  | 1038|  90.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 90.6k]
  |  |  ------------------
  ------------------
 3755|      0|            m_locale_options.thousands_sep = CharT{0};
 3756|      0|        }
 3757|       |
 3758|  90.6k|        return read_source_impl(range);
 3759|  90.6k|    }
_ZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3778|   503k|    {
 3779|   503k|        SCN_TRY(sign_result,
  ------------------
  |  | 3958|   503k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   503k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   503k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   503k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 503k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   503k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   503k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3780|   503k|                parse_numeric_sign(range).transform_error(make_eof_scan_error));
 3781|   503k|        auto it = sign_result.first;
 3782|   503k|        m_sign = sign_result.second;
 3783|       |
 3784|   503k|        auto digits_begin = it;
 3785|   503k|        auto r = ranges::subrange{it, range.end()};
 3786|       |        if constexpr (ranges::contiguous_range<Range> &&
 3787|   503k|                      ranges::sized_range<Range>) {
 3788|   503k|            if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 ||
  ------------------
  |  | 1039|  1.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 503k]
  |  |  |  Branch (1039:45): [True: 0, False: 503k]
  |  |  |  Branch (1039:45): [True: 0, False: 503k]
  |  |  ------------------
  ------------------
 3789|   503k|                             m_locale_options.decimal_point != CharT{'.'})) {
 3790|      0|                SCN_TRY_ASSIGN(
  ------------------
  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|      0|    }                                                  \
  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3791|      0|                    it,
 3792|      0|                    do_read_source_impl(
 3793|      0|                        r,
 3794|      0|                        [&](const auto& rr) { return read_regular_float(rr); },
 3795|      0|                        [&](const auto& rr) { return read_hexfloat(rr); }));
 3796|      0|            }
 3797|   503k|            else {
 3798|   503k|                auto cb = [&](const auto& rr)
 3799|   503k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|   503k|                    auto res = read_all(rr);
 3801|   503k|                    if (SCN_UNLIKELY(res == r.begin())) {
 3802|   503k|                        return detail::unexpected_scan_error(
 3803|   503k|                            scan_error::invalid_scanned_value,
 3804|   503k|                            "Invalid float value");
 3805|   503k|                    }
 3806|   503k|                    return res;
 3807|   503k|                };
 3808|   503k|                SCN_TRY_ASSIGN(it, do_read_source_impl(r, cb, cb));
  ------------------
  |  | 3953|   503k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   503k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   503k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 61.5k, False: 442k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  61.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  61.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  61.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  61.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  61.5k|    }                                                  \
  |  | 3957|   503k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   503k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 3809|   442k|            }
 3810|       |        }
 3811|       |        else {
 3812|       |            SCN_TRY_ASSIGN(
 3813|       |                it,
 3814|       |                do_read_source_impl(
 3815|       |                    r, [&](const auto& rr) { return read_regular_float(rr); },
 3816|       |                    [&](const auto& rr) { return read_hexfloat(rr); }));
 3817|       |        }
 3818|       |
 3819|   503k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   503k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   503k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3820|       |
 3821|   442k|        if (m_kind != float_kind::inf_short && m_kind != float_kind::inf_long &&
  ------------------
  |  Branch (3821:13): [True: 442k, False: 0]
  |  Branch (3821:48): [True: 442k, False: 0]
  ------------------
 3822|   442k|            m_kind != float_kind::nan_simple &&
  ------------------
  |  Branch (3822:13): [True: 442k, False: 0]
  ------------------
 3823|   442k|            m_kind != float_kind::nan_with_payload) {
  ------------------
  |  Branch (3823:13): [True: 442k, False: 0]
  ------------------
 3824|   442k|            this->m_buffer.assign(ranges::subrange{digits_begin, it});
 3825|   442k|        }
 3826|       |
 3827|   442k|        handle_separators();
 3828|       |
 3829|   442k|        return it;
 3830|   503k|    }
_ZN3scn2v44impl12float_readerIwE8read_infINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3872|   503k|    {
 3873|   503k|        auto it = range.begin();
 3874|   503k|        if (auto r = read_matching_string_classic_nocase(range, "inf"); !r) {
  ------------------
  |  Branch (3874:73): [True: 503k, False: 0]
  ------------------
 3875|   503k|            return unexpected(r.error());
 3876|   503k|        }
 3877|      0|        else {
 3878|      0|            it = *r;
 3879|      0|        }
 3880|       |
 3881|      0|        if (auto r = read_matching_string_classic_nocase(
 3882|      0|                ranges::subrange{it, range.end()}, "inity");
 3883|      0|            !r) {
  ------------------
  |  Branch (3883:13): [True: 0, False: 0]
  ------------------
 3884|      0|            m_kind = float_kind::inf_short;
 3885|      0|            return it;
 3886|      0|        }
 3887|      0|        else {
 3888|      0|            m_kind = float_kind::inf_long;
 3889|      0|            return *r;
 3890|      0|        }
 3891|      0|    }
_ZN3scn2v44impl12float_readerIwE8read_nanINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3895|   503k|    {
 3896|   503k|        auto it = range.begin();
 3897|   503k|        if (auto r = read_matching_string_classic_nocase(range, "nan"); !r) {
  ------------------
  |  Branch (3897:73): [True: 503k, False: 0]
  ------------------
 3898|   503k|            return r.transform_error(map_parse_error_to_scan_error(
 3899|   503k|                scan_error::invalid_scanned_value,
 3900|   503k|                "Invalid floating-point NaN value"));
 3901|   503k|        }
 3902|      0|        else {
 3903|      0|            it = *r;
 3904|      0|        }
 3905|       |
 3906|      0|        if (auto r =
 3907|      0|                read_matching_code_unit(ranges::subrange{it, range.end()}, '(');
 3908|      0|            !r) {
  ------------------
  |  Branch (3908:13): [True: 0, False: 0]
  ------------------
 3909|      0|            m_kind = float_kind::nan_simple;
 3910|      0|            return it;
 3911|      0|        }
 3912|      0|        else {
 3913|      0|            it = *r;
 3914|      0|        }
 3915|       |
 3916|      0|        auto payload_beg_it = it;
 3917|      0|        it = read_while_code_unit(
 3918|      0|            ranges::subrange{it, range.end()}, [](char_type ch) noexcept {
 3919|      0|                return is_ascii_char(ch) &&
 3920|      0|                       ((ch >= '0' && ch <= '9') || (ch >= 'a' && ch <= 'z') ||
 3921|      0|                        (ch >= 'A' && ch <= 'Z') || ch == '_');
 3922|      0|            });
 3923|      0|        m_nan_payload_buffer.assign(ranges::subrange{payload_beg_it, it});
 3924|       |
 3925|      0|        m_kind = float_kind::nan_with_payload;
 3926|      0|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (3926:18): [True: 0, False: 0]
  ------------------
 3927|      0|                                             ')')) {
 3928|      0|            return *r;
 3929|      0|        }
 3930|      0|        return detail::unexpected_scan_error(
 3931|      0|            scan_error::invalid_scanned_value,
 3932|      0|            "Invalid floating-point NaN payload");
 3933|      0|    }
_ZN3scn2v44impl12float_readerIwE15read_hex_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 3865|   325k|    {
 3866|   325k|        return read_matching_string_classic_nocase(range, "0x");
 3867|   325k|    }
_ZN3scn2v44impl21read_while1_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_14parse_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_NS1_12function_refIFbNDTcl4implISD_EEE4typeEENS1_12fnref_detail11qual_fn_sigISM_E8functionEEE:
 2127|   303k|{
 2128|   303k|    auto it = read_while_code_unit(range, pred);
 2129|   303k|    if (it == range.begin()) {
  ------------------
  |  Branch (2129:9): [True: 176k, False: 127k]
  ------------------
 2130|   176k|        return unexpected(parse_error::error);
 2131|   176k|    }
 2132|   127k|    return it;
 2133|   303k|}
_ZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEE:
 3938|  68.7k|    {
 3939|  68.7k|        if (auto r = read_one_of_code_unit(range, exp)) {
  ------------------
  |  Branch (3939:18): [True: 5.23k, False: 63.4k]
  ------------------
 3940|  5.23k|            auto beg_exp_it = range.begin();
 3941|  5.23k|            auto it = *r;
 3942|       |
 3943|  5.23k|            if (auto r_sign =
  ------------------
  |  Branch (3943:22): [True: 5.21k, False: 24]
  ------------------
 3944|  5.23k|                    parse_numeric_sign(ranges::subrange{it, range.end()})) {
 3945|  5.21k|                it = r_sign->first;
 3946|  5.21k|            }
 3947|       |
 3948|  5.23k|            if (auto r_exp = read_while1_code_unit(
 3949|  5.23k|                    ranges::subrange{it, range.end()},
 3950|  5.23k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3951|  5.23k|                SCN_UNLIKELY(!r_exp)) {
  ------------------
  |  | 1039|  5.23k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 488, False: 4.75k]
  |  |  ------------------
  ------------------
 3952|    488|                it = beg_exp_it;
 3953|    488|            }
 3954|  4.75k|            else {
 3955|  4.75k|                it = *r_exp;
 3956|  4.75k|            }
 3957|       |
 3958|  5.23k|            return it;
 3959|  5.23k|        }
 3960|  63.4k|        return range.begin();
 3961|  68.7k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_:
  742|  5.23k|        : m_fptr([](storage fn,
  743|  5.23k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.23k|              cvref<T> obj = *get<T>(fn);
  745|  5.23k|              if constexpr (std::is_void_v<R>) {
  746|  5.23k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.23k|              }
  748|  5.23k|              else {
  749|  5.23k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.23k|              }
  751|  5.23k|          }),
  752|  5.23k|          m_storage(std::addressof(f))
  753|  5.23k|    {
  754|  5.23k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_SR_TnPNSG_9enable_ifIXaaaasr6detailE11is_not_selfISI_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRST_EEvE4typeELPv0EEEOSI_ENKUlNS1_12fnref_detail4base7storageEwE_clES12_w:
  743|  15.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.1k|              else {
  749|  15.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.1k|              }
  751|  15.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEEDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESH_NSF_17basic_string_viewIcNSF_11char_traitsIcEEEEEUlwE_EEDaNS3_7storageE:
  683|  15.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  15.1k|        else if constexpr (std::is_object_v<T>) {
  688|  15.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.1k|    }
_ZZN3scn2v44impl12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESE_NSC_17basic_string_viewIcNSC_11char_traitsIcEEEEENKUlwE_clEw:
 3950|  15.1k|                    [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE13read_exponentINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEEDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_NSG_17basic_string_viewIcNSG_11char_traitsIcEEEEEUlwE_TnPNSG_9enable_ifIXsr3stdE11is_object_vISI_EEvE4typeELPv0EEEPSI_:
  660|  5.23k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.23k|        {
  662|  5.23k|        }
_ZN3scn2v44impl12float_readerIwE18read_regular_floatINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_:
 4007|   178k|    {
 4008|   178k|        const bool allowed_exp = (m_options & allow_scientific) != 0;
 4009|   178k|        const bool required_exp = allowed_exp && (m_options & allow_fixed) == 0;
  ------------------
  |  Branch (4009:35): [True: 105k, False: 72.3k]
  |  Branch (4009:50): [True: 22.2k, False: 83.5k]
  ------------------
 4010|       |
 4011|   178k|        auto it = ranges::begin(range);
 4012|   178k|        std::ptrdiff_t digits_count = 0;
 4013|       |
 4014|   178k|        if (auto r = read_dec_digits(ranges::subrange{it, range.end()}, true);
 4015|   178k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   178k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 57.8k, False: 120k]
  |  |  ------------------
  ------------------
 4016|  57.8k|            return r.transform_error(
 4017|  57.8k|                map_parse_error_to_scan_error(scan_error::invalid_scanned_value,
 4018|  57.8k|                                              "Invalid floating-point value"));
 4019|  57.8k|        }
 4020|   120k|        else {
 4021|   120k|            digits_count += ranges::distance(it, *r);
 4022|   120k|            it = *r;
 4023|   120k|        }
 4024|       |
 4025|   120k|        m_integral_part_length = digits_count;
 4026|   120k|        if (auto r = read_matching_code_unit(ranges::subrange{it, range.end()},
  ------------------
  |  Branch (4026:18): [True: 2.48k, False: 117k]
  ------------------
 4027|   120k|                                             m_locale_options.decimal_point)) {
 4028|  2.48k|            it = *r;
 4029|  2.48k|        }
 4030|       |
 4031|   120k|        if (auto r =
  ------------------
  |  Branch (4031:18): [True: 2.05k, False: 118k]
  ------------------
 4032|   120k|                read_dec_digits(ranges::subrange{it, range.end()}, false)) {
 4033|  2.05k|            digits_count += ranges::distance(it, *r);
 4034|  2.05k|            it = *r;
 4035|  2.05k|        }
 4036|       |
 4037|   120k|        if (SCN_UNLIKELY(digits_count == 0)) {
  ------------------
  |  | 1039|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 120k]
  |  |  ------------------
  ------------------
 4038|      0|            return detail::unexpected_scan_error(
 4039|      0|                scan_error::invalid_scanned_value,
 4040|      0|                "No significand digits in float");
 4041|      0|        }
 4042|       |
 4043|   120k|        auto beg_exp_it = it;
 4044|   120k|        if (allowed_exp) {
  ------------------
  |  Branch (4044:13): [True: 68.7k, False: 51.5k]
  ------------------
 4045|  68.7k|            it = read_exponent(ranges::subrange{it, range.end()}, "eE");
 4046|  68.7k|        }
 4047|   120k|        if (required_exp && beg_exp_it == it) {
  ------------------
  |  Branch (4047:13): [True: 4.96k, False: 115k]
  |  Branch (4047:29): [True: 3.48k, False: 1.48k]
  ------------------
 4048|  3.48k|            return detail::unexpected_scan_error(
 4049|  3.48k|                scan_error::invalid_scanned_value,
 4050|  3.48k|                "No exponent given to scientific float");
 4051|  3.48k|        }
 4052|       |
 4053|   116k|        m_kind =
 4054|   116k|            (beg_exp_it == it) ? float_kind::fixed : float_kind::scientific;
  ------------------
  |  Branch (4054:13): [True: 112k, False: 4.75k]
  ------------------
 4055|       |
 4056|   116k|        return it;
 4057|   120k|    }
_ZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_b:
 3835|   298k|    {
 3836|   298k|        if (SCN_UNLIKELY(m_locale_options.thousands_sep != 0 &&
  ------------------
  |  | 1039|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 298k]
  |  |  |  Branch (1039:45): [True: 0, False: 298k]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 3837|   298k|                         thsep_allowed)) {
 3838|      0|            return read_while1_code_unit(range, [&](char_type ch) noexcept {
 3839|      0|                return char_to_int(ch) < 10 ||
 3840|      0|                       ch == m_locale_options.thousands_sep;
 3841|      0|            });
 3842|      0|        }
 3843|       |
 3844|   298k|        return read_while1_code_unit(
 3845|   298k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
 3846|   298k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_:
  742|   298k|        : m_fptr([](storage fn,
  743|   298k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   298k|              cvref<T> obj = *get<T>(fn);
  745|   298k|              if constexpr (std::is_void_v<R>) {
  746|   298k|                  obj(static_cast<decltype(args)>(args)...);
  747|   298k|              }
  748|   298k|              else {
  749|   298k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   298k|              }
  751|   298k|          }),
  752|   298k|          m_storage(std::addressof(f))
  753|   298k|    {
  754|   298k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_SP_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSR_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|   450k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   450k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   450k|              else {
  749|   450k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   450k|              }
  751|   450k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS1_14parse_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_bEUlwE0_EEDaNS3_7storageE:
  683|   450k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   450k|        else if constexpr (std::is_object_v<T>) {
  688|   450k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   450k|    }
_ZZN3scn2v44impl12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS1_14parse_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_bENKUlwE0_clEw:
 3845|   450k|            range, [](char_type ch) noexcept { return char_to_int(ch) < 10; });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_12float_readerIwE15read_dec_digitsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS1_14parse_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_bEUlwE0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   298k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   298k|        {
  662|   298k|        }
_ZN3scn2v44impl12float_readerIwE19do_read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EERZNS3_16read_source_implISB_EENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_EUlRKSG_E1_SP_EESL_SG_OT0_OT1_:
 4064|   503k|    {
 4065|   503k|        const bool allowed_hex = (m_options & allow_hex) != 0;
 4066|   503k|        const bool allowed_nonhex =
 4067|   503k|            (m_options & ~static_cast<unsigned>(allow_thsep) &
 4068|   503k|             ~static_cast<unsigned>(allow_hex)) != 0;
 4069|       |
 4070|   503k|        if (auto r = read_inf(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4070:39): [True: 503k, False: 0]
  |  Branch (4070:45): [True: 0, False: 503k]
  ------------------
 4071|      0|            return r.transform_error(map_parse_error_to_scan_error(
 4072|      0|                scan_error::invalid_scanned_value,
 4073|      0|                "Invalid infinite floating-point value"));
 4074|      0|        }
 4075|   503k|        else if (r) {
  ------------------
  |  Branch (4075:18): [True: 0, False: 503k]
  ------------------
 4076|      0|            return *r;
 4077|      0|        }
 4078|       |
 4079|   503k|        if (auto r = read_nan(range); !r && m_kind != float_kind::tbd) {
  ------------------
  |  Branch (4079:39): [True: 503k, False: 0]
  |  Branch (4079:45): [True: 0, False: 503k]
  ------------------
 4080|      0|            return unexpected(r.error());
 4081|      0|        }
 4082|   503k|        else if (r) {
  ------------------
  |  Branch (4082:18): [True: 0, False: 503k]
  ------------------
 4083|      0|            return *r;
 4084|      0|        }
 4085|       |
 4086|   503k|        if (allowed_hex && !allowed_nonhex) {
  ------------------
  |  Branch (4086:13): [True: 325k, False: 178k]
  |  Branch (4086:28): [True: 99.0k, False: 226k]
  ------------------
 4087|       |            // only hex allowed:
 4088|       |            // prefix "0x" allowed, not required
 4089|  99.0k|            auto it = range.begin();
 4090|       |
 4091|  99.0k|            if (auto r = read_hex_prefix(range)) {
  ------------------
  |  Branch (4091:22): [True: 216, False: 98.7k]
  ------------------
 4092|    216|                m_kind = float_kind::hex_with_prefix;
 4093|    216|                it = *r;
 4094|    216|            }
 4095|  98.7k|            else {
 4096|  98.7k|                m_kind = float_kind::hex_without_prefix;
 4097|  98.7k|            }
 4098|       |
 4099|  99.0k|            return read_hex(ranges::subrange{it, range.end()});
 4100|  99.0k|        }
 4101|   404k|        if (!allowed_hex && allowed_nonhex) {
  ------------------
  |  Branch (4101:13): [True: 178k, False: 226k]
  |  Branch (4101:29): [True: 178k, False: 0]
  ------------------
 4102|       |            // only nonhex allowed:
 4103|       |            // no prefix allowed
 4104|   178k|            m_kind = float_kind::generic;
 4105|   178k|            return read_regular_float(range);
 4106|   178k|        }
 4107|       |        // both hex and nonhex allowed:
 4108|       |        // check for "0x" prefix -> hex,
 4109|       |        // regular otherwise
 4110|       |
 4111|   226k|        if (auto r = read_hex_prefix(range); SCN_UNLIKELY(r)) {
  ------------------
  |  | 1039|   226k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 500, False: 226k]
  |  |  ------------------
  ------------------
 4112|    500|            m_kind = float_kind::hex_with_prefix;
 4113|    500|            return read_hex(ranges::subrange{*r, range.end()});
 4114|    500|        }
 4115|       |
 4116|   226k|        m_kind = float_kind::generic;
 4117|   226k|        return read_regular(range);
 4118|   226k|    }
_ZZN3scn2v44impl12float_readerIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_ENKUlRKSF_E1_clISB_EENSC_IDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSE_IDtfp_EE4typeEEEEEEESM_:
 3799|   325k|                    -> scan_expected<ranges::const_iterator_t<decltype(rr)>> {
 3800|   325k|                    auto res = read_all(rr);
 3801|   325k|                    if (SCN_UNLIKELY(res == r.begin())) {
  ------------------
  |  | 1039|   325k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 155, False: 325k]
  |  |  ------------------
  ------------------
 3802|    155|                        return detail::unexpected_scan_error(
 3803|    155|                            scan_error::invalid_scanned_value,
 3804|    155|                            "Invalid float value");
 3805|    155|                    }
 3806|   325k|                    return res;
 3807|   325k|                };
_ZN3scn2v44impl8read_allINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 1937|   325k|{
 1938|   325k|    return ranges::next(range.begin(), range.end());
 1939|   325k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKwS6_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_S9_EES9_E4typeES9_SA_:
  312|   325k|    {
  313|   325k|        ranges::advance(x, bound);
  314|   325k|        return x;
  315|   325k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EEvE4typeERSA_SB_:
  274|   325k|    {
  275|   325k|        fn::impl_i_s(i, bound, priority_tag<2>{});
  276|   325k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSE_:
 1675|   442k|    {
 1676|   442k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   442k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   442k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEvOT_:
 1719|   442k|    {
 1720|   442k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|   442k|                      ranges::sized_range<Range>) {
 1725|   442k|            m_storage.reset();
 1726|   442k|            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   442k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  26.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  26.9k|        {
  662|  26.9k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  89.0k|        : m_fptr([](storage fn,
  743|  89.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.0k|              cvref<T> obj = *get<T>(fn);
  745|  89.0k|              if constexpr (std::is_void_v<R>) {
  746|  89.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  89.0k|              }
  748|  89.0k|              else {
  749|  89.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.0k|              }
  751|  89.0k|          }),
  752|  89.0k|          m_storage(std::addressof(f))
  753|  89.0k|    {
  754|  89.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  89.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  89.0k|              else {
  749|  89.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.0k|              }
  751|  89.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  89.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  89.0k|        else if constexpr (std::is_object_v<T>) {
  688|  89.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  89.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4271|  89.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|  89.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  89.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|  89.0k|            },
_ZN3scn2v44impl12float_readerIwE11read_sourceINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS0_6detail10locale_refE:
 3738|   413k|    {
 3739|   413k|        if (SCN_UNLIKELY(m_options & float_reader_base::allow_thsep)) {
  ------------------
  |  | 1039|   413k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 413k]
  |  |  ------------------
  ------------------
 3740|      0|            m_locale_options = localized_number_formatting_options<CharT>{
 3741|      0|                classic_with_thsep_tag{}};
 3742|      0|        }
 3743|       |
 3744|   413k|        return read_source_impl(range);
 3745|   413k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  89.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  89.0k|        {
  662|  89.0k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6277|   125k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|       |                          basic_contiguous_scan_context<char_type>>) {
 6282|       |            auto rd = make_reader<T, char_type>();
 6283|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6284|       |            return impl(rd, range, value);
 6285|       |        }
 6286|   125k|        else if constexpr (!detail::is_type_disabled<T>) {
 6287|   125k|            auto rd = make_reader<T, char_type>();
 6288|   125k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   125k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 125k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|       |
 6290|   125k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6290:17): [True: 125k, False: 0]
  |  Branch (6290:50): [True: 0, False: 0]
  ------------------
 6291|   125k|                specs.width != 0) {
  ------------------
  |  Branch (6291:17): [True: 0, False: 0]
  ------------------
 6292|   125k|                return impl(rd, range, value);
 6293|   125k|            }
 6294|       |
 6295|      0|            auto crange = get_as_contiguous(range);
 6296|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6297|      0|            return ranges::next(range.begin(),
 6298|      0|                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   125k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6212|   125k|    {
 6213|   125k|        const bool need_skipped_width =
 6214|   125k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 125k]
  |  Branch (6214:33): [True: 0, False: 125k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   125k|        auto it = rng.begin();
 6218|   125k|        std::ptrdiff_t prefix_width = 0;
 6219|   125k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 125k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   125k|        else {
 6227|   125k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   125k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 996, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    996|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    996|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    996|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    996|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    996|    }                                                  \
  |  |  |  | 3957|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   124k|            std::tie(it, prefix_width) = prefix_result;
 6229|   124k|        }
 6230|   124k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   124k|        std::ptrdiff_t value_width = 0;
 6234|   124k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 124k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   124k|        else {
 6250|   124k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 34.2k, False: 90.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  34.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  34.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  34.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  34.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  34.2k|    }                                                  \
  |  | 3957|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|  90.4k|                                             specs, value, loc));
 6252|       |
 6253|  90.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 90.4k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|  90.4k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|  90.4k|        std::ptrdiff_t postfix_width = 0;
 6262|  90.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 90.0k, False: 460]
  ------------------
 6263|  90.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  90.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  90.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  90.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  90.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 90.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  90.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  90.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|  90.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|  90.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|  90.0k|                                 value_width));
 6267|  90.0k|            std::tie(it, postfix_width) = postfix_result;
 6268|  90.0k|        }
 6269|       |
 6270|  90.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  90.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  90.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 90.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|  90.4k|            specs, prefix_width, value_width, postfix_width));
 6272|  90.4k|        return it;
 6273|  90.4k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIdEENS0_13scan_expectedIlEERT_:
 3764|   279k|    {
 3765|   279k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   279k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   279k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3766|       |
 3767|   279k|        const std::ptrdiff_t sign_len =
 3768|   279k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3768:13): [True: 1.86k, False: 277k]
  ------------------
 3769|       |
 3770|   279k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   279k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   279k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   279k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   279k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 24.8k, False: 254k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  24.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  24.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  24.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  24.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  24.8k|    }                                                  \
  |  |  |  | 3957|   279k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   254k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3771|   254k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3772|   279k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4255|   124k|    {
 4256|   124k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   124k|#if !SCN_DISABLE_LOCALE
 4259|   124k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 31.2k, False: 93.4k]
  ------------------
 4260|  31.2k|            return read_impl<Range>(
 4261|  31.2k|                range, rd,
 4262|  31.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  31.2k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  31.2k|                },
 4265|  31.2k|                value, loc);
 4266|  31.2k|        }
 4267|  93.4k|#endif
 4268|       |
 4269|  93.4k|        return read_impl<Range>(
 4270|  93.4k|            range, rd,
 4271|  93.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|  93.4k|                return r.read_source(SCN_FWD(args)...);
 4273|  93.4k|            },
 4274|  93.4k|            value);
 4275|   124k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4291|   171k|    {
 4292|   171k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   171k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 43.6k, False: 128k]
  |  |  ------------------
  ------------------
 4294|  43.6k|            return unexpected(r.error());
 4295|  43.6k|        }
 4296|       |
 4297|   128k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 860, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    860|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    860|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    860|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    860|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    860|    }                                                  \
  |  |  |  | 3957|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   127k|        return ranges::next(range.begin(), n);
 4299|   128k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  31.2k|        : m_fptr([](storage fn,
  743|  31.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.2k|              cvref<T> obj = *get<T>(fn);
  745|  31.2k|              if constexpr (std::is_void_v<R>) {
  746|  31.2k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.2k|              }
  748|  31.2k|              else {
  749|  31.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.2k|              }
  751|  31.2k|          }),
  752|  31.2k|          m_storage(std::addressof(f))
  753|  31.2k|    {
  754|  31.2k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  31.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  31.2k|              else {
  749|  31.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.2k|              }
  751|  31.2k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  31.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  31.2k|        else if constexpr (std::is_object_v<T>) {
  688|  31.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  31.2k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4262|  31.2k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  31.2k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  31.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  31.2k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  31.2k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  31.2k|        {
  662|  31.2k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  93.4k|        : m_fptr([](storage fn,
  743|  93.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.4k|              cvref<T> obj = *get<T>(fn);
  745|  93.4k|              if constexpr (std::is_void_v<R>) {
  746|  93.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.4k|              }
  748|  93.4k|              else {
  749|  93.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.4k|              }
  751|  93.4k|          }),
  752|  93.4k|          m_storage(std::addressof(f))
  753|  93.4k|    {
  754|  93.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  93.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  93.4k|              else {
  749|  93.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.4k|              }
  751|  93.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  93.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  93.4k|        else if constexpr (std::is_object_v<T>) {
  688|  93.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  93.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4271|  93.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|  93.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  93.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|  93.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  93.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  93.4k|        {
  662|  93.4k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4255|   124k|    {
 4256|   124k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   124k|#if !SCN_DISABLE_LOCALE
 4259|   124k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 31.3k, False: 93.4k]
  ------------------
 4260|  31.3k|            return read_impl<Range>(
 4261|  31.3k|                range, rd,
 4262|  31.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  31.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  31.3k|                },
 4265|  31.3k|                value, loc);
 4266|  31.3k|        }
 4267|  93.4k|#endif
 4268|       |
 4269|  93.4k|        return read_impl<Range>(
 4270|  93.4k|            range, rd,
 4271|  93.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|  93.4k|                return r.read_source(SCN_FWD(args)...);
 4273|  93.4k|            },
 4274|  93.4k|            value);
 4275|   124k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4291|   171k|    {
 4292|   171k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   171k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   171k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 20.4k, False: 151k]
  |  |  ------------------
  ------------------
 4294|  20.4k|            return unexpected(r.error());
 4295|  20.4k|        }
 4296|       |
 4297|   151k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   151k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   151k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   151k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 24.0k, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  24.0k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  24.0k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  24.0k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  24.0k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  24.0k|    }                                                  \
  |  |  |  | 3957|   151k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   127k|        return ranges::next(range.begin(), n);
 4299|   151k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  31.3k|        : m_fptr([](storage fn,
  743|  31.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.3k|              cvref<T> obj = *get<T>(fn);
  745|  31.3k|              if constexpr (std::is_void_v<R>) {
  746|  31.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  31.3k|              }
  748|  31.3k|              else {
  749|  31.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.3k|              }
  751|  31.3k|          }),
  752|  31.3k|          m_storage(std::addressof(f))
  753|  31.3k|    {
  754|  31.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  31.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  31.3k|              else {
  749|  31.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.3k|              }
  751|  31.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  31.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  31.3k|        else if constexpr (std::is_object_v<T>) {
  688|  31.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  31.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4262|  31.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  31.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  31.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  31.3k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  31.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  31.3k|        {
  662|  31.3k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  93.4k|        : m_fptr([](storage fn,
  743|  93.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.4k|              cvref<T> obj = *get<T>(fn);
  745|  93.4k|              if constexpr (std::is_void_v<R>) {
  746|  93.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  93.4k|              }
  748|  93.4k|              else {
  749|  93.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.4k|              }
  751|  93.4k|          }),
  752|  93.4k|          m_storage(std::addressof(f))
  753|  93.4k|    {
  754|  93.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  93.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  93.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  93.4k|              else {
  749|  93.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  93.4k|              }
  751|  93.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  93.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  93.4k|        else if constexpr (std::is_object_v<T>) {
  688|  93.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  93.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4271|  93.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|  93.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  93.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|  93.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  93.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  93.4k|        {
  662|  93.4k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6277|   127k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|       |                          basic_contiguous_scan_context<char_type>>) {
 6282|       |            auto rd = make_reader<T, char_type>();
 6283|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6284|       |            return impl(rd, range, value);
 6285|       |        }
 6286|   127k|        else if constexpr (!detail::is_type_disabled<T>) {
 6287|   127k|            auto rd = make_reader<T, char_type>();
 6288|   127k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   127k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 127k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|       |
 6290|   127k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6290:17): [True: 127k, False: 0]
  |  Branch (6290:50): [True: 0, False: 0]
  ------------------
 6291|   127k|                specs.width != 0) {
  ------------------
  |  Branch (6291:17): [True: 0, False: 0]
  ------------------
 6292|   127k|                return impl(rd, range, value);
 6293|   127k|            }
 6294|       |
 6295|      0|            auto crange = get_as_contiguous(range);
 6296|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6297|      0|            return ranges::next(range.begin(),
 6298|      0|                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   127k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 6212|   127k|    {
 6213|   127k|        const bool need_skipped_width =
 6214|   127k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 127k]
  |  Branch (6214:33): [True: 0, False: 127k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   127k|        auto it = rng.begin();
 6218|   127k|        std::ptrdiff_t prefix_width = 0;
 6219|   127k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 127k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   127k|        else {
 6227|   127k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   127k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   127k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   127k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   127k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.05k, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.05k|    }                                                  \
  |  |  |  | 3957|   127k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   126k|            std::tie(it, prefix_width) = prefix_result;
 6229|   126k|        }
 6230|   126k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   126k|        std::ptrdiff_t value_width = 0;
 6234|   126k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 126k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   126k|        else {
 6250|   126k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 34.2k, False: 92.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  34.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  34.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  34.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  34.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  34.2k|    }                                                  \
  |  | 3957|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|  92.7k|                                             specs, value, loc));
 6252|       |
 6253|  92.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 92.7k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|  92.7k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|  92.7k|        std::ptrdiff_t postfix_width = 0;
 6262|  92.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 92.2k, False: 492]
  ------------------
 6263|  92.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  92.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  92.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  92.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  92.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 92.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  92.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  92.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|  92.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|  92.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|  92.2k|                                 value_width));
 6267|  92.2k|            std::tie(it, postfix_width) = postfix_result;
 6268|  92.2k|        }
 6269|       |
 6270|  92.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  92.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  92.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 92.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|  92.7k|            specs, prefix_width, value_width, postfix_width));
 6272|  92.7k|        return it;
 6273|  92.7k|    }
_ZN3scn2v44impl12float_readerIwE11parse_valueIeEENS0_13scan_expectedIlEERT_:
 3764|   286k|    {
 3765|   286k|        SCN_EXPECT(m_kind != float_kind::tbd);
  ------------------
  |  | 1104|   286k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   286k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3766|       |
 3767|   286k|        const std::ptrdiff_t sign_len =
 3768|   286k|            m_sign != sign_type::default_sign ? 1 : 0;
  ------------------
  |  Branch (3768:13): [True: 1.89k, False: 284k]
  ------------------
 3769|       |
 3770|   286k|        SCN_TRY(n, parse_value_impl(value));
  ------------------
  |  | 3958|   286k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   286k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   286k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   286k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.8k, False: 262k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.8k|    }                                                  \
  |  |  |  | 3957|   286k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   262k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3771|   262k|        return n + sign_len + ranges::ssize(m_thsep_indices);
 3772|   286k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refE:
 4255|   126k|    {
 4256|   126k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   126k|#if !SCN_DISABLE_LOCALE
 4259|   126k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 32.3k, False: 94.5k]
  ------------------
 4260|  32.3k|            return read_impl<Range>(
 4261|  32.3k|                range, rd,
 4262|  32.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  32.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  32.3k|                },
 4265|  32.3k|                value, loc);
 4266|  32.3k|        }
 4267|  94.5k|#endif
 4268|       |
 4269|  94.5k|        return read_impl<Range>(
 4270|  94.5k|            range, rd,
 4271|  94.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|  94.5k|                return r.read_source(SCN_FWD(args)...);
 4273|  94.5k|            },
 4274|  94.5k|            value);
 4275|   126k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNS1_12float_readerIwEENS1_12function_refIFSN_SQ_SI_NS9_10locale_refEENS1_12fnref_detail11qual_fn_sigIST_E8functionEEERT0_SS_:
 4291|   175k|    {
 4292|   175k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   175k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 44.2k, False: 131k]
  |  |  ------------------
  ------------------
 4294|  44.2k|            return unexpected(r.error());
 4295|  44.2k|        }
 4296|       |
 4297|   131k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 124, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    124|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    124|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    124|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    124|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    124|    }                                                  \
  |  |  |  | 3957|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   131k|        return ranges::next(range.begin(), n);
 4299|   131k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  32.3k|        : m_fptr([](storage fn,
  743|  32.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.3k|              cvref<T> obj = *get<T>(fn);
  745|  32.3k|              if constexpr (std::is_void_v<R>) {
  746|  32.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.3k|              }
  748|  32.3k|              else {
  749|  32.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.3k|              }
  751|  32.3k|          }),
  752|  32.3k|          m_storage(std::addressof(f))
  753|  32.3k|    {
  754|  32.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  32.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  32.3k|              else {
  749|  32.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.3k|              }
  751|  32.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  32.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  32.3k|        else if constexpr (std::is_object_v<T>) {
  688|  32.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  32.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_ST_EEEDaSW_SZ_:
 4262|  32.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  32.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  32.3k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  32.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  32.3k|        {
  662|  32.3k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_:
  742|  94.5k|        : m_fptr([](storage fn,
  743|  94.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.5k|              cvref<T> obj = *get<T>(fn);
  745|  94.5k|              if constexpr (std::is_void_v<R>) {
  746|  94.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  94.5k|              }
  748|  94.5k|              else {
  749|  94.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.5k|              }
  751|  94.5k|          }),
  752|  94.5k|          m_storage(std::addressof(f))
  753|  94.5k|    {
  754|  94.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RKNS4_12format_specsERT0_SI_EUlSB_DpOT_E0_S15_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vIS10_E18is_invocable_usingIS11_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1E_SB_SH_SI_:
  743|  94.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  94.5k|              else {
  749|  94.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.5k|              }
  751|  94.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RKNSC_12format_specsERT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  94.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  94.5k|        else if constexpr (std::is_object_v<T>) {
  688|  94.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  94.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSE_ST_EEEDaSW_SZ_:
 4271|  94.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|  94.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  94.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|  94.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RKNSD_12format_specsERT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  94.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  94.5k|        {
  662|  94.5k|        }
_ZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refE:
 4255|   126k|    {
 4256|   126k|        float_reader<CharT> rd{get_options(specs)};
 4257|       |
 4258|   126k|#if !SCN_DISABLE_LOCALE
 4259|   126k|        if (specs.localized) {
  ------------------
  |  Branch (4259:13): [True: 32.3k, False: 94.6k]
  ------------------
 4260|  32.3k|            return read_impl<Range>(
 4261|  32.3k|                range, rd,
 4262|  32.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  32.3k|                    return r.read_source_localized(SCN_FWD(args)...);
 4264|  32.3k|                },
 4265|  32.3k|                value, loc);
 4266|  32.3k|        }
 4267|  94.6k|#endif
 4268|       |
 4269|  94.6k|        return read_impl<Range>(
 4270|  94.6k|            range, rd,
 4271|  94.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|  94.6k|                return r.read_source(SCN_FWD(args)...);
 4273|  94.6k|            },
 4274|  94.6k|            value);
 4275|   126k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNS1_12float_readerIwEENS1_12function_refIFSK_SN_SF_NS0_6detail10locale_refEENS1_12fnref_detail11qual_fn_sigISR_E8functionEEERT0_SQ_:
 4291|   175k|    {
 4292|   175k|        if (auto r = std::invoke(read_source_cb, rd, range, loc);
 4293|   175k|            SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   175k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 20.7k, False: 154k]
  |  |  ------------------
  ------------------
 4294|  20.7k|            return unexpected(r.error());
 4295|  20.7k|        }
 4296|       |
 4297|   154k|        SCN_TRY(n, rd.parse_value(value));
  ------------------
  |  | 3958|   154k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   154k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   154k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   154k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 23.6k, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  23.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  23.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  23.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  23.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  23.6k|    }                                                  \
  |  |  |  | 3957|   154k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 4298|   131k|        return ranges::next(range.begin(), n);
 4299|   154k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  32.3k|        : m_fptr([](storage fn,
  743|  32.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.3k|              cvref<T> obj = *get<T>(fn);
  745|  32.3k|              if constexpr (std::is_void_v<R>) {
  746|  32.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  32.3k|              }
  748|  32.3k|              else {
  749|  32.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.3k|              }
  751|  32.3k|          }),
  752|  32.3k|          m_storage(std::addressof(f))
  753|  32.3k|    {
  754|  32.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  32.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  32.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  32.3k|              else {
  749|  32.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  32.3k|              }
  751|  32.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  32.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  32.3k|        else if constexpr (std::is_object_v<T>) {
  688|  32.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  32.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SR_EEEDaSU_SX_:
 4262|  32.3k|                [](float_reader<CharT>& r, auto&&... args) {
 4263|  32.3k|                    return r.read_source_localized(SCN_FWD(args)...);
  ------------------
  |  | 1110|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4264|  32.3k|                },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  32.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  32.3k|        {
  662|  32.3k|        }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_:
  742|  94.6k|        : m_fptr([](storage fn,
  743|  94.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.6k|              cvref<T> obj = *get<T>(fn);
  745|  94.6k|              if constexpr (std::is_void_v<R>) {
  746|  94.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  94.6k|              }
  748|  94.6k|              else {
  749|  94.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.6k|              }
  751|  94.6k|          }),
  752|  94.6k|          m_storage(std::addressof(f))
  753|  94.6k|    {
  754|  94.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE10read_specsISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RKNSF_12format_specsERT0_SG_EUlS9_DpOT_E0_S13_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISY_E18is_invocable_usingISZ_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES1C_S9_SE_SG_:
  743|  94.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  94.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  94.6k|              else {
  749|  94.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  94.6k|              }
  751|  94.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS0_6detail12format_specsERT0_NSO_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_EEDaNS3_7storageE:
  683|  94.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  94.6k|        else if constexpr (std::is_object_v<T>) {
  688|  94.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  94.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERT0_NSL_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E0_clIJSB_SR_EEEDaSU_SX_:
 4271|  94.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4272|  94.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  94.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4273|  94.6k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E0_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  94.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  94.6k|        {
  662|  94.6k|        }
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|   506k|{
 2193|   506k|    auto it = range.begin();
 2194|   889k|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 885k, False: 3.48k]
  ------------------
 2195|   885k|        const auto val =
 2196|   885k|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|   885k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|   885k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 885k, False: 0]
  |  |  ------------------
  ------------------
 2198|   885k|            const auto cp = detail::decode_code_point_exhaustive(
 2199|   885k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|   885k|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 503k, False: 382k]
  ------------------
 2201|   503k|                return it;
 2202|   503k|            }
 2203|   885k|        }
 2204|   382k|        it = val.iterator;
 2205|   382k|    }
 2206|       |
 2207|  3.48k|    return it;
 2208|   506k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   885k|{
 1998|   885k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|   885k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   885k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   885k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   885k|    auto it = range.begin();
 2002|   885k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   885k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   885k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 885k]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|   885k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 885k, False: 0]
  ------------------
 2011|   885k|        ++it;
 2012|   885k|        return {it, string_type(1, *range.begin())};
 2013|   885k|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|   885k|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|   885k|    {
 1989|   885k|        return !codepoint.empty();
 1990|   885k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|   506k|{
 2214|   506k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   506k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|   506k|{
 3098|   506k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 506k, False: 0]
  ------------------
 3099|   506k|        auto it = read_while_classic_space(range);
 3100|   506k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   506k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.48k, False: 503k]
  |  |  ------------------
  ------------------
 3102|  3.48k|            return unexpected(e);
 3103|  3.48k|        }
 3104|       |
 3105|   503k|        return it;
 3106|   506k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   506k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|   506k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   506k|    else {
 2258|   506k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|   506k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   506k|            return detail::is_cp_space(cp);
 2271|   506k|        });
 2272|   506k|    }
 2273|   506k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   506k|        : m_fptr([](storage fn,
  743|   506k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   506k|              cvref<T> obj = *get<T>(fn);
  745|   506k|              if constexpr (std::is_void_v<R>) {
  746|   506k|                  obj(static_cast<decltype(args)>(args)...);
  747|   506k|              }
  748|   506k|              else {
  749|   506k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   506k|              }
  751|   506k|          }),
  752|   506k|          m_storage(std::addressof(f))
  753|   506k|    {
  754|   506k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   885k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   885k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   885k|              else {
  749|   885k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   885k|              }
  751|   885k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   885k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   885k|        else if constexpr (std::is_object_v<T>) {
  688|   885k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   885k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|   885k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   885k|            return detail::is_cp_space(cp);
 2271|   885k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   506k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   506k|        {
  662|   506k|        }
_ZN3scn2v44impl19reader_impl_for_intIcE12read_defaultINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS0_13scan_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS5_9add_constIT_E4typeEEEEEEESD_RT0_NS0_6detail10locale_refE:
 3610|  12.7k|    {
 3611|  12.7k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  12.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3612|  12.7k|        return read_default_with_base(range, value, 10);
 3613|  12.7k|    }
_ZN3scn2v44impl19reader_impl_for_intIcE22read_default_with_baseINSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEmEENS0_13scan_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS5_9add_constIT_E4typeEEEEEEESD_RT0_i:
 3574|  12.7k|    {
 3575|  12.7k|        SCN_TRY(prefix_result, parse_integer_prefix(range, base)
  ------------------
  |  | 3958|  12.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  12.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  12.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.69k, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.69k|    }                                                  \
  |  |  |  | 3957|  12.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3576|  11.0k|                                   .transform_error(make_eof_scan_error));
 3577|       |
 3578|  11.0k|        if constexpr (!std::is_signed_v<T>) {
 3579|  11.0k|            if (prefix_result.sign == sign_type::minus_sign) {
  ------------------
  |  Branch (3579:17): [True: 0, False: 11.0k]
  ------------------
 3580|      0|                return detail::unexpected_scan_error(
 3581|      0|                    scan_error::invalid_scanned_value,
 3582|      0|                    "Unexpected '-' sign when parsing an "
 3583|      0|                    "unsigned value");
 3584|      0|            }
 3585|  11.0k|        }
 3586|       |
 3587|  11.0k|        if (prefix_result.is_zero) {
  ------------------
  |  Branch (3587:13): [True: 0, False: 11.0k]
  ------------------
 3588|      0|            value = T{0};
 3589|      0|            return std::next(prefix_result.iterator);
 3590|      0|        }
 3591|       |
 3592|  22.1k|        SCN_TRY(after_digits_it,
  ------------------
  |  | 3958|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3593|  22.1k|                parse_integer_digits_without_thsep(
 3594|  22.1k|                    ranges::subrange{prefix_result.iterator, range.end()},
 3595|  22.1k|                    prefix_result.parsed_base));
 3596|       |
 3597|  22.1k|        auto buf = make_contiguous_buffer(
 3598|  22.1k|            ranges::subrange{prefix_result.iterator, after_digits_it});
 3599|  22.1k|        SCN_TRY(result_it,
  ------------------
  |  | 3958|  11.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  11.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  11.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  11.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.33k, False: 9.75k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.33k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.33k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.33k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.33k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.33k|    }                                                  \
  |  |  |  | 3957|  11.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  9.75k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3600|  9.75k|                parse_integer_value(buf.view(), value, prefix_result.sign,
 3601|  9.75k|                                    prefix_result.parsed_base));
 3602|       |
 3603|  9.75k|        return ranges::next(prefix_result.iterator,
 3604|  9.75k|                            ranges::distance(buf.view().begin(), result_it));
 3605|  22.1k|    }
_ZN3scn2v44impl20parse_integer_prefixINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedINS1_27parse_integer_prefix_resultIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEEEESC_i:
 3408|  12.7k|{
 3409|  12.7k|    SCN_TRY(sign_result, parse_numeric_sign(range));
  ------------------
  |  | 3958|  12.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  12.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  12.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.69k, False: 11.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.69k|    }                                                  \
  |  |  |  | 3957|  12.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  11.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3410|  11.0k|    auto [base_prefix_begin_it, sign] = sign_result;
 3411|       |
 3412|  11.0k|    auto [digits_begin_it, parsed_base, parsed_zero] =
 3413|  11.0k|        parse_integer_base_prefix(
 3414|  11.0k|            ranges::subrange{base_prefix_begin_it, range.end()}, base);
 3415|       |
 3416|  11.0k|    if (parsed_zero) {
  ------------------
  |  Branch (3416:9): [True: 0, False: 11.0k]
  ------------------
 3417|      0|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3417:13): [True: 0, False: 0]
  ------------------
 3418|      0|            char_to_int(*digits_begin_it) >= 8) {
  ------------------
  |  Branch (3418:13): [True: 0, False: 0]
  ------------------
 3419|      0|            digits_begin_it = base_prefix_begin_it;
 3420|      0|        }
 3421|      0|        else {
 3422|      0|            parsed_zero = false;
 3423|      0|        }
 3424|      0|    }
 3425|  11.0k|    else {
 3426|  11.0k|        if (digits_begin_it == range.end() ||
  ------------------
  |  Branch (3426:13): [True: 0, False: 11.0k]
  ------------------
 3427|  11.0k|            char_to_int(*digits_begin_it) >= parsed_base) {
  ------------------
  |  Branch (3427:13): [True: 96, False: 10.9k]
  ------------------
 3428|     96|            digits_begin_it = base_prefix_begin_it;
 3429|     96|        }
 3430|  11.0k|    }
 3431|       |
 3432|  11.0k|    if (sign == sign_type::default_sign) {
  ------------------
  |  Branch (3432:9): [True: 11.0k, False: 0]
  ------------------
 3433|  11.0k|        sign = sign_type::plus_sign;
 3434|  11.0k|    }
 3435|  11.0k|    return parse_integer_prefix_result<ranges::const_iterator_t<Range>>{
 3436|  11.0k|        digits_begin_it, parsed_base, sign, parsed_zero};
 3437|  12.7k|}
_ZN3scn2v44impl18parse_numeric_signINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedINS3_4pairIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEENS1_9sign_typeEEEEESC_:
 3289|  12.7k|{
 3290|  12.7k|    auto r = read_one_of_code_unit(range, "+-");
 3291|  12.7k|    if (!r) {
  ------------------
  |  Branch (3291:9): [True: 12.7k, False: 0]
  ------------------
 3292|  12.7k|        if (r.error() == parse_error::error) {
  ------------------
  |  Branch (3292:13): [True: 11.0k, False: 1.69k]
  ------------------
 3293|  11.0k|            return std::pair{range.begin(), sign_type::default_sign};
 3294|  11.0k|        }
 3295|  1.69k|        return unexpected(eof_error::eof);
 3296|  12.7k|    }
 3297|       |
 3298|      0|    auto& it = *r;
 3299|      0|    if (*range.begin() == '-') {
  ------------------
  |  Branch (3299:9): [True: 0, False: 0]
  ------------------
 3300|      0|        return std::pair{it, sign_type::minus_sign};
 3301|      0|    }
 3302|      0|    return std::pair{it, sign_type::plus_sign};
 3303|      0|}
_ZN3scn2v44impl21read_one_of_code_unitINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_14parse_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEESB_S7_:
 2404|  12.7k|{
 2405|  12.7k|    auto it = read_code_unit(range);
 2406|  12.7k|    if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.69k, False: 11.0k]
  |  |  ------------------
  ------------------
 2407|  1.69k|        return unexpected(make_eof_parse_error(it.error()));
 2408|  1.69k|    }
 2409|       |
 2410|  22.1k|    for (auto ch : str) {
  ------------------
  |  Branch (2410:18): [True: 22.1k, False: 11.0k]
  ------------------
 2411|  22.1k|        if (*range.begin() == static_cast<detail::char_t<Range>>(ch)) {
  ------------------
  |  Branch (2411:13): [True: 0, False: 22.1k]
  ------------------
 2412|      0|            return *it;
 2413|      0|        }
 2414|  22.1k|    }
 2415|       |
 2416|  11.0k|    return unexpected(parse_error::error);
 2417|  11.0k|}
_ZN3scn2v44impl14read_code_unitINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_12eof_expectedIDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEEEESB_:
 1944|  12.7k|{
 1945|  12.7k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.69k, False: 11.0k]
  |  |  ------------------
  ------------------
 1946|  1.69k|        return unexpected(e);
 1947|  1.69k|    }
 1948|       |
 1949|  11.0k|    return ranges::next(range.begin());
 1950|  12.7k|}
_ZN3scn2v44impl9eof_checkINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEENS1_9eof_errorET_:
  950|  12.7k|{
  951|  12.7k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  12.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.69k, False: 11.0k]
  |  |  ------------------
  ------------------
  952|  1.69k|        return eof_error::eof;
  953|  1.69k|    }
  954|  11.0k|    return eof_error::good;
  955|  12.7k|}
_ZN3scn2v44impl12is_range_eofINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEbT_:
  944|  12.7k|{
  945|  12.7k|    return is_range_eof(r.begin(), r.end());
  946|  12.7k|}
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2219|   943k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|   943k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|   943k|        auto buf = make_contiguous_buffer(range);
 2224|   943k|        auto it = find_classic_space_narrow_fast(buf.view());
 2225|   943k|        return ranges::next(range.begin(),
 2226|   943k|                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|       |    else {
 2229|       |        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|       |        return read_until_code_point(
 2241|       |            ranges::subrange{it, range.end()},
 2242|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|       |    }
 2244|   943k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 1781|   943k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   943k|                  ranges::sized_range<Range>) {
 1785|   943k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|   943k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   943k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEETnPNS5_9enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISC_Esr6rangesE11sized_rangeISC_EEvE4typeELPv0EEEOSC_:
 1587|   943k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   943k|    {
 1589|   943k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE6assignINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   943k|    {
 1676|   943k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   943k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   943k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEvOT_:
 1719|   943k|    {
 1720|   943k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   943k|                                          std::basic_string<CharT>>) {
 1730|   943k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1110|   943k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   943k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   943k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIfEET_S5_:
 4164|   344k|    {
 4165|   344k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4165:13): [True: 38.4k, False: 306k]
  ------------------
 4166|  38.4k|            return std::copysign(value, static_cast<T>(-1.0));
 4167|  38.4k|        }
 4168|   306k|        return std::copysign(value, static_cast<T>(1.0));
 4169|   344k|    }
_ZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 2219|   727k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|   727k|    else {
 2229|   727k|        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|   727k|        return read_until_code_point(
 2241|   727k|            ranges::subrange{it, range.end()},
 2242|   727k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|   727k|    }
 2244|   727k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_:
  742|   727k|        : m_fptr([](storage fn,
  743|   727k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   727k|              cvref<T> obj = *get<T>(fn);
  745|   727k|              if constexpr (std::is_void_v<R>) {
  746|   727k|                  obj(static_cast<decltype(args)>(args)...);
  747|   727k|              }
  748|   727k|              else {
  749|   727k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   727k|              }
  751|   727k|          }),
  752|   727k|          m_storage(std::addressof(f))
  753|   727k|    {
  754|   727k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_SJ_TnPNS7_9enable_ifIXaaaasr6detailE11is_not_selfISE_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSL_EEvE4typeELPv0EEEOSE_ENKUlNS1_12fnref_detail4base7storageEDiE_clESU_Di:
  743|  1.29M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.29M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.29M|              else {
  749|  1.29M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.29M|              }
  751|  1.29M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS6_9add_constIT_E4typeEEEEESD_EUlDiE_EEDaNS3_7storageE:
  683|  1.29M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.29M|        else if constexpr (std::is_object_v<T>) {
  688|  1.29M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.29M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_ENKUlDiE_clEDi:
 2242|  1.29M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS7_9add_constIT_E4typeEEEEESE_EUlDiE_TnPNS7_9enable_ifIXsr3stdE11is_object_vISE_EEvE4typeELPv0EEEPSE_:
  660|   727k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   727k|        {
  662|   727k|        }
_ZN3scn2v44impl24contiguous_range_factoryIwE6assignINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEETnPNS5_9enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEvOSD_:
 1675|   727k|    {
 1676|   727k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   727k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1677|   727k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEvOT_:
 1719|   727k|    {
 1720|   727k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|   727k|                                          std::basic_string<CharT>>) {
 1730|   727k|            m_storage.emplace(SCN_FWD(range));
  ------------------
  |  | 1110|   727k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1731|   727k|            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|       |                           ranges::common_range<Range>) {
 1737|       |            auto beg_seg = range.begin().contiguous_segment();
 1738|       |            auto end_seg = range.end().contiguous_segment();
 1739|       |            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
 1740|       |                             detail::to_address(end_seg.end()))) {
 1741|       |                auto& str = m_storage.emplace();
 1742|       |                str.reserve(range.end().position() - range.begin().position());
 1743|       |                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|       |                m_view = string_view_type{str};
 1745|       |                return;
 1746|       |            }
 1747|       |
 1748|       |            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|       |                                                            end_seg.data());
 1750|       |            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   727k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIfEET_S5_:
 4164|   223k|    {
 4165|   223k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4165:13): [True: 978, False: 222k]
  ------------------
 4166|    978|            return std::copysign(value, static_cast<T>(-1.0));
 4167|    978|        }
 4168|   222k|        return std::copysign(value, static_cast<T>(1.0));
 4169|   223k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIdEET_S5_:
 4164|   360k|    {
 4165|   360k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4165:13): [True: 41.0k, False: 319k]
  ------------------
 4166|  41.0k|            return std::copysign(value, static_cast<T>(-1.0));
 4167|  41.0k|        }
 4168|   319k|        return std::copysign(value, static_cast<T>(1.0));
 4169|   360k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIdEET_S5_:
 4164|   254k|    {
 4165|   254k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4165:13): [True: 1.02k, False: 253k]
  ------------------
 4166|  1.02k|            return std::copysign(value, static_cast<T>(-1.0));
 4167|  1.02k|        }
 4168|   253k|        return std::copysign(value, static_cast<T>(1.0));
 4169|   254k|    }
_ZNK3scn2v44impl12float_readerIcE7setsignIeEET_S5_:
 4164|   369k|    {
 4165|   369k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4165:13): [True: 43.8k, False: 325k]
  ------------------
 4166|  43.8k|            return std::copysign(value, static_cast<T>(-1.0));
 4167|  43.8k|        }
 4168|   325k|        return std::copysign(value, static_cast<T>(1.0));
 4169|   369k|    }
_ZNK3scn2v44impl12float_readerIwE7setsignIeEET_S5_:
 4164|   262k|    {
 4165|   262k|        if (m_sign == sign_type::minus_sign) {
  ------------------
  |  Branch (4165:13): [True: 1.12k, False: 261k]
  ------------------
 4166|  1.12k|            return std::copysign(value, static_cast<T>(-1.0));
 4167|  1.12k|        }
 4168|   261k|        return std::copysign(value, static_cast<T>(1.0));
 4169|   262k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5883|   169k|{
 5884|   169k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.88k, False: 167k]
  |  |  ------------------
  ------------------
 5885|  1.88k|        return unexpected(e);
 5886|  1.88k|    }
 5887|       |
 5888|   167k|    if (!is_required) {
  ------------------
  |  Branch (5888:9): [True: 0, False: 167k]
  ------------------
 5889|      0|        return range.begin();
 5890|      0|    }
 5891|       |
 5892|   167k|    return skip_classic_whitespace(range);
 5893|   167k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5961|  54.1k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|  54.1k|                          basic_contiguous_scan_context<char_type>>) {
 5966|  54.1k|            auto rd = make_reader<T, char_type>();
 5967|  54.1k|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  54.1k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|  54.1k|    {
 5954|  54.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  54.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  54.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  54.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  54.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 642, False: 53.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    642|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    642|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    642|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    642|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    642|    }                                                  \
  |  |  |  | 3957|  54.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  53.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  53.4k|                        .transform_error(make_eof_scan_error));
 5956|  53.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  54.1k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4237|  53.4k|    {
 4238|  53.4k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  53.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  53.4k|        float_reader<CharT> rd{};
 4241|  53.4k|        return read_impl<Range>(
 4242|  53.4k|            range, rd,
 4243|  53.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  53.4k|                return r.read_source(SCN_FWD(args)...);
 4245|  53.4k|            },
 4246|  53.4k|            value);
 4247|  53.4k|    }
_ZN3scn2v44impl12float_readerIcEC2Ev:
 3731|   333k|    constexpr float_reader() = default;
_ZN3scn2v44impl17float_reader_baseC2Ev:
 3717|   605k|    constexpr float_reader_base() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  53.4k|        : m_fptr([](storage fn,
  743|  53.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.4k|              cvref<T> obj = *get<T>(fn);
  745|  53.4k|              if constexpr (std::is_void_v<R>) {
  746|  53.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  53.4k|              }
  748|  53.4k|              else {
  749|  53.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.4k|              }
  751|  53.4k|          }),
  752|  53.4k|          m_storage(std::addressof(f))
  753|  53.4k|    {
  754|  53.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  53.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  53.4k|              else {
  749|  53.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.4k|              }
  751|  53.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  53.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  53.4k|        else if constexpr (std::is_object_v<T>) {
  688|  53.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  53.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4243|  53.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  53.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  53.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  53.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  53.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  53.4k|        {
  662|  53.4k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5961|  56.6k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|  56.6k|                          basic_contiguous_scan_context<char_type>>) {
 5966|  56.6k|            auto rd = make_reader<T, char_type>();
 5967|  56.6k|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  56.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|  56.6k|    {
 5954|  56.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  56.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  56.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  56.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  56.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 750, False: 55.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    750|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    750|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    750|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    750|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    750|    }                                                  \
  |  |  |  | 3957|  56.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  55.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  55.8k|                        .transform_error(make_eof_scan_error));
 5956|  55.8k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  56.6k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4237|  55.8k|    {
 4238|  55.8k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  55.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  55.8k|        float_reader<CharT> rd{};
 4241|  55.8k|        return read_impl<Range>(
 4242|  55.8k|            range, rd,
 4243|  55.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  55.8k|                return r.read_source(SCN_FWD(args)...);
 4245|  55.8k|            },
 4246|  55.8k|            value);
 4247|  55.8k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  55.8k|        : m_fptr([](storage fn,
  743|  55.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.8k|              cvref<T> obj = *get<T>(fn);
  745|  55.8k|              if constexpr (std::is_void_v<R>) {
  746|  55.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  55.8k|              }
  748|  55.8k|              else {
  749|  55.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.8k|              }
  751|  55.8k|          }),
  752|  55.8k|          m_storage(std::addressof(f))
  753|  55.8k|    {
  754|  55.8k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  55.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  55.8k|              else {
  749|  55.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.8k|              }
  751|  55.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  55.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  55.8k|        else if constexpr (std::is_object_v<T>) {
  688|  55.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  55.8k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4243|  55.8k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  55.8k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  55.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  55.8k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  55.8k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  55.8k|        {
  662|  55.8k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5961|  58.5k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|  58.5k|                          basic_contiguous_scan_context<char_type>>) {
 5966|  58.5k|            auto rd = make_reader<T, char_type>();
 5967|  58.5k|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  58.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|  58.5k|    {
 5954|  58.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  58.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  58.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  58.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  58.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 852, False: 57.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    852|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    852|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    852|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    852|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    852|    }                                                  \
  |  |  |  | 3957|  58.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  57.7k|                        .transform_error(make_eof_scan_error));
 5956|  57.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  58.5k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4237|  57.7k|    {
 4238|  57.7k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  57.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  57.7k|        float_reader<CharT> rd{};
 4241|  57.7k|        return read_impl<Range>(
 4242|  57.7k|            range, rd,
 4243|  57.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  57.7k|                return r.read_source(SCN_FWD(args)...);
 4245|  57.7k|            },
 4246|  57.7k|            value);
 4247|  57.7k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  57.7k|        : m_fptr([](storage fn,
  743|  57.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.7k|              cvref<T> obj = *get<T>(fn);
  745|  57.7k|              if constexpr (std::is_void_v<R>) {
  746|  57.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  57.7k|              }
  748|  57.7k|              else {
  749|  57.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.7k|              }
  751|  57.7k|          }),
  752|  57.7k|          m_storage(std::addressof(f))
  753|  57.7k|    {
  754|  57.7k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKcEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  57.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  57.7k|              else {
  749|  57.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.7k|              }
  751|  57.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  57.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  57.7k|        else if constexpr (std::is_object_v<T>) {
  688|  57.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  57.7k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4243|  57.7k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  57.7k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  57.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  57.7k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  57.7k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  57.7k|        {
  662|  57.7k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5883|   168k|{
 5884|   168k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   168k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.92k, False: 167k]
  |  |  ------------------
  ------------------
 5885|  1.92k|        return unexpected(e);
 5886|  1.92k|    }
 5887|       |
 5888|   167k|    if (!is_required) {
  ------------------
  |  Branch (5888:9): [True: 0, False: 167k]
  ------------------
 5889|      0|        return range.begin();
 5890|      0|    }
 5891|       |
 5892|   167k|    return skip_classic_whitespace(range);
 5893|   167k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5961|  54.3k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|       |                          basic_contiguous_scan_context<char_type>>) {
 5966|       |            auto rd = make_reader<T, char_type>();
 5967|       |            return impl(rd, range, value);
 5968|       |        }
 5969|  54.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 5970|  54.3k|            auto rd = make_reader<T, char_type>();
 5971|  54.3k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5971:17): [True: 54.3k, False: 0]
  ------------------
 5972|  54.3k|                return impl(rd, range, value);
 5973|  54.3k|            }
 5974|      0|            auto crange = get_as_contiguous(range);
 5975|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5976|      0|            return ranges::next(range.begin(),
 5977|      0|                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  54.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5953|  54.3k|    {
 5954|  54.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  54.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  54.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  54.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  54.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 666, False: 53.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    666|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    666|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    666|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    666|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    666|    }                                                  \
  |  |  |  | 3957|  54.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  53.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  53.6k|                        .transform_error(make_eof_scan_error));
 5956|  53.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  54.3k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4237|  53.6k|    {
 4238|  53.6k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  53.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  53.6k|        float_reader<CharT> rd{};
 4241|  53.6k|        return read_impl<Range>(
 4242|  53.6k|            range, rd,
 4243|  53.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  53.6k|                return r.read_source(SCN_FWD(args)...);
 4245|  53.6k|            },
 4246|  53.6k|            value);
 4247|  53.6k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  53.6k|        : m_fptr([](storage fn,
  743|  53.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.6k|              cvref<T> obj = *get<T>(fn);
  745|  53.6k|              if constexpr (std::is_void_v<R>) {
  746|  53.6k|                  obj(static_cast<decltype(args)>(args)...);
  747|  53.6k|              }
  748|  53.6k|              else {
  749|  53.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.6k|              }
  751|  53.6k|          }),
  752|  53.6k|          m_storage(std::addressof(f))
  753|  53.6k|    {
  754|  53.6k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  53.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  53.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  53.6k|              else {
  749|  53.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  53.6k|              }
  751|  53.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  53.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  53.6k|        else if constexpr (std::is_object_v<T>) {
  688|  53.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  53.6k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4243|  53.6k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  53.6k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  53.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  53.6k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  53.6k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  53.6k|        {
  662|  53.6k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5961|  56.7k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|       |                          basic_contiguous_scan_context<char_type>>) {
 5966|       |            auto rd = make_reader<T, char_type>();
 5967|       |            return impl(rd, range, value);
 5968|       |        }
 5969|  56.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 5970|  56.7k|            auto rd = make_reader<T, char_type>();
 5971|  56.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5971:17): [True: 56.7k, False: 0]
  ------------------
 5972|  56.7k|                return impl(rd, range, value);
 5973|  56.7k|            }
 5974|      0|            auto crange = get_as_contiguous(range);
 5975|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5976|      0|            return ranges::next(range.begin(),
 5977|      0|                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  56.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5953|  56.7k|    {
 5954|  56.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  56.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  56.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  56.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  56.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 771, False: 55.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    771|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    771|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    771|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    771|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    771|    }                                                  \
  |  |  |  | 3957|  56.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  55.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  55.9k|                        .transform_error(make_eof_scan_error));
 5956|  55.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  56.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4237|  55.9k|    {
 4238|  55.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  55.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  55.9k|        float_reader<CharT> rd{};
 4241|  55.9k|        return read_impl<Range>(
 4242|  55.9k|            range, rd,
 4243|  55.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  55.9k|                return r.read_source(SCN_FWD(args)...);
 4245|  55.9k|            },
 4246|  55.9k|            value);
 4247|  55.9k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  55.9k|        : m_fptr([](storage fn,
  743|  55.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.9k|              cvref<T> obj = *get<T>(fn);
  745|  55.9k|              if constexpr (std::is_void_v<R>) {
  746|  55.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  55.9k|              }
  748|  55.9k|              else {
  749|  55.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.9k|              }
  751|  55.9k|          }),
  752|  55.9k|          m_storage(std::addressof(f))
  753|  55.9k|    {
  754|  55.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  55.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  55.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  55.9k|              else {
  749|  55.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  55.9k|              }
  751|  55.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  55.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  55.9k|        else if constexpr (std::is_object_v<T>) {
  688|  55.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  55.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4243|  55.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  55.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  55.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  55.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  55.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  55.9k|        {
  662|  55.9k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5961|  57.9k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|       |                          basic_contiguous_scan_context<char_type>>) {
 5966|       |            auto rd = make_reader<T, char_type>();
 5967|       |            return impl(rd, range, value);
 5968|       |        }
 5969|  57.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5970|  57.9k|            auto rd = make_reader<T, char_type>();
 5971|  57.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5971:17): [True: 57.9k, False: 0]
  ------------------
 5972|  57.9k|                return impl(rd, range, value);
 5973|  57.9k|            }
 5974|      0|            auto crange = get_as_contiguous(range);
 5975|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5976|      0|            return ranges::next(range.begin(),
 5977|      0|                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  57.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_21reader_impl_for_floatIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5953|  57.9k|    {
 5954|  57.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  57.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  57.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  57.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 861, False: 57.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    861|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    861|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    861|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    861|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    861|    }                                                  \
  |  |  |  | 3957|  57.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  57.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  57.0k|                        .transform_error(make_eof_scan_error));
 5956|  57.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  57.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4237|  57.0k|    {
 4238|  57.0k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  57.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  57.0k|        float_reader<CharT> rd{};
 4241|  57.0k|        return read_impl<Range>(
 4242|  57.0k|            range, rd,
 4243|  57.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  57.0k|                return r.read_source(SCN_FWD(args)...);
 4245|  57.0k|            },
 4246|  57.0k|            value);
 4247|  57.0k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  57.0k|        : m_fptr([](storage fn,
  743|  57.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.0k|              cvref<T> obj = *get<T>(fn);
  745|  57.0k|              if constexpr (std::is_void_v<R>) {
  746|  57.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  57.0k|              }
  748|  57.0k|              else {
  749|  57.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.0k|              }
  751|  57.0k|          }),
  752|  57.0k|          m_storage(std::addressof(f))
  753|  57.0k|    {
  754|  57.0k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERNS1_12float_readerIcEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIcE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  57.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  57.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  57.0k|              else {
  749|  57.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  57.0k|              }
  751|  57.0k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_EEDaNS3_7storageE:
  683|  57.0k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  57.0k|        else if constexpr (std::is_object_v<T>) {
  688|  57.0k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  57.0k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIcEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4243|  57.0k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  57.0k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  57.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  57.0k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIcEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  57.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  57.0k|        {
  662|  57.0k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3017|   419k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|   419k|    static_cast<    \
  |  | 1109|   419k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|   419k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|   419k|          m_current(m_range.begin())
 3020|   419k|    {
 3021|   419k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3029|   785k|    {
 3030|   785k|        return m_range.end();
 3031|   785k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3044|   366k|    {
 3045|   366k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|   366k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   366k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|   366k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|   366k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 366k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|   366k|        }
 3051|   366k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   366k|    static_cast<    \
  |  | 1109|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|   366k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3034|   419k|    {
 3035|   419k|        return ranges::subrange{begin(), end()};
 3036|   419k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6125|   419k|    {
 6126|   419k|        const bool need_skipped_width =
 6127|   419k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6127:13): [True: 0, False: 419k]
  |  Branch (6127:33): [True: 0, False: 419k]
  ------------------
 6128|   419k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6129|       |
 6130|       |        // Read prefix
 6131|   419k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6131:13): [True: 0, False: 419k]
  ------------------
 6132|   419k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 419k]
  ------------------
 6133|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6134|      0|                             need_skipped_width);
 6135|      0|        }
 6136|   419k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6136:13): [True: 419k, False: 0]
  |  Branch (6136:56): [True: 419k, False: 0]
  ------------------
 6137|       |            // Default alignment:
 6138|       |            // Skip preceding whitespace, if required by the reader
 6139|   419k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6139:17): [True: 0, False: 419k]
  ------------------
 6140|      0|                auto max_width_view = take_width(rng, specs.precision);
 6141|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|                                  .transform_error(make_eof_scan_error));
 6143|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6144|      0|            }
 6145|   832k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   419k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   419k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   419k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   419k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 5.98k, False: 413k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  5.98k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  5.98k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  5.98k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  5.98k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  5.98k|    }                                                  \
  |  |  |  | 3957|   419k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   413k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|   832k|                            make_eof_scan_error));
 6147|       |
 6148|   832k|            if (need_skipped_width) {
  ------------------
  |  Branch (6148:17): [True: 0, False: 413k]
  ------------------
 6149|      0|                return result_type{
 6150|      0|                    it,
 6151|      0|                    calculate_text_width(make_contiguous_buffer(
 6152|      0|                                             ranges::subrange{rng.begin(), it})
 6153|      0|                                             .view())};
 6154|      0|            }
 6155|   413k|            return result_type{it, 0};
 6156|   832k|        }
 6157|       |
 6158|      0|        return result_type{rng.begin(), 0};
 6159|   419k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6167|   361k|    {
 6168|   361k|        const bool need_skipped_width =
 6169|   361k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6169:13): [True: 0, False: 361k]
  |  Branch (6169:33): [True: 0, False: 361k]
  ------------------
 6170|   361k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6171|       |
 6172|   361k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6172:13): [True: 0, False: 361k]
  ------------------
 6173|   361k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 361k]
  ------------------
 6174|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6174:17): [True: 0, False: 0]
  ------------------
 6175|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6175:17): [True: 0, False: 0]
  ------------------
 6176|      0|                return result_type{rng.begin(), 0};
 6177|      0|            }
 6178|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6179|      0|                             specs.fill, need_skipped_width);
 6180|      0|        }
 6181|   361k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6181:13): [True: 361k, False: 0]
  ------------------
 6182|   361k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6182:13): [True: 0, False: 361k]
  ------------------
 6183|   361k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6183:15): [True: 0, False: 0]
  |  Branch (6183:35): [True: 0, False: 0]
  ------------------
 6184|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6184:15): [True: 0, False: 0]
  ------------------
 6185|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6185:15): [True: 0, False: 0]
  ------------------
 6186|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6186:17): [True: 0, False: 0]
  ------------------
 6187|      0|                const auto initial_width =
 6188|      0|                    specs.precision - prefix_width - value_width;
 6189|      0|                auto max_width_view = take_width(rng, initial_width);
 6190|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6191|      0|                                  .transform_error(make_eof_scan_error));
 6192|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6193|      0|            }
 6194|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|                            make_eof_scan_error));
 6196|       |
 6197|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|      0|                return result_type{
 6199|      0|                    it,
 6200|      0|                    calculate_text_width(make_contiguous_buffer(
 6201|      0|                                             ranges::subrange{rng.begin(), it})
 6202|      0|                                             .view())};
 6203|      0|            }
 6204|      0|            return result_type{it, 0};
 6205|      0|        }
 6206|   361k|        return result_type{rng.begin(), 0};
 6207|   361k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6277|   136k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|   136k|                          basic_contiguous_scan_context<char_type>>) {
 6282|   136k|            auto rd = make_reader<T, char_type>();
 6283|   136k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   136k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 136k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6284|   136k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   136k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|   136k|    {
 6213|   136k|        const bool need_skipped_width =
 6214|   136k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 136k]
  |  Branch (6214:33): [True: 0, False: 136k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   136k|        auto it = rng.begin();
 6218|   136k|        std::ptrdiff_t prefix_width = 0;
 6219|   136k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 136k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   136k|        else {
 6227|   136k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   136k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   136k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   136k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.80k, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.80k|    }                                                  \
  |  |  |  | 3957|   136k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   134k|            std::tie(it, prefix_width) = prefix_result;
 6229|   134k|        }
 6230|   134k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   134k|        std::ptrdiff_t value_width = 0;
 6234|   134k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 134k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   134k|        else {
 6250|   134k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 15.8k, False: 118k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  15.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  15.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  15.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  15.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  15.8k|    }                                                  \
  |  | 3957|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   134k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   118k|                                             specs, value, loc));
 6252|       |
 6253|   118k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 118k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   118k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   118k|        std::ptrdiff_t postfix_width = 0;
 6262|   118k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 117k, False: 1.47k]
  ------------------
 6263|   117k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 117k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   117k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   117k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   117k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   117k|                                 value_width));
 6267|   117k|            std::tie(it, postfix_width) = postfix_result;
 6268|   117k|        }
 6269|       |
 6270|   118k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   118k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 118k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   118k|            specs, prefix_width, value_width, postfix_width));
 6272|   118k|        return it;
 6273|   118k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6277|   140k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|   140k|                          basic_contiguous_scan_context<char_type>>) {
 6282|   140k|            auto rd = make_reader<T, char_type>();
 6283|   140k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   140k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 140k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6284|   140k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   140k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|   140k|    {
 6213|   140k|        const bool need_skipped_width =
 6214|   140k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 140k]
  |  Branch (6214:33): [True: 0, False: 140k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   140k|        auto it = rng.begin();
 6218|   140k|        std::ptrdiff_t prefix_width = 0;
 6219|   140k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 140k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   140k|        else {
 6227|   140k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.00k, False: 138k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.00k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.00k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.00k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.00k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.00k|    }                                                  \
  |  |  |  | 3957|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   138k|            std::tie(it, prefix_width) = prefix_result;
 6229|   138k|        }
 6230|   138k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   138k|        std::ptrdiff_t value_width = 0;
 6234|   138k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 138k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   138k|        else {
 6250|   138k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   138k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   138k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   138k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 15.6k, False: 122k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  15.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  15.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  15.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  15.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  15.6k|    }                                                  \
  |  | 3957|   138k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   138k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   122k|                                             specs, value, loc));
 6252|       |
 6253|   122k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 122k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   122k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   122k|        std::ptrdiff_t postfix_width = 0;
 6262|   122k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 120k, False: 1.64k]
  ------------------
 6263|   120k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   120k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   120k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   120k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 120k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   120k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   120k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   120k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   120k|                                 value_width));
 6267|   120k|            std::tie(it, postfix_width) = postfix_result;
 6268|   120k|        }
 6269|       |
 6270|   122k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   122k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 122k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   122k|            specs, prefix_width, value_width, postfix_width));
 6272|   122k|        return it;
 6273|   122k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6277|   142k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|   142k|                          basic_contiguous_scan_context<char_type>>) {
 6282|   142k|            auto rd = make_reader<T, char_type>();
 6283|   142k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   142k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 142k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6284|   142k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   142k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_21reader_impl_for_floatIcEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|   142k|    {
 6213|   142k|        const bool need_skipped_width =
 6214|   142k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 142k]
  |  Branch (6214:33): [True: 0, False: 142k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   142k|        auto it = rng.begin();
 6218|   142k|        std::ptrdiff_t prefix_width = 0;
 6219|   142k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 142k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   142k|        else {
 6227|   142k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   142k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   142k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   142k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.17k, False: 140k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.17k|    }                                                  \
  |  |  |  | 3957|   142k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   140k|            std::tie(it, prefix_width) = prefix_result;
 6229|   140k|        }
 6230|   140k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   140k|        std::ptrdiff_t value_width = 0;
 6234|   140k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 140k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   140k|        else {
 6250|   140k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 15.4k, False: 125k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  15.4k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  15.4k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  15.4k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  15.4k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  15.4k|    }                                                  \
  |  | 3957|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   140k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|   125k|                                             specs, value, loc));
 6252|       |
 6253|   125k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 125k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|   125k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|   125k|        std::ptrdiff_t postfix_width = 0;
 6262|   125k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 123k, False: 1.78k]
  ------------------
 6263|   123k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   123k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   123k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   123k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   123k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 123k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   123k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   123k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|   123k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|   123k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|   123k|                                 value_width));
 6267|   123k|            std::tie(it, postfix_width) = postfix_result;
 6268|   123k|        }
 6269|       |
 6270|   125k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   125k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 125k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|   125k|            specs, prefix_width, value_width, postfix_width));
 6272|   125k|        return it;
 6273|   125k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5883|   136k|{
 5884|   136k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 504, False: 136k]
  |  |  ------------------
  ------------------
 5885|    504|        return unexpected(e);
 5886|    504|    }
 5887|       |
 5888|   136k|    if (!is_required) {
  ------------------
  |  Branch (5888:9): [True: 0, False: 136k]
  ------------------
 5889|      0|        return range.begin();
 5890|      0|    }
 5891|       |
 5892|   136k|    return skip_classic_whitespace(range);
 5893|   136k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 5961|  40.7k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|  40.7k|                          basic_contiguous_scan_context<char_type>>) {
 5966|  40.7k|            auto rd = make_reader<T, char_type>();
 5967|  40.7k|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  40.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|  40.7k|    {
 5954|  40.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  40.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  40.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  40.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  40.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 297, False: 40.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    297|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    297|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    297|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    297|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    297|    }                                                  \
  |  |  |  | 3957|  40.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  40.4k|                        .transform_error(make_eof_scan_error));
 5956|  40.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  40.7k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4237|  40.4k|    {
 4238|  40.4k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  40.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  40.4k|        float_reader<CharT> rd{};
 4241|  40.4k|        return read_impl<Range>(
 4242|  40.4k|            range, rd,
 4243|  40.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  40.4k|                return r.read_source(SCN_FWD(args)...);
 4245|  40.4k|            },
 4246|  40.4k|            value);
 4247|  40.4k|    }
_ZN3scn2v44impl12float_readerIwEC2Ev:
 3731|   271k|    constexpr float_reader() = default;
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  40.4k|        : m_fptr([](storage fn,
  743|  40.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.4k|              cvref<T> obj = *get<T>(fn);
  745|  40.4k|              if constexpr (std::is_void_v<R>) {
  746|  40.4k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.4k|              }
  748|  40.4k|              else {
  749|  40.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.4k|              }
  751|  40.4k|          }),
  752|  40.4k|          m_storage(std::addressof(f))
  753|  40.4k|    {
  754|  40.4k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_fEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  40.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.4k|              else {
  749|  40.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.4k|              }
  751|  40.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.4k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.4k|        else if constexpr (std::is_object_v<T>) {
  688|  40.4k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.4k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4243|  40.4k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  40.4k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  40.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  40.4k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  40.4k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.4k|        {
  662|  40.4k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 5961|  47.3k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|  47.3k|                          basic_contiguous_scan_context<char_type>>) {
 5966|  47.3k|            auto rd = make_reader<T, char_type>();
 5967|  47.3k|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  47.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|  47.3k|    {
 5954|  47.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  47.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  47.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  47.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 345, False: 46.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    345|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    345|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    345|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    345|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    345|    }                                                  \
  |  |  |  | 3957|  47.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  46.9k|                        .transform_error(make_eof_scan_error));
 5956|  46.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  47.3k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4237|  46.9k|    {
 4238|  46.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  46.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  46.9k|        float_reader<CharT> rd{};
 4241|  46.9k|        return read_impl<Range>(
 4242|  46.9k|            range, rd,
 4243|  46.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  46.9k|                return r.read_source(SCN_FWD(args)...);
 4245|  46.9k|            },
 4246|  46.9k|            value);
 4247|  46.9k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  46.9k|        : m_fptr([](storage fn,
  743|  46.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.9k|              cvref<T> obj = *get<T>(fn);
  745|  46.9k|              if constexpr (std::is_void_v<R>) {
  746|  46.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  46.9k|              }
  748|  46.9k|              else {
  749|  46.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.9k|              }
  751|  46.9k|          }),
  752|  46.9k|          m_storage(std::addressof(f))
  753|  46.9k|    {
  754|  46.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_dEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  46.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  46.9k|              else {
  749|  46.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.9k|              }
  751|  46.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  46.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  46.9k|        else if constexpr (std::is_object_v<T>) {
  688|  46.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  46.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4243|  46.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  46.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  46.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  46.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  46.9k|        {
  662|  46.9k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 5961|  48.9k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|  48.9k|                          basic_contiguous_scan_context<char_type>>) {
 5966|  48.9k|            auto rd = make_reader<T, char_type>();
 5967|  48.9k|            return impl(rd, range, value);
 5968|       |        }
 5969|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5970|       |            auto rd = make_reader<T, char_type>();
 5971|       |            if (!is_segment_contiguous(range)) {
 5972|       |                return impl(rd, range, value);
 5973|       |            }
 5974|       |            auto crange = get_as_contiguous(range);
 5975|       |            SCN_TRY(it, impl(rd, crange, value));
 5976|       |            return ranges::next(range.begin(),
 5977|       |                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  48.9k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 5953|  48.9k|    {
 5954|  48.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  48.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  48.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  48.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  48.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 378, False: 48.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    378|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    378|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    378|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    378|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    378|    }                                                  \
  |  |  |  | 3957|  48.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  48.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  48.5k|                        .transform_error(make_eof_scan_error));
 5956|  48.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  48.9k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refE:
 4237|  48.5k|    {
 4238|  48.5k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  48.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  48.5k|        float_reader<CharT> rd{};
 4241|  48.5k|        return read_impl<Range>(
 4242|  48.5k|            range, rd,
 4243|  48.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  48.5k|                return r.read_source(SCN_FWD(args)...);
 4245|  48.5k|            },
 4246|  48.5k|            value);
 4247|  48.5k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_:
  742|  48.5k|        : m_fptr([](storage fn,
  743|  48.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.5k|              cvref<T> obj = *get<T>(fn);
  745|  48.5k|              if constexpr (std::is_void_v<R>) {
  746|  48.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  48.5k|              }
  748|  48.5k|              else {
  749|  48.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.5k|              }
  751|  48.5k|          }),
  752|  48.5k|          m_storage(std::addressof(f))
  753|  48.5k|    {
  754|  48.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedIPKwEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS5_S5_EENS0_6detail10locale_refEESH_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISE_eEENS3_IDTclL_ZNSA_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESP_RT0_SG_EUlS9_DpOT_E_S10_TnPNSN_9enable_ifIXaaaasr6detailE11is_not_selfISP_SI_Entsr3stdE19is_member_pointer_vISV_E18is_invocable_usingISW_EEvE4typeELPv0EEEOSP_ENKUlNS1_12fnref_detail4base7storageES9_SE_SG_E_clES19_S9_SE_SG_:
  743|  48.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  48.5k|              else {
  749|  48.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.5k|              }
  751|  48.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  48.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  48.5k|        else if constexpr (std::is_object_v<T>) {
  688|  48.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  48.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RT0_NS0_6detail10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSB_SO_EEEDaSR_SU_:
 4243|  48.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  48.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  48.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  48.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  48.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  48.5k|        {
  662|  48.5k|        }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3017|   370k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|   370k|    static_cast<    \
  |  | 1109|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|   370k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|   370k|          m_current(m_range.begin())
 3020|   370k|    {
 3021|   370k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3029|   635k|    {
 3030|   635k|        return m_range.end();
 3031|   635k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3044|   265k|    {
 3045|   265k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|   265k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   265k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|   265k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|   265k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 265k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|   265k|        }
 3051|   265k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   265k|    static_cast<    \
  |  | 1109|   265k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|   265k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3034|   370k|    {
 3035|   370k|        return ranges::subrange{begin(), end()};
 3036|   370k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6125|   370k|    {
 6126|   370k|        const bool need_skipped_width =
 6127|   370k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6127:13): [True: 0, False: 370k]
  |  Branch (6127:33): [True: 0, False: 370k]
  ------------------
 6128|   370k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6129|       |
 6130|       |        // Read prefix
 6131|   370k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6131:13): [True: 0, False: 370k]
  ------------------
 6132|   370k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6132:13): [True: 0, False: 370k]
  ------------------
 6133|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6134|      0|                             need_skipped_width);
 6135|      0|        }
 6136|   370k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6136:13): [True: 370k, False: 0]
  |  Branch (6136:56): [True: 370k, False: 0]
  ------------------
 6137|       |            // Default alignment:
 6138|       |            // Skip preceding whitespace, if required by the reader
 6139|   370k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6139:17): [True: 0, False: 370k]
  ------------------
 6140|      0|                auto max_width_view = take_width(rng, specs.precision);
 6141|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6142|      0|                                  .transform_error(make_eof_scan_error));
 6143|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6144|      0|            }
 6145|   738k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   370k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   370k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   370k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.96k, False: 367k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.96k|    }                                                  \
  |  |  |  | 3957|   370k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   367k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|   738k|                            make_eof_scan_error));
 6147|       |
 6148|   738k|            if (need_skipped_width) {
  ------------------
  |  Branch (6148:17): [True: 0, False: 367k]
  ------------------
 6149|      0|                return result_type{
 6150|      0|                    it,
 6151|      0|                    calculate_text_width(make_contiguous_buffer(
 6152|      0|                                             ranges::subrange{rng.begin(), it})
 6153|      0|                                             .view())};
 6154|      0|            }
 6155|   367k|            return result_type{it, 0};
 6156|   738k|        }
 6157|       |
 6158|      0|        return result_type{rng.begin(), 0};
 6159|   370k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6167|   263k|    {
 6168|   263k|        const bool need_skipped_width =
 6169|   263k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6169:13): [True: 0, False: 263k]
  |  Branch (6169:33): [True: 0, False: 263k]
  ------------------
 6170|   263k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6171|       |
 6172|   263k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6172:13): [True: 0, False: 263k]
  ------------------
 6173|   263k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6173:13): [True: 0, False: 263k]
  ------------------
 6174|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6174:17): [True: 0, False: 0]
  ------------------
 6175|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6175:17): [True: 0, False: 0]
  ------------------
 6176|      0|                return result_type{rng.begin(), 0};
 6177|      0|            }
 6178|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6179|      0|                             specs.fill, need_skipped_width);
 6180|      0|        }
 6181|   263k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6181:13): [True: 263k, False: 0]
  ------------------
 6182|   263k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6182:13): [True: 0, False: 263k]
  ------------------
 6183|   263k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6183:15): [True: 0, False: 0]
  |  Branch (6183:35): [True: 0, False: 0]
  ------------------
 6184|      0|             (specs.precision != 0 &&
  ------------------
  |  Branch (6184:15): [True: 0, False: 0]
  ------------------
 6185|      0|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6185:15): [True: 0, False: 0]
  ------------------
 6186|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6186:17): [True: 0, False: 0]
  ------------------
 6187|      0|                const auto initial_width =
 6188|      0|                    specs.precision - prefix_width - value_width;
 6189|      0|                auto max_width_view = take_width(rng, initial_width);
 6190|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6191|      0|                                  .transform_error(make_eof_scan_error));
 6192|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6193|      0|            }
 6194|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|                            make_eof_scan_error));
 6196|       |
 6197|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6197:17): [True: 0, False: 0]
  ------------------
 6198|      0|                return result_type{
 6199|      0|                    it,
 6200|      0|                    calculate_text_width(make_contiguous_buffer(
 6201|      0|                                             ranges::subrange{rng.begin(), it})
 6202|      0|                                             .view())};
 6203|      0|            }
 6204|      0|            return result_type{it, 0};
 6205|      0|        }
 6206|   263k|        return result_type{rng.begin(), 0};
 6207|   263k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIfEENS0_13scan_expectedIS9_EERT_:
 6277|   116k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|   116k|                          basic_contiguous_scan_context<char_type>>) {
 6282|   116k|            auto rd = make_reader<T, char_type>();
 6283|   116k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   116k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 116k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6284|   116k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   116k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_fEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|   116k|    {
 6213|   116k|        const bool need_skipped_width =
 6214|   116k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 116k]
  |  Branch (6214:33): [True: 0, False: 116k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   116k|        auto it = rng.begin();
 6218|   116k|        std::ptrdiff_t prefix_width = 0;
 6219|   116k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 116k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   116k|        else {
 6227|   116k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 918, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    918|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    918|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    918|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    918|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    918|    }                                                  \
  |  |  |  | 3957|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   116k|            std::tie(it, prefix_width) = prefix_result;
 6229|   116k|        }
 6230|   116k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   116k|        std::ptrdiff_t value_width = 0;
 6234|   116k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 116k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   116k|        else {
 6250|   116k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 34.3k, False: 81.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  34.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  34.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  34.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  34.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  34.3k|    }                                                  \
  |  | 3957|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|  81.6k|                                             specs, value, loc));
 6252|       |
 6253|  81.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 81.6k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|  81.6k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|  81.6k|        std::ptrdiff_t postfix_width = 0;
 6262|  81.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 81.2k, False: 414]
  ------------------
 6263|  81.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  81.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  81.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  81.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  81.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 81.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  81.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  81.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|  81.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|  81.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|  81.2k|                                 value_width));
 6267|  81.2k|            std::tie(it, postfix_width) = postfix_result;
 6268|  81.2k|        }
 6269|       |
 6270|  81.6k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  81.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  81.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 81.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|  81.6k|            specs, prefix_width, value_width, postfix_width));
 6272|  81.6k|        return it;
 6273|  81.6k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIdEENS0_13scan_expectedIS9_EERT_:
 6277|   125k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|   125k|                          basic_contiguous_scan_context<char_type>>) {
 6282|   125k|            auto rd = make_reader<T, char_type>();
 6283|   125k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   125k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 125k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6284|   125k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   125k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_dEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|   125k|    {
 6213|   125k|        const bool need_skipped_width =
 6214|   125k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 125k]
  |  Branch (6214:33): [True: 0, False: 125k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   125k|        auto it = rng.begin();
 6218|   125k|        std::ptrdiff_t prefix_width = 0;
 6219|   125k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 125k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   125k|        else {
 6227|   125k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   125k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   125k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   125k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 996, False: 124k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    996|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    996|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    996|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    996|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    996|    }                                                  \
  |  |  |  | 3957|   125k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   124k|            std::tie(it, prefix_width) = prefix_result;
 6229|   124k|        }
 6230|   124k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   124k|        std::ptrdiff_t value_width = 0;
 6234|   124k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 124k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   124k|        else {
 6250|   124k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   124k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   124k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 34.2k, False: 90.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  34.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  34.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  34.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  34.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  34.2k|    }                                                  \
  |  | 3957|   124k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|  90.5k|                                             specs, value, loc));
 6252|       |
 6253|  90.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 90.5k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|  90.5k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|  90.5k|        std::ptrdiff_t postfix_width = 0;
 6262|  90.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 90.0k, False: 460]
  ------------------
 6263|  90.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  90.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  90.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  90.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  90.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 90.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  90.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  90.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|  90.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|  90.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|  90.0k|                                 value_width));
 6267|  90.0k|            std::tie(it, postfix_width) = postfix_result;
 6268|  90.0k|        }
 6269|       |
 6270|  90.5k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  90.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  90.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 90.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|  90.5k|            specs, prefix_width, value_width, postfix_width));
 6272|  90.5k|        return it;
 6273|  90.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclIeEENS0_13scan_expectedIS9_EERT_:
 6277|   128k|    {
 6278|       |        if constexpr (!detail::is_type_disabled<T> &&
 6279|       |                      std::is_same_v<
 6280|       |                          context_type,
 6281|   128k|                          basic_contiguous_scan_context<char_type>>) {
 6282|   128k|            auto rd = make_reader<T, char_type>();
 6283|   128k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   128k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 128k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6284|   128k|            return impl(rd, range, value);
 6285|       |        }
 6286|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6287|       |            auto rd = make_reader<T, char_type>();
 6288|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6289|       |
 6290|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6291|       |                specs.width != 0) {
 6292|       |                return impl(rd, range, value);
 6293|       |            }
 6294|       |
 6295|       |            auto crange = get_as_contiguous(range);
 6296|       |            SCN_TRY(it, impl(rd, crange, value));
 6297|       |            return ranges::next(range.begin(),
 6298|       |                                ranges::distance(crange.begin(), it));
 6299|       |        }
 6300|       |        else {
 6301|       |            SCN_EXPECT(false);
 6302|       |            SCN_UNREACHABLE;
 6303|       |        }
 6304|   128k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_21reader_impl_for_floatIwEESA_eEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SH_RT1_:
 6212|   128k|    {
 6213|   128k|        const bool need_skipped_width =
 6214|   128k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6214:13): [True: 0, False: 128k]
  |  Branch (6214:33): [True: 0, False: 128k]
  ------------------
 6215|       |
 6216|       |        // Read prefix
 6217|   128k|        auto it = rng.begin();
 6218|   128k|        std::ptrdiff_t prefix_width = 0;
 6219|   128k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6219:13): [True: 0, False: 128k]
  ------------------
 6220|      0|            auto max_width_view = take_width(rng, specs.precision);
 6221|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6222|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6223|      0|            it = prefix_result.first.base();
 6224|      0|            prefix_width = prefix_result.second;
 6225|      0|        }
 6226|   128k|        else {
 6227|   128k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   128k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   128k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   128k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.05k, False: 126k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.05k|    }                                                  \
  |  |  |  | 3957|   128k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6228|   126k|            std::tie(it, prefix_width) = prefix_result;
 6229|   126k|        }
 6230|   126k|        auto prefix_end_it = it;
 6231|       |
 6232|       |        // Read value
 6233|   126k|        std::ptrdiff_t value_width = 0;
 6234|   126k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6234:13): [True: 0, False: 126k]
  ------------------
 6235|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6235:17): [True: 0, False: 0]
  ------------------
 6236|      0|                return detail::unexpected_scan_error(
 6237|      0|                    scan_error::invalid_fill,
 6238|      0|                    "Too many fill characters before value, "
 6239|      0|                    "precision exceeded before reading value");
 6240|      0|            }
 6241|       |
 6242|      0|            const auto initial_width = specs.precision - prefix_width;
 6243|      0|            auto max_width_view =
 6244|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6245|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            it = w_it.base();
 6247|      0|            value_width = initial_width - w_it.count();
 6248|      0|        }
 6249|   126k|        else {
 6250|   126k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   126k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   126k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   126k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 34.2k, False: 92.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  34.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  34.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  34.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  34.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  34.2k|    }                                                  \
  |  | 3957|   126k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6251|  92.7k|                                             specs, value, loc));
 6252|       |
 6253|  92.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 92.7k]
  ------------------
 6254|      0|                value_width = calculate_text_width(
 6255|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6256|      0|                        .view());
 6257|      0|            }
 6258|  92.7k|        }
 6259|       |
 6260|       |        // Read postfix
 6261|  92.7k|        std::ptrdiff_t postfix_width = 0;
 6262|  92.7k|        if (it != rng.end()) {
  ------------------
  |  Branch (6262:13): [True: 92.2k, False: 492]
  ------------------
 6263|  92.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  92.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  92.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  92.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  92.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 92.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  92.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  92.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|  92.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6265|  92.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6266|  92.2k|                                 value_width));
 6267|  92.2k|            std::tie(it, postfix_width) = postfix_result;
 6268|  92.2k|        }
 6269|       |
 6270|  92.7k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  92.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  92.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 92.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6271|  92.7k|            specs, prefix_width, value_width, postfix_width));
 6272|  92.7k|        return it;
 6273|  92.7k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5883|   136k|{
 5884|   136k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   136k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 504, False: 136k]
  |  |  ------------------
  ------------------
 5885|    504|        return unexpected(e);
 5886|    504|    }
 5887|       |
 5888|   136k|    if (!is_required) {
  ------------------
  |  Branch (5888:9): [True: 0, False: 136k]
  ------------------
 5889|      0|        return range.begin();
 5890|      0|    }
 5891|       |
 5892|   136k|    return skip_classic_whitespace(range);
 5893|   136k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIfEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5961|  40.6k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|       |                          basic_contiguous_scan_context<char_type>>) {
 5966|       |            auto rd = make_reader<T, char_type>();
 5967|       |            return impl(rd, range, value);
 5968|       |        }
 5969|  40.6k|        else if constexpr (!detail::is_type_disabled<T>) {
 5970|  40.6k|            auto rd = make_reader<T, char_type>();
 5971|  40.6k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5971:17): [True: 40.6k, False: 0]
  ------------------
 5972|  40.6k|                return impl(rd, range, value);
 5973|  40.6k|            }
 5974|      0|            auto crange = get_as_contiguous(range);
 5975|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5976|      0|            return ranges::next(range.begin(),
 5977|      0|                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  40.6k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5953|  40.6k|    {
 5954|  40.6k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  40.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  40.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  40.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  40.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 297, False: 40.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    297|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    297|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    297|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    297|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    297|    }                                                  \
  |  |  |  | 3957|  40.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  40.3k|                        .transform_error(make_eof_scan_error));
 5956|  40.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  40.6k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4237|  40.3k|    {
 4238|  40.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  40.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  40.3k|        float_reader<CharT> rd{};
 4241|  40.3k|        return read_impl<Range>(
 4242|  40.3k|            range, rd,
 4243|  40.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  40.3k|                return r.read_source(SCN_FWD(args)...);
 4245|  40.3k|            },
 4246|  40.3k|            value);
 4247|  40.3k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  40.3k|        : m_fptr([](storage fn,
  743|  40.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.3k|              cvref<T> obj = *get<T>(fn);
  745|  40.3k|              if constexpr (std::is_void_v<R>) {
  746|  40.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  40.3k|              }
  748|  40.3k|              else {
  749|  40.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.3k|              }
  751|  40.3k|          }),
  752|  40.3k|          m_storage(std::addressof(f))
  753|  40.3k|    {
  754|  40.3k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_fEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  40.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  40.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  40.3k|              else {
  749|  40.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  40.3k|              }
  751|  40.3k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  40.3k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  40.3k|        else if constexpr (std::is_object_v<T>) {
  688|  40.3k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  40.3k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4243|  40.3k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  40.3k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  40.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  40.3k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEfEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  40.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  40.3k|        {
  662|  40.3k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIdEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5961|  47.2k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|       |                          basic_contiguous_scan_context<char_type>>) {
 5966|       |            auto rd = make_reader<T, char_type>();
 5967|       |            return impl(rd, range, value);
 5968|       |        }
 5969|  47.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5970|  47.2k|            auto rd = make_reader<T, char_type>();
 5971|  47.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5971:17): [True: 47.2k, False: 0]
  ------------------
 5972|  47.2k|                return impl(rd, range, value);
 5973|  47.2k|            }
 5974|      0|            auto crange = get_as_contiguous(range);
 5975|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5976|      0|            return ranges::next(range.begin(),
 5977|      0|                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  47.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5953|  47.2k|    {
 5954|  47.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  47.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  47.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  47.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  47.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 345, False: 46.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    345|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    345|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    345|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    345|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    345|    }                                                  \
  |  |  |  | 3957|  47.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  46.9k|                        .transform_error(make_eof_scan_error));
 5956|  46.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  47.2k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4237|  46.9k|    {
 4238|  46.9k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  46.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  46.9k|        float_reader<CharT> rd{};
 4241|  46.9k|        return read_impl<Range>(
 4242|  46.9k|            range, rd,
 4243|  46.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  46.9k|                return r.read_source(SCN_FWD(args)...);
 4245|  46.9k|            },
 4246|  46.9k|            value);
 4247|  46.9k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  46.9k|        : m_fptr([](storage fn,
  743|  46.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.9k|              cvref<T> obj = *get<T>(fn);
  745|  46.9k|              if constexpr (std::is_void_v<R>) {
  746|  46.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  46.9k|              }
  748|  46.9k|              else {
  749|  46.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.9k|              }
  751|  46.9k|          }),
  752|  46.9k|          m_storage(std::addressof(f))
  753|  46.9k|    {
  754|  46.9k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_dEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  46.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  46.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  46.9k|              else {
  749|  46.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  46.9k|              }
  751|  46.9k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  46.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  46.9k|        else if constexpr (std::is_object_v<T>) {
  688|  46.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  46.9k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4243|  46.9k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  46.9k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  46.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  46.9k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEdEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  46.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  46.9k|        {
  662|  46.9k|        }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclIeEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5961|  48.8k|    {
 5962|       |        if constexpr (!detail::is_type_disabled<T> &&
 5963|       |                      std::is_same_v<
 5964|       |                          context_type,
 5965|       |                          basic_contiguous_scan_context<char_type>>) {
 5966|       |            auto rd = make_reader<T, char_type>();
 5967|       |            return impl(rd, range, value);
 5968|       |        }
 5969|  48.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 5970|  48.8k|            auto rd = make_reader<T, char_type>();
 5971|  48.8k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5971:17): [True: 48.8k, False: 0]
  ------------------
 5972|  48.8k|                return impl(rd, range, value);
 5973|  48.8k|            }
 5974|      0|            auto crange = get_as_contiguous(range);
 5975|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5976|      0|            return ranges::next(range.begin(),
 5977|      0|                                ranges::distance(crange.begin(), it));
 5978|       |        }
 5979|       |        else {
 5980|       |            SCN_EXPECT(false);
 5981|       |            SCN_UNREACHABLE;
 5982|       |        }
 5983|  48.8k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_21reader_impl_for_floatIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SL_RT1_:
 5953|  48.8k|    {
 5954|  48.8k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  48.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  48.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  48.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  48.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 378, False: 48.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    378|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    378|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    378|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    378|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    378|    }                                                  \
  |  |  |  | 3957|  48.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  48.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5955|  48.5k|                        .transform_error(make_eof_scan_error));
 5956|  48.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5957|  48.8k|    }
_ZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refE:
 4237|  48.5k|    {
 4238|  48.5k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  48.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4239|       |
 4240|  48.5k|        float_reader<CharT> rd{};
 4241|  48.5k|        return read_impl<Range>(
 4242|  48.5k|            range, rd,
 4243|  48.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  48.5k|                return r.read_source(SCN_FWD(args)...);
 4245|  48.5k|            },
 4246|  48.5k|            value);
 4247|  48.5k|    }
_ZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC2IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_:
  742|  48.5k|        : m_fptr([](storage fn,
  743|  48.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.5k|              cvref<T> obj = *get<T>(fn);
  745|  48.5k|              if constexpr (std::is_void_v<R>) {
  746|  48.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  48.5k|              }
  748|  48.5k|              else {
  749|  48.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.5k|              }
  751|  48.5k|          }),
  752|  48.5k|          m_storage(std::addressof(f))
  753|  48.5k|    {
  754|  48.5k|    }
_ZZN3scn2v44impl12function_refIFNS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERNS1_12float_readerIwEENS0_6ranges6detail9subrange_8subrangeIS7_NSC_18default_sentinel_tEEENS4_10locale_refEESJ_EC1IZNS1_21reader_impl_for_floatIwE12read_defaultISH_eEENS3_IDTclL_ZNSC_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESR_RT0_SI_EUlSB_DpOT_E_S12_TnPNSP_9enable_ifIXaaaasr6detailE11is_not_selfISR_SK_Entsr3stdE19is_member_pointer_vISX_E18is_invocable_usingISY_EEvE4typeELPv0EEEOSR_ENKUlNS1_12fnref_detail4base7storageESB_SH_SI_E_clES1B_SB_SH_SI_:
  743|  48.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  48.5k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  48.5k|              else {
  749|  48.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  48.5k|              }
  751|  48.5k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_RT0_NSC_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_EEDaNS3_7storageE:
  683|  48.5k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  48.5k|        else if constexpr (std::is_object_v<T>) {
  688|  48.5k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  48.5k|    }
_ZZN3scn2v44impl21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RT0_NS9_10locale_refEENKUlRNS1_12float_readerIwEEDpOT_E_clIJSE_SQ_EEEDaST_SW_:
 4243|  48.5k|            [](float_reader<CharT>& r, auto&&... args) {
 4244|  48.5k|                return r.read_source(SCN_FWD(args)...);
  ------------------
  |  | 1110|  48.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4245|  48.5k|            },
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_21reader_impl_for_floatIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEeEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_RT0_NSD_10locale_refEEUlRNS1_12float_readerIwEEDpOT_E_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPSM_:
  660|  48.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  48.5k|        {
  662|  48.5k|        }

LLVMFuzzerTestOneInput:
   54|  1.76k|{
   55|  1.76k|    scn::fuzz::run(data, size);
   56|  1.76k|    return 0;
   57|  1.76k|}
float_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   32|  1.76k|{
   33|  1.76k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (33:9): [True: 0, False: 1.76k]
  |  Branch (33:35): [True: 0, False: 1.76k]
  ------------------
   34|      0|        return;
   35|      0|    }
   36|       |
   37|  1.76k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   38|       |
   39|  1.76k|    const auto& f =
   40|  1.76k|        get_format_strings<char>("{}", "{:a}", "{:e}", "{:f}", "{:g}", "{:L}");
   41|  1.76k|    do_basic_run(sv, f);
   42|       |
   43|  1.76k|    const auto& wf = get_format_strings<wchar_t>(L"{}", L"{:a}", L"{:e}",
   44|  1.76k|                                                 L"{:f}", L"{:g}", L"{:L}");
   45|  1.76k|    do_basic_run(wsv_reinterpret, wf);
   46|  1.76k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (46:9): [True: 1.76k, False: 0]
  ------------------
   47|  1.76k|        do_basic_run(wsv_transcode, wf);
   48|  1.76k|    }
   49|  1.76k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.76k|{
   25|  1.76k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  1.76k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  1.76k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  1.76k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.76k|{
   25|  1.76k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  1.76k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  1.76k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  1.76k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  3.52k|{
   25|  3.52k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.52k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.52k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.52k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  3.52k|{
   25|  3.52k|    do_basic_run_for_type<CharT, float>(source, format_strings);
   26|  3.52k|    do_basic_run_for_type<CharT, double>(source, format_strings);
   27|  3.52k|    do_basic_run_for_type<CharT, long double>(source, format_strings);
   28|  3.52k|}

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|  1.76k|{
   53|  1.76k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1104|  1.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|  1.76k|    string_buffer.resize(size);
   57|  1.76k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|  1.76k|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|  1.76k|    const auto wsv_reinterpret_size =
   62|  1.76k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 65, False: 1.69k]
  ------------------
   63|  1.76k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|  1.76k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|  1.76k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|  1.76k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|  1.76k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|  1.76k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|  1.76k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  1.76k|{
  123|  1.76k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  1.76k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  1.76k|    buf.resize(sizeof...(Args));
  126|  1.76k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  1.76k|    return buf;
  128|  1.76k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|  1.76k|{
  109|  1.76k|    if constexpr (std::is_same_v<CharT, char>) {
  110|  1.76k|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|  1.76k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.76k|{
  186|  1.76k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.76k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.76k|                                   format_strings);
  189|  1.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.76k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.76k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  86.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  86.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  86.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  86.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  86.1k|            auto result = scn::scan<T>(
  140|  86.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  86.1k|                scn::runtime_format(f));
  142|  86.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 75.5k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  75.5k|            it = result->begin();
  146|  75.5k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.76k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  86.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  86.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  86.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  86.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  86.1k|            auto result = scn::scan<T>(
  155|  86.1k|                global_locale,
  156|  86.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  86.1k|                scn::runtime_format(f));
  158|  86.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 75.5k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  75.5k|            it = result->begin();
  162|  75.5k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.76k|    {
  167|  1.76k|        auto it = scn::ranges::begin(source);
  168|  18.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  18.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  18.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  18.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  18.0k|            auto result = scn::scan_value<T>(
  171|  18.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  18.0k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.76k, False: 16.2k]
  ------------------
  173|  1.76k|                break;
  174|  1.76k|            }
  175|  16.2k|            it = result->begin();
  176|  16.2k|        }
  177|  1.76k|    }
  178|  1.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.76k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.76k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  89.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  89.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  89.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  89.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  89.0k|            auto result = scn::scan<T>(
  140|  89.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  89.0k|                scn::runtime_format(f));
  142|  89.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 78.4k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  78.4k|            it = result->begin();
  146|  78.4k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.76k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  89.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  89.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  89.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  89.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  89.0k|            auto result = scn::scan<T>(
  155|  89.0k|                global_locale,
  156|  89.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  89.0k|                scn::runtime_format(f));
  158|  89.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 78.4k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  78.4k|            it = result->begin();
  162|  78.4k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.76k|    {
  167|  1.76k|        auto it = scn::ranges::begin(source);
  168|  18.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  18.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  18.8k|            auto result = scn::scan_value<T>(
  171|  18.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  18.8k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.76k, False: 17.1k]
  ------------------
  173|  1.76k|                break;
  174|  1.76k|            }
  175|  17.1k|            it = result->begin();
  176|  17.1k|        }
  177|  1.76k|    }
  178|  1.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.76k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.76k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  90.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  90.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  90.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  90.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  90.9k|            auto result = scn::scan<T>(
  140|  90.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  90.9k|                scn::runtime_format(f));
  142|  90.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 80.3k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  80.3k|            it = result->begin();
  146|  80.3k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.76k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  90.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  90.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  90.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  90.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  90.9k|            auto result = scn::scan<T>(
  155|  90.9k|                global_locale,
  156|  90.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  90.9k|                scn::runtime_format(f));
  158|  90.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 80.3k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  80.3k|            it = result->begin();
  162|  80.3k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.76k|    {
  167|  1.76k|        auto it = scn::ranges::begin(source);
  168|  19.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.5k|            auto result = scn::scan_value<T>(
  171|  19.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.76k, False: 17.7k]
  ------------------
  173|  1.76k|                break;
  174|  1.76k|            }
  175|  17.7k|            it = result->begin();
  176|  17.7k|        }
  177|  1.76k|    }
  178|  1.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcfKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.76k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.76k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  91.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  91.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  91.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  91.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  91.2k|            auto result = scn::scan<T>(
  140|  91.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  91.2k|                scn::runtime_format(f));
  142|  91.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 80.6k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  80.6k|            it = result->begin();
  146|  80.6k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.76k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  91.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  91.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  91.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  91.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  91.2k|            auto result = scn::scan<T>(
  155|  91.2k|                global_locale,
  156|  91.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  91.2k|                scn::runtime_format(f));
  158|  91.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 80.6k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  80.6k|            it = result->begin();
  162|  80.6k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.76k|    {
  167|  1.76k|        auto it = scn::ranges::begin(source);
  168|  18.1k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  18.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  18.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  18.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  18.1k|            auto result = scn::scan_value<T>(
  171|  18.1k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  18.1k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.76k, False: 16.3k]
  ------------------
  173|  1.76k|                break;
  174|  1.76k|            }
  175|  16.3k|            it = result->begin();
  176|  16.3k|        }
  177|  1.76k|    }
  178|  1.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcdKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.76k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.76k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  95.1k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  95.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  95.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  95.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  95.1k|            auto result = scn::scan<T>(
  140|  95.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  95.1k|                scn::runtime_format(f));
  142|  95.1k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 84.5k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  84.5k|            it = result->begin();
  146|  84.5k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.76k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  95.1k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  95.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  95.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  95.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  95.1k|            auto result = scn::scan<T>(
  155|  95.1k|                global_locale,
  156|  95.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  95.1k|                scn::runtime_format(f));
  158|  95.1k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 84.5k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  84.5k|            it = result->begin();
  162|  84.5k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.76k|    {
  167|  1.76k|        auto it = scn::ranges::begin(source);
  168|  18.9k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  18.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  18.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  18.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  18.9k|            auto result = scn::scan_value<T>(
  171|  18.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  18.9k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.76k, False: 17.1k]
  ------------------
  173|  1.76k|                break;
  174|  1.76k|            }
  175|  17.1k|            it = result->begin();
  176|  17.1k|        }
  177|  1.76k|    }
  178|  1.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIceKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  1.76k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.76k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|  97.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  97.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  97.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  97.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  97.0k|            auto result = scn::scan<T>(
  140|  97.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  97.0k|                scn::runtime_format(f));
  142|  97.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 86.4k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|  86.4k|            it = result->begin();
  146|  86.4k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.76k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|  97.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  97.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  97.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  97.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  97.0k|            auto result = scn::scan<T>(
  155|  97.0k|                global_locale,
  156|  97.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  97.0k|                scn::runtime_format(f));
  158|  97.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 86.4k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|  86.4k|            it = result->begin();
  162|  86.4k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.76k|    {
  167|  1.76k|        auto it = scn::ranges::begin(source);
  168|  19.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.3k|            auto result = scn::scan_value<T>(
  171|  19.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.3k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.76k, False: 17.5k]
  ------------------
  173|  1.76k|                break;
  174|  1.76k|            }
  175|  17.5k|            it = result->begin();
  176|  17.5k|        }
  177|  1.76k|    }
  178|  1.76k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|  1.76k|{
   91|  1.76k|    using char_type = ranges::range_value_t<Source>;
   92|  1.76k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.76k|    deque.clear();
   94|  1.76k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.76k|              std::back_inserter(deque));
   96|  1.76k|    return deque;
   97|  1.76k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|  1.76k|{
   80|  1.76k|    if constexpr (std::is_same_v<CharT, char>) {
   81|  1.76k|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|  1.76k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|  1.76k|{
  123|  1.76k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|  1.76k|    auto& buf = get_format_string_view_buffer<CharT>();
  125|  1.76k|    buf.resize(sizeof...(Args));
  126|  1.76k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|  1.76k|    return buf;
  128|  1.76k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|  1.76k|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|  1.76k|    else {
  113|  1.76k|        return wformat_string_view_buffer;
  114|  1.76k|    }
  115|  1.76k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  3.52k|{
  186|  3.52k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  3.52k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  3.52k|                                   format_strings);
  189|  3.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  3.52k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.52k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  72.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  72.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  72.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  72.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  72.0k|            auto result = scn::scan<T>(
  140|  72.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  72.0k|                scn::runtime_format(f));
  142|  72.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 50.8k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  50.8k|            it = result->begin();
  146|  50.8k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.52k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  72.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  72.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  72.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  72.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  72.0k|            auto result = scn::scan<T>(
  155|  72.0k|                global_locale,
  156|  72.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  72.0k|                scn::runtime_format(f));
  158|  72.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 50.8k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  50.8k|            it = result->begin();
  162|  50.8k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.52k|    {
  167|  3.52k|        auto it = scn::ranges::begin(source);
  168|  13.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  13.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  13.5k|            auto result = scn::scan_value<T>(
  171|  13.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  13.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.52k, False: 10.0k]
  ------------------
  173|  3.52k|                break;
  174|  3.52k|            }
  175|  10.0k|            it = result->begin();
  176|  10.0k|        }
  177|  3.52k|    }
  178|  3.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  3.52k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.52k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  78.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  78.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  78.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  78.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  78.6k|            auto result = scn::scan<T>(
  140|  78.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  78.6k|                scn::runtime_format(f));
  142|  78.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 57.5k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  57.5k|            it = result->begin();
  146|  57.5k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.52k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  78.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  78.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  78.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  78.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  78.6k|            auto result = scn::scan<T>(
  155|  78.6k|                global_locale,
  156|  78.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  78.6k|                scn::runtime_format(f));
  158|  78.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 57.5k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  57.5k|            it = result->begin();
  162|  57.5k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.52k|    {
  167|  3.52k|        auto it = scn::ranges::begin(source);
  168|  15.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.7k|            auto result = scn::scan_value<T>(
  171|  15.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.7k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.52k, False: 12.2k]
  ------------------
  173|  3.52k|                break;
  174|  3.52k|            }
  175|  12.2k|            it = result->begin();
  176|  12.2k|        }
  177|  3.52k|    }
  178|  3.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  3.52k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.52k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  80.3k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  80.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  80.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  80.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  80.3k|            auto result = scn::scan<T>(
  140|  80.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  80.3k|                scn::runtime_format(f));
  142|  80.3k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 59.1k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  59.1k|            it = result->begin();
  146|  59.1k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.52k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  80.3k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  80.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  80.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  80.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  80.3k|            auto result = scn::scan<T>(
  155|  80.3k|                global_locale,
  156|  80.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  80.3k|                scn::runtime_format(f));
  158|  80.3k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 59.1k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  59.1k|            it = result->begin();
  162|  59.1k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.52k|    {
  167|  3.52k|        auto it = scn::ranges::begin(source);
  168|  16.3k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  16.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.3k|            auto result = scn::scan_value<T>(
  171|  16.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.3k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.52k, False: 12.7k]
  ------------------
  173|  3.52k|                break;
  174|  3.52k|            }
  175|  12.7k|            it = result->begin();
  176|  12.7k|        }
  177|  3.52k|    }
  178|  3.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwfKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  3.52k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.52k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  72.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  72.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  72.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  72.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  72.0k|            auto result = scn::scan<T>(
  140|  72.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  72.0k|                scn::runtime_format(f));
  142|  72.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 50.8k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  50.8k|            it = result->begin();
  146|  50.8k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.52k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  72.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  72.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  72.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  72.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  72.0k|            auto result = scn::scan<T>(
  155|  72.0k|                global_locale,
  156|  72.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  72.0k|                scn::runtime_format(f));
  158|  72.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 50.8k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  50.8k|            it = result->begin();
  162|  50.8k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.52k|    {
  167|  3.52k|        auto it = scn::ranges::begin(source);
  168|  13.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  13.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  13.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  13.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  13.5k|            auto result = scn::scan_value<T>(
  171|  13.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  13.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.52k, False: 10.0k]
  ------------------
  173|  3.52k|                break;
  174|  3.52k|            }
  175|  10.0k|            it = result->begin();
  176|  10.0k|        }
  177|  3.52k|    }
  178|  3.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwdKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  3.52k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.52k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  78.6k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  78.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  78.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  78.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  78.6k|            auto result = scn::scan<T>(
  140|  78.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  78.6k|                scn::runtime_format(f));
  142|  78.6k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 57.4k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  57.4k|            it = result->begin();
  146|  57.4k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.52k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  78.6k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  78.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  78.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  78.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  78.6k|            auto result = scn::scan<T>(
  155|  78.6k|                global_locale,
  156|  78.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  78.6k|                scn::runtime_format(f));
  158|  78.6k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 57.4k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  57.4k|            it = result->begin();
  162|  57.4k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.52k|    {
  167|  3.52k|        auto it = scn::ranges::begin(source);
  168|  15.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.7k|            auto result = scn::scan_value<T>(
  171|  15.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.7k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.52k, False: 12.2k]
  ------------------
  173|  3.52k|                break;
  174|  3.52k|            }
  175|  12.2k|            it = result->begin();
  176|  12.2k|        }
  177|  3.52k|    }
  178|  3.52k|}
_ZN3scn4fuzz21do_basic_run_for_typeIweKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
  133|  3.52k|{
  134|       |    // Regular scan
  135|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 21.1k, False: 3.52k]
  ------------------
  136|  21.1k|        auto it = scn::ranges::begin(source);
  137|  80.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  80.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  80.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  80.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  80.2k|            auto result = scn::scan<T>(
  140|  80.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  80.2k|                scn::runtime_format(f));
  142|  80.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 21.1k, False: 59.1k]
  ------------------
  143|  21.1k|                break;
  144|  21.1k|            }
  145|  59.1k|            it = result->begin();
  146|  59.1k|        }
  147|  21.1k|    }
  148|       |
  149|       |    // scan localized
  150|  21.1k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 21.1k, False: 3.52k]
  ------------------
  151|  21.1k|        auto it = scn::ranges::begin(source);
  152|  80.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  80.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  80.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  80.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  80.2k|            auto result = scn::scan<T>(
  155|  80.2k|                global_locale,
  156|  80.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  80.2k|                scn::runtime_format(f));
  158|  80.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 21.1k, False: 59.1k]
  ------------------
  159|  21.1k|                break;
  160|  21.1k|            }
  161|  59.1k|            it = result->begin();
  162|  59.1k|        }
  163|  21.1k|    }
  164|       |
  165|       |    // scan_value
  166|  3.52k|    {
  167|  3.52k|        auto it = scn::ranges::begin(source);
  168|  16.2k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  16.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  16.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  16.2k|            auto result = scn::scan_value<T>(
  171|  16.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  16.2k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 3.52k, False: 12.7k]
  ------------------
  173|  3.52k|                break;
  174|  3.52k|            }
  175|  12.7k|            it = result->begin();
  176|  12.7k|        }
  177|  3.52k|    }
  178|  3.52k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  3.52k|{
   91|  3.52k|    using char_type = ranges::range_value_t<Source>;
   92|  3.52k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  3.52k|    deque.clear();
   94|  3.52k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  3.52k|              std::back_inserter(deque));
   96|  3.52k|    return deque;
   97|  3.52k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  3.52k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  3.52k|    else {
   84|  3.52k|        return wnoncontiguous_buffer;
   85|  3.52k|    }
   86|  3.52k|}

